(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("js-crypto-utils"), require("openpgp"));
	else if(typeof define === 'function' && define.amd)
		define(["js-crypto-utils", "openpgp"], factory);
	else if(typeof exports === 'object')
		exports["cascade"] = factory(require("js-crypto-utils"), require("openpgp"));
	else
		root["cascade"] = factory(root["js-crypto-utils"], root["openpgp"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_js_crypto_utils__, __WEBPACK_EXTERNAL_MODULE_openpgp__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/Users/jun/ProjectJavaScript/cascade/dist";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist sync recursive cascade.bundle.js":
/*!*************************************!*\
  !*** ./dist sync cascade.bundle.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./cascade.bundle.js": "./dist/cascade.bundle.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) { // check for number or string
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return id;
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./dist sync recursive cascade.bundle.js";

/***/ }),

/***/ "./dist/cascade.bundle.js":
/*!********************************!*\
  !*** ./dist/cascade.bundle.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(n,e){ true?module.exports=e(function(){try{return __webpack_require__(/*! js-crypto-utils */ "js-crypto-utils")}catch(n){}}(),__webpack_require__(/*! openpgp */ "openpgp")):undefined}(this,function(n,e){return function(n){var e={};function t(l){if(e[l])return e[l].exports;var o=e[l]={i:l,l:!1,exports:{}};return n[l].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=n,t.c=e,t.d=function(n,e,l){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:l})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var l=Object.create(null);if(t.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(l,o,function(e){return n[e]}.bind(null,o));return l},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="/Users/jun/ProjectJavaScript/cascade/dist",t(t.s=30)}([function(n,e,t){n.exports=t(31)},function(n,e){function t(n,e,t,l,o,i,r){try{var c=n[i](r),u=c.value}catch(n){return void t(n)}c.done?e(u):Promise.resolve(u).then(l,o)}n.exports=function(n){return function(){var e=this,l=arguments;return new Promise(function(o,i){var r=n.apply(e,l);function c(n){t(r,o,i,c,u,"next",n)}function u(n){t(r,o,i,c,u,"throw",n)}c(void 0)})}}},function(n,e){n.exports=function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}},function(n,e){function t(n,e){for(var t=0;t<e.length;t++){var l=e[t];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(n,l.key,l)}}n.exports=function(n,e,l){return e&&t(n.prototype,e),l&&t(n,l),n}},function(n,e,t){(function(n,t){var l=200,o="__lodash_hash_undefined__",i=9007199254740991,r="[object Arguments]",c="[object Boolean]",u="[object Date]",s="[object Function]",a="[object GeneratorFunction]",m="[object Map]",d="[object Number]",f="[object Object]",p="[object RegExp]",y="[object Set]",h="[object String]",b="[object Symbol]",v="[object ArrayBuffer]",g="[object DataView]",w="[object Float32Array]",x="[object Float64Array]",k="[object Int8Array]",_="[object Int16Array]",E="[object Int32Array]",j="[object Uint8Array]",A="[object Uint8ClampedArray]",K="[object Uint16Array]",S="[object Uint32Array]",U=/\w*$/,P=/^\[object .+?Constructor\]$/,I=/^(?:0|[1-9]\d*)$/,O={};O[r]=O["[object Array]"]=O[v]=O[g]=O[c]=O[u]=O[w]=O[x]=O[k]=O[_]=O[E]=O[m]=O[d]=O[f]=O[p]=O[y]=O[h]=O[b]=O[j]=O[A]=O[K]=O[S]=!0,O["[object Error]"]=O[s]=O["[object WeakMap]"]=!1;var B="object"==typeof n&&n&&n.Object===Object&&n,M="object"==typeof self&&self&&self.Object===Object&&self,T=B||M||Function("return this")(),N=e&&!e.nodeType&&e,R=N&&"object"==typeof t&&t&&!t.nodeType&&t,L=R&&R.exports===N;function F(n,e){return n.set(e[0],e[1]),n}function C(n,e){return n.add(e),n}function D(n,e,t,l){var o=-1,i=n?n.length:0;for(l&&i&&(t=n[++o]);++o<i;)t=e(t,n[o],o,n);return t}function J(n){var e=!1;if(null!=n&&"function"!=typeof n.toString)try{e=!!(n+"")}catch(n){}return e}function G(n){var e=-1,t=Array(n.size);return n.forEach(function(n,l){t[++e]=[l,n]}),t}function H(n,e){return function(t){return n(e(t))}}function V(n){var e=-1,t=Array(n.size);return n.forEach(function(n){t[++e]=n}),t}var z=Array.prototype,Y=Function.prototype,W=Object.prototype,q=T["__core-js_shared__"],$=function(){var n=/[^.]+$/.exec(q&&q.keys&&q.keys.IE_PROTO||"");return n?"Symbol(src)_1."+n:""}(),Q=Y.toString,X=W.hasOwnProperty,Z=W.toString,nn=RegExp("^"+Q.call(X).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),en=L?T.Buffer:void 0,tn=T.Symbol,ln=T.Uint8Array,on=H(Object.getPrototypeOf,Object),rn=Object.create,cn=W.propertyIsEnumerable,un=z.splice,sn=Object.getOwnPropertySymbols,an=en?en.isBuffer:void 0,mn=H(Object.keys,Object),dn=Rn(T,"DataView"),fn=Rn(T,"Map"),pn=Rn(T,"Promise"),yn=Rn(T,"Set"),hn=Rn(T,"WeakMap"),bn=Rn(Object,"create"),vn=Jn(dn),gn=Jn(fn),wn=Jn(pn),xn=Jn(yn),kn=Jn(hn),_n=tn?tn.prototype:void 0,En=_n?_n.valueOf:void 0;function jn(n){var e=-1,t=n?n.length:0;for(this.clear();++e<t;){var l=n[e];this.set(l[0],l[1])}}function An(n){var e=-1,t=n?n.length:0;for(this.clear();++e<t;){var l=n[e];this.set(l[0],l[1])}}function Kn(n){var e=-1,t=n?n.length:0;for(this.clear();++e<t;){var l=n[e];this.set(l[0],l[1])}}function Sn(n){this.__data__=new An(n)}function Un(n,e){var t=Hn(n)||function(n){return function(n){return function(n){return!!n&&"object"==typeof n}(n)&&Vn(n)}(n)&&X.call(n,"callee")&&(!cn.call(n,"callee")||Z.call(n)==r)}(n)?function(n,e){for(var t=-1,l=Array(n);++t<n;)l[t]=e(t);return l}(n.length,String):[],l=t.length,o=!!l;for(var i in n)!e&&!X.call(n,i)||o&&("length"==i||Cn(i,l))||t.push(i);return t}function Pn(n,e,t){var l=n[e];X.call(n,e)&&Gn(l,t)&&(void 0!==t||e in n)||(n[e]=t)}function In(n,e){for(var t=n.length;t--;)if(Gn(n[t][0],e))return t;return-1}function On(n,e,t,l,o,i,P){var I;if(l&&(I=i?l(n,o,i,P):l(n)),void 0!==I)return I;if(!Wn(n))return n;var B=Hn(n);if(B){if(I=function(n){var e=n.length,t=n.constructor(e);e&&"string"==typeof n[0]&&X.call(n,"index")&&(t.index=n.index,t.input=n.input);return t}(n),!e)return function(n,e){var t=-1,l=n.length;e||(e=Array(l));for(;++t<l;)e[t]=n[t];return e}(n,I)}else{var M=Fn(n),T=M==s||M==a;if(zn(n))return function(n,e){if(e)return n.slice();var t=new n.constructor(n.length);return n.copy(t),t}(n,e);if(M==f||M==r||T&&!i){if(J(n))return i?n:{};if(I=function(n){return"function"!=typeof n.constructor||Dn(n)?{}:function(n){return Wn(n)?rn(n):{}}(on(n))}(T?{}:n),!e)return function(n,e){return Tn(n,Ln(n),e)}(n,function(n,e){return n&&Tn(e,qn(e),n)}(I,n))}else{if(!O[M])return i?n:{};I=function(n,e,t,l){var o=n.constructor;switch(e){case v:return Mn(n);case c:case u:return new o(+n);case g:return function(n,e){var t=e?Mn(n.buffer):n.buffer;return new n.constructor(t,n.byteOffset,n.byteLength)}(n,l);case w:case x:case k:case _:case E:case j:case A:case K:case S:return function(n,e){var t=e?Mn(n.buffer):n.buffer;return new n.constructor(t,n.byteOffset,n.length)}(n,l);case m:return function(n,e,t){return D(e?t(G(n),!0):G(n),F,new n.constructor)}(n,l,t);case d:case h:return new o(n);case p:return function(n){var e=new n.constructor(n.source,U.exec(n));return e.lastIndex=n.lastIndex,e}(n);case y:return function(n,e,t){return D(e?t(V(n),!0):V(n),C,new n.constructor)}(n,l,t);case b:return function(n){return En?Object(En.call(n)):{}}(n)}}(n,M,On,e)}}P||(P=new Sn);var N=P.get(n);if(N)return N;if(P.set(n,I),!B)var R=t?function(n){return function(n,e,t){var l=e(n);return Hn(n)?l:function(n,e){for(var t=-1,l=e.length,o=n.length;++t<l;)n[o+t]=e[t];return n}(l,t(n))}(n,qn,Ln)}(n):qn(n);return function(n,e){for(var t=-1,l=n?n.length:0;++t<l&&!1!==e(n[t],t,n););}(R||n,function(o,i){R&&(o=n[i=o]),Pn(I,i,On(o,e,t,l,i,n,P))}),I}function Bn(n){return!(!Wn(n)||function(n){return!!$&&$ in n}(n))&&(Yn(n)||J(n)?nn:P).test(Jn(n))}function Mn(n){var e=new n.constructor(n.byteLength);return new ln(e).set(new ln(n)),e}function Tn(n,e,t,l){t||(t={});for(var o=-1,i=e.length;++o<i;){var r=e[o],c=l?l(t[r],n[r],r,t,n):void 0;Pn(t,r,void 0===c?n[r]:c)}return t}function Nn(n,e){var t=n.__data__;return function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}(e)?t["string"==typeof e?"string":"hash"]:t.map}function Rn(n,e){var t=function(n,e){return null==n?void 0:n[e]}(n,e);return Bn(t)?t:void 0}jn.prototype.clear=function(){this.__data__=bn?bn(null):{}},jn.prototype.delete=function(n){return this.has(n)&&delete this.__data__[n]},jn.prototype.get=function(n){var e=this.__data__;if(bn){var t=e[n];return t===o?void 0:t}return X.call(e,n)?e[n]:void 0},jn.prototype.has=function(n){var e=this.__data__;return bn?void 0!==e[n]:X.call(e,n)},jn.prototype.set=function(n,e){return this.__data__[n]=bn&&void 0===e?o:e,this},An.prototype.clear=function(){this.__data__=[]},An.prototype.delete=function(n){var e=this.__data__,t=In(e,n);return!(t<0||(t==e.length-1?e.pop():un.call(e,t,1),0))},An.prototype.get=function(n){var e=this.__data__,t=In(e,n);return t<0?void 0:e[t][1]},An.prototype.has=function(n){return In(this.__data__,n)>-1},An.prototype.set=function(n,e){var t=this.__data__,l=In(t,n);return l<0?t.push([n,e]):t[l][1]=e,this},Kn.prototype.clear=function(){this.__data__={hash:new jn,map:new(fn||An),string:new jn}},Kn.prototype.delete=function(n){return Nn(this,n).delete(n)},Kn.prototype.get=function(n){return Nn(this,n).get(n)},Kn.prototype.has=function(n){return Nn(this,n).has(n)},Kn.prototype.set=function(n,e){return Nn(this,n).set(n,e),this},Sn.prototype.clear=function(){this.__data__=new An},Sn.prototype.delete=function(n){return this.__data__.delete(n)},Sn.prototype.get=function(n){return this.__data__.get(n)},Sn.prototype.has=function(n){return this.__data__.has(n)},Sn.prototype.set=function(n,e){var t=this.__data__;if(t instanceof An){var o=t.__data__;if(!fn||o.length<l-1)return o.push([n,e]),this;t=this.__data__=new Kn(o)}return t.set(n,e),this};var Ln=sn?H(sn,Object):function(){return[]},Fn=function(n){return Z.call(n)};function Cn(n,e){return!!(e=null==e?i:e)&&("number"==typeof n||I.test(n))&&n>-1&&n%1==0&&n<e}function Dn(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||W)}function Jn(n){if(null!=n){try{return Q.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function Gn(n,e){return n===e||n!=n&&e!=e}(dn&&Fn(new dn(new ArrayBuffer(1)))!=g||fn&&Fn(new fn)!=m||pn&&"[object Promise]"!=Fn(pn.resolve())||yn&&Fn(new yn)!=y||hn&&"[object WeakMap]"!=Fn(new hn))&&(Fn=function(n){var e=Z.call(n),t=e==f?n.constructor:void 0,l=t?Jn(t):void 0;if(l)switch(l){case vn:return g;case gn:return m;case wn:return"[object Promise]";case xn:return y;case kn:return"[object WeakMap]"}return e});var Hn=Array.isArray;function Vn(n){return null!=n&&function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=i}(n.length)&&!Yn(n)}var zn=an||function(){return!1};function Yn(n){var e=Wn(n)?Z.call(n):"";return e==s||e==a}function Wn(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function qn(n){return Vn(n)?Un(n):function(n){if(!Dn(n))return mn(n);var e=[];for(var t in Object(n))X.call(n,t)&&"constructor"!=t&&e.push(t);return e}(n)}t.exports=function(n){return On(n,!0,!0)}}).call(this,t(33),t(34)(n))},function(n,e){function t(e){return n.exports=t=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)},t(e)}n.exports=t},function(n,e,t){var l=t(38),o=t(39);n.exports=function(n,e){return!e||"object"!==l(e)&&"function"!=typeof e?o(n):e}},function(n,e,t){var l=t(14);n.exports=function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),e&&l(n,e)}},function(n,e,t){var l=t(35),o=t(36),i=t(37);n.exports=function(n){return l(n)||o(n)||i()}},function(n,e,t){var l=t(5),o=t(14),i=t(42),r=t(43);function c(e){var t="function"==typeof Map?new Map:void 0;return n.exports=c=function(n){if(null===n||!i(n))return n;if("function"!=typeof n)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(n))return t.get(n);t.set(n,e)}function e(){return r(n,arguments,l(this).constructor)}return e.prototype=Object.create(n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o(e,n)},c(e)}n.exports=c},function(n,e,t){var l=e.global=t(44),o=e.hasBuffer=l&&!!l.isBuffer,i=e.hasArrayBuffer="undefined"!=typeof ArrayBuffer,r=e.isArray=t(17);e.isArrayBuffer=i?function(n){return n instanceof ArrayBuffer||p(n)}:h;var c=e.isBuffer=o?l.isBuffer:h,u=e.isView=i?ArrayBuffer.isView||b("ArrayBuffer","buffer"):h;e.alloc=f,e.concat=function(n,t){t||(t=0,Array.prototype.forEach.call(n,function(n){t+=n.length}));var l=this!==e&&this||n[0],o=f.call(l,t),i=0;return Array.prototype.forEach.call(n,function(n){i+=d.copy.call(n,o,i)}),o},e.from=function(n){return"string"==typeof n?function(n){var e=3*n.length,t=f.call(this,e),l=d.write.call(t,n);e!==l&&(t=d.slice.call(t,0,l));return t}.call(this,n):y(this).from(n)};var s=e.Array=t(45),a=e.Buffer=t(46),m=e.Uint8Array=t(47),d=e.prototype=t(18);function f(n){return y(this).alloc(n)}var p=b("ArrayBuffer");function y(n){return c(n)?a:u(n)?m:r(n)?s:o?a:i?m:s}function h(){return!1}function b(n,e){return n="[object "+n+"]",function(t){return null!=t&&{}.toString.call(e?t[e]:t)===n}}},function(n,e,t){n.exports=function(n){var e={};function t(l){if(e[l])return e[l].exports;var o=e[l]={i:l,l:!1,exports:{}};return n[l].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=n,t.c=e,t.d=function(n,e,l){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:l})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var l=Object.create(null);if(t.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(l,o,function(e){return n[e]}.bind(null,o));return l},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="/Users/jun/ProjectJavaScript/js_buffer_utils/dist",t(t.s=0)}([function(n,e,t){n.exports=t(1)},function(n,e,t){"use strict";t.r(e);var l={};t.r(l),t.d(l,"encodeBase64",function(){return c}),t.d(l,"decodeBase64",function(){return u}),t.d(l,"encodeBase64Url",function(){return a}),t.d(l,"decodeBase64Url",function(){return m}),t.d(l,"arrayBufferToHexString",function(){return d}),t.d(l,"hexStringToArrayBuffer",function(){return f}),t.d(l,"arrayBufferToString",function(){return p}),t.d(l,"stringToArrayBuffer",function(){return y});var o={};t.r(o),t.d(o,"pemToBin",function(){return b}),t.d(o,"binToPem",function(){return v});var i=function(n){if("undefined"!=typeof Buffer){var e=Object.prototype.toString.call(n).slice(8,-1);return(Buffer.isBuffer(n)?n:0<=["ArrayBuffer","TypedArray","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array"].indexOf(e)?Buffer.from(n):Buffer.from(n.toString(),"binary")).toString("base64")}throw new Error("UnsupportedEnvironment")},r=function(n){if("undefined"!=typeof Buffer)return Buffer.from(n,"base64").toString("binary");throw new Error("UnsupportedEnvironment")};function c(n){var e;return e="string"==typeof n?n:p(n),("undefined"==typeof window?i:window.btoa)(e)}function u(n){return function(n){if(n instanceof Uint8Array){for(var e=!0,t=0;t<n.length;t++)if(126<n[t]||32>n[t]&&13!==n[t]&&10!==n[t]){e=!1;break}var l=null;if(e){l="";for(var o=0;o<n.length;o++)l+=String.fromCharCode(n[o])}else l=n;return l}throw new Error("Input data must be an Uint8Array")}(y(("undefined"==typeof window?r:window.atob)(n)))}function s(n){if(n instanceof Uint8Array)return n;if(ArrayBuffer.isView(n)&&void 0!==n.buffer)return new Uint8Array(n.buffer);if(n instanceof ArrayBuffer)return new Uint8Array(n);throw new Error("Input must be an ArrayBuffer or a TypedArray")}function a(n){return c(n).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}function m(n){if("string"!=typeof n)throw new Error("Input must be string");return u(n=n.replace(/-/g,"+").replace(/_/g,"/"))}function d(n){for(var e,t=s(n),l="",o=0;o<t.length;o++)l+=e=1===(e=(255&t[o]).toString(16)).length?"0".concat(e):e;return l}function f(n){if(!n||"string"!=typeof n)throw new Error("Input arg must be a non-null string");for(var e=[],t=n.length,l=0;l<t;l+=2)e.push(parseInt(n.substr(l,2),16));return new Uint8Array(e)}function p(n){var e=s(n);return String.fromCharCode.apply(null,e)}function y(n){if(!n||"string"!=typeof n)throw new Error("Input arg must be a non-null string");for(var e=new Uint8Array(n.length),t=0;t<n.length;t++)e[t]=n.charCodeAt(t);return e}var h={public:"PUBLIC KEY",private:"PRIVATE KEY",encryptedPrivate:"ENCRYPTED PRIVATE KEY",certificate:"CERTIFICATE",certRequest:"CERTIFICATE REQUEST"};function b(n){return u(function(n){if(!n||"string"!=typeof n)throw new Error("Input arg must be a non-null string");try{var e=n.split(/^-----[s]*BEGIN[^-]*-----$/gm)[1].split(/^-----[s]*END[^-]*-----$/gm)[0];return e=e.replace(/\r?\n/g,"")}catch(n){throw new Error("Invalid format as PEM")}}(n))}function v(n,e){return function(n,e){if(!n||"string"!=typeof n)throw new Error("Input arg must be a non-null string");if(!e||"string"!=typeof e)throw new Error("Input arg must be a non-null string");if(0>Object.keys(h).indexOf(e))throw new Error("Unsupported type");for(var t=h[e],l="-----BEGIN ".concat(t,"-----\n");0<n.length;)l+="".concat(n.substring(0,64),"\n"),n=n.substring(64);return l="".concat(l,"-----END ").concat(t,"-----")}(c(n),e)}t.d(e,"encoder",function(){return l}),t.d(e,"formatter",function(){return o}),e.default={encoder:l,formatter:o}}])},function(n,e,t){e.encode=t(21).encode,e.decode=t(26).decode,e.Encoder=t(54).Encoder,e.Decoder=t(55).Decoder,e.createCodec=t(56).createCodec,e.codec=t(57).codec},function(n,e,t){var l=t(17);e.install=function(n){for(var e in n)i.prototype[e]=r(i.prototype[e],n[e])},e.filter=function(n){return l(n)?function(n){return n=n.slice(),function(t){return n.reduce(e,t)};function e(n,e){return e(n)}}(n):n};var o=t(10);function i(n){if(!(this instanceof i))return new i(n);this.options=n,this.init()}function r(n,e){return n&&e?function(){return n.apply(this,arguments),e.apply(this,arguments)}:n||e}function c(n){return new i(n)}i.prototype.init=function(){var n=this.options;return n&&n.uint8array&&(this.bufferish=o.Uint8Array),this},e.preset=c({preset:!0})},function(n,e){function t(e,l){return n.exports=t=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n},t(e,l)}n.exports=t},function(n,e,t){var l=t(16).ExtBuffer,o=t(49),i=t(50),r=t(13);function c(){var n=this.options;return this.encode=function(n){var e=i.getWriteType(n);return function(n,t){var l=e[typeof t];if(!l)throw new Error('Unsupported type "'+typeof t+'": '+t);l(n,t)}}(n),n&&n.preset&&o.setExtPackers(this),this}r.install({addExtPacker:function(n,e,t){t=r.filter(t);var o=e.name;if(o&&"Object"!==o){var i=this.extPackers||(this.extPackers={});i[o]=u}else{var c=this.extEncoderList||(this.extEncoderList=[]);c.unshift([e,u])}function u(e){return t&&(e=t(e)),new l(e,n)}},getExtPacker:function(n){var e=this.extPackers||(this.extPackers={}),t=n.constructor,l=t&&t.name&&e[t.name];if(l)return l;for(var o=this.extEncoderList||(this.extEncoderList=[]),i=o.length,r=0;r<i;r++){var c=o[r];if(t===c[0])return c[1]}},init:c}),e.preset=c.call(r.preset)},function(n,e,t){e.ExtBuffer=function n(e,t){if(!(this instanceof n))return new n(e,t);this.buffer=l.from(e);this.type=t};var l=t(10)},function(n,e){var t={}.toString;n.exports=Array.isArray||function(n){return"[object Array]"==t.call(n)}},function(n,e,t){var l=t(48);e.copy=u,e.slice=s,e.toString=function(n,e,t){return(!r&&o.isBuffer(this)?this.toString:l.toString).apply(this,arguments)},e.write=function(n){return function(){return(this[n]||l[n]).apply(this,arguments)}}("write");var o=t(10),i=o.global,r=o.hasBuffer&&"TYPED_ARRAY_SUPPORT"in i,c=r&&!i.TYPED_ARRAY_SUPPORT;function u(n,e,t,i){var r=o.isBuffer(this),u=o.isBuffer(n);if(r&&u)return this.copy(n,e,t,i);if(c||r||u||!o.isView(this)||!o.isView(n))return l.copy.call(this,n,e,t,i);var a=t||null!=i?s.call(this,t,i):this;return n.set(a,e),a.length}function s(n,e){var t=this.slice||!c&&this.subarray;if(t)return t.call(this,n,e);var l=o.alloc.call(this,e-n);return u.call(this,l,0,n,e),l}},function(n,e,t){!function(n){var e,t="undefined",l=t!==typeof Buffer&&Buffer,o=t!==typeof Uint8Array&&Uint8Array,i=t!==typeof ArrayBuffer&&ArrayBuffer,r=[0,0,0,0,0,0,0,0],c=Array.isArray||function(n){return!!n&&"[object Array]"==Object.prototype.toString.call(n)},u=4294967296,s=16777216;function a(c,a,x){var k=a?0:4,_=a?4:0,E=a?0:3,j=a?1:2,A=a?2:1,K=a?3:0,S=a?b:g,U=a?v:w,P=B.prototype,I="is"+c,O="_"+I;return P.buffer=void 0,P.offset=0,P[O]=!0,P.toNumber=M,P.toString=function(n){var e=this.buffer,t=this.offset,l=N(e,t+k),o=N(e,t+_),i="",r=!x&&2147483648&l;r&&(l=~l,o=u-o);n=n||10;for(;;){var c=l%n*u+o;if(l=Math.floor(l/n),o=Math.floor(c/n),i=(c%n).toString(n)+i,!l&&!o)break}r&&(i="-"+i);return i},P.toJSON=M,P.toArray=m,l&&(P.toBuffer=d),o&&(P.toArrayBuffer=f),B[I]=function(n){return!(!n||!n[O])},n[c]=B,B;function B(n,l,c,s){return this instanceof B?function(n,l,c,s,a){o&&i&&(l instanceof i&&(l=new o(l)),s instanceof i&&(s=new o(s)));if(!(l||c||s||e))return void(n.buffer=h(r,0));if(!p(l,c)){var m=e||Array;a=c,s=l,c=0,l=new m(8)}if(n.buffer=l,n.offset=c|=0,t===typeof s)return;"string"==typeof s?function(n,e,t,l){var o=0,i=t.length,r=0,c=0;"-"===t[0]&&o++;var s=o;for(;o<i;){var a=parseInt(t[o++],l);if(!(a>=0))break;c=c*l+a,r=r*l+Math.floor(c/u),c%=u}s&&(r=~r,c?c=u-c:r++);T(n,e+k,r),T(n,e+_,c)}(l,c,s,a||10):p(s,a)?y(l,c,s,a):"number"==typeof a?(T(l,c+k,s),T(l,c+_,a)):s>0?S(l,c,s):s<0?U(l,c,s):y(l,c,r,0)}(this,n,l,c,s):new B(n,l,c,s)}function M(){var n=this.buffer,e=this.offset,t=N(n,e+k),l=N(n,e+_);return x||(t|=0),t?t*u+l:l}function T(n,e,t){n[e+K]=255&t,t>>=8,n[e+A]=255&t,t>>=8,n[e+j]=255&t,t>>=8,n[e+E]=255&t}function N(n,e){return n[e+E]*s+(n[e+j]<<16)+(n[e+A]<<8)+n[e+K]}}function m(n){var t=this.buffer,l=this.offset;return e=null,!1!==n&&0===l&&8===t.length&&c(t)?t:h(t,l)}function d(n){var t=this.buffer,o=this.offset;if(e=l,!1!==n&&0===o&&8===t.length&&Buffer.isBuffer(t))return t;var i=new l(8);return y(i,0,t,o),i}function f(n){var t=this.buffer,l=this.offset,r=t.buffer;if(e=o,!1!==n&&0===l&&r instanceof i&&8===r.byteLength)return r;var c=new o(8);return y(c,0,t,l),c.buffer}function p(n,e){var t=n&&n.length;return e|=0,t&&e+8<=t&&"string"!=typeof n[e]}function y(n,e,t,l){e|=0,l|=0;for(var o=0;o<8;o++)n[e++]=255&t[l++]}function h(n,e){return Array.prototype.slice.call(n,e,e+8)}function b(n,e,t){for(var l=e+8;l>e;)n[--l]=255&t,t/=256}function v(n,e,t){var l=e+8;for(t++;l>e;)n[--l]=255&-t^255,t/=256}function g(n,e,t){for(var l=e+8;e<l;)n[e++]=255&t,t/=256}function w(n,e,t){var l=e+8;for(t++;e<l;)n[e++]=255&-t^255,t/=256}a("Uint64BE",!0,!0),a("Int64BE",!0,!1),a("Uint64LE",!1,!0),a("Int64LE",!1,!1)}("string"!=typeof e.nodeName?e:this||{})},function(n,e,t){var l=t(16).ExtBuffer,o=t(52),i=t(28).readUint8,r=t(53),c=t(13);function u(){var n=this.options;return this.decode=function(n){var e=r.getReadToken(n);return function(n){var t=i(n),l=e[t];if(!l)throw new Error("Invalid type: "+(t?"0x"+t.toString(16):t));return l(n)}}(n),n&&n.preset&&o.setExtUnpackers(this),this}c.install({addExtUnpacker:function(n,e){(this.extUnpackers||(this.extUnpackers=[]))[n]=c.filter(e)},getExtUnpacker:function(n){return(this.extUnpackers||(this.extUnpackers=[]))[n]||function(e){return new l(e,n)}},init:u}),e.preset=u.call(c.preset)},function(n,e,t){e.encode=function(n,e){var t=new l(e);return t.write(n),t.read()};var l=t(22).EncodeBuffer},function(n,e,t){e.EncodeBuffer=o;var l=t(15).preset;function o(n){if(!(this instanceof o))return new o(n);if(n&&(this.options=n,n.codec)){var e=this.codec=n.codec;e.bufferish&&(this.bufferish=e.bufferish)}}t(25).FlexEncoder.mixin(o.prototype),o.prototype.codec=l,o.prototype.write=function(n){this.codec.encode(this,n)}},function(n,e){e.read=function(n,e,t,l,o){var i,r,c=8*o-l-1,u=(1<<c)-1,s=u>>1,a=-7,m=t?o-1:0,d=t?-1:1,f=n[e+m];for(m+=d,i=f&(1<<-a)-1,f>>=-a,a+=c;a>0;i=256*i+n[e+m],m+=d,a-=8);for(r=i&(1<<-a)-1,i>>=-a,a+=l;a>0;r=256*r+n[e+m],m+=d,a-=8);if(0===i)i=1-s;else{if(i===u)return r?NaN:1/0*(f?-1:1);r+=Math.pow(2,l),i-=s}return(f?-1:1)*r*Math.pow(2,i-l)},e.write=function(n,e,t,l,o,i){var r,c,u,s=8*i-o-1,a=(1<<s)-1,m=a>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,f=l?0:i-1,p=l?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(c=isNaN(e)?1:0,r=a):(r=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-r))<1&&(r--,u*=2),(e+=r+m>=1?d/u:d*Math.pow(2,1-m))*u>=2&&(r++,u/=2),r+m>=a?(c=0,r=a):r+m>=1?(c=(e*u-1)*Math.pow(2,o),r+=m):(c=e*Math.pow(2,m-1)*Math.pow(2,o),r=0));o>=8;n[t+f]=255&c,f+=p,c/=256,o-=8);for(r=r<<o|c,s+=o;s>0;n[t+f]=255&r,f+=p,r/=256,s-=8);n[t+f-p]|=128*y}},function(n,e){for(var t=e.uint8=new Array(256),l=0;l<=255;l++)t[l]=o(l);function o(n){return function(e){var t=e.reserve(1);e.buffer[t]=n}}},function(n,e,t){e.FlexDecoder=c,e.FlexEncoder=u;var l=t(10),o=2048,i=65536,r="BUFFER_SHORTAGE";function c(){if(!(this instanceof c))return new c}function u(){if(!(this instanceof u))return new u}function s(){throw new Error("method not implemented: write()")}function a(){throw new Error("method not implemented: fetch()")}function m(){return this.buffers&&this.buffers.length?(this.flush(),this.pull()):this.fetch()}function d(n){(this.buffers||(this.buffers=[])).push(n)}function f(){return(this.buffers||(this.buffers=[])).shift()}function p(n){return function(e){for(var t in n)e[t]=n[t];return e}}c.mixin=p(function(){return{bufferish:l,write:function(n){var e=this.offset?l.prototype.slice.call(this.buffer,this.offset):this.buffer;this.buffer=e?n?this.bufferish.concat([e,n]):e:n,this.offset=0},fetch:a,flush:function(){for(;this.offset<this.buffer.length;){var n,e=this.offset;try{n=this.fetch()}catch(n){if(n&&n.message!=r)throw n;this.offset=e;break}this.push(n)}},push:d,pull:f,read:m,reserve:function(n){var e=this.offset,t=e+n;if(t>this.buffer.length)throw new Error(r);return this.offset=t,e},offset:0}}()),c.mixin(c.prototype),u.mixin=p(function(){return{bufferish:l,write:s,fetch:function(){var n=this.start;if(n<this.offset){var e=this.start=this.offset;return l.prototype.slice.call(this.buffer,n,e)}},flush:function(){for(;this.start<this.offset;){var n=this.fetch();n&&this.push(n)}},push:d,pull:function(){var n=this.buffers||(this.buffers=[]),e=n.length>1?this.bufferish.concat(n):n[0];return n.length=0,e},read:m,reserve:function(n){var e=0|n;if(this.buffer){var t=this.buffer.length,l=0|this.offset,o=l+e;if(o<t)return this.offset=o,l;this.flush(),n=Math.max(n,Math.min(2*t,this.maxBufferSize))}return n=Math.max(n,this.minBufferSize),this.buffer=this.bufferish.alloc(n),this.start=0,this.offset=e,0},send:function(n){var e=n.length;if(e>this.minBufferSize)this.flush(),this.push(n);else{var t=this.reserve(e);l.prototype.copy.call(n,this.buffer,t)}},maxBufferSize:i,minBufferSize:o,offset:0,start:0}}()),u.mixin(u.prototype)},function(n,e,t){e.decode=function(n,e){var t=new l(e);return t.write(n),t.read()};var l=t(27).DecodeBuffer},function(n,e,t){e.DecodeBuffer=o;var l=t(20).preset;function o(n){if(!(this instanceof o))return new o(n);if(n&&(this.options=n,n.codec)){var e=this.codec=n.codec;e.bufferish&&(this.bufferish=e.bufferish)}}t(25).FlexDecoder.mixin(o.prototype),o.prototype.codec=l,o.prototype.fetch=function(){return this.codec.decode(this)}},function(n,e,t){var l=t(23),o=t(19),i=o.Uint64BE,r=o.Int64BE;e.getReadFormat=function(n){var e=c.hasArrayBuffer&&n&&n.binarraybuffer,t=n&&n.int64;return{map:s&&n&&n.usemap?d:m,array:f,str:p,bin:e?h:y,ext:b,uint8:v,uint16:w,uint32:k,uint64:E(8,t?K:j),int8:g,int16:x,int32:_,int64:E(8,t?S:A),float32:E(4,U),float64:E(8,P)}},e.readUint8=v;var c=t(10),u=t(18),s="undefined"!=typeof Map,a=!0;function m(n,e){var t,l={},o=new Array(e),i=new Array(e),r=n.codec.decode;for(t=0;t<e;t++)o[t]=r(n),i[t]=r(n);for(t=0;t<e;t++)l[o[t]]=i[t];return l}function d(n,e){var t,l=new Map,o=new Array(e),i=new Array(e),r=n.codec.decode;for(t=0;t<e;t++)o[t]=r(n),i[t]=r(n);for(t=0;t<e;t++)l.set(o[t],i[t]);return l}function f(n,e){for(var t=new Array(e),l=n.codec.decode,o=0;o<e;o++)t[o]=l(n);return t}function p(n,e){var t=n.reserve(e),l=t+e;return u.toString.call(n.buffer,"utf-8",t,l)}function y(n,e){var t=n.reserve(e),l=t+e,o=u.slice.call(n.buffer,t,l);return c.from(o)}function h(n,e){var t=n.reserve(e),l=t+e,o=u.slice.call(n.buffer,t,l);return c.Uint8Array.from(o).buffer}function b(n,e){var t=n.reserve(e+1),l=n.buffer[t++],o=t+e,i=n.codec.getExtUnpacker(l);if(!i)throw new Error("Invalid ext type: "+(l?"0x"+l.toString(16):l));return i(u.slice.call(n.buffer,t,o))}function v(n){var e=n.reserve(1);return n.buffer[e]}function g(n){var e=n.reserve(1),t=n.buffer[e];return 128&t?t-256:t}function w(n){var e=n.reserve(2),t=n.buffer;return t[e++]<<8|t[e]}function x(n){var e=n.reserve(2),t=n.buffer,l=t[e++]<<8|t[e];return 32768&l?l-65536:l}function k(n){var e=n.reserve(4),t=n.buffer;return 16777216*t[e++]+(t[e++]<<16)+(t[e++]<<8)+t[e]}function _(n){var e=n.reserve(4),t=n.buffer;return t[e++]<<24|t[e++]<<16|t[e++]<<8|t[e]}function E(n,e){return function(t){var l=t.reserve(n);return e.call(t.buffer,l,a)}}function j(n){return new i(this,n).toNumber()}function A(n){return new r(this,n).toNumber()}function K(n){return new i(this,n)}function S(n){return new r(this,n)}function U(n){return l.read(this,n,!1,23,4)}function P(n){return l.read(this,n,!1,52,8)}},function(n,e,t){!function(e){n.exports=e;var t="listeners",l={on:function(n,e){return r(this,n).push(e),this},once:function(n,e){var t=this;return l.originalListener=e,r(t,n).push(l),t;function l(){i.call(t,n,l),e.apply(this,arguments)}},off:i,emit:function(n,e){var t=this,l=r(t,n,!0);if(!l)return!1;var o=arguments.length;if(1===o)l.forEach(function(n){n.call(t)});else if(2===o)l.forEach(function(n){n.call(t,e)});else{var i=Array.prototype.slice.call(arguments,1);l.forEach(function(n){n.apply(t,i)})}return!!l.length}};function o(n){for(var e in l)n[e]=l[e];return n}function i(n,e){var l;if(arguments.length){if(e){if(l=r(this,n,!0)){if(!(l=l.filter(function(n){return n!==e&&n.originalListener!==e})).length)return i.call(this,n);this[t][n]=l}}else if((l=this[t])&&(delete l[n],!Object.keys(l).length))return i.call(this)}else delete this[t];return this}function r(n,e,l){if(!l||n[t]){var o=n[t]||(n[t]={});return o[e]||(o[e]=[])}}o(e.prototype),e.mixin=o}(
/**
 * event-lite.js - Light-weight EventEmitter (less than 1KB when gzipped)
 *
 * @copyright Yusuke Kawasaki
 * @license MIT
 * @constructor
 * @see https://github.com/kawanet/event-lite
 * @see http://kawanet.github.io/event-lite/EventLite.html
 * @example
 * var EventLite = require("event-lite");
 *
 * function MyClass() {...}             // your class
 *
 * EventLite.mixin(MyClass.prototype);  // import event methods
 *
 * var obj = new MyClass();
 * obj.on("foo", function() {...});     // add event listener
 * obj.once("bar", function() {...});   // add one-time event listener
 * obj.emit("foo");                     // dispatch event
 * obj.emit("bar");                     // dispatch another event
 * obj.off("foo");                      // remove event listener
 */
function n(){if(!(this instanceof n))return new n})},function(n,e,t){n.exports=t(58)},function(n,e,t){var l=function(){return this||"object"==typeof self&&self}()||Function("return this")(),o=l.regeneratorRuntime&&Object.getOwnPropertyNames(l).indexOf("regeneratorRuntime")>=0,i=o&&l.regeneratorRuntime;if(l.regeneratorRuntime=void 0,n.exports=t(32),o)l.regeneratorRuntime=i;else try{delete l.regeneratorRuntime}catch(n){l.regeneratorRuntime=void 0}},function(n,e){!function(e){"use strict";var t,l=Object.prototype,o=l.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},r=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag",s="object"==typeof n,a=e.regeneratorRuntime;if(a)s&&(n.exports=a);else{(a=e.regeneratorRuntime=s?n.exports:{}).wrap=w;var m="suspendedStart",d="suspendedYield",f="executing",p="completed",y={},h={};h[r]=function(){return this};var b=Object.getPrototypeOf,v=b&&b(b(I([])));v&&v!==l&&o.call(v,r)&&(h=v);var g=E.prototype=k.prototype=Object.create(h);_.prototype=g.constructor=E,E.constructor=_,E[u]=_.displayName="GeneratorFunction",a.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===_||"GeneratorFunction"===(e.displayName||e.name))},a.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,E):(n.__proto__=E,u in n||(n[u]="GeneratorFunction")),n.prototype=Object.create(g),n},a.awrap=function(n){return{__await:n}},j(A.prototype),A.prototype[c]=function(){return this},a.AsyncIterator=A,a.async=function(n,e,t,l){var o=new A(w(n,e,t,l));return a.isGeneratorFunction(e)?o:o.next().then(function(n){return n.done?n.value:o.next()})},j(g),g[u]="Generator",g[r]=function(){return this},g.toString=function(){return"[object Generator]"},a.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var l=e.pop();if(l in n)return t.value=l,t.done=!1,t}return t.done=!0,t}},a.values=I,P.prototype={constructor:P,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(U),!n)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=t)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function l(l,o){return c.type="throw",c.arg=n,e.next=l,o&&(e.method="next",e.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var r=this.tryEntries[i],c=r.completion;if("root"===r.tryLoc)return l("end");if(r.tryLoc<=this.prev){var u=o.call(r,"catchLoc"),s=o.call(r,"finallyLoc");if(u&&s){if(this.prev<r.catchLoc)return l(r.catchLoc,!0);if(this.prev<r.finallyLoc)return l(r.finallyLoc)}else if(u){if(this.prev<r.catchLoc)return l(r.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return l(r.finallyLoc)}}}},abrupt:function(n,e){for(var t=this.tryEntries.length-1;t>=0;--t){var l=this.tryEntries[t];if(l.tryLoc<=this.prev&&o.call(l,"finallyLoc")&&this.prev<l.finallyLoc){var i=l;break}}i&&("break"===n||"continue"===n)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var r=i?i.completion:{};return r.type=n,r.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(r)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),y},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),U(t),y}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var l=t.completion;if("throw"===l.type){var o=l.arg;U(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,l){return this.delegate={iterator:I(n),resultName:e,nextLoc:l},"next"===this.method&&(this.arg=t),y}}}function w(n,e,t,l){var o=e&&e.prototype instanceof k?e:k,i=Object.create(o.prototype),r=new P(l||[]);return i._invoke=function(n,e,t){var l=m;return function(o,i){if(l===f)throw new Error("Generator is already running");if(l===p){if("throw"===o)throw i;return O()}for(t.method=o,t.arg=i;;){var r=t.delegate;if(r){var c=K(r,t);if(c){if(c===y)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if(l===m)throw l=p,t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);l=f;var u=x(n,e,t);if("normal"===u.type){if(l=t.done?p:d,u.arg===y)continue;return{value:u.arg,done:t.done}}"throw"===u.type&&(l=p,t.method="throw",t.arg=u.arg)}}}(n,t,r),i}function x(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}function k(){}function _(){}function E(){}function j(n){["next","throw","return"].forEach(function(e){n[e]=function(n){return this._invoke(e,n)}})}function A(n){var e;this._invoke=function(t,l){function i(){return new Promise(function(e,i){!function e(t,l,i,r){var c=x(n[t],n,l);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==typeof s&&o.call(s,"__await")?Promise.resolve(s.__await).then(function(n){e("next",n,i,r)},function(n){e("throw",n,i,r)}):Promise.resolve(s).then(function(n){u.value=n,i(u)},function(n){return e("throw",n,i,r)})}r(c.arg)}(t,l,e,i)})}return e=e?e.then(i,i):i()}}function K(n,e){var l=n.iterator[e.method];if(l===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=t,K(n,e),"throw"===e.method))return y;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var o=x(l,n.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,y;var i=o.arg;return i?i.done?(e[n.resultName]=i.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=t),e.delegate=null,y):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}function S(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function U(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function P(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(S,this),this.reset(!0)}function I(n){if(n){var e=n[r];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var l=-1,i=function e(){for(;++l<n.length;)if(o.call(n,l))return e.value=n[l],e.done=!1,e;return e.value=t,e.done=!0,e};return i.next=i}}return{next:O}}function O(){return{value:t,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},function(n,e){var t;t=function(){return this}();try{t=t||Function("return this")()||(0,eval)("this")}catch(n){"object"==typeof window&&(t=window)}n.exports=t},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){n.exports=function(n){if(Array.isArray(n)){for(var e=0,t=new Array(n.length);e<n.length;e++)t[e]=n[e];return t}}},function(n,e){n.exports=function(n){if(Symbol.iterator in Object(n)||"[object Arguments]"===Object.prototype.toString.call(n))return Array.from(n)}},function(n,e){n.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(n,e){function t(n){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function l(e){return"function"==typeof Symbol&&"symbol"===t(Symbol.iterator)?n.exports=l=function(n){return t(n)}:n.exports=l=function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":t(n)},l(e)}n.exports=l},function(n,e){n.exports=function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}},function(e,t){if(void 0===n){var l=new Error("Cannot find module 'js-crypto-utils'");throw l.code="MODULE_NOT_FOUND",l}e.exports=n},function(n,t){n.exports=e},function(n,e){n.exports=function(n){return-1!==Function.toString.call(n).indexOf("[native code]")}},function(n,e,t){var l=t(14);function o(e,t,i){return!function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(n){return!1}}()?n.exports=o=function(n,e,t){var o=[null];o.push.apply(o,e);var i=new(Function.bind.apply(n,o));return t&&l(i,t.prototype),i}:n.exports=o=Reflect.construct,o.apply(null,arguments)}n.exports=o},function(n,e){function t(n){return n&&n.isBuffer&&n}n.exports=t("undefined"!=typeof Buffer&&Buffer)||t(this.Buffer)||t("undefined"!=typeof window&&window.Buffer)||this.Buffer},function(n,e,t){var l=t(10);function o(n){return new Array(n)}(e=n.exports=o(0)).alloc=o,e.concat=l.concat,e.from=function(n){if(!l.isBuffer(n)&&l.isView(n))n=l.Uint8Array.from(n);else if(l.isArrayBuffer(n))n=new Uint8Array(n);else{if("string"==typeof n)return l.from.call(e,n);if("number"==typeof n)throw new TypeError('"value" argument must not be a number')}return Array.prototype.slice.call(n)}},function(n,e,t){var l=t(10),o=l.global;function i(n){return new o(n)}(e=n.exports=l.hasBuffer?i(0):[]).alloc=l.hasBuffer&&o.alloc||i,e.concat=l.concat,e.from=function(n){if(!l.isBuffer(n)&&l.isView(n))n=l.Uint8Array.from(n);else if(l.isArrayBuffer(n))n=new Uint8Array(n);else{if("string"==typeof n)return l.from.call(e,n);if("number"==typeof n)throw new TypeError('"value" argument must not be a number')}return o.from&&1!==o.from.length?o.from(n):new o(n)}},function(n,e,t){var l=t(10);function o(n){return new Uint8Array(n)}(e=n.exports=l.hasArrayBuffer?o(0):[]).alloc=o,e.concat=l.concat,e.from=function(n){if(l.isView(n)){var t=n.byteOffset,o=n.byteLength;(n=n.buffer).byteLength!==o&&(n.slice?n=n.slice(t,t+o):(n=new Uint8Array(n)).byteLength!==o&&(n=Array.prototype.slice.call(n,t,t+o)))}else{if("string"==typeof n)return l.from.call(e,n);if("number"==typeof n)throw new TypeError('"value" argument must not be a number')}return new Uint8Array(n)}},function(n,e){e.copy=function(n,e,t,l){var o;t||(t=0);l||0===l||(l=this.length);e||(e=0);var i=l-t;if(n===this&&t<e&&e<l)for(o=i-1;o>=0;o--)n[o+e]=this[o+t];else for(o=0;o<i;o++)n[o+e]=this[o+t];return i},e.toString=function(n,e,t){var l=0|e;t||(t=this.length);var o="",i=0;for(;l<t;)(i=this[l++])<128?o+=String.fromCharCode(i):(192==(224&i)?i=(31&i)<<6|63&this[l++]:224==(240&i)?i=(15&i)<<12|(63&this[l++])<<6|63&this[l++]:240==(248&i)&&(i=(7&i)<<18|(63&this[l++])<<12|(63&this[l++])<<6|63&this[l++]),i>=65536?(i-=65536,o+=String.fromCharCode(55296+(i>>>10),56320+(1023&i))):o+=String.fromCharCode(i));return o},e.write=function(n,e){var t=e||(e|=0),l=n.length,o=0,i=0;for(;i<l;)(o=n.charCodeAt(i++))<128?this[t++]=o:o<2048?(this[t++]=192|o>>>6,this[t++]=128|63&o):o<55296||o>57343?(this[t++]=224|o>>>12,this[t++]=128|o>>>6&63,this[t++]=128|63&o):(o=65536+(o-55296<<10|n.charCodeAt(i++)-56320),this[t++]=240|o>>>18,this[t++]=128|o>>>12&63,this[t++]=128|o>>>6&63,this[t++]=128|63&o);return t-e}},function(n,e,t){e.setExtPackers=function(n){n.addExtPacker(14,Error,[m,u]),n.addExtPacker(1,EvalError,[m,u]),n.addExtPacker(2,RangeError,[m,u]),n.addExtPacker(3,ReferenceError,[m,u]),n.addExtPacker(4,SyntaxError,[m,u]),n.addExtPacker(5,TypeError,[m,u]),n.addExtPacker(6,URIError,[m,u]),n.addExtPacker(10,RegExp,[a,u]),n.addExtPacker(11,Boolean,[s,u]),n.addExtPacker(12,String,[s,u]),n.addExtPacker(13,Date,[Number,u]),n.addExtPacker(15,Number,[s,u]),"undefined"!=typeof Uint8Array&&(n.addExtPacker(17,Int8Array,r),n.addExtPacker(18,Uint8Array,r),n.addExtPacker(19,Int16Array,r),n.addExtPacker(20,Uint16Array,r),n.addExtPacker(21,Int32Array,r),n.addExtPacker(22,Uint32Array,r),n.addExtPacker(23,Float32Array,r),"undefined"!=typeof Float64Array&&n.addExtPacker(24,Float64Array,r),"undefined"!=typeof Uint8ClampedArray&&n.addExtPacker(25,Uint8ClampedArray,r),n.addExtPacker(26,ArrayBuffer,r),n.addExtPacker(29,DataView,r));o.hasBuffer&&n.addExtPacker(27,i,o.from)};var l,o=t(10),i=o.global,r=o.Uint8Array.from,c={name:1,message:1,stack:1,columnNumber:1,fileName:1,lineNumber:1};function u(n){return l||(l=t(21).encode),l(n)}function s(n){return n.valueOf()}function a(n){(n=RegExp.prototype.toString.call(n).split("/")).shift();var e=[n.pop()];return e.unshift(n.join("/")),e}function m(n){var e={};for(var t in c)e[t]=n[t];return e}},function(n,e,t){var l=t(17),o=t(19),i=o.Uint64BE,r=o.Int64BE,c=t(10),u=t(18),s=t(51),a=t(24).uint8,m=t(16).ExtBuffer,d="undefined"!=typeof Uint8Array,f="undefined"!=typeof Map,p=[];p[1]=212,p[2]=213,p[4]=214,p[8]=215,p[16]=216,e.getWriteType=function(n){var e=s.getWriteToken(n),t=n&&n.useraw,o=d&&n&&n.binarraybuffer,y=o?c.isArrayBuffer:c.isBuffer,h=o?function(n,e){w(n,new Uint8Array(e))}:w,b=f&&n&&n.usemap?function(n,t){if(!(t instanceof Map))return x(n,t);var l=t.size;e[l<16?128+l:l<=65535?222:223](n,l);var o=n.codec.encode;t.forEach(function(e,t,l){o(n,t),o(n,e)})}:x;return{boolean:function(n,t){e[t?195:194](n,t)},function:g,number:function(n,t){var l,o=0|t;if(t!==o)return void e[l=203](n,t);l=-32<=o&&o<=127?255&o:0<=o?o<=255?204:o<=65535?205:206:-128<=o?208:-32768<=o?209:210;e[l](n,o)},object:t?function(n,t){if(y(t))return function(n,t){var l=t.length;e[l<32?160+l:l<=65535?218:219](n,l),n.send(t)}(n,t);v(n,t)}:v,string:function(n){return function(t,l){var o=l.length,i=5+3*o;t.offset=t.reserve(i);var r=t.buffer,c=n(o),s=t.offset+c;o=u.write.call(r,l,s);var a=n(o);if(c!==a){var m=s+a-c,d=s+o;u.copy.call(r,r,m,s,d)}e[1===a?160+o:a<=3?215+a:219](t,o),t.offset+=o}}(t?function(n){return n<32?1:n<=65535?3:5}:function(n){return n<32?1:n<=255?2:n<=65535?3:5}),symbol:g,undefined:g};function v(n,t){if(null===t)return g(n,t);if(y(t))return h(n,t);if(l(t))return function(n,t){var l=t.length;e[l<16?144+l:l<=65535?220:221](n,l);for(var o=n.codec.encode,i=0;i<l;i++)o(n,t[i])}(n,t);if(i.isUint64BE(t))return function(n,t){e[207](n,t.toArray())}(n,t);if(r.isInt64BE(t))return function(n,t){e[211](n,t.toArray())}(n,t);var o=n.codec.getExtPacker(t);if(o&&(t=o(t)),t instanceof m)return function(n,t){var l=t.buffer,o=l.length,i=p[o]||(o<255?199:o<=65535?200:201);e[i](n,o),a[t.type](n),n.send(l)}(n,t);b(n,t)}function g(n,t){e[192](n,t)}function w(n,t){var l=t.length,o=l<255?196:l<=65535?197:198;e[o](n,l),n.send(t)}function x(n,t){var l=Object.keys(t),o=l.length,i=o<16?128+o:o<=65535?222:223;e[i](n,o);var r=n.codec.encode;l.forEach(function(e){r(n,e),r(n,t[e])})}}},function(n,e,t){var l=t(23),o=t(19),i=o.Uint64BE,r=o.Int64BE,c=t(24).uint8,u=t(10),s=u.global,a=u.hasBuffer&&"TYPED_ARRAY_SUPPORT"in s&&!s.TYPED_ARRAY_SUPPORT,m=u.hasBuffer&&s.prototype||{};function d(){var n=c.slice();return n[196]=f(196),n[197]=p(197),n[198]=y(198),n[199]=f(199),n[200]=p(200),n[201]=y(201),n[202]=h(202,4,m.writeFloatBE||g,!0),n[203]=h(203,8,m.writeDoubleBE||w,!0),n[204]=f(204),n[205]=p(205),n[206]=y(206),n[207]=h(207,8,b),n[208]=f(208),n[209]=p(209),n[210]=y(210),n[211]=h(211,8,v),n[217]=f(217),n[218]=p(218),n[219]=y(219),n[220]=p(220),n[221]=y(221),n[222]=p(222),n[223]=y(223),n}function f(n){return function(e,t){var l=e.reserve(2),o=e.buffer;o[l++]=n,o[l]=t}}function p(n){return function(e,t){var l=e.reserve(3),o=e.buffer;o[l++]=n,o[l++]=t>>>8,o[l]=t}}function y(n){return function(e,t){var l=e.reserve(5),o=e.buffer;o[l++]=n,o[l++]=t>>>24,o[l++]=t>>>16,o[l++]=t>>>8,o[l]=t}}function h(n,e,t,l){return function(o,i){var r=o.reserve(e+1);o.buffer[r++]=n,t.call(o.buffer,i,r,l)}}function b(n,e){new i(this,e,n)}function v(n,e){new r(this,e,n)}function g(n,e){l.write(this,n,e,!1,23,4)}function w(n,e){l.write(this,n,e,!1,52,8)}e.getWriteToken=function(n){return n&&n.uint8array?function(){var n=d();return n[202]=h(202,4,g),n[203]=h(203,8,w),n}():a||u.hasBuffer&&n&&n.safe?function(){var n=c.slice();return n[196]=h(196,1,s.prototype.writeUInt8),n[197]=h(197,2,s.prototype.writeUInt16BE),n[198]=h(198,4,s.prototype.writeUInt32BE),n[199]=h(199,1,s.prototype.writeUInt8),n[200]=h(200,2,s.prototype.writeUInt16BE),n[201]=h(201,4,s.prototype.writeUInt32BE),n[202]=h(202,4,s.prototype.writeFloatBE),n[203]=h(203,8,s.prototype.writeDoubleBE),n[204]=h(204,1,s.prototype.writeUInt8),n[205]=h(205,2,s.prototype.writeUInt16BE),n[206]=h(206,4,s.prototype.writeUInt32BE),n[207]=h(207,8,b),n[208]=h(208,1,s.prototype.writeInt8),n[209]=h(209,2,s.prototype.writeInt16BE),n[210]=h(210,4,s.prototype.writeInt32BE),n[211]=h(211,8,v),n[217]=h(217,1,s.prototype.writeUInt8),n[218]=h(218,2,s.prototype.writeUInt16BE),n[219]=h(219,4,s.prototype.writeUInt32BE),n[220]=h(220,2,s.prototype.writeUInt16BE),n[221]=h(221,4,s.prototype.writeUInt32BE),n[222]=h(222,2,s.prototype.writeUInt16BE),n[223]=h(223,4,s.prototype.writeUInt32BE),n}():d()}},function(n,e,t){e.setExtUnpackers=function(n){n.addExtUnpacker(14,[c,s(Error)]),n.addExtUnpacker(1,[c,s(EvalError)]),n.addExtUnpacker(2,[c,s(RangeError)]),n.addExtUnpacker(3,[c,s(ReferenceError)]),n.addExtUnpacker(4,[c,s(SyntaxError)]),n.addExtUnpacker(5,[c,s(TypeError)]),n.addExtUnpacker(6,[c,s(URIError)]),n.addExtUnpacker(10,[c,u]),n.addExtUnpacker(11,[c,a(Boolean)]),n.addExtUnpacker(12,[c,a(String)]),n.addExtUnpacker(13,[c,a(Date)]),n.addExtUnpacker(15,[c,a(Number)]),"undefined"!=typeof Uint8Array&&(n.addExtUnpacker(17,a(Int8Array)),n.addExtUnpacker(18,a(Uint8Array)),n.addExtUnpacker(19,[m,a(Int16Array)]),n.addExtUnpacker(20,[m,a(Uint16Array)]),n.addExtUnpacker(21,[m,a(Int32Array)]),n.addExtUnpacker(22,[m,a(Uint32Array)]),n.addExtUnpacker(23,[m,a(Float32Array)]),"undefined"!=typeof Float64Array&&n.addExtUnpacker(24,[m,a(Float64Array)]),"undefined"!=typeof Uint8ClampedArray&&n.addExtUnpacker(25,a(Uint8ClampedArray)),n.addExtUnpacker(26,m),n.addExtUnpacker(29,[m,a(DataView)]));o.hasBuffer&&n.addExtUnpacker(27,a(i))};var l,o=t(10),i=o.global,r={name:1,message:1,stack:1,columnNumber:1,fileName:1,lineNumber:1};function c(n){return l||(l=t(26).decode),l(n)}function u(n){return RegExp.apply(null,n)}function s(n){return function(e){var t=new n;for(var l in r)t[l]=e[l];return t}}function a(n){return function(e){return new n(e)}}function m(n){return new Uint8Array(n).buffer}},function(n,e,t){var l=t(28);function o(n){var e,t=new Array(256);for(e=0;e<=127;e++)t[e]=i(e);for(e=128;e<=143;e++)t[e]=c(e-128,n.map);for(e=144;e<=159;e++)t[e]=c(e-144,n.array);for(e=160;e<=191;e++)t[e]=c(e-160,n.str);for(t[192]=i(null),t[193]=null,t[194]=i(!1),t[195]=i(!0),t[196]=r(n.uint8,n.bin),t[197]=r(n.uint16,n.bin),t[198]=r(n.uint32,n.bin),t[199]=r(n.uint8,n.ext),t[200]=r(n.uint16,n.ext),t[201]=r(n.uint32,n.ext),t[202]=n.float32,t[203]=n.float64,t[204]=n.uint8,t[205]=n.uint16,t[206]=n.uint32,t[207]=n.uint64,t[208]=n.int8,t[209]=n.int16,t[210]=n.int32,t[211]=n.int64,t[212]=c(1,n.ext),t[213]=c(2,n.ext),t[214]=c(4,n.ext),t[215]=c(8,n.ext),t[216]=c(16,n.ext),t[217]=r(n.uint8,n.str),t[218]=r(n.uint16,n.str),t[219]=r(n.uint32,n.str),t[220]=r(n.uint16,n.array),t[221]=r(n.uint32,n.array),t[222]=r(n.uint16,n.map),t[223]=r(n.uint32,n.map),e=224;e<=255;e++)t[e]=i(e-256);return t}function i(n){return function(){return n}}function r(n,e){return function(t){var l=n(t);return e(t,l)}}function c(n,e){return function(t){return e(t,n)}}e.getReadToken=function(n){var e=l.getReadFormat(n);return n&&n.useraw?function(n){var e,t=o(n).slice();for(t[217]=t[196],t[218]=t[197],t[219]=t[198],e=160;e<=191;e++)t[e]=c(e-160,n.bin);return t}(e):o(e)}},function(n,e,t){var l=t(29),o=t(22).EncodeBuffer;function i(n){if(!(this instanceof i))return new i(n);o.call(this,n)}i.prototype=new o,l.mixin(i.prototype),i.prototype.encode=function(n){this.write(n),this.emit("data",this.read())},i.prototype.end=function(n){arguments.length&&this.encode(n),this.flush(),this.emit("end")}},function(n,e,t){var l=t(29),o=t(27).DecodeBuffer;function i(n){if(!(this instanceof i))return new i(n);o.call(this,n)}i.prototype=new o,l.mixin(i.prototype),i.prototype.decode=function(n){arguments.length&&this.write(n),this.flush()},i.prototype.push=function(n){this.emit("data",n)},i.prototype.end=function(n){this.decode(n),this.emit("end")}},function(n,e,t){t(20),t(15),t(13).createCodec},function(n,e,t){t(20),t(15),t(13).preset},function(n,e,t){"use strict";t.r(e);var l=t(0),o=t.n(l),i=t(1),r=t.n(i),c=t(2),u=t.n(c),s=t(3),a=t.n(s),m=t(4),d=t.n(m),f=t(8),p=t.n(f),y=t(6),h=t.n(y),b=t(5),v=t.n(b),g=t(7),w=t.n(g),x=function(){var n="/Users/jun/ProjectJavaScript/cascade/src/suite.js",e="979071e0cbeebf1bb888ed525238c1fbbf9e6afe",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/suite.js",statementMap:{0:{start:{line:7,column:4},end:{line:9,column:5}},1:{start:{line:8,column:6},end:{line:8,column:68}},2:{start:{line:10,column:4},end:{line:19,column:5}},3:{start:{line:18,column:6},end:{line:18,column:52}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:6,column:2},end:{line:6,column:3}},loc:{start:{line:6,column:16},end:{line:20,column:3}},line:6}},branchMap:{0:{loc:{start:{line:7,column:4},end:{line:9,column:5}},type:"if",locations:[{start:{line:7,column:4},end:{line:9,column:5}},{start:{line:7,column:4},end:{line:9,column:5}}],line:7},1:{loc:{start:{line:10,column:4},end:{line:19,column:5}},type:"if",locations:[{start:{line:10,column:4},end:{line:19,column:5}},{start:{line:10,column:4},end:{line:19,column:5}}],line:10},2:{loc:{start:{line:11,column:6},end:{line:16,column:46}},type:"binary-expr",locations:[{start:{line:11,column:6},end:{line:11,column:48}},{start:{line:12,column:6},end:{line:12,column:44}},{start:{line:13,column:6},end:{line:13,column:44}},{start:{line:14,column:6},end:{line:14,column:41}},{start:{line:15,column:6},end:{line:15,column:43}},{start:{line:16,column:6},end:{line:16,column:46}}],line:11}},s:{0:0,1:0,2:0,3:0},f:{0:0},b:{0:[0,0],1:[0,0],2:[0,0,0,0,0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});return i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)}(),k=function n(){if(u()(this,n),x.f[0]++,x.s[0]++,(this instanceof n?this.constructor:void 0)===n)throw x.b[0][0]++,x.s[1]++,new TypeError("SuiteClassCannotBeInstantiatedDirectly");if(x.b[0][1]++,x.s[2]++,x.b[2][0]++,void 0===this.constructor.generateKey||(x.b[2][1]++,void 0===this.constructor.encrypt)||(x.b[2][2]++,void 0===this.constructor.decrypt)||(x.b[2][3]++,void 0===this.constructor.sign)||(x.b[2][4]++,void 0===this.constructor.verify)||(x.b[2][5]++,void 0===this.constructor.importKey))throw x.b[1][0]++,x.s[3]++,new TypeError("MustOverrideAllMethods");x.b[1][1]++},_=(function(){var n="/Users/jun/ProjectJavaScript/cascade/src/params.js",e="c5252760c740ce671b5d88dc2e8c199d4d6c2d60",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/params.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)}(),{publicKeyIdLEN:32,publicKeyIdHash:"SHA-256",sessionKeyIdLength:32,sessionKeyIdHash:"SHA-256",jscu:{ivLengthAesGcm:12},openpgp:{defaultUser:"<example@example.com>",workerPathWeb:"./openpgp.worker.min.js",workerPathNode:"../node_modules/openpgp/dist/openpgp.worker.min.js",curveList:{"P-256":{name:"p256"},"P-384":{name:"p384"},"P-521":{name:"p521"}}}}),E=function(){var n="/Users/jun/ProjectJavaScript/cascade/src/util.js",e="bc5d8c36ac591f050ea031549e6e87dad475fcf3",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/util.js",statementMap:{0:{start:{line:9,column:2},end:{line:18,column:3}},1:{start:{line:10,column:4},end:{line:10,column:23}},2:{start:{line:13,column:4},end:{line:17,column:5}},3:{start:{line:14,column:6},end:{line:14,column:40}},4:{start:{line:16,column:6},end:{line:16,column:56}},5:{start:{line:19,column:2},end:{line:19,column:14}},6:{start:{line:26,column:2},end:{line:35,column:3}},7:{start:{line:27,column:4},end:{line:27,column:29}},8:{start:{line:28,column:4},end:{line:28,column:46}},9:{start:{line:31,column:4},end:{line:31,column:33}},10:{start:{line:32,column:4},end:{line:32,column:47}},11:{start:{line:38,column:2},end:{line:42,column:3}},12:{start:{line:39,column:4},end:{line:39,column:43}},13:{start:{line:41,column:4},end:{line:41,column:29}},14:{start:{line:43,column:2},end:{line:43,column:37}},15:{start:{line:44,column:2},end:{line:44,column:52}},16:{start:{line:45,column:2},end:{line:45,column:67}},17:{start:{line:46,column:2},end:{line:46,column:68}},18:{start:{line:47,column:2},end:{line:47,column:62}},19:{start:{line:48,column:2},end:{line:48,column:42}},20:{start:{line:49,column:2},end:{line:49,column:37}},21:{start:{line:50,column:2},end:{line:50,column:38}},22:{start:{line:51,column:2},end:{line:51,column:38}},23:{start:{line:53,column:2},end:{line:53,column:17}}},fnMap:{0:{name:"getJscu",decl:{start:{line:7,column:16},end:{line:7,column:23}},loc:{start:{line:7,column:26},end:{line:20,column:1}},line:7},1:{name:"getOpenPgp",decl:{start:{line:22,column:16},end:{line:22,column:26}},loc:{start:{line:22,column:28},end:{line:54,column:1}},line:22}},branchMap:{0:{loc:{start:{line:9,column:2},end:{line:18,column:3}},type:"if",locations:[{start:{line:9,column:2},end:{line:18,column:3}},{start:{line:9,column:2},end:{line:18,column:3}}],line:9},1:{loc:{start:{line:9,column:6},end:{line:9,column:73}},type:"binary-expr",locations:[{start:{line:9,column:6},end:{line:9,column:35}},{start:{line:9,column:39},end:{line:9,column:73}}],line:9},2:{loc:{start:{line:26,column:2},end:{line:35,column:3}},type:"if",locations:[{start:{line:26,column:2},end:{line:35,column:3}},{start:{line:26,column:2},end:{line:35,column:3}}],line:26},3:{loc:{start:{line:26,column:5},end:{line:26,column:75}},type:"binary-expr",locations:[{start:{line:26,column:5},end:{line:26,column:34}},{start:{line:26,column:38},end:{line:26,column:75}}],line:26}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0},f:{0:0,1:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});return i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)}();function j(){var n;if(E.f[0]++,E.s[0]++,E.b[1][0]++,"undefined"!=typeof window&&(E.b[1][1]++,void 0!==window.jscu))E.b[0][0]++,E.s[1]++,n=window.jscu;else{E.b[0][1]++,E.s[2]++;try{E.s[3]++,n=t(40)}catch(n){throw E.s[4]++,new Error("FailedToLoadJSCU: ".concat(n.message))}}return E.s[5]++,n}function A(){var n,e;E.f[1]++,E.s[6]++,E.b[3][0]++,"undefined"!=typeof window&&(E.b[3][1]++,void 0!==window.openpgp)?(E.b[2][0]++,E.s[7]++,n=window.openpgp,E.s[8]++,e=_.openpgp.workerPathWeb):(E.b[2][1]++,E.s[9]++,n=t(41),E.s[10]++,e=_.openpgp.workerPathNode),E.s[11]++;try{E.s[12]++,n.initWorker({path:e})}catch(n){E.s[13]++,console.error(n.message)}return E.s[14]++,n.config.aead_protect=!0,E.s[15]++,n.config.aead_mode=n.enums.aead.eax,E.s[16]++,n.config.prefer_hash_algorithm=n.enums.hash.sha512,E.s[17]++,n.config.encryption_cipher=n.enums.symmetric.aes256,E.s[18]++,n.config.compression=n.enums.compression.zlib,E.s[19]++,n.config.integrity_protect=!0,E.s[20]++,n.config.rsa_blinding=!0,E.s[21]++,n.config.show_version=!1,E.s[22]++,n.config.show_comment=!1,E.s[23]++,n}var K=t(9),S=t.n(K),U=t(11),P=t.n(U),I=function(){var n="/Users/jun/ProjectJavaScript/cascade/src/keyid.js",e="207eec537b947d592bf13dabc55777d6bfe39edb",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/keyid.js",statementMap:{0:{start:{line:17,column:13},end:{line:17,column:39}},1:{start:{line:18,column:14},end:{line:18,column:53}},2:{start:{line:19,column:2},end:{line:19,column:40}},3:{start:{line:31,column:24},end:{line:31,column:90}},4:{start:{line:32,column:2},end:{line:32,column:50}},5:{start:{line:42,column:15},end:{line:42,column:24}},6:{start:{line:43,column:17},end:{line:43,column:70}},7:{start:{line:44,column:2},end:{line:44,column:43}},8:{start:{line:49,column:2},end:{line:49,column:75}},9:{start:{line:49,column:37},end:{line:49,column:75}},10:{start:{line:50,column:21},end:{line:50,column:37}},11:{start:{line:51,column:2},end:{line:51,column:31}},12:{start:{line:57,column:4},end:{line:57,column:17}},13:{start:{line:60,column:12},end:{line:60,column:61}},14:{start:{line:62,column:16},end:{line:62,column:36}},15:{start:{line:63,column:4},end:{line:63,column:26}},16:{start:{line:70,column:14},end:{line:70,column:29}},17:{start:{line:71,column:2},end:{line:71,column:20}},18:{start:{line:72,column:2},end:{line:72,column:13}},19:{start:{line:77,column:4},end:{line:77,column:72}},20:{start:{line:77,column:36},end:{line:77,column:72}},21:{start:{line:78,column:25},end:{line:81,column:6}},22:{start:{line:79,column:6},end:{line:79,column:60}},23:{start:{line:79,column:32},end:{line:79,column:60}},24:{start:{line:80,column:6},end:{line:80,column:15}},25:{start:{line:82,column:4},end:{line:82,column:31}},26:{start:{line:84,column:15},end:{line:84,column:57}},27:{start:{line:84,column:41},end:{line:84,column:55}},28:{start:{line:85,column:14},end:{line:85,column:38}},29:{start:{line:87,column:18},end:{line:87,column:54}}},fnMap:{0:{name:"fromOpenPgpKey",decl:{start:{line:16,column:16},end:{line:16,column:30}},loc:{start:{line:16,column:68},end:{line:20,column:1}},line:16},1:{name:"fromJscuKey",decl:{start:{line:30,column:22},end:{line:30,column:33}},loc:{start:{line:30,column:72},end:{line:33,column:1}},line:30},2:{name:"fromRawKey",decl:{start:{line:41,column:22},end:{line:41,column:32}},loc:{start:{line:41,column:71},end:{line:45,column:1}},line:41},3:{name:"createKeyId",decl:{start:{line:48,column:16},end:{line:48,column:27}},loc:{start:{line:48,column:34},end:{line:52,column:1}},line:48},4:{name:"(anonymous_4)",decl:{start:{line:56,column:2},end:{line:56,column:3}},loc:{start:{line:56,column:20},end:{line:58,column:3}},line:56},5:{name:"(anonymous_5)",decl:{start:{line:60,column:2},end:{line:60,column:3}},loc:{start:{line:60,column:10},end:{line:60,column:63}},line:60},6:{name:"(anonymous_6)",decl:{start:{line:61,column:2},end:{line:61,column:3}},loc:{start:{line:61,column:13},end:{line:64,column:3}},line:61},7:{name:"createKeyIdList",decl:{start:{line:69,column:16},end:{line:69,column:31}},loc:{start:{line:69,column:41},end:{line:73,column:1}},line:69},8:{name:"(anonymous_8)",decl:{start:{line:76,column:2},end:{line:76,column:3}},loc:{start:{line:76,column:15},end:{line:83,column:3}},line:76},9:{name:"(anonymous_9)",decl:{start:{line:78,column:37},end:{line:78,column:38}},loc:{start:{line:78,column:44},end:{line:81,column:5}},line:78},10:{name:"(anonymous_10)",decl:{start:{line:84,column:2},end:{line:84,column:3}},loc:{start:{line:84,column:13},end:{line:84,column:59}},line:84},11:{name:"(anonymous_11)",decl:{start:{line:84,column:32},end:{line:84,column:33}},loc:{start:{line:84,column:41},end:{line:84,column:55}},line:84},12:{name:"(anonymous_12)",decl:{start:{line:85,column:2},end:{line:85,column:3}},loc:{start:{line:85,column:12},end:{line:85,column:40}},line:85},13:{name:"(anonymous_13)",decl:{start:{line:87,column:2},end:{line:87,column:3}},loc:{start:{line:87,column:16},end:{line:87,column:56}},line:87}},branchMap:{0:{loc:{start:{line:16,column:42},end:{line:16,column:67}},type:"default-arg",locations:[{start:{line:16,column:46},end:{line:16,column:67}}],line:16},1:{loc:{start:{line:30,column:45},end:{line:30,column:70}},type:"default-arg",locations:[{start:{line:30,column:49},end:{line:30,column:70}}],line:30},2:{loc:{start:{line:41,column:38},end:{line:41,column:69}},type:"default-arg",locations:[{start:{line:41,column:44},end:{line:41,column:69}}],line:41},3:{loc:{start:{line:49,column:2},end:{line:49,column:75}},type:"if",locations:[{start:{line:49,column:2},end:{line:49,column:75}},{start:{line:49,column:2},end:{line:49,column:75}}],line:49},4:{loc:{start:{line:77,column:4},end:{line:77,column:72}},type:"if",locations:[{start:{line:77,column:4},end:{line:77,column:72}},{start:{line:77,column:4},end:{line:77,column:72}}],line:77},5:{loc:{start:{line:79,column:6},end:{line:79,column:60}},type:"if",locations:[{start:{line:79,column:6},end:{line:79,column:60}},{start:{line:79,column:6},end:{line:79,column:60}}],line:79}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0},b:{0:[0],1:[0],2:[0],3:[0,0],4:[0,0],5:[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});return i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)}();function O(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(I.b[0][0]++,_.publicKeyIdLEN);I.f[0]++;var t=(I.s[0]++,n.getFingerprint()),l=(I.s[1]++,P.a.encoder.hexStringToArrayBuffer(t));return I.s[2]++,R(l.slice(0,e))}function B(n){return M.apply(this,arguments)}function M(){return(M=r()(o.a.mark(function n(e){var t,l,i=arguments;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=i.length>1&&void 0!==i[1]?i[1]:(I.b[1][0]++,_.publicKeyIdLEN),I.f[1]++,I.s[3]++,n.next=5,e.getJwkThumbprint(_.publicKeyIdHash,"binary");case 5:return l=n.sent,I.s[4]++,n.abrupt("return",R(l.slice(0,t)));case 8:case"end":return n.stop()}},n,this)}))).apply(this,arguments)}function T(n){return N.apply(this,arguments)}function N(){return(N=r()(o.a.mark(function n(e){var t,l,i,r=arguments;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=r.length>1&&void 0!==r[1]?r[1]:(I.b[2][0]++,_.sessionKeyIdLength),I.f[2]++,I.s[5]++,l=j(),I.s[6]++,n.next=6,l.hash.compute(e,_.sessionKeyIdHash);case 6:return i=n.sent,I.s[7]++,n.abrupt("return",R(i.slice(0,t)));case 9:case"end":return n.stop()}},n,this)}))).apply(this,arguments)}function R(n){if(I.f[3]++,I.s[8]++,!(n instanceof Uint8Array))throw I.b[3][0]++,I.s[9]++,new Error("NotUint8ArrayKeyId");I.b[3][1]++;var e=(I.s[10]++,d()(n));return I.s[11]++,new L(e)}var L=function(n){function e(n){return u()(this,e),I.f[4]++,I.s[12]++,h()(this,v()(e).call(this,n))}return w()(e,n),a()(e,[{key:"toHex",value:function(){return I.f[5]++,I.s[13]++,P.a.encoder.arrayBufferToHexString(this)}},{key:"toBuffer",value:function(){I.f[6]++;var n=(I.s[14]++,new Uint8Array(this));return I.s[15]++,d()(n)}}]),e}(S()(Uint8Array));function F(n){I.f[7]++;var e=(I.s[16]++,new C);return I.s[17]++,e._init(n),I.s[18]++,e}var C=function(n){function e(){return u()(this,e),h()(this,v()(e).apply(this,arguments))}return w()(e,n),a()(e,[{key:"_init",value:function(n){if(I.f[8]++,I.s[19]++,!(n instanceof Array))throw I.b[4][0]++,I.s[20]++,new Error("InvalidKeyIdList");I.b[4][1]++;var e=(I.s[21]++,n.map(function(n){if(I.f[9]++,I.s[22]++,!(n instanceof L))throw I.b[5][0]++,I.s[23]++,new Error("NotKeyId");return I.b[5][1]++,I.s[24]++,n}));I.s[25]++,this.push.apply(this,p()(e))}},{key:"toBuffer",value:function(){return I.f[10]++,I.s[26]++,this.map(function(n){return I.f[11]++,I.s[27]++,n.toBuffer()})}},{key:"toArray",value:function(){return I.f[12]++,I.s[28]++,Array.from(this)}},{key:"map",value:function(n){return I.f[13]++,I.s[29]++,this.toArray().map(n)}}]),e}(S()(Array)),D=t(12),J=t.n(D),G=function(){var n="/Users/jun/ProjectJavaScript/cascade/src/encrypted_message.js",e="3aefa10bb60e0fa87e08fb31476fbd308aedb2e6",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/encrypted_message.js",statementMap:{0:{start:{line:10,column:15},end:{line:10,column:34}},1:{start:{line:11,column:17},end:{line:11,column:62}},2:{start:{line:15,column:2},end:{line:15,column:90}},3:{start:{line:15,column:43},end:{line:15,column:90}},4:{start:{line:17,column:2},end:{line:19,column:87}},5:{start:{line:18,column:4},end:{line:18,column:37}},6:{start:{line:19,column:16},end:{line:19,column:85}},7:{start:{line:21,column:2},end:{line:21,column:115}},8:{start:{line:21,column:66},end:{line:21,column:115}},9:{start:{line:23,column:22},end:{line:28,column:4}},10:{start:{line:25,column:4},end:{line:26,column:57}},11:{start:{line:25,column:36},end:{line:25,column:116}},12:{start:{line:25,column:83},end:{line:25,column:113}},13:{start:{line:26,column:9},end:{line:26,column:57}},14:{start:{line:27,column:4},end:{line:27,column:68}},15:{start:{line:30,column:2},end:{line:30,column:84}},16:{start:{line:34,column:2},end:{line:34,column:77}},17:{start:{line:34,column:33},end:{line:34,column:77}},18:{start:{line:35,column:2},end:{line:37,column:5}},19:{start:{line:36,column:4},end:{line:36,column:84}},20:{start:{line:36,column:37},end:{line:36,column:84}},21:{start:{line:39,column:2},end:{line:47,column:84}},22:{start:{line:40,column:4},end:{line:46,column:7}},23:{start:{line:41,column:22},end:{line:41,column:41}},24:{start:{line:43,column:6},end:{line:44,column:62}},25:{start:{line:43,column:41},end:{line:43,column:124}},26:{start:{line:43,column:91},end:{line:43,column:121}},27:{start:{line:44,column:11},end:{line:44,column:62}},28:{start:{line:45,column:6},end:{line:45,column:76}},29:{start:{line:47,column:16},end:{line:47,column:82}},30:{start:{line:49,column:2},end:{line:49,column:27}},31:{start:{line:55,column:2},end:{line:55,column:69}},32:{start:{line:55,column:33},end:{line:55,column:69}},33:{start:{line:56,column:2},end:{line:56,column:75}},34:{start:{line:56,column:37},end:{line:56,column:75}},35:{start:{line:58,column:2},end:{line:58,column:64}},36:{start:{line:62,column:2},end:{line:62,column:74}},37:{start:{line:62,column:37},end:{line:62,column:74}},38:{start:{line:63,column:2},end:{line:63,column:111}},39:{start:{line:63,column:66},end:{line:63,column:111}},40:{start:{line:65,column:2},end:{line:65,column:54}},41:{start:{line:70,column:4},end:{line:70,column:24}},42:{start:{line:71,column:4},end:{line:71,column:28}},43:{start:{line:72,column:4},end:{line:72,column:30}},44:{start:{line:73,column:4},end:{line:73,column:28}},45:{start:{line:77,column:4},end:{line:77,column:50}},46:{start:{line:78,column:4},end:{line:78,column:32}},47:{start:{line:82,column:24},end:{line:82,column:48}},48:{start:{line:83,column:4},end:{line:83,column:50}},49:{start:{line:84,column:4},end:{line:84,column:27}},50:{start:{line:85,column:4},end:{line:85,column:33}},51:{start:{line:89,column:4},end:{line:89,column:50}},52:{start:{line:90,column:4},end:{line:90,column:37}},53:{start:{line:93,column:16},end:{line:93,column:35}},54:{start:{line:94,column:18},end:{line:94,column:39}},55:{start:{line:95,column:18},end:{line:95,column:39}},56:{start:{line:96,column:18},end:{line:96,column:39}},57:{start:{line:99,column:4},end:{line:104,column:7}},58:{start:{line:110,column:4},end:{line:110,column:16}},59:{start:{line:111,column:4},end:{line:111,column:24}},60:{start:{line:112,column:4},end:{line:112,column:26}},61:{start:{line:115,column:15},end:{line:115,column:54}},62:{start:{line:118,column:16},end:{line:118,column:36}},63:{start:{line:119,column:4},end:{line:119,column:26}},64:{start:{line:123,column:4},end:{line:127,column:6}},65:{start:{line:131,column:4},end:{line:131,column:45}},66:{start:{line:134,column:16},end:{line:134,column:35}},67:{start:{line:135,column:17},end:{line:135,column:37}},68:{start:{line:140,column:4},end:{line:140,column:84}},69:{start:{line:140,column:37},end:{line:140,column:84}},70:{start:{line:141,column:26},end:{line:144,column:6}},71:{start:{line:142,column:6},end:{line:142,column:86}},72:{start:{line:142,column:47},end:{line:142,column:86}},73:{start:{line:143,column:6},end:{line:143,column:15}},74:{start:{line:145,column:4},end:{line:145,column:32}},75:{start:{line:148,column:17},end:{line:148,column:60}},76:{start:{line:148,column:42},end:{line:148,column:58}},77:{start:{line:149,column:14},end:{line:149,column:38}},78:{start:{line:151,column:18},end:{line:151,column:54}},79:{start:{line:152,column:21},end:{line:152,column:60}}},fnMap:{0:{name:"importEncryptedBuffer",decl:{start:{line:14,column:16},end:{line:14,column:37}},loc:{start:{line:14,column:49},end:{line:31,column:1}},line:14},1:{name:"(anonymous_1)",decl:{start:{line:23,column:39},end:{line:23,column:40}},loc:{start:{line:23,column:49},end:{line:28,column:3}},line:23},2:{name:"(anonymous_2)",decl:{start:{line:25,column:76},end:{line:25,column:77}},loc:{start:{line:25,column:83},end:{line:25,column:113}},line:25},3:{name:"importRawEncryptedBufferList",decl:{start:{line:33,column:16},end:{line:33,column:44}},loc:{start:{line:33,column:51},end:{line:50,column:1}},line:33},4:{name:"(anonymous_4)",decl:{start:{line:35,column:17},end:{line:35,column:18}},loc:{start:{line:35,column:26},end:{line:37,column:3}},line:35},5:{name:"(anonymous_5)",decl:{start:{line:40,column:35},end:{line:40,column:36}},loc:{start:{line:40,column:44},end:{line:46,column:5}},line:40},6:{name:"(anonymous_6)",decl:{start:{line:43,column:84},end:{line:43,column:85}},loc:{start:{line:43,column:91},end:{line:43,column:121}},line:43},7:{name:"createEncryptedMessage",decl:{start:{line:53,column:16},end:{line:53,column:38}},loc:{start:{line:53,column:78},end:{line:59,column:1}},line:53},8:{name:"createRawEncryptedMessage",decl:{start:{line:61,column:16},end:{line:61,column:41}},loc:{start:{line:61,column:63},end:{line:66,column:1}},line:61},9:{name:"(anonymous_9)",decl:{start:{line:69,column:2},end:{line:69,column:3}},loc:{start:{line:69,column:53},end:{line:74,column:3}},line:69},10:{name:"(anonymous_10)",decl:{start:{line:76,column:2},end:{line:76,column:3}},loc:{start:{line:76,column:23},end:{line:79,column:3}},line:76},11:{name:"(anonymous_11)",decl:{start:{line:81,column:2},end:{line:81,column:3}},loc:{start:{line:81,column:12},end:{line:86,column:3}},line:81},12:{name:"(anonymous_12)",decl:{start:{line:88,column:2},end:{line:88,column:3}},loc:{start:{line:88,column:23},end:{line:91,column:3}},line:88},13:{name:"(anonymous_13)",decl:{start:{line:93,column:2},end:{line:93,column:3}},loc:{start:{line:93,column:14},end:{line:93,column:37}},line:93},14:{name:"(anonymous_14)",decl:{start:{line:94,column:2},end:{line:94,column:3}},loc:{start:{line:94,column:16},end:{line:94,column:41}},line:94},15:{name:"(anonymous_15)",decl:{start:{line:95,column:2},end:{line:95,column:3}},loc:{start:{line:95,column:16},end:{line:95,column:41}},line:95},16:{name:"(anonymous_16)",decl:{start:{line:96,column:2},end:{line:96,column:3}},loc:{start:{line:96,column:16},end:{line:96,column:41}},line:96},17:{name:"(anonymous_17)",decl:{start:{line:98,column:2},end:{line:98,column:3}},loc:{start:{line:98,column:14},end:{line:105,column:3}},line:98},18:{name:"(anonymous_18)",decl:{start:{line:109,column:2},end:{line:109,column:3}},loc:{start:{line:109,column:40},end:{line:113,column:3}},line:109},19:{name:"(anonymous_19)",decl:{start:{line:115,column:2},end:{line:115,column:3}},loc:{start:{line:115,column:13},end:{line:115,column:56}},line:115},20:{name:"(anonymous_20)",decl:{start:{line:117,column:2},end:{line:117,column:3}},loc:{start:{line:117,column:13},end:{line:120,column:3}},line:117},21:{name:"(anonymous_21)",decl:{start:{line:122,column:2},end:{line:122,column:3}},loc:{start:{line:122,column:15},end:{line:128,column:3}},line:122},22:{name:"(anonymous_22)",decl:{start:{line:130,column:2},end:{line:130,column:3}},loc:{start:{line:130,column:14},end:{line:132,column:3}},line:130},23:{name:"(anonymous_23)",decl:{start:{line:134,column:2},end:{line:134,column:3}},loc:{start:{line:134,column:14},end:{line:134,column:37}},line:134},24:{name:"(anonymous_24)",decl:{start:{line:135,column:2},end:{line:135,column:3}},loc:{start:{line:135,column:15},end:{line:135,column:39}},line:135},25:{name:"(anonymous_25)",decl:{start:{line:139,column:2},end:{line:139,column:3}},loc:{start:{line:139,column:16},end:{line:146,column:3}},line:139},26:{name:"(anonymous_26)",decl:{start:{line:141,column:38},end:{line:141,column:39}},loc:{start:{line:141,column:45},end:{line:144,column:5}},line:141},27:{name:"(anonymous_27)",decl:{start:{line:148,column:2},end:{line:148,column:3}},loc:{start:{line:148,column:15},end:{line:148,column:62}},line:148},28:{name:"(anonymous_28)",decl:{start:{line:148,column:33},end:{line:148,column:34}},loc:{start:{line:148,column:42},end:{line:148,column:58}},line:148},29:{name:"(anonymous_29)",decl:{start:{line:149,column:2},end:{line:149,column:3}},loc:{start:{line:149,column:12},end:{line:149,column:40}},line:149},30:{name:"(anonymous_30)",decl:{start:{line:151,column:2},end:{line:151,column:3}},loc:{start:{line:151,column:16},end:{line:151,column:56}},line:151},31:{name:"(anonymous_31)",decl:{start:{line:152,column:2},end:{line:152,column:3}},loc:{start:{line:152,column:19},end:{line:152,column:62}},line:152}},branchMap:{0:{loc:{start:{line:15,column:2},end:{line:15,column:90}},type:"if",locations:[{start:{line:15,column:2},end:{line:15,column:90}},{start:{line:15,column:2},end:{line:15,column:90}}],line:15},1:{loc:{start:{line:21,column:2},end:{line:21,column:115}},type:"if",locations:[{start:{line:21,column:2},end:{line:21,column:115}},{start:{line:21,column:2},end:{line:21,column:115}}],line:21},2:{loc:{start:{line:21,column:6},end:{line:21,column:64}},type:"binary-expr",locations:[{start:{line:21,column:6},end:{line:21,column:16}},{start:{line:21,column:20},end:{line:21,column:32}},{start:{line:21,column:36},end:{line:21,column:48}},{start:{line:21,column:52},end:{line:21,column:64}}],line:21},3:{loc:{start:{line:25,column:4},end:{line:26,column:57}},type:"if",locations:[{start:{line:25,column:4},end:{line:26,column:57}},{start:{line:25,column:4},end:{line:26,column:57}}],line:25},4:{loc:{start:{line:34,column:2},end:{line:34,column:77}},type:"if",locations:[{start:{line:34,column:2},end:{line:34,column:77}},{start:{line:34,column:2},end:{line:34,column:77}}],line:34},5:{loc:{start:{line:36,column:4},end:{line:36,column:84}},type:"if",locations:[{start:{line:36,column:4},end:{line:36,column:84}},{start:{line:36,column:4},end:{line:36,column:84}}],line:36},6:{loc:{start:{line:43,column:6},end:{line:44,column:62}},type:"if",locations:[{start:{line:43,column:6},end:{line:44,column:62}},{start:{line:43,column:6},end:{line:44,column:62}}],line:43},7:{loc:{start:{line:53,column:64},end:{line:53,column:76}},type:"default-arg",locations:[{start:{line:53,column:74},end:{line:53,column:76}}],line:53},8:{loc:{start:{line:55,column:2},end:{line:55,column:69}},type:"if",locations:[{start:{line:55,column:2},end:{line:55,column:69}},{start:{line:55,column:2},end:{line:55,column:69}}],line:55},9:{loc:{start:{line:56,column:2},end:{line:56,column:75}},type:"if",locations:[{start:{line:56,column:2},end:{line:56,column:75}},{start:{line:56,column:2},end:{line:56,column:75}}],line:56},10:{loc:{start:{line:62,column:2},end:{line:62,column:74}},type:"if",locations:[{start:{line:62,column:2},end:{line:62,column:74}},{start:{line:62,column:2},end:{line:62,column:74}}],line:62},11:{loc:{start:{line:63,column:2},end:{line:63,column:111}},type:"if",locations:[{start:{line:63,column:2},end:{line:63,column:111}},{start:{line:63,column:2},end:{line:63,column:111}}],line:63},12:{loc:{start:{line:63,column:6},end:{line:63,column:64}},type:"binary-expr",locations:[{start:{line:63,column:6},end:{line:63,column:31}},{start:{line:63,column:35},end:{line:63,column:64}}],line:63},13:{loc:{start:{line:69,column:39},end:{line:69,column:51}},type:"default-arg",locations:[{start:{line:69,column:49},end:{line:69,column:51}}],line:69},14:{loc:{start:{line:109,column:27},end:{line:109,column:38}},type:"default-arg",locations:[{start:{line:109,column:36},end:{line:109,column:38}}],line:109},15:{loc:{start:{line:140,column:4},end:{line:140,column:84}},type:"if",locations:[{start:{line:140,column:4},end:{line:140,column:84}},{start:{line:140,column:4},end:{line:140,column:84}}],line:140},16:{loc:{start:{line:142,column:6},end:{line:142,column:86}},type:"if",locations:[{start:{line:142,column:6},end:{line:142,column:86}},{start:{line:142,column:6},end:{line:142,column:86}}],line:142}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0},b:{0:[0,0],1:[0,0],2:[0,0,0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0],14:[0],15:[0,0],16:[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});return i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)}(),H=(G.s[0]++,["jscu","openpgp"]),V=(G.s[1]++,["public_key_encrypt","session_key_encrypt"]);function z(n){if(G.f[0]++,G.s[2]++,!(n instanceof Uint8Array))throw G.b[0][0]++,G.s[3]++,new Error("NonUint8ArraySerializedData");var e;G.b[0][1]++,G.s[4]++;try{G.s[5]++,e=J.a.decode(n)}catch(n){throw G.s[6]++,new Error("FailedToParseEncryptedMessageBuffer: ".concat(n.message))}if(G.s[7]++,G.b[2][0]++,!(e.suite&&(G.b[2][1]++,e.keyType)&&(G.b[2][2]++,e.message)&&(G.b[2][3]++,e.options)))throw G.b[1][0]++,G.s[8]++,new Error("InvalidEncryptedMessageFormat");G.b[1][1]++;var t=(G.s[9]++,e.message.map(function(n){var e;return G.f[1]++,G.s[10]++,n.keyId instanceof Array?(G.b[3][0]++,G.s[11]++,e=F(n.keyId.map(function(n){return G.f[2]++,G.s[12]++,R(new Uint8Array(n))}))):(G.b[3][1]++,G.s[13]++,e=R(new Uint8Array(n.keyId))),G.s[14]++,q(n.data,e,n.params)}));return G.s[15]++,W(e.suite,e.keyType,t,e.options)}function Y(n){if(G.f[3]++,G.s[16]++,!(n instanceof Array))throw G.b[4][0]++,G.s[17]++,new Error("NotArrayOfSerializedData");var e;G.b[4][1]++,G.s[18]++,n.forEach(function(n){if(G.f[4]++,G.s[19]++,!(n instanceof Uint8Array))throw G.b[5][0]++,G.s[20]++,new Error("NotUint8ArraySerializedData");G.b[5][1]++}),G.s[21]++;try{G.s[22]++,e=n.map(function(n){G.f[5]++;var e,t=(G.s[23]++,J.a.decode(n));return G.s[24]++,t.keyId instanceof Array?(G.b[6][0]++,G.s[25]++,e=F(t.keyId.map(function(n){return G.f[6]++,G.s[26]++,R(new Uint8Array(n))}))):(G.b[6][1]++,G.s[27]++,e=R(new Uint8Array(t.keyId))),G.s[28]++,q(t.data,e,t.params)})}catch(n){throw G.s[29]++,new Error("FailedToParseRawEncryptedMessage: ".concat(n.message))}return G.s[30]++,e}function W(n,e,t){var l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:(G.b[7][0]++,{});if(G.f[7]++,G.s[31]++,H.indexOf(n)<0)throw G.b[8][0]++,G.s[32]++,new Error("UnsupportedSuite");if(G.b[8][1]++,G.s[33]++,V.indexOf(e)<0)throw G.b[9][0]++,G.s[34]++,new Error("UnsupportedKeyType");return G.b[9][1]++,G.s[35]++,new $(n,e,t,l)}function q(n,e,t){if(G.f[8]++,G.s[36]++,!(n instanceof Uint8Array))throw G.b[10][0]++,G.s[37]++,new Error("NonUint8ArrayData");if(G.b[10][1]++,G.s[38]++,G.b[12][0]++,!(e instanceof L||(G.b[12][1]++,e instanceof C)))throw G.b[11][0]++,G.s[39]++,new Error("NonKeyIdOrKeyIdListObject");return G.b[11][1]++,G.s[40]++,new Q(n,e,t)}var $=function(){function n(e,t,l){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:(G.b[13][0]++,{});u()(this,n),G.f[9]++,G.s[41]++,this._suite=e,G.s[42]++,this._keyType=t,G.s[43]++,this._setMessage(l),G.s[44]++,this._options=o}return a()(n,[{key:"_setMessage",value:function(n){G.f[10]++,G.s[45]++,this._message=new X,G.s[46]++,this._message._set(n)}},{key:"extract",value:function(){G.f[11]++;var n=(G.s[47]++,d()(this._message));return G.s[48]++,this._message=new X,G.s[49]++,this._message._set([]),G.s[50]++,n.toArray()}},{key:"insert",value:function(n){G.f[12]++,G.s[51]++,this._message=new X,G.s[52]++,this._message._set(n)}},{key:"serialize",value:function(){return G.f[17]++,G.s[57]++,J.a.encode({suite:this._suite,keyType:this._keyType,message:this._message.toJsObject(),options:this._options})}},{key:"suite",get:function(){return G.f[13]++,G.s[53]++,this._suite}},{key:"keyType",get:function(){return G.f[14]++,G.s[54]++,this._keyType}},{key:"message",get:function(){return G.f[15]++,G.s[55]++,this._message}},{key:"options",get:function(){return G.f[16]++,G.s[56]++,this._options}}]),n}(),Q=function(n){function e(n,t){var l,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:(G.b[14][0]++,{});return u()(this,e),G.f[18]++,G.s[58]++,l=h()(this,v()(e).call(this,n)),G.s[59]++,l._keyId=t,G.s[60]++,l._params=o,l}return w()(e,n),a()(e,[{key:"toBase64",value:function(){return G.f[19]++,G.s[61]++,P.a.encoder.encodeBase64(this)}},{key:"toBuffer",value:function(){G.f[20]++;var n=(G.s[62]++,new Uint8Array(this));return G.s[63]++,d()(n)}},{key:"toJsObject",value:function(){return G.f[21]++,G.s[64]++,{data:this.toBuffer(),keyId:this._keyId.toBuffer(),params:this._params}}},{key:"serialize",value:function(){return G.f[22]++,G.s[65]++,J.a.encode(this.toJsObject())}},{key:"keyId",get:function(){return G.f[23]++,G.s[66]++,this._keyId}},{key:"params",get:function(){return G.f[24]++,G.s[67]++,this._params}}]),e}(S()(Uint8Array)),X=function(n){function e(){return u()(this,e),h()(this,v()(e).apply(this,arguments))}return w()(e,n),a()(e,[{key:"_set",value:function(n){if(G.f[25]++,G.s[68]++,!(n instanceof Array))throw G.b[15][0]++,G.s[69]++,new Error("InvalidEncryptedMessageList");G.b[15][1]++;var e=(G.s[70]++,n.map(function(n){if(G.f[26]++,G.s[71]++,!(n instanceof Q))throw G.b[16][0]++,G.s[72]++,new Error("NotEncryptedMessage");return G.b[16][1]++,G.s[73]++,n}));G.s[74]++,this.push.apply(this,p()(e))}},{key:"toJsObject",value:function(){return G.f[27]++,G.s[75]++,this.map(function(n){return G.f[28]++,G.s[76]++,n.toJsObject()})}},{key:"toArray",value:function(){return G.f[29]++,G.s[77]++,Array.from(this)}},{key:"map",value:function(n){return G.f[30]++,G.s[78]++,this.toArray().map(n)}},{key:"filter",value:function(n){return G.f[31]++,G.s[79]++,this.toArray().filter(n)}}]),e}(S()(Array)),Z=function(){var n="/Users/jun/ProjectJavaScript/cascade/src/signature.js",e="8c5fbaa864a13eb3222d627f46d0209a9f0d6eb3",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/signature.js",statementMap:{0:{start:{line:9,column:15},end:{line:9,column:34}},1:{start:{line:10,column:17},end:{line:10,column:36}},2:{start:{line:13,column:2},end:{line:13,column:90}},3:{start:{line:13,column:43},end:{line:13,column:90}},4:{start:{line:15,column:2},end:{line:17,column:80}},5:{start:{line:16,column:4},end:{line:16,column:37}},6:{start:{line:17,column:16},end:{line:17,column:78}},7:{start:{line:19,column:2},end:{line:19,column:111}},8:{start:{line:19,column:69},end:{line:19,column:111}},9:{start:{line:21,column:24},end:{line:21,column:110}},10:{start:{line:21,column:54},end:{line:21,column:108}},11:{start:{line:23,column:2},end:{line:23,column:78}},12:{start:{line:28,column:2},end:{line:28,column:68}},13:{start:{line:28,column:32},end:{line:28,column:68}},14:{start:{line:29,column:2},end:{line:29,column:74}},15:{start:{line:29,column:36},end:{line:29,column:74}},16:{start:{line:30,column:2},end:{line:30,column:101}},17:{start:{line:30,column:62},end:{line:30,column:101}},18:{start:{line:31,column:2},end:{line:31,column:78}},19:{start:{line:31,column:38},end:{line:31,column:78}},20:{start:{line:33,column:2},end:{line:33,column:60}},21:{start:{line:38,column:4},end:{line:38,column:24}},22:{start:{line:39,column:4},end:{line:39,column:28}},23:{start:{line:40,column:4},end:{line:40,column:53}},24:{start:{line:41,column:4},end:{line:41,column:28}},25:{start:{line:44,column:17},end:{line:44,column:36}},26:{start:{line:45,column:19},end:{line:45,column:40}},27:{start:{line:46,column:22},end:{line:46,column:46}},28:{start:{line:47,column:19},end:{line:47,column:40}},29:{start:{line:50,column:4},end:{line:55,column:7}},30:{start:{line:61,column:4},end:{line:61,column:12}},31:{start:{line:62,column:29},end:{line:65,column:6}},32:{start:{line:63,column:6},end:{line:63,column:82}},33:{start:{line:63,column:41},end:{line:63,column:82}},34:{start:{line:64,column:6},end:{line:64,column:17}},35:{start:{line:66,column:4},end:{line:66,column:35}},36:{start:{line:69,column:17},end:{line:69,column:58}},37:{start:{line:69,column:41},end:{line:69,column:55}},38:{start:{line:70,column:14},end:{line:70,column:38}},39:{start:{line:72,column:18},end:{line:72,column:54}},40:{start:{line:73,column:21},end:{line:73,column:60}},41:{start:{line:78,column:2},end:{line:78,column:77}},42:{start:{line:78,column:35},end:{line:78,column:77}},43:{start:{line:79,column:2},end:{line:79,column:66}},44:{start:{line:79,column:32},end:{line:79,column:66}},45:{start:{line:81,column:2},end:{line:81,column:38}},46:{start:{line:86,column:4},end:{line:86,column:15}},47:{start:{line:87,column:4},end:{line:87,column:24}},48:{start:{line:90,column:16},end:{line:90,column:55}},49:{start:{line:91,column:28},end:{line:91,column:48}},50:{start:{line:92,column:4},end:{line:92,column:26}},51:{start:{line:95,column:4},end:{line:98,column:6}},52:{start:{line:101,column:17},end:{line:101,column:36}}},fnMap:{0:{name:"importSignatureBuffer",decl:{start:{line:12,column:16},end:{line:12,column:37}},loc:{start:{line:12,column:49},end:{line:24,column:1}},line:12},1:{name:"(anonymous_1)",decl:{start:{line:21,column:44},end:{line:21,column:45}},loc:{start:{line:21,column:54},end:{line:21,column:108}},line:21},2:{name:"createSignature",decl:{start:{line:26,column:16},end:{line:26,column:31}},loc:{start:{line:26,column:73},end:{line:34,column:1}},line:26},3:{name:"(anonymous_3)",decl:{start:{line:37,column:2},end:{line:37,column:3}},loc:{start:{line:37,column:55},end:{line:42,column:3}},line:37},4:{name:"(anonymous_4)",decl:{start:{line:44,column:2},end:{line:44,column:3}},loc:{start:{line:44,column:15},end:{line:44,column:38}},line:44},5:{name:"(anonymous_5)",decl:{start:{line:45,column:2},end:{line:45,column:3}},loc:{start:{line:45,column:17},end:{line:45,column:42}},line:45},6:{name:"(anonymous_6)",decl:{start:{line:46,column:2},end:{line:46,column:3}},loc:{start:{line:46,column:20},end:{line:46,column:48}},line:46},7:{name:"(anonymous_7)",decl:{start:{line:47,column:2},end:{line:47,column:3}},loc:{start:{line:47,column:17},end:{line:47,column:42}},line:47},8:{name:"(anonymous_8)",decl:{start:{line:49,column:2},end:{line:49,column:3}},loc:{start:{line:49,column:15},end:{line:56,column:3}},line:49},9:{name:"(anonymous_9)",decl:{start:{line:60,column:2},end:{line:60,column:3}},loc:{start:{line:60,column:25},end:{line:67,column:3}},line:60},10:{name:"(anonymous_10)",decl:{start:{line:62,column:45},end:{line:62,column:46}},loc:{start:{line:62,column:54},end:{line:65,column:5}},line:62},11:{name:"(anonymous_11)",decl:{start:{line:69,column:2},end:{line:69,column:3}},loc:{start:{line:69,column:15},end:{line:69,column:60}},line:69},12:{name:"(anonymous_12)",decl:{start:{line:69,column:34},end:{line:69,column:35}},loc:{start:{line:69,column:41},end:{line:69,column:55}},line:69},13:{name:"(anonymous_13)",decl:{start:{line:70,column:2},end:{line:70,column:3}},loc:{start:{line:70,column:12},end:{line:70,column:40}},line:70},14:{name:"(anonymous_14)",decl:{start:{line:72,column:2},end:{line:72,column:3}},loc:{start:{line:72,column:16},end:{line:72,column:56}},line:72},15:{name:"(anonymous_15)",decl:{start:{line:73,column:2},end:{line:73,column:3}},loc:{start:{line:73,column:19},end:{line:73,column:62}},line:73},16:{name:"createRawSignature",decl:{start:{line:76,column:16},end:{line:76,column:34}},loc:{start:{line:76,column:46},end:{line:82,column:1}},line:76},17:{name:"(anonymous_17)",decl:{start:{line:85,column:2},end:{line:85,column:3}},loc:{start:{line:85,column:25},end:{line:88,column:3}},line:85},18:{name:"(anonymous_18)",decl:{start:{line:90,column:2},end:{line:90,column:3}},loc:{start:{line:90,column:14},end:{line:90,column:57}},line:90},19:{name:"(anonymous_19)",decl:{start:{line:91,column:2},end:{line:91,column:3}},loc:{start:{line:91,column:14},end:{line:93,column:3}},line:91},20:{name:"(anonymous_20)",decl:{start:{line:94,column:2},end:{line:94,column:3}},loc:{start:{line:94,column:16},end:{line:99,column:3}},line:94},21:{name:"(anonymous_21)",decl:{start:{line:101,column:2},end:{line:101,column:3}},loc:{start:{line:101,column:15},end:{line:101,column:38}},line:101}},branchMap:{0:{loc:{start:{line:13,column:2},end:{line:13,column:90}},type:"if",locations:[{start:{line:13,column:2},end:{line:13,column:90}},{start:{line:13,column:2},end:{line:13,column:90}}],line:13},1:{loc:{start:{line:19,column:2},end:{line:19,column:111}},type:"if",locations:[{start:{line:19,column:2},end:{line:19,column:111}},{start:{line:19,column:2},end:{line:19,column:111}}],line:19},2:{loc:{start:{line:19,column:6},end:{line:19,column:67}},type:"binary-expr",locations:[{start:{line:19,column:6},end:{line:19,column:16}},{start:{line:19,column:20},end:{line:19,column:32}},{start:{line:19,column:36},end:{line:19,column:51}},{start:{line:19,column:55},end:{line:19,column:67}}],line:19},3:{loc:{start:{line:26,column:60},end:{line:26,column:72}},type:"default-arg",locations:[{start:{line:26,column:70},end:{line:26,column:72}}],line:26},4:{loc:{start:{line:28,column:2},end:{line:28,column:68}},type:"if",locations:[{start:{line:28,column:2},end:{line:28,column:68}},{start:{line:28,column:2},end:{line:28,column:68}}],line:28},5:{loc:{start:{line:29,column:2},end:{line:29,column:74}},type:"if",locations:[{start:{line:29,column:2},end:{line:29,column:74}},{start:{line:29,column:2},end:{line:29,column:74}}],line:29},6:{loc:{start:{line:30,column:2},end:{line:30,column:101}},type:"if",locations:[{start:{line:30,column:2},end:{line:30,column:101}},{start:{line:30,column:2},end:{line:30,column:101}}],line:30},7:{loc:{start:{line:30,column:5},end:{line:30,column:60}},type:"binary-expr",locations:[{start:{line:30,column:5},end:{line:30,column:21}},{start:{line:30,column:25},end:{line:30,column:60}}],line:30},8:{loc:{start:{line:31,column:2},end:{line:31,column:78}},type:"if",locations:[{start:{line:31,column:2},end:{line:31,column:78}},{start:{line:31,column:2},end:{line:31,column:78}}],line:31},9:{loc:{start:{line:37,column:42},end:{line:37,column:54}},type:"default-arg",locations:[{start:{line:37,column:52},end:{line:37,column:54}}],line:37},10:{loc:{start:{line:63,column:6},end:{line:63,column:82}},type:"if",locations:[{start:{line:63,column:6},end:{line:63,column:82}},{start:{line:63,column:6},end:{line:63,column:82}}],line:63},11:{loc:{start:{line:78,column:2},end:{line:78,column:77}},type:"if",locations:[{start:{line:78,column:2},end:{line:78,column:77}},{start:{line:78,column:2},end:{line:78,column:77}}],line:78},12:{loc:{start:{line:79,column:2},end:{line:79,column:66}},type:"if",locations:[{start:{line:79,column:2},end:{line:79,column:66}},{start:{line:79,column:2},end:{line:79,column:66}}],line:79}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0},b:{0:[0,0],1:[0,0],2:[0,0,0,0],3:[0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0],10:[0,0],11:[0,0],12:[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});return i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)}(),nn=(Z.s[0]++,["jscu","openpgp"]),en=(Z.s[1]++,["public_key_sign"]);function tn(n){if(Z.f[0]++,Z.s[2]++,!(n instanceof Uint8Array))throw Z.b[0][0]++,Z.s[3]++,new Error("NonUint8ArraySerializedData");var e;Z.b[0][1]++,Z.s[4]++;try{Z.s[5]++,e=J.a.decode(n)}catch(n){throw Z.s[6]++,new Error("FailedToParseSignatureBuffer: ".concat(n.message))}if(Z.s[7]++,Z.b[2][0]++,!(e.suite&&(Z.b[2][1]++,e.keyType)&&(Z.b[2][2]++,e.signatures)&&(Z.b[2][3]++,e.options)))throw Z.b[1][0]++,Z.s[8]++,new Error("InvalidSignatureFormat");Z.b[1][1]++;var t=(Z.s[9]++,e.signatures.map(function(n){return Z.f[1]++,Z.s[10]++,cn(n.data,R(n.keyId))}));return Z.s[11]++,ln(e.suite,e.keyType,t,e.options)}function ln(n,e,t){var l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:(Z.b[3][0]++,{});if(Z.f[2]++,Z.s[12]++,nn.indexOf(n)<0)throw Z.b[4][0]++,Z.s[13]++,new Error("UnsupportedSuite");if(Z.b[4][1]++,Z.s[14]++,en.indexOf(e)<0)throw Z.b[5][0]++,Z.s[15]++,new Error("UnsupportedKeyType");if(Z.b[5][1]++,Z.s[16]++,Z.b[7][0]++,"jscu"===n&&(Z.b[7][1]++,void 0===l.hash))throw Z.b[6][0]++,Z.s[17]++,new Error("HashMustBeSpecified");if(Z.b[6][1]++,Z.s[18]++,!(t instanceof Array))throw Z.b[8][0]++,Z.s[19]++,new Error("InvalidSignatureList");return Z.b[8][1]++,Z.s[20]++,new on(n,e,t,l)}var on=function(){function n(e,t,l){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:(Z.b[9][0]++,{});u()(this,n),Z.f[3]++,Z.s[21]++,this._suite=e,Z.s[22]++,this._keyType=t,Z.s[23]++,this._signatures=new rn(l),Z.s[24]++,this._options=o}return a()(n,[{key:"serialize",value:function(){return Z.f[8]++,Z.s[29]++,J.a.encode({suite:this._suite,keyType:this._keyType,signatures:this._signatures.toJsObject(),options:this._options})}},{key:"suite",get:function(){return Z.f[4]++,Z.s[25]++,this._suite}},{key:"keyType",get:function(){return Z.f[5]++,Z.s[26]++,this._keyType}},{key:"signatures",get:function(){return Z.f[6]++,Z.s[27]++,this._signatures}},{key:"options",get:function(){return Z.f[7]++,Z.s[28]++,this._options}}]),n}(),rn=function(n){function e(n){var t,l;u()(this,e),Z.f[9]++,Z.s[30]++,l=h()(this,v()(e).call(this));var o=(Z.s[31]++,n.map(function(n){if(Z.f[10]++,Z.s[32]++,!(n instanceof un))throw Z.b[10][0]++,Z.s[33]++,new Error("NotRawSignatureObject");return Z.b[10][1]++,Z.s[34]++,n}));return Z.s[35]++,(t=l).push.apply(t,p()(o)),l}return w()(e,n),a()(e,[{key:"toJsObject",value:function(){return Z.f[11]++,Z.s[36]++,this.map(function(n){return Z.f[12]++,Z.s[37]++,n.toJsObject()})}},{key:"toArray",value:function(){return Z.f[13]++,Z.s[38]++,Array.from(this)}},{key:"map",value:function(n){return Z.f[14]++,Z.s[39]++,this.toArray().map(n)}},{key:"filter",value:function(n){return Z.f[15]++,Z.s[40]++,this.toArray().filter(n)}}]),e}(S()(Array));function cn(n,e){if(Z.f[16]++,Z.s[41]++,!(n instanceof Uint8Array))throw Z.b[11][0]++,Z.s[42]++,new Error("NonUint8ArraySignature");if(Z.b[11][1]++,Z.s[43]++,!(e instanceof L))throw Z.b[12][0]++,Z.s[44]++,new Error("NonKeyIdObject");return Z.b[12][1]++,Z.s[45]++,new un(n,e)}var un=function(n){function e(n,t){var l;return u()(this,e),Z.f[17]++,Z.s[46]++,l=h()(this,v()(e).call(this,n)),Z.s[47]++,l._keyId=t,l}return w()(e,n),a()(e,[{key:"toBase64",value:function(){return Z.f[18]++,Z.s[48]++,P.a.encoder.encodeBase64(this)}},{key:"toBuffer",value:function(){Z.f[19]++;var n=(Z.s[49]++,new Uint8Array(this));return Z.s[50]++,d()(n)}},{key:"toJsObject",value:function(){return Z.f[20]++,Z.s[51]++,{data:this.toBuffer(),keyId:this._keyId.toBuffer()}}},{key:"keyId",get:function(){return Z.f[21]++,Z.s[52]++,this._keyId}}]),e}(S()(Uint8Array)),sn=function(){var n="/Users/jun/ProjectJavaScript/cascade/src/suite_jscu.js",e="9f78e4155ab062b20f4285b16001a2f95e53507c",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/suite_jscu.js",statementMap:{0:{start:{line:21,column:17},end:{line:21,column:26}},1:{start:{line:23,column:4},end:{line:54,column:51}},2:{start:{line:24,column:6},end:{line:24,column:77}},3:{start:{line:24,column:26},end:{line:24,column:77}},4:{start:{line:25,column:21},end:{line:25,column:68}},5:{start:{line:26,column:20},end:{line:26,column:54}},6:{start:{line:27,column:6},end:{line:30,column:8}},7:{start:{line:32,column:9},end:{line:54,column:51}},8:{start:{line:33,column:22},end:{line:33,column:59}},9:{start:{line:34,column:22},end:{line:34,column:113}},10:{start:{line:36,column:21},end:{line:36,column:65}},11:{start:{line:37,column:20},end:{line:37,column:86}},12:{start:{line:39,column:27},end:{line:39,column:64}},13:{start:{line:40,column:26},end:{line:40,column:64}},14:{start:{line:43,column:6},end:{line:46,column:7}},15:{start:{line:44,column:29},end:{line:44,column:124}},16:{start:{line:45,column:8},end:{line:45,column:58}},17:{start:{line:48,column:6},end:{line:52,column:8}},18:{start:{line:54,column:9},end:{line:54,column:51}},19:{start:{line:65,column:17},end:{line:65,column:26}},20:{start:{line:67,column:19},end:{line:67,column:42}},21:{start:{line:69,column:4},end:{line:74,column:5}},22:{start:{line:70,column:6},end:{line:70,column:60}},23:{start:{line:70,column:22},end:{line:70,column:60}},24:{start:{line:71,column:6},end:{line:73,column:9}},25:{start:{line:72,column:8},end:{line:72,column:67}},26:{start:{line:76,column:4},end:{line:76,column:18}},27:{start:{line:87,column:17},end:{line:87,column:26}},28:{start:{line:90,column:4},end:{line:90,column:52}},29:{start:{line:90,column:39},end:{line:90,column:52}},30:{start:{line:95,column:4},end:{line:140,column:53}},31:{start:{line:97,column:6},end:{line:101,column:7}},32:{start:{line:98,column:8},end:{line:98,column:127}},33:{start:{line:99,column:8},end:{line:99,column:68}},34:{start:{line:100,column:8},end:{line:100,column:38}},35:{start:{line:104,column:6},end:{line:110,column:7}},36:{start:{line:105,column:20},end:{line:105,column:58}},37:{start:{line:106,column:8},end:{line:109,column:9}},38:{start:{line:107,column:28},end:{line:107,column:83}},39:{start:{line:108,column:10},end:{line:108,column:52}},40:{start:{line:112,column:6},end:{line:118,column:10}},41:{start:{line:113,column:26},end:{line:113,column:58}},42:{start:{line:114,column:21},end:{line:114,column:79}},43:{start:{line:115,column:20},end:{line:115,column:45}},44:{start:{line:116,column:8},end:{line:116,column:25}},45:{start:{line:117,column:8},end:{line:117,column:95}},46:{start:{line:121,column:6},end:{line:125,column:7}},47:{start:{line:122,column:26},end:{line:122,column:65}},48:{start:{line:123,column:8},end:{line:123,column:80}},49:{start:{line:124,column:8},end:{line:124,column:34}},50:{start:{line:127,column:6},end:{line:127,column:108}},51:{start:{line:129,column:9},end:{line:140,column:53}},52:{start:{line:130,column:6},end:{line:137,column:61}},53:{start:{line:131,column:19},end:{line:131,column:79}},54:{start:{line:132,column:21},end:{line:132,column:102}},55:{start:{line:133,column:22},end:{line:133,column:65}},56:{start:{line:134,column:20},end:{line:134,column:64}},57:{start:{line:135,column:8},end:{line:135,column:26}},58:{start:{line:137,column:11},end:{line:137,column:61}},59:{start:{line:138,column:6},end:{line:138,column:109}},60:{start:{line:140,column:9},end:{line:140,column:53}},61:{start:{line:142,column:4},end:{line:142,column:27}},62:{start:{line:153,column:4},end:{line:153,column:93}},63:{start:{line:153,column:50},end:{line:153,column:93}},64:{start:{line:154,column:4},end:{line:154,column:90}},65:{start:{line:154,column:55},end:{line:154,column:90}},66:{start:{line:155,column:17},end:{line:155,column:26}},67:{start:{line:157,column:20},end:{line:157,column:45}},68:{start:{line:161,column:4},end:{line:218,column:61}},69:{start:{line:163,column:6},end:{line:163,column:71}},70:{start:{line:163,column:29},end:{line:163,column:71}},71:{start:{line:164,column:6},end:{line:167,column:7}},72:{start:{line:165,column:8},end:{line:165,column:75}},73:{start:{line:166,column:8},end:{line:166,column:66}},74:{start:{line:170,column:35},end:{line:177,column:7}},75:{start:{line:171,column:21},end:{line:171,column:41}},76:{start:{line:172,column:21},end:{line:172,column:103}},77:{start:{line:173,column:19},end:{line:173,column:97}},78:{start:{line:174,column:27},end:{line:174,column:63}},79:{start:{line:175,column:27},end:{line:175,column:63}},80:{start:{line:176,column:8},end:{line:176,column:68}},81:{start:{line:180,column:24},end:{line:180,column:26}},82:{start:{line:181,column:6},end:{line:185,column:10}},83:{start:{line:182,column:22},end:{line:182,column:53}},84:{start:{line:183,column:25},end:{line:183,column:102}},85:{start:{line:183,column:67},end:{line:183,column:100}},86:{start:{line:184,column:8},end:{line:184,column:80}},87:{start:{line:184,column:47},end:{line:184,column:75}},88:{start:{line:186,column:6},end:{line:186,column:88}},89:{start:{line:186,column:34},end:{line:186,column:88}},90:{start:{line:188,column:19},end:{line:188,column:21}},91:{start:{line:189,column:29},end:{line:193,column:9}},92:{start:{line:190,column:18},end:{line:190,column:112}},93:{start:{line:190,column:90},end:{line:190,column:109}},94:{start:{line:191,column:8},end:{line:192,column:25}},95:{start:{line:191,column:14},end:{line:191,column:23}},96:{start:{line:192,column:13},end:{line:192,column:25}},97:{start:{line:194,column:26},end:{line:194,column:69}},98:{start:{line:194,column:57},end:{line:194,column:67}},99:{start:{line:196,column:6},end:{line:197,column:35}},100:{start:{line:196,column:33},end:{line:196,column:60}},101:{start:{line:197,column:11},end:{line:197,column:35}},102:{start:{line:201,column:9},end:{line:218,column:61}},103:{start:{line:203,column:6},end:{line:203,column:70}},104:{start:{line:203,column:28},end:{line:203,column:70}},105:{start:{line:204,column:6},end:{line:204,column:92}},106:{start:{line:204,column:57},end:{line:204,column:92}},107:{start:{line:206,column:22},end:{line:206,column:50}},108:{start:{line:207,column:17},end:{line:207,column:86}},109:{start:{line:209,column:6},end:{line:216,column:61}},110:{start:{line:210,column:8},end:{line:214,column:10}},111:{start:{line:216,column:11},end:{line:216,column:61}},112:{start:{line:218,column:9},end:{line:218,column:61}},113:{start:{line:220,column:4},end:{line:220,column:29}},114:{start:{line:231,column:4},end:{line:231,column:68}},115:{start:{line:231,column:26},end:{line:231,column:68}},116:{start:{line:233,column:17},end:{line:233,column:26}},117:{start:{line:235,column:23},end:{line:241,column:7}},118:{start:{line:236,column:25},end:{line:236,column:52}},119:{start:{line:237,column:24},end:{line:237,column:126}},120:{start:{line:238,column:20},end:{line:238,column:56}},121:{start:{line:240,column:6},end:{line:240,column:50}},122:{start:{line:243,column:4},end:{line:243,column:89}},123:{start:{line:255,column:4},end:{line:255,column:72}},124:{start:{line:255,column:25},end:{line:255,column:72}},125:{start:{line:257,column:17},end:{line:257,column:26}},126:{start:{line:259,column:28},end:{line:259,column:30}},127:{start:{line:260,column:23},end:{line:260,column:25}},128:{start:{line:261,column:4},end:{line:271,column:8}},129:{start:{line:262,column:20},end:{line:262,column:51}},130:{start:{line:263,column:23},end:{line:269,column:8}},131:{start:{line:264,column:8},end:{line:268,column:9}},132:{start:{line:264,column:46},end:{line:264,column:58}},133:{start:{line:266,column:10},end:{line:266,column:62}},134:{start:{line:267,column:10},end:{line:267,column:23}},135:{start:{line:270,column:6},end:{line:270,column:85}},136:{start:{line:270,column:51},end:{line:270,column:80}},137:{start:{line:273,column:21},end:{line:282,column:7}},138:{start:{line:274,column:20},end:{line:280,column:7}},139:{start:{line:281,column:6},end:{line:281,column:52}},140:{start:{line:284,column:4},end:{line:284,column:39}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:20,column:2},end:{line:20,column:3}},loc:{start:{line:20,column:73},end:{line:55,column:3}},line:20},1:{name:"(anonymous_1)",decl:{start:{line:64,column:2},end:{line:64,column:3}},loc:{start:{line:64,column:47},end:{line:77,column:3}},line:64},2:{name:"(anonymous_2)",decl:{start:{line:71,column:46},end:{line:71,column:47}},loc:{start:{line:71,column:53},end:{line:73,column:7}},line:71},3:{name:"(anonymous_3)",decl:{start:{line:86,column:2},end:{line:86,column:3}},loc:{start:{line:86,column:49},end:{line:143,column:3}},line:86},4:{name:"(anonymous_4)",decl:{start:{line:112,column:57},end:{line:112,column:58}},loc:{start:{line:112,column:81},end:{line:118,column:7}},line:112},5:{name:"(anonymous_5)",decl:{start:{line:152,column:2},end:{line:152,column:3}},loc:{start:{line:152,column:52},end:{line:221,column:3}},line:152},6:{name:"(anonymous_6)",decl:{start:{line:170,column:35},end:{line:170,column:36}},loc:{start:{line:170,column:74},end:{line:177,column:7}},line:170},7:{name:"(anonymous_7)",decl:{start:{line:181,column:46},end:{line:181,column:47}},loc:{start:{line:181,column:60},end:{line:185,column:7}},line:181},8:{name:"(anonymous_8)",decl:{start:{line:183,column:59},end:{line:183,column:60}},loc:{start:{line:183,column:67},end:{line:183,column:100}},line:183},9:{name:"(anonymous_9)",decl:{start:{line:184,column:39},end:{line:184,column:40}},loc:{start:{line:184,column:47},end:{line:184,column:75}},line:184},10:{name:"(anonymous_10)",decl:{start:{line:189,column:62},end:{line:189,column:63}},loc:{start:{line:189,column:77},end:{line:193,column:7}},line:189},11:{name:"(anonymous_11)",decl:{start:{line:190,column:81},end:{line:190,column:82}},loc:{start:{line:190,column:88},end:{line:190,column:111}},line:190},12:{name:"(anonymous_12)",decl:{start:{line:194,column:49},end:{line:194,column:50}},loc:{start:{line:194,column:57},end:{line:194,column:67}},line:194},13:{name:"(anonymous_13)",decl:{start:{line:230,column:2},end:{line:230,column:3}},loc:{start:{line:230,column:45},end:{line:244,column:3}},line:230},14:{name:"(anonymous_14)",decl:{start:{line:235,column:63},end:{line:235,column:64}},loc:{start:{line:235,column:82},end:{line:241,column:5}},line:235},15:{name:"(anonymous_15)",decl:{start:{line:254,column:2},end:{line:254,column:3}},loc:{start:{line:254,column:58},end:{line:285,column:3}},line:254},16:{name:"(anonymous_16)",decl:{start:{line:261,column:43},end:{line:261,column:44}},loc:{start:{line:261,column:57},end:{line:271,column:5}},line:261},17:{name:"(anonymous_17)",decl:{start:{line:263,column:52},end:{line:263,column:53}},loc:{start:{line:263,column:59},end:{line:269,column:7}},line:263},18:{name:"(anonymous_18)",decl:{start:{line:270,column:43},end:{line:270,column:44}},loc:{start:{line:270,column:51},end:{line:270,column:80}},line:270},19:{name:"(anonymous_19)",decl:{start:{line:273,column:60},end:{line:273,column:61}},loc:{start:{line:273,column:78},end:{line:282,column:5}},line:273}},branchMap:{0:{loc:{start:{line:20,column:36},end:{line:20,column:51}},type:"default-arg",locations:[{start:{line:20,column:47},end:{line:20,column:51}}],line:20},1:{loc:{start:{line:20,column:53},end:{line:20,column:70}},type:"default-arg",locations:[{start:{line:20,column:68},end:{line:20,column:70}}],line:20},2:{loc:{start:{line:23,column:4},end:{line:54,column:51}},type:"if",locations:[{start:{line:23,column:4},end:{line:54,column:51}},{start:{line:23,column:4},end:{line:54,column:51}}],line:23},3:{loc:{start:{line:24,column:6},end:{line:24,column:77}},type:"if",locations:[{start:{line:24,column:6},end:{line:24,column:77}},{start:{line:24,column:6},end:{line:24,column:77}}],line:24},4:{loc:{start:{line:32,column:9},end:{line:54,column:51}},type:"if",locations:[{start:{line:32,column:9},end:{line:54,column:51}},{start:{line:32,column:9},end:{line:54,column:51}}],line:32},5:{loc:{start:{line:32,column:13},end:{line:32,column:58}},type:"binary-expr",locations:[{start:{line:32,column:13},end:{line:32,column:33}},{start:{line:32,column:37},end:{line:32,column:58}}],line:32},6:{loc:{start:{line:33,column:22},end:{line:33,column:59}},type:"cond-expr",locations:[{start:{line:33,column:47},end:{line:33,column:51}},{start:{line:33,column:54},end:{line:33,column:59}}],line:33},7:{loc:{start:{line:34,column:22},end:{line:34,column:113}},type:"cond-expr",locations:[{start:{line:34,column:47},end:{line:34,column:73}},{start:{line:34,column:76},end:{line:34,column:113}}],line:34},8:{loc:{start:{line:43,column:6},end:{line:46,column:7}},type:"if",locations:[{start:{line:43,column:6},end:{line:46,column:7}},{start:{line:43,column:6},end:{line:46,column:7}}],line:43},9:{loc:{start:{line:69,column:4},end:{line:74,column:5}},type:"if",locations:[{start:{line:69,column:4},end:{line:74,column:5}},{start:{line:69,column:4},end:{line:74,column:5}}],line:69},10:{loc:{start:{line:69,column:7},end:{line:69,column:45}},type:"binary-expr",locations:[{start:{line:69,column:7},end:{line:69,column:23}},{start:{line:69,column:27},end:{line:69,column:45}}],line:69},11:{loc:{start:{line:70,column:6},end:{line:70,column:60}},type:"if",locations:[{start:{line:70,column:6},end:{line:70,column:60}},{start:{line:70,column:6},end:{line:70,column:60}}],line:70},12:{loc:{start:{line:90,column:4},end:{line:90,column:52}},type:"if",locations:[{start:{line:90,column:4},end:{line:90,column:52}},{start:{line:90,column:4},end:{line:90,column:52}}],line:90},13:{loc:{start:{line:95,column:4},end:{line:140,column:53}},type:"if",locations:[{start:{line:95,column:4},end:{line:140,column:53}},{start:{line:95,column:4},end:{line:140,column:53}}],line:95},14:{loc:{start:{line:97,column:6},end:{line:101,column:7}},type:"if",locations:[{start:{line:97,column:6},end:{line:101,column:7}},{start:{line:97,column:6},end:{line:101,column:7}}],line:97},15:{loc:{start:{line:104,column:6},end:{line:110,column:7}},type:"if",locations:[{start:{line:104,column:6},end:{line:110,column:7}},{start:{line:104,column:6},end:{line:110,column:7}}],line:104},16:{loc:{start:{line:106,column:8},end:{line:109,column:9}},type:"if",locations:[{start:{line:106,column:8},end:{line:109,column:9}},{start:{line:106,column:8},end:{line:109,column:9}}],line:106},17:{loc:{start:{line:121,column:6},end:{line:125,column:7}},type:"if",locations:[{start:{line:121,column:6},end:{line:125,column:7}},{start:{line:121,column:6},end:{line:125,column:7}}],line:121},18:{loc:{start:{line:129,column:9},end:{line:140,column:53}},type:"if",locations:[{start:{line:129,column:9},end:{line:140,column:53}},{start:{line:129,column:9},end:{line:140,column:53}}],line:129},19:{loc:{start:{line:130,column:6},end:{line:137,column:61}},type:"if",locations:[{start:{line:130,column:6},end:{line:137,column:61}},{start:{line:130,column:6},end:{line:137,column:61}}],line:130},20:{loc:{start:{line:153,column:4},end:{line:153,column:93}},type:"if",locations:[{start:{line:153,column:4},end:{line:153,column:93}},{start:{line:153,column:4},end:{line:153,column:93}}],line:153},21:{loc:{start:{line:154,column:4},end:{line:154,column:90}},type:"if",locations:[{start:{line:154,column:4},end:{line:154,column:90}},{start:{line:154,column:4},end:{line:154,column:90}}],line:154},22:{loc:{start:{line:161,column:4},end:{line:218,column:61}},type:"if",locations:[{start:{line:161,column:4},end:{line:218,column:61}},{start:{line:161,column:4},end:{line:218,column:61}}],line:161},23:{loc:{start:{line:163,column:6},end:{line:163,column:71}},type:"if",locations:[{start:{line:163,column:6},end:{line:163,column:71}},{start:{line:163,column:6},end:{line:163,column:71}}],line:163},24:{loc:{start:{line:164,column:6},end:{line:167,column:7}},type:"if",locations:[{start:{line:164,column:6},end:{line:167,column:7}},{start:{line:164,column:6},end:{line:167,column:7}}],line:164},25:{loc:{start:{line:172,column:21},end:{line:172,column:103}},type:"cond-expr",locations:[{start:{line:172,column:70},end:{line:172,column:91}},{start:{line:172,column:94},end:{line:172,column:103}}],line:172},26:{loc:{start:{line:173,column:19},end:{line:173,column:97}},type:"cond-expr",locations:[{start:{line:173,column:66},end:{line:173,column:85}},{start:{line:173,column:88},end:{line:173,column:97}}],line:173},27:{loc:{start:{line:186,column:6},end:{line:186,column:88}},type:"if",locations:[{start:{line:186,column:6},end:{line:186,column:88}},{start:{line:186,column:6},end:{line:186,column:88}}],line:186},28:{loc:{start:{line:191,column:8},end:{line:192,column:25}},type:"if",locations:[{start:{line:191,column:8},end:{line:192,column:25}},{start:{line:191,column:8},end:{line:192,column:25}}],line:191},29:{loc:{start:{line:196,column:6},end:{line:197,column:35}},type:"if",locations:[{start:{line:196,column:6},end:{line:197,column:35}},{start:{line:196,column:6},end:{line:197,column:35}}],line:196},30:{loc:{start:{line:201,column:9},end:{line:218,column:61}},type:"if",locations:[{start:{line:201,column:9},end:{line:218,column:61}},{start:{line:201,column:9},end:{line:218,column:61}}],line:201},31:{loc:{start:{line:203,column:6},end:{line:203,column:70}},type:"if",locations:[{start:{line:203,column:6},end:{line:203,column:70}},{start:{line:203,column:6},end:{line:203,column:70}}],line:203},32:{loc:{start:{line:204,column:6},end:{line:204,column:92}},type:"if",locations:[{start:{line:204,column:6},end:{line:204,column:92}},{start:{line:204,column:6},end:{line:204,column:92}}],line:204},33:{loc:{start:{line:207,column:17},end:{line:207,column:86}},type:"cond-expr",locations:[{start:{line:207,column:62},end:{line:207,column:79}},{start:{line:207,column:82},end:{line:207,column:86}}],line:207},34:{loc:{start:{line:209,column:6},end:{line:216,column:61}},type:"if",locations:[{start:{line:209,column:6},end:{line:216,column:61}},{start:{line:209,column:6},end:{line:216,column:61}}],line:209},35:{loc:{start:{line:231,column:4},end:{line:231,column:68}},type:"if",locations:[{start:{line:231,column:4},end:{line:231,column:68}},{start:{line:231,column:4},end:{line:231,column:68}}],line:231},36:{loc:{start:{line:255,column:4},end:{line:255,column:72}},type:"if",locations:[{start:{line:255,column:4},end:{line:255,column:72}},{start:{line:255,column:4},end:{line:255,column:72}}],line:255},37:{loc:{start:{line:264,column:8},end:{line:268,column:9}},type:"if",locations:[{start:{line:264,column:8},end:{line:268,column:9}},{start:{line:264,column:8},end:{line:268,column:9}}],line:264}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0,106:0,107:0,108:0,109:0,110:0,111:0,112:0,113:0,114:0,115:0,116:0,117:0,118:0,119:0,120:0,121:0,122:0,123:0,124:0,125:0,126:0,127:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:0,136:0,137:0,138:0,139:0,140:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0},b:{0:[0],1:[0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0,0],25:[0,0],26:[0,0],27:[0,0],28:[0,0],29:[0,0],30:[0,0],31:[0,0],32:[0,0],33:[0,0],34:[0,0],35:[0,0],36:[0,0],37:[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});return i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)}(),an=function(n){function e(){return u()(this,e),h()(this,v()(e).apply(this,arguments))}return w()(e,n),a()(e,null,[{key:"generateKey",value:function(){var n=r()(o.a.mark(function n(e){var t,l,i,r,c,u,s,a,m,d,f,p,y,h,b;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(t=e.params,l=e.passphrase,i=void 0===l?(sn.b[0][0]++,null):l,r=e.encryptOptions,c=void 0===r?(sn.b[1][0]++,{}):r,sn.f[0]++,sn.s[0]++,u=j(),sn.s[1]++,"session"!==t.type){n.next=26;break}if(sn.b[2][0]++,sn.s[2]++,t.length){n.next=13;break}throw sn.b[3][0]++,sn.s[3]++,new Error("params.length must be specified");case 13:sn.b[3][1]++;case 14:return sn.s[4]++,n.next=17,u.random.getRandomBytes(t.length);case 17:return s=n.sent,sn.s[5]++,n.next=21,T(s);case 21:return a=n.sent,sn.s[6]++,n.abrupt("return",{key:s,keyId:a});case 26:if(sn.b[2][1]++,sn.s[7]++,sn.b[5][0]++,"ec"!==t.type&&(sn.b[5][1]++,"rsa"!==t.type)){n.next=58;break}return sn.b[4][0]++,sn.s[8]++,m="ec"===t.type?(sn.b[6][0]++,"EC"):(sn.b[6][1]++,"RSA"),sn.s[9]++,d="ec"===t.type?(sn.b[7][0]++,{namedCurve:t.curve}):(sn.b[7][1]++,{modulusLength:t.modulusLength}),sn.s[10]++,n.next=35,u.pkc.generateKey(m,d);case 35:return f=n.sent,sn.s[11]++,n.next=39,B(new u.Key("jwk",f.publicKey));case 39:if(p=n.sent,sn.s[12]++,y=new u.Key("jwk",f.publicKey),sn.s[13]++,h=new u.Key("jwk",f.privateKey),sn.s[14]++,!i){n.next=53;break}return sn.b[8][0]++,sn.s[15]++,n.next=48,h.export("der",{encryptParams:Object.assign({passphrase:i},c)});case 48:b=n.sent,sn.s[16]++,h=new u.Key("der",b),n.next=54;break;case 53:sn.b[8][1]++;case 54:return sn.s[17]++,n.abrupt("return",{publicKey:y,privateKey:h,keyId:p});case 58:throw sn.b[4][1]++,sn.s[18]++,new Error("JscuUnsupportedKeyType");case 61:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()},{key:"importKey",value:function(){var n=r()(o.a.mark(function n(e,t,l){var i,r;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(sn.f[1]++,sn.s[19]++,i=j(),sn.s[20]++,r=new i.Key(e,t),sn.s[21]++,sn.b[10][0]++,!r.isPrivate||(sn.b[10][1]++,!r.isEncrypted)){n.next=19;break}if(sn.b[9][0]++,sn.s[22]++,l){n.next=13;break}throw sn.b[11][0]++,sn.s[23]++,new Error("PassphraseRequired");case 13:sn.b[11][1]++;case 14:return sn.s[24]++,n.next=17,r.decrypt(l).catch(function(n){throw sn.f[2]++,sn.s[25]++,new Error("FailedToDecryptPrivateKey: ".concat(n.message))});case 17:n.next=20;break;case 19:sn.b[9][1]++;case 20:return sn.s[26]++,n.abrupt("return",r);case 22:case"end":return n.stop()}},n,this)}));return function(e,t,l){return n.apply(this,arguments)}}()},{key:"encrypt",value:function(){var n=r()(o.a.mark(function n(t){var l,i,c,u,s,a,m,d,f,p,y,h,b;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(l=t.message,i=t.keys,c=t.options,sn.f[3]++,sn.s[27]++,u=j(),sn.s[28]++,void 0===c?(sn.b[12][0]++,sn.s[29]++,c={}):sn.b[12][1]++,sn.s[30]++,!i.publicKeys){n.next=67;break}if(sn.b[13][0]++,sn.s[31]++,!c.privateKeyPass){n.next=23;break}return sn.b[14][0]++,sn.s[32]++,n.next=14,e.importKey("pem",c.privateKeyPass.privateKey,c.privateKeyPass.passphrase);case 14:return c.privateKey=n.sent,sn.s[33]++,n.next=18,c.privateKey.export("jwk");case 18:c.privateKey=n.sent,sn.s[34]++,delete c.privateKeyPass,n.next=24;break;case 23:sn.b[14][1]++;case 24:if(sn.s[35]++,c.privateKey){n.next=45;break}return sn.b[15][0]++,sn.s[36]++,n.next=30,i.publicKeys[0].export("jwk");case 30:if(m=n.sent,sn.s[37]++,"EC"!==m.kty){n.next=42;break}return sn.b[16][0]++,sn.s[38]++,n.next=37,u.pkc.generateKey("EC",{namedCurve:m.crv});case 37:d=n.sent,sn.s[39]++,c.privateKey=d.privateKey,n.next=43;break;case 42:sn.b[16][1]++;case 43:n.next=46;break;case 45:sn.b[15][1]++;case 46:return sn.s[40]++,n.next=49,Promise.all(i.publicKeys.map(function(){var n=r()(o.a.mark(function n(e){var t,i,r;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return sn.f[4]++,sn.s[41]++,n.next=4,e.export("jwk");case 4:return t=n.sent,sn.s[42]++,n.next=8,u.pkc.encrypt(l.binary,t,c);case 8:return i=n.sent,sn.s[43]++,r=new Uint8Array(i.data),sn.s[44]++,delete i.data,sn.s[45]++,n.t0=q,n.t1=r,n.next=17,B(e);case 17:return n.t2=n.sent,n.t3=i,n.abrupt("return",(0,n.t0)(n.t1,n.t2,n.t3));case 20:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()));case 49:if(s=n.sent,sn.s[46]++,void 0===c.privateKey){n.next=62;break}return sn.b[17][0]++,sn.s[47]++,f=new u.Key("jwk",c.privateKey),sn.s[48]++,n.next=57,f.export("der",{outputPublic:!0});case 57:c.publicKey=n.sent,sn.s[49]++,delete c.privateKey,n.next=63;break;case 62:sn.b[17][1]++;case 63:sn.s[50]++,a={message:W("jscu","public_key_encrypt",s,c)},n.next=101;break;case 67:if(sn.b[13][1]++,sn.s[51]++,!i.sessionKey){n.next=98;break}if(sn.b[18][0]++,sn.s[52]++,"AES-GCM"!==c.name){n.next=91;break}return sn.b[19][0]++,sn.s[53]++,n.next=77,u.random.getRandomBytes(_.jscu.ivLengthAesGcm);case 77:return p=n.sent,sn.s[54]++,n.next=81,u.aes.encrypt(l.binary,i.sessionKey,{name:c.name,iv:p});case 81:return y=n.sent,sn.s[55]++,n.next=85,T(i.sessionKey);case 85:h=n.sent,sn.s[56]++,b=q(y,h,{iv:p}),sn.s[57]++,s=[b],n.next=94;break;case 91:throw sn.b[19][1]++,sn.s[58]++,new Error("JscuInvalidEncryptionAlgorithm");case 94:sn.s[59]++,a={message:W("jscu","session_key_encrypt",s,c)},n.next=101;break;case 98:throw sn.b[18][1]++,sn.s[60]++,new Error("JscuInvalidEncryptionKey");case 101:return sn.s[61]++,n.abrupt("return",a);case 103:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()},{key:"decrypt",value:function(){var n=r()(o.a.mark(function n(t){var l,i,c,u,s,a,m,d,f,y,h,b,v;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(l=t.encrypted,i=t.keys,c=t.options,sn.f[5]++,sn.s[62]++,void 0!==l.message){n.next=9;break}throw sn.b[20][0]++,sn.s[63]++,new Error("InvalidEncryptedMessage");case 9:sn.b[20][1]++;case 10:if(sn.s[64]++,l.message.message instanceof Array){n.next=17;break}throw sn.b[21][0]++,sn.s[65]++,new Error("NonArrayMessage");case 17:sn.b[21][1]++;case 18:if(sn.s[66]++,u=j(),sn.s[67]++,s=l.message.keyType,sn.s[68]++,"public_key_encrypt"!==s){n.next=77;break}if(sn.b[22][0]++,sn.s[69]++,i.privateKeys){n.next=30;break}throw sn.b[23][0]++,sn.s[70]++,new Error("JscuPrivateKeyRequired");case 30:sn.b[23][1]++;case 31:if(sn.s[71]++,!c.publicKey){n.next=44;break}return sn.b[24][0]++,sn.s[72]++,n.next=37,e.importKey("der",c.publicKey);case 37:return c.publicKey=n.sent,sn.s[73]++,n.next=41,c.publicKey.export("jwk");case 41:c.publicKey=n.sent,n.next=45;break;case 44:sn.b[24][1]++;case 45:return sn.s[74]++,m=function(){var n=r()(o.a.mark(function n(e,t){var l,i,r,s,a;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return sn.f[6]++,sn.s[75]++,l=e.toBuffer(),sn.s[76]++,i=void 0!==e.params.salt?(sn.b[25][0]++,e.params.salt):void sn.b[25][1]++,sn.s[77]++,r=void 0!==e.params.iv?(sn.b[26][0]++,e.params.iv):void sn.b[26][1]++,sn.s[78]++,n.next=7,t.export("jwk");case 7:return s=n.sent,sn.s[79]++,a=Object.assign({salt:i,iv:r},c),sn.s[80]++,n.next=12,u.pkc.decrypt(l,s,a);case 12:return n.abrupt("return",n.sent);case 13:case"end":return n.stop()}},n,this)}));return function(e,t){return n.apply(this,arguments)}}(),sn.s[81]++,d=[],sn.s[82]++,n.next=51,Promise.all(i.privateKeys.map(function(){var n=r()(o.a.mark(function n(e){var t,i;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return sn.f[7]++,sn.s[83]++,n.next=4,B(e);case 4:t=n.sent,sn.s[84]++,i=l.message.message.filter(function(n){return sn.f[8]++,sn.s[85]++,n.keyId.toHex()===t.toHex()}),sn.s[86]++,d.push.apply(d,p()(i.map(function(n){return sn.f[9]++,sn.s[87]++,{message:n,privateKey:e}})));case 8:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()));case 51:if(sn.s[88]++,0!==d.length){n.next=58;break}throw sn.b[27][0]++,sn.s[89]++,new Error("UnableToDecryptWithGivenPrivateKey");case 58:sn.b[27][1]++;case 59:return sn.s[90]++,f="",sn.s[91]++,n.next=63,Promise.all(d.map(function(){var n=r()(o.a.mark(function n(e){var t;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return sn.f[10]++,sn.s[92]++,n.next=4,m(e.message,e.privateKey).catch(function(n){sn.f[11]++,sn.s[93]++,f=n.message});case 4:if(t=n.sent,sn.s[94]++,!t){n.next=12;break}return sn.b[28][0]++,sn.s[95]++,n.abrupt("return",t);case 12:return sn.b[28][1]++,sn.s[96]++,n.abrupt("return",null);case 15:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()));case 63:if(y=n.sent,sn.s[97]++,h=y.filter(function(n){return sn.f[12]++,sn.s[98]++,null!==n}),sn.s[99]++,!(h.length>0)){n.next=72;break}sn.b[29][0]++,sn.s[100]++,a=h[0],n.next=75;break;case 72:throw sn.b[29][1]++,sn.s[101]++,new Error(f);case 75:n.next=116;break;case 77:if(sn.b[22][1]++,sn.s[102]++,"session_key_encrypt"!==s){n.next=113;break}if(sn.b[30][0]++,sn.s[103]++,i.sessionKey){n.next=88;break}throw sn.b[31][0]++,sn.s[104]++,new Error("JscuSessionKeyRequired");case 88:sn.b[31][1]++;case 89:if(sn.s[105]++,l.message.message instanceof Array){n.next=96;break}throw sn.b[32][0]++,sn.s[106]++,new Error("NonArrayMessage");case 96:sn.b[32][1]++;case 97:if(sn.s[107]++,b=l.message.message[0],sn.s[108]++,v=void 0!==b.params.iv?(sn.b[33][0]++,b.params.iv):(sn.b[33][1]++,null),sn.s[109]++,"AES-GCM"!==c.name){n.next=108;break}return sn.b[34][0]++,sn.s[110]++,n.next=105,u.aes.decrypt(b.toBuffer(),i.sessionKey,{name:i.sessionKey.algorithm,iv:v});case 105:a=n.sent,n.next=111;break;case 108:throw sn.b[34][1]++,sn.s[111]++,new Error("JscuInvalidEncryptionAlgorithm");case 111:n.next=116;break;case 113:throw sn.b[30][1]++,sn.s[112]++,new Error("JscuInvalidKeyType_NotSessionKey");case 116:return sn.s[113]++,n.abrupt("return",{data:a});case 118:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()},{key:"sign",value:function(){var n=r()(o.a.mark(function n(e){var t,l,i,c,u;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(t=e.message,l=e.keys,i=e.options,sn.f[13]++,sn.s[114]++,l.privateKeys){n.next=9;break}throw sn.b[35][0]++,sn.s[115]++,new Error("JscuInvalidSigningKeys");case 9:sn.b[35][1]++;case 10:return sn.s[116]++,c=j(),sn.s[117]++,n.next=14,Promise.all(l.privateKeys.map(function(){var n=r()(o.a.mark(function n(e){var l,r,u;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return sn.f[14]++,sn.s[118]++,n.next=4,e.export("jwk");case 4:return l=n.sent,sn.s[119]++,n.next=8,c.pkc.sign(t.binary,l,i.hash,Object.assign({format:"raw"},i));case 8:return r=n.sent,sn.s[120]++,n.next=12,B(e);case 12:return u=n.sent,sn.s[121]++,n.abrupt("return",cn(r,u));case 15:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()));case 14:return u=n.sent,sn.s[122]++,n.abrupt("return",{signature:ln("jscu","public_key_sign",u,i)});case 17:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()},{key:"verify",value:function(){var n=r()(o.a.mark(function n(e){var t,l,i,c,u,s,a,m;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(t=e.message,l=e.signature,i=e.keys,c=e.options,sn.f[15]++,sn.s[123]++,i.publicKeys){n.next=9;break}throw sn.b[36][0]++,sn.s[124]++,new Error("JscuInvalidVerificationKeys");case 9:sn.b[36][1]++;case 10:return sn.s[125]++,u=j(),sn.s[126]++,s=[],sn.s[127]++,a=[],sn.s[128]++,n.next=16,Promise.all(i.publicKeys.map(function(){var n=r()(o.a.mark(function n(e){var t,i;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return sn.f[16]++,sn.s[129]++,n.next=4,B(e);case 4:t=n.sent,sn.s[130]++,i=l.signatures.filter(function(n){return sn.f[17]++,sn.s[131]++,n.keyId.toHex()===t.toHex()?(sn.b[37][0]++,sn.s[132]++,!0):(sn.b[37][1]++,sn.s[133]++,a.push({keyId:n.keyId,valid:void 0}),sn.s[134]++,!1)}),sn.s[135]++,s.push.apply(s,p()(i.map(function(n){return sn.f[18]++,sn.s[136]++,{signature:n,publicKey:e}})));case 8:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()));case 16:return sn.s[137]++,n.next=19,Promise.all(s.map(function(){var n=r()(o.a.mark(function n(e){var l;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return sn.f[19]++,sn.s[138]++,n.t0=u.pkc,n.t1=t.binary,n.t2=e.signature.toBuffer(),n.next=7,e.publicKey.export("jwk");case 7:return n.t3=n.sent,n.t4=c.hash,n.t5=Object.assign({format:"raw"},c),n.next=12,n.t0.verify.call(n.t0,n.t1,n.t2,n.t3,n.t4,n.t5);case 12:return l=n.sent,sn.s[139]++,n.abrupt("return",{keyId:e.signature.keyId,valid:l});case 15:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()));case 19:return m=n.sent,sn.s[140]++,n.abrupt("return",m.concat(a));case 22:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()}]),e}(k),mn=function(){var n="/Users/jun/ProjectJavaScript/cascade/src/suite_openpgp.js",e="19726c9d482277c78f72880a2489f6194abeefb5",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/suite_openpgp.js",statementMap:{0:{start:{line:22,column:20},end:{line:22,column:32}},1:{start:{line:25,column:4},end:{line:49,column:5}},2:{start:{line:27,column:6},end:{line:32,column:8}},3:{start:{line:33,column:6},end:{line:33,column:12}},4:{start:{line:35,column:6},end:{line:40,column:8}},5:{start:{line:41,column:6},end:{line:41,column:12}},6:{start:{line:43,column:6},end:{line:45,column:8}},7:{start:{line:46,column:6},end:{line:46,column:12}},8:{start:{line:48,column:6},end:{line:48,column:49}},9:{start:{line:51,column:4},end:{line:66,column:5}},10:{start:{line:52,column:17},end:{line:52,column:51}},11:{start:{line:53,column:18},end:{line:53,column:74}},12:{start:{line:53,column:46},end:{line:53,column:73}},13:{start:{line:54,column:6},end:{line:54,column:47}},14:{start:{line:54,column:30},end:{line:54,column:47}},15:{start:{line:56,column:6},end:{line:60,column:8}},16:{start:{line:62,column:9},end:{line:66,column:5}},17:{start:{line:63,column:21},end:{line:63,column:79}},18:{start:{line:64,column:20},end:{line:64,column:54}},19:{start:{line:65,column:6},end:{line:65,column:34}},20:{start:{line:70,column:20},end:{line:70,column:32}},21:{start:{line:72,column:17},end:{line:74,column:35}},22:{start:{line:76,column:4},end:{line:76,column:73}},23:{start:{line:76,column:17},end:{line:76,column:73}},24:{start:{line:78,column:21},end:{line:83,column:7}},25:{start:{line:79,column:6},end:{line:81,column:7}},26:{start:{line:80,column:8},end:{line:80,column:44}},27:{start:{line:82,column:6},end:{line:82,column:23}},28:{start:{line:85,column:4},end:{line:85,column:58}},29:{start:{line:98,column:20},end:{line:98,column:32}},30:{start:{line:101,column:4},end:{line:101,column:97}},31:{start:{line:101,column:28},end:{line:101,column:97}},32:{start:{line:102,column:4},end:{line:102,column:26}},33:{start:{line:105,column:19},end:{line:105,column:61}},34:{start:{line:109,column:4},end:{line:111,column:88}},35:{start:{line:111,column:57},end:{line:111,column:88}},36:{start:{line:116,column:4},end:{line:152,column:49}},37:{start:{line:117,column:18},end:{line:122,column:7}},38:{start:{line:123,column:6},end:{line:123,column:69}},39:{start:{line:126,column:32},end:{line:126,column:96}},40:{start:{line:126,column:85},end:{line:126,column:95}},41:{start:{line:127,column:29},end:{line:127,column:31}},42:{start:{line:128,column:6},end:{line:128,column:115}},43:{start:{line:128,column:34},end:{line:128,column:112}},44:{start:{line:128,column:60},end:{line:128,column:109}},45:{start:{line:129,column:30},end:{line:129,column:117}},46:{start:{line:129,column:61},end:{line:129,column:116}},47:{start:{line:130,column:31},end:{line:132,column:7}},48:{start:{line:133,column:6},end:{line:133,column:113}},49:{start:{line:135,column:9},end:{line:152,column:49}},50:{start:{line:136,column:18},end:{line:141,column:7}},51:{start:{line:142,column:6},end:{line:142,column:69}},52:{start:{line:145,column:31},end:{line:147,column:7}},53:{start:{line:148,column:6},end:{line:150,column:9}},54:{start:{line:152,column:9},end:{line:152,column:49}},55:{start:{line:154,column:23},end:{line:154,column:25}},56:{start:{line:155,column:4},end:{line:158,column:5}},57:{start:{line:156,column:34},end:{line:156,column:103}},58:{start:{line:157,column:6},end:{line:157,column:105}},59:{start:{line:160,column:4},end:{line:160,column:56}},60:{start:{line:172,column:20},end:{line:172,column:32}},61:{start:{line:174,column:20},end:{line:174,column:94}},62:{start:{line:177,column:4},end:{line:192,column:5}},63:{start:{line:178,column:6},end:{line:183,column:19}},64:{start:{line:185,column:9},end:{line:192,column:5}},65:{start:{line:186,column:6},end:{line:191,column:19}},66:{start:{line:194,column:4},end:{line:194,column:52}},67:{start:{line:196,column:4},end:{line:204,column:5}},68:{start:{line:197,column:6},end:{line:203,column:9}},69:{start:{line:198,column:22},end:{line:198,column:39}},70:{start:{line:199,column:21},end:{line:199,column:91}},71:{start:{line:199,column:55},end:{line:199,column:90}},72:{start:{line:200,column:25},end:{line:200,column:107}},73:{start:{line:200,column:44},end:{line:200,column:105}},74:{start:{line:201,column:8},end:{line:201,column:87}},75:{start:{line:201,column:35},end:{line:201,column:87}},76:{start:{line:202,column:8},end:{line:202,column:77}},77:{start:{line:206,column:4},end:{line:206,column:21}},78:{start:{line:218,column:20},end:{line:218,column:32}},79:{start:{line:221,column:4},end:{line:221,column:28}},80:{start:{line:222,column:4},end:{line:222,column:26}},81:{start:{line:224,column:19},end:{line:224,column:61}},82:{start:{line:226,column:4},end:{line:226,column:64}},83:{start:{line:226,column:26},end:{line:226,column:64}},84:{start:{line:227,column:16},end:{line:230,column:5}},85:{start:{line:231,column:22},end:{line:231,column:69}},86:{start:{line:232,column:32},end:{line:232,column:106}},87:{start:{line:233,column:4},end:{line:233,column:95}},88:{start:{line:245,column:20},end:{line:245,column:32}},89:{start:{line:247,column:4},end:{line:247,column:68}},90:{start:{line:247,column:25},end:{line:247,column:68}},91:{start:{line:248,column:17},end:{line:248,column:81}},92:{start:{line:249,column:19},end:{line:249,column:61}},93:{start:{line:251,column:21},end:{line:257,column:7}},94:{start:{line:252,column:18},end:{line:252,column:43}},95:{start:{line:253,column:30},end:{line:253,column:83}},96:{start:{line:254,column:28},end:{line:254,column:53}},97:{start:{line:255,column:20},end:{line:255,column:131}},98:{start:{line:256,column:6},end:{line:256,column:77}},99:{start:{line:259,column:4},end:{line:259,column:44}},100:{start:{line:263,column:4},end:{line:263,column:80}},101:{start:{line:263,column:40},end:{line:263,column:80}},102:{start:{line:265,column:27},end:{line:265,column:29}},103:{start:{line:266,column:4},end:{line:266,column:102}},104:{start:{line:266,column:21},end:{line:266,column:99}},105:{start:{line:266,column:47},end:{line:266,column:96}},106:{start:{line:268,column:29},end:{line:268,column:31}},107:{start:{line:269,column:4},end:{line:274,column:7}},108:{start:{line:270,column:31},end:{line:270,column:110}},109:{start:{line:270,column:59},end:{line:270,column:109}},110:{start:{line:271,column:6},end:{line:273,column:9}},111:{start:{line:272,column:8},end:{line:272,column:67}},112:{start:{line:276,column:4},end:{line:276,column:28}},113:{start:{line:280,column:4},end:{line:280,column:80}},114:{start:{line:280,column:40},end:{line:280,column:80}},115:{start:{line:282,column:20},end:{line:282,column:32}},116:{start:{line:284,column:27},end:{line:289,column:6}},117:{start:{line:285,column:6},end:{line:285,column:83}},118:{start:{line:285,column:42},end:{line:285,column:83}},119:{start:{line:286,column:18},end:{line:286,column:48}},120:{start:{line:287,column:6},end:{line:287,column:38}},121:{start:{line:288,column:6},end:{line:288,column:53}},122:{start:{line:291,column:24},end:{line:291,column:26}},123:{start:{line:292,column:4},end:{line:292,column:122}},124:{start:{line:292,column:21},end:{line:292,column:119}},125:{start:{line:292,column:47},end:{line:292,column:116}},126:{start:{line:294,column:29},end:{line:294,column:31}},127:{start:{line:295,column:4},end:{line:300,column:7}},128:{start:{line:296,column:31},end:{line:296,column:137}},129:{start:{line:296,column:63},end:{line:296,column:136}},130:{start:{line:297,column:6},end:{line:299,column:9}},131:{start:{line:298,column:8},end:{line:298,column:77}},132:{start:{line:301,column:23},end:{line:301,column:25}},133:{start:{line:302,column:20},end:{line:302,column:88}},134:{start:{line:302,column:49},end:{line:302,column:87}},135:{start:{line:303,column:4},end:{line:307,column:7}},136:{start:{line:304,column:6},end:{line:306,column:7}},137:{start:{line:305,column:8},end:{line:305,column:114}},138:{start:{line:309,column:4},end:{line:309,column:42}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:21,column:2},end:{line:21,column:3}},loc:{start:{line:21,column:96},end:{line:67,column:3}},line:21},1:{name:"(anonymous_1)",decl:{start:{line:53,column:39},end:{line:53,column:40}},loc:{start:{line:53,column:46},end:{line:53,column:73}},line:53},2:{name:"(anonymous_2)",decl:{start:{line:69,column:2},end:{line:69,column:3}},loc:{start:{line:69,column:47},end:{line:86,column:3}},line:69},3:{name:"(anonymous_3)",decl:{start:{line:78,column:53},end:{line:78,column:54}},loc:{start:{line:78,column:74},end:{line:83,column:5}},line:78},4:{name:"(anonymous_4)",decl:{start:{line:97,column:2},end:{line:97,column:3}},loc:{start:{line:97,column:51},end:{line:161,column:3}},line:97},5:{name:"(anonymous_5)",decl:{start:{line:126,column:77},end:{line:126,column:78}},loc:{start:{line:126,column:85},end:{line:126,column:95}},line:126},6:{name:"(anonymous_6)",decl:{start:{line:128,column:27},end:{line:128,column:28}},loc:{start:{line:128,column:34},end:{line:128,column:112}},line:128},7:{name:"(anonymous_7)",decl:{start:{line:128,column:51},end:{line:128,column:52}},loc:{start:{line:128,column:58},end:{line:128,column:110}},line:128},8:{name:"(anonymous_8)",decl:{start:{line:129,column:53},end:{line:129,column:54}},loc:{start:{line:129,column:61},end:{line:129,column:116}},line:129},9:{name:"(anonymous_9)",decl:{start:{line:171,column:2},end:{line:171,column:3}},loc:{start:{line:171,column:57},end:{line:207,column:3}},line:171},10:{name:"(anonymous_10)",decl:{start:{line:197,column:55},end:{line:197,column:56}},loc:{start:{line:197,column:64},end:{line:203,column:7}},line:197},11:{name:"(anonymous_11)",decl:{start:{line:199,column:48},end:{line:199,column:49}},loc:{start:{line:199,column:55},end:{line:199,column:90}},line:199},12:{name:"(anonymous_12)",decl:{start:{line:200,column:37},end:{line:200,column:38}},loc:{start:{line:200,column:44},end:{line:200,column:105}},line:200},13:{name:"(anonymous_13)",decl:{start:{line:217,column:2},end:{line:217,column:3}},loc:{start:{line:217,column:48},end:{line:234,column:3}},line:217},14:{name:"(anonymous_14)",decl:{start:{line:244,column:2},end:{line:244,column:3}},loc:{start:{line:244,column:58},end:{line:260,column:3}},line:244},15:{name:"(anonymous_15)",decl:{start:{line:251,column:66},end:{line:251,column:67}},loc:{start:{line:251,column:84},end:{line:257,column:5}},line:251},16:{name:"(anonymous_16)",decl:{start:{line:262,column:2},end:{line:262,column:3}},loc:{start:{line:262,column:48},end:{line:277,column:3}},line:262},17:{name:"(anonymous_17)",decl:{start:{line:266,column:14},end:{line:266,column:15}},loc:{start:{line:266,column:21},end:{line:266,column:99}},line:266},18:{name:"(anonymous_18)",decl:{start:{line:266,column:38},end:{line:266,column:39}},loc:{start:{line:266,column:45},end:{line:266,column:97}},line:266},19:{name:"(anonymous_19)",decl:{start:{line:269,column:24},end:{line:269,column:25}},loc:{start:{line:269,column:32},end:{line:274,column:5}},line:269},20:{name:"(anonymous_20)",decl:{start:{line:270,column:50},end:{line:270,column:51}},loc:{start:{line:270,column:59},end:{line:270,column:109}},line:270},21:{name:"(anonymous_21)",decl:{start:{line:271,column:27},end:{line:271,column:28}},loc:{start:{line:271,column:36},end:{line:273,column:7}},line:271},22:{name:"(anonymous_22)",decl:{start:{line:279,column:2},end:{line:279,column:3}},loc:{start:{line:279,column:46},end:{line:310,column:3}},line:279},23:{name:"(anonymous_23)",decl:{start:{line:284,column:42},end:{line:284,column:43}},loc:{start:{line:284,column:51},end:{line:289,column:5}},line:284},24:{name:"(anonymous_24)",decl:{start:{line:292,column:14},end:{line:292,column:15}},loc:{start:{line:292,column:21},end:{line:292,column:119}},line:292},25:{name:"(anonymous_25)",decl:{start:{line:292,column:38},end:{line:292,column:39}},loc:{start:{line:292,column:45},end:{line:292,column:117}},line:292},26:{name:"(anonymous_26)",decl:{start:{line:295,column:21},end:{line:295,column:22}},loc:{start:{line:295,column:29},end:{line:300,column:5}},line:295},27:{name:"(anonymous_27)",decl:{start:{line:296,column:54},end:{line:296,column:55}},loc:{start:{line:296,column:63},end:{line:296,column:136}},line:296},28:{name:"(anonymous_28)",decl:{start:{line:297,column:27},end:{line:297,column:28}},loc:{start:{line:297,column:36},end:{line:299,column:7}},line:297},29:{name:"(anonymous_29)",decl:{start:{line:302,column:42},end:{line:302,column:43}},loc:{start:{line:302,column:49},end:{line:302,column:87}},line:302},30:{name:"(anonymous_30)",decl:{start:{line:303,column:24},end:{line:303,column:25}},loc:{start:{line:303,column:33},end:{line:307,column:5}},line:303}},branchMap:{0:{loc:{start:{line:21,column:28},end:{line:21,column:68}},type:"default-arg",locations:[{start:{line:21,column:36},end:{line:21,column:68}}],line:21},1:{loc:{start:{line:21,column:70},end:{line:21,column:85}},type:"default-arg",locations:[{start:{line:21,column:81},end:{line:21,column:85}}],line:21},2:{loc:{start:{line:25,column:4},end:{line:49,column:5}},type:"switch",locations:[{start:{line:26,column:4},end:{line:33,column:12}},{start:{line:34,column:4},end:{line:41,column:12}},{start:{line:42,column:4},end:{line:46,column:12}},{start:{line:47,column:4},end:{line:48,column:49}}],line:25},3:{loc:{start:{line:51,column:4},end:{line:66,column:5}},type:"if",locations:[{start:{line:51,column:4},end:{line:66,column:5}},{start:{line:51,column:4},end:{line:66,column:5}}],line:51},4:{loc:{start:{line:51,column:8},end:{line:51,column:53}},type:"binary-expr",locations:[{start:{line:51,column:8},end:{line:51,column:29}},{start:{line:51,column:33},end:{line:51,column:53}}],line:51},5:{loc:{start:{line:54,column:6},end:{line:54,column:47}},type:"if",locations:[{start:{line:54,column:6},end:{line:54,column:47}},{start:{line:54,column:6},end:{line:54,column:47}}],line:54},6:{loc:{start:{line:62,column:9},end:{line:66,column:5}},type:"if",locations:[{start:{line:62,column:9},end:{line:66,column:5}},{start:{line:62,column:9},end:{line:66,column:5}}],line:62},7:{loc:{start:{line:72,column:17},end:{line:74,column:35}},type:"cond-expr",locations:[{start:{line:73,column:8},end:{line:73,column:42}},{start:{line:74,column:8},end:{line:74,column:35}}],line:72},8:{loc:{start:{line:76,column:4},end:{line:76,column:73}},type:"if",locations:[{start:{line:76,column:4},end:{line:76,column:73}},{start:{line:76,column:4},end:{line:76,column:73}}],line:76},9:{loc:{start:{line:79,column:6},end:{line:81,column:7}},type:"if",locations:[{start:{line:79,column:6},end:{line:81,column:7}},{start:{line:79,column:6},end:{line:81,column:7}}],line:79},10:{loc:{start:{line:79,column:10},end:{line:79,column:67}},type:"binary-expr",locations:[{start:{line:79,column:10},end:{line:79,column:31}},{start:{line:79,column:35},end:{line:79,column:67}}],line:79},11:{loc:{start:{line:85,column:11},end:{line:85,column:57}},type:"cond-expr",locations:[{start:{line:85,column:35},end:{line:85,column:43}},{start:{line:85,column:46},end:{line:85,column:57}}],line:85},12:{loc:{start:{line:97,column:39},end:{line:97,column:49}},type:"default-arg",locations:[{start:{line:97,column:47},end:{line:97,column:49}}],line:97},13:{loc:{start:{line:101,column:4},end:{line:101,column:97}},type:"if",locations:[{start:{line:101,column:4},end:{line:101,column:97}},{start:{line:101,column:4},end:{line:101,column:97}}],line:101},14:{loc:{start:{line:109,column:4},end:{line:111,column:88}},type:"if",locations:[{start:{line:109,column:4},end:{line:111,column:88}},{start:{line:109,column:4},end:{line:111,column:88}}],line:109},15:{loc:{start:{line:109,column:7},end:{line:111,column:55}},type:"binary-expr",locations:[{start:{line:109,column:7},end:{line:109,column:46}},{start:{line:110,column:9},end:{line:110,column:42}},{start:{line:111,column:9},end:{line:111,column:55}}],line:109},16:{loc:{start:{line:116,column:4},end:{line:152,column:49}},type:"if",locations:[{start:{line:116,column:4},end:{line:152,column:49}},{start:{line:116,column:4},end:{line:152,column:49}}],line:116},17:{loc:{start:{line:135,column:9},end:{line:152,column:49}},type:"if",locations:[{start:{line:135,column:9},end:{line:152,column:49}},{start:{line:135,column:9},end:{line:152,column:49}}],line:135},18:{loc:{start:{line:155,column:4},end:{line:158,column:5}},type:"if",locations:[{start:{line:155,column:4},end:{line:158,column:5}},{start:{line:155,column:4},end:{line:158,column:5}}],line:155},19:{loc:{start:{line:155,column:8},end:{line:155,column:47}},type:"binary-expr",locations:[{start:{line:155,column:8},end:{line:155,column:24}},{start:{line:155,column:28},end:{line:155,column:47}}],line:155},20:{loc:{start:{line:171,column:42},end:{line:171,column:54}},type:"default-arg",locations:[{start:{line:171,column:52},end:{line:171,column:54}}],line:171},21:{loc:{start:{line:177,column:4},end:{line:192,column:5}},type:"if",locations:[{start:{line:177,column:4},end:{line:192,column:5}},{start:{line:177,column:4},end:{line:192,column:5}}],line:177},22:{loc:{start:{line:185,column:9},end:{line:192,column:5}},type:"if",locations:[{start:{line:185,column:9},end:{line:192,column:5}},{start:{line:185,column:9},end:{line:192,column:5}}],line:185},23:{loc:{start:{line:196,column:4},end:{line:204,column:5}},type:"if",locations:[{start:{line:196,column:4},end:{line:204,column:5}},{start:{line:196,column:4},end:{line:204,column:5}}],line:196},24:{loc:{start:{line:201,column:8},end:{line:201,column:87}},type:"if",locations:[{start:{line:201,column:8},end:{line:201,column:87}},{start:{line:201,column:8},end:{line:201,column:87}}],line:201},25:{loc:{start:{line:217,column:36},end:{line:217,column:46}},type:"default-arg",locations:[{start:{line:217,column:44},end:{line:217,column:46}}],line:217},26:{loc:{start:{line:226,column:4},end:{line:226,column:64}},type:"if",locations:[{start:{line:226,column:4},end:{line:226,column:64}},{start:{line:226,column:4},end:{line:226,column:64}}],line:226},27:{loc:{start:{line:247,column:4},end:{line:247,column:68}},type:"if",locations:[{start:{line:247,column:4},end:{line:247,column:68}},{start:{line:247,column:4},end:{line:247,column:68}}],line:247},28:{loc:{start:{line:263,column:4},end:{line:263,column:80}},type:"if",locations:[{start:{line:263,column:4},end:{line:263,column:80}},{start:{line:263,column:4},end:{line:263,column:80}}],line:263},29:{loc:{start:{line:280,column:4},end:{line:280,column:80}},type:"if",locations:[{start:{line:280,column:4},end:{line:280,column:80}},{start:{line:280,column:4},end:{line:280,column:80}}],line:280},30:{loc:{start:{line:285,column:6},end:{line:285,column:83}},type:"if",locations:[{start:{line:285,column:6},end:{line:285,column:83}},{start:{line:285,column:6},end:{line:285,column:83}}],line:285},31:{loc:{start:{line:304,column:6},end:{line:306,column:7}},type:"if",locations:[{start:{line:304,column:6},end:{line:306,column:7}},{start:{line:304,column:6},end:{line:306,column:7}}],line:304}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0,106:0,107:0,108:0,109:0,110:0,111:0,112:0,113:0,114:0,115:0,116:0,117:0,118:0,119:0,120:0,121:0,122:0,123:0,124:0,125:0,126:0,127:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:0,136:0,137:0,138:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0},b:{0:[0],1:[0],2:[0,0,0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0],13:[0,0],14:[0,0],15:[0,0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0],21:[0,0],22:[0,0],23:[0,0],24:[0,0],25:[0],26:[0,0],27:[0,0],28:[0,0],29:[0,0],30:[0,0],31:[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});return i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)}(),dn=function(n){function e(){return u()(this,e),h()(this,v()(e).apply(this,arguments))}return w()(e,n),a()(e,null,[{key:"generateKey",value:function(){var n=r()(o.a.mark(function n(e){var t,l,i,r,c,u,s,a,m,d,f;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:t=e.userIds,l=void 0===t?(mn.b[0][0]++,_.openpgp.defaultUser):t,i=e.passphrase,r=void 0===i?(mn.b[1][0]++,null):i,c=e.params,mn.f[0]++,mn.s[0]++,u=A(),mn.s[1]++,n.t0=c.type,n.next="rsa"===n.t0?7:"ec"===n.t0?12:"session"===n.t0?17:22;break;case 7:return mn.b[2][0]++,mn.s[2]++,s={userIds:l,numBits:c.modulusLength,passphrase:r,keyExpirationTime:c.keyExpirationTime},mn.s[3]++,n.abrupt("break",25);case 12:return mn.b[2][1]++,mn.s[4]++,s={userIds:l,curve:_.openpgp.curveList[c.curve].name,passphrase:r,keyExpirationTime:c.keyExpirationTime},mn.s[5]++,n.abrupt("break",25);case 17:return mn.b[2][2]++,mn.s[6]++,s={length:c.length},mn.s[7]++,n.abrupt("break",25);case 22:throw mn.b[2][3]++,mn.s[8]++,new Error("GPGUnsupportedAlgorithm");case 25:if(mn.s[9]++,mn.b[4][0]++,"rsa"!==c.type&&(mn.b[4][1]++,"ec"!==c.type)){n.next=39;break}return mn.b[3][0]++,mn.s[10]++,n.next=31,u.generateKey(s);case 31:return a=n.sent,mn.s[11]++,m=a.key.getKeys().map(function(n){return mn.f[1]++,mn.s[12]++,O(n)}),mn.s[13]++,1===m.length?(mn.b[5][0]++,mn.s[14]++,m=m[0]):mn.b[5][1]++,mn.s[15]++,n.abrupt("return",{publicKey:a.key.toPublic(),privateKey:a.key,keyId:m});case 39:if(mn.b[3][1]++,mn.s[16]++,"session"!==c.type){n.next=55;break}return mn.b[6][0]++,mn.s[17]++,n.next=46,u.crypto.random.getRandomBytes(s.length);case 46:return d=n.sent,mn.s[18]++,n.next=50,T(d);case 50:return f=n.sent,mn.s[19]++,n.abrupt("return",{key:d,keyId:f});case 55:mn.b[6][1]++;case 56:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()},{key:"importKey",value:function(){var n=r()(o.a.mark(function n(e,t,l){var i,c,u;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(mn.f[2]++,mn.s[20]++,i=A(),mn.s[21]++,"pem"!==e){n.next=10;break}return mn.b[7][0]++,n.next=7,i.key.readArmored(t);case 7:n.t0=n.sent,n.next=14;break;case 10:return mn.b[7][1]++,n.next=13,i.key.read(t);case 13:n.t0=n.sent;case 14:if(c=n.t0,mn.s[22]++,!c.err){n.next=22;break}throw mn.b[8][0]++,mn.s[23]++,new Error("InvalidOpenPGPKeyFormat: ".concat(c.err));case 22:mn.b[8][1]++;case 23:return mn.s[24]++,n.next=26,Promise.all(c.keys.map(function(){var n=r()(o.a.mark(function n(e){return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(mn.f[3]++,mn.s[25]++,mn.b[10][0]++,!e.isPrivate()||(mn.b[10][1]++,!e.primaryKey.isEncrypted)){n.next=9;break}return mn.b[9][0]++,mn.s[26]++,n.next=7,e.decrypt(l);case 7:n.next=10;break;case 9:mn.b[9][1]++;case 10:return mn.s[27]++,n.abrupt("return",e);case 12:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()));case 26:return u=n.sent,mn.s[28]++,n.abrupt("return",u.length>1?(mn.b[11][0]++,u):(mn.b[11][1]++,u[0]));case 29:case"end":return n.stop()}},n,this)}));return function(e,t,l){return n.apply(this,arguments)}}()},{key:"encrypt",value:function(){var n=r()(o.a.mark(function n(t){var l,i,r,c,u,s,a,m,d,f,p,y,h,b,v,g,w,x;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(l=t.message,i=t.keys,r=t.options,c=void 0===r?(mn.b[12][0]++,{}):r,mn.f[4]++,mn.s[29]++,u=A(),mn.s[30]++,c.compression?(mn.b[13][0]++,mn.s[31]++,c.compression=u.enums.compression[c.compression]):mn.b[13][1]++,mn.s[32]++,c.armor=!1,mn.s[33]++,s=u.message.fromBinary(l.binary),mn.s[34]++,mn.b[15][0]++,void 0!==i.privateKeys&&(mn.b[15][1]++,i.privateKeys instanceof Array)&&(mn.b[15][2]++,i.privateKeys[0]instanceof u.key.Key)?(mn.b[14][0]++,mn.s[35]++,a=i.privateKeys):mn.b[14][1]++,mn.s[36]++,!i.publicKeys){n.next=28;break}return mn.b[16][0]++,mn.s[37]++,f={message:s,publicKeys:i.publicKeys,privateKeys:a,format:"binary"},mn.s[38]++,n.next=17,u.encrypt(Object.assign(f,c));case 17:m=n.sent,mn.s[39]++,p=m.message.getEncryptionKeyIds().map(function(n){return mn.f[5]++,mn.s[40]++,n.toHex()}),mn.s[41]++,y=[],mn.s[42]++,i.publicKeys.map(function(n){return mn.f[6]++,mn.s[43]++,n.getKeys().map(function(n){mn.f[7]++,mn.s[44]++,y.push(O(n))})}),mn.s[45]++,h=y.filter(function(n){return mn.f[8]++,mn.s[46]++,p.indexOf(n.toHex().slice(0,16))>=0}),mn.s[47]++,b=[q(m.message.packets.write(),F(h),{})],mn.s[48]++,d={message:W("openpgp","public_key_encrypt",b,{})},n.next=53;break;case 28:if(mn.b[16][1]++,mn.s[49]++,!i.sessionKey){n.next=50;break}return mn.b[17][0]++,mn.s[50]++,v={message:s,sessionKey:{data:i.sessionKey,algorithm:c.algorithm},privateKeys:a,format:"binary"},mn.s[51]++,n.next=36,u.encrypt(Object.assign(v,c));case 36:return m=n.sent,mn.s[52]++,n.t0=q,n.t1=m.message.packets.write(),n.next=42,T(i.sessionKey);case 42:n.t2=n.sent,n.t3={},n.t4=(0,n.t0)(n.t1,n.t2,n.t3),g=[n.t4],mn.s[53]++,d={message:W("openpgp","session_key_encrypt",g,{algorithm:c.algorithm})},n.next=53;break;case 50:throw mn.b[17][1]++,mn.s[54]++,new Error("InvalidEncryptionKey");case 53:return mn.s[55]++,w={},mn.s[56]++,mn.b[19][0]++,i.privateKeys&&(mn.b[19][1]++,m.signature)?(mn.b[18][0]++,mn.s[57]++,x=e._listFromOpenPgpSig(m.signature.packets,a),mn.s[58]++,w={signature:ln("openpgp","public_key_sign",x,{})}):mn.b[18][1]++,mn.s[59]++,n.abrupt("return",Object.assign(d,w));case 58:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()},{key:"decrypt",value:function(){var n=r()(o.a.mark(function n(e){var t,l,i,r,c,u,s;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.encrypted,l=e.keys,i=e.options,r=void 0===i?(mn.b[20][0]++,{}):i,mn.f[9]++,mn.s[60]++,c=A(),mn.s[61]++,n.next=6,c.message.read(t.message.message[0].toBuffer(),!1);case 6:if(u=n.sent,mn.s[62]++,"public_key_encrypt"!==t.message.keyType){n.next=16;break}return mn.b[21][0]++,mn.s[63]++,n.next=13,c.decrypt(Object.assign({message:u,privateKeys:l.privateKeys,publicKeys:l.publicKeys,format:"binary"},r));case 13:s=n.sent,n.next=27;break;case 16:if(mn.b[21][1]++,mn.s[64]++,"session_key_encrypt"!==t.message.keyType){n.next=26;break}return mn.b[22][0]++,mn.s[65]++,n.next=23,c.decrypt(Object.assign({message:u,sessionKeys:[{data:l.sessionKey,algorithm:r.algorithm}],publicKeys:l.publicKeys,format:"binary"},r));case 23:s=n.sent,n.next=27;break;case 26:mn.b[22][1]++;case 27:return mn.s[66]++,s.data=new Uint8Array(s.data),mn.s[67]++,s.signatures instanceof Array?(mn.b[23][0]++,mn.s[68]++,s.signatures=s.signatures.map(function(n){mn.f[10]++;var e=(mn.s[69]++,n.keyid.toHex()),t=(mn.s[70]++,n.signature.packets.map(function(n){return mn.f[11]++,mn.s[71]++,new Uint8Array(n.issuerFingerprint)})),l=(mn.s[72]++,t.filter(function(n){return mn.f[12]++,mn.s[73]++,e===P.a.encoder.arrayBufferToHexString(n).slice(0,16)}));if(mn.s[74]++,0===l.length)throw mn.b[24][0]++,mn.s[75]++,new Error("SomethingWrongInOpenPGPSignature");return mn.b[24][1]++,mn.s[76]++,{keyId:R(l[0]),valid:n.valid}})):mn.b[23][1]++,mn.s[77]++,n.abrupt("return",s);case 33:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()},{key:"sign",value:function(){var n=r()(o.a.mark(function n(t){var l,i,r,c,u,s,a,m,d;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(l=t.message,i=t.keys,r=t.options,c=void 0===r?(mn.b[25][0]++,{}):r,mn.f[13]++,mn.s[78]++,u=A(),mn.s[79]++,c.detached=!0,mn.s[80]++,c.armor=!1,mn.s[81]++,s=u.message.fromBinary(l.binary),mn.s[82]++,i.privateKeys){n.next=15;break}throw mn.b[26][0]++,mn.s[83]++,new Error("SigningKeyRequired");case 15:mn.b[26][1]++;case 16:return mn.s[84]++,a={message:s,privateKeys:i.privateKeys},mn.s[85]++,n.next=20,u.sign(Object.assign(a,c));case 20:return m=n.sent,mn.s[86]++,d=e._listFromOpenPgpSig(m.signature.packets,i.privateKeys),mn.s[87]++,n.abrupt("return",{signature:ln("openpgp","public_key_sign",d,{})});case 24:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()},{key:"verify",value:function(){var n=r()(o.a.mark(function n(t){var l,i,c,u,s,a,m;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(l=t.message,i=t.signature,c=t.keys,t.options,mn.f[14]++,mn.s[88]++,u=A(),mn.s[89]++,c.publicKeys){n.next=10;break}throw mn.b[27][0]++,mn.s[90]++,new Error("VerificationKeyRequired");case 10:mn.b[27][1]++;case 11:return mn.s[91]++,s=e._ListToOpenPgpSig(i.signatures,c.publicKeys),mn.s[92]++,a=u.message.fromBinary(l.binary),mn.s[93]++,n.next=16,Promise.all(s.signatureObjects.map(function(){var n=r()(o.a.mark(function n(e){var t,l,i,r;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return mn.f[15]++,mn.s[94]++,t=a.unwrapCompressed(),mn.s[95]++,l=t.packets.filterByTag(u.enums.packet.literal),mn.s[96]++,i=[e.openpgpSignature],mn.s[97]++,n.next=7,u.message.createVerificationObjects(i,l,[e.publicKey],new Date);case 7:return r=n.sent,mn.s[98]++,n.t0=e.signature.keyId,n.next=12,r[0].verified;case 12:return n.t1=n.sent,n.abrupt("return",{keyId:n.t0,valid:n.t1});case 14:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()));case 16:return m=n.sent,mn.s[99]++,n.abrupt("return",m.concat(s.unverified));case 19:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()},{key:"_listFromOpenPgpSig",value:function(n,e){if(mn.f[16]++,mn.s[100]++,!(n instanceof Array))throw mn.b[28][0]++,mn.s[101]++,new Error("InvalidSignatureList");mn.b[28][1]++;var t=(mn.s[102]++,[]);mn.s[103]++,e.map(function(n){return mn.f[17]++,mn.s[104]++,n.getKeys().map(function(n){mn.f[18]++,mn.s[105]++,t.push(O(n))})});var l=(mn.s[106]++,[]);return mn.s[107]++,t.map(function(e){mn.f[19]++;var t=(mn.s[108]++,n.filter(function(n){return mn.f[20]++,mn.s[109]++,n.issuerKeyId.toHex()===e.toHex().slice(0,16)}));mn.s[110]++,t.map(function(n){mn.f[21]++,mn.s[111]++,l.push(cn(n.write(),e))})}),mn.s[112]++,l}},{key:"_ListToOpenPgpSig",value:function(n,e){if(mn.f[22]++,mn.s[113]++,!(n instanceof Array))throw mn.b[29][0]++,mn.s[114]++,new Error("InvalidSignatureList");mn.b[29][1]++;var t=(mn.s[115]++,A()),l=(mn.s[116]++,n.map(function(n){if(mn.f[23]++,mn.s[117]++,!(n instanceof un))throw mn.b[30][0]++,mn.s[118]++,new Error("NotRawSignatureObject");mn.b[30][1]++;var e=(mn.s[119]++,new t.packet.Signature);return mn.s[120]++,e.read(n.toBuffer(),0,-1),mn.s[121]++,{openpgpSignature:e,signature:n}})),o=(mn.s[122]++,[]);mn.s[123]++,e.map(function(n){return mn.f[24]++,mn.s[124]++,n.getKeys().map(function(n){mn.f[25]++,mn.s[125]++,o.push({publicKey:n,keyId:O(n)})})});var i=(mn.s[126]++,[]);mn.s[127]++,o.map(function(n){mn.f[26]++;var e=(mn.s[128]++,l.filter(function(e){return mn.f[27]++,mn.s[129]++,e.openpgpSignature.issuerKeyId.toHex()===n.keyId.toHex().slice(0,16)}));mn.s[130]++,e.map(function(e){mn.f[28]++,mn.s[131]++,i.push(Object.assign({publicKey:n.publicKey},e))})});var r=(mn.s[132]++,[]),c=(mn.s[133]++,i.map(function(n){return mn.f[29]++,mn.s[134]++,n.openpgpSignature.issuerKeyId.toHex()}));return mn.s[135]++,l.map(function(n){mn.f[30]++,mn.s[136]++,c.indexOf(n.openpgpSignature.issuerKeyId.toHex().slice(0,16))<0?(mn.b[31][0]++,mn.s[137]++,r.push({keyId:R(n.openpgpSignature.issuerFingerprint),valid:void 0})):mn.b[31][1]++}),mn.s[138]++,{signatureObjects:i,unverified:r}}}]),e}(k),fn=function(){var n="/Users/jun/ProjectJavaScript/cascade/src/keys.js",e="667504824e694334911945f685905a5ab3f8f6f1",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/keys.js",statementMap:{0:{start:{line:12,column:4},end:{line:19,column:5}},1:{start:{line:13,column:6},end:{line:13,column:101}},2:{start:{line:13,column:70},end:{line:13,column:101}},3:{start:{line:14,column:6},end:{line:18,column:7}},4:{start:{line:15,column:8},end:{line:15,column:106}},5:{start:{line:15,column:52},end:{line:15,column:106}},6:{start:{line:17,column:8},end:{line:17,column:102}},7:{start:{line:17,column:52},end:{line:17,column:102}},8:{start:{line:21,column:4},end:{line:28,column:5}},9:{start:{line:22,column:6},end:{line:22,column:99}},10:{start:{line:22,column:68},end:{line:22,column:99}},11:{start:{line:23,column:6},end:{line:27,column:7}},12:{start:{line:24,column:8},end:{line:24,column:107}},13:{start:{line:24,column:52},end:{line:24,column:107}},14:{start:{line:26,column:8},end:{line:26,column:103}},15:{start:{line:26,column:52},end:{line:26,column:103}},16:{start:{line:30,column:4},end:{line:33,column:5}},17:{start:{line:31,column:6},end:{line:31,column:101}},18:{start:{line:31,column:70},end:{line:31,column:101}},19:{start:{line:32,column:6},end:{line:32,column:133}},20:{start:{line:32,column:101},end:{line:32,column:133}},21:{start:{line:34,column:4},end:{line:37,column:5}},22:{start:{line:35,column:6},end:{line:35,column:99}},23:{start:{line:35,column:68},end:{line:35,column:99}},24:{start:{line:36,column:6},end:{line:36,column:80}},25:{start:{line:36,column:49},end:{line:36,column:80}},26:{start:{line:40,column:4},end:{line:42,column:51}},27:{start:{line:40,column:29},end:{line:40,column:79}},28:{start:{line:41,column:9},end:{line:42,column:51}},29:{start:{line:41,column:34},end:{line:41,column:84}},30:{start:{line:42,column:9},end:{line:42,column:51}},31:{start:{line:44,column:4},end:{line:44,column:26}},32:{start:{line:45,column:4},end:{line:45,column:28}},33:{start:{line:46,column:4},end:{line:46,column:26}},34:{start:{line:48,column:4},end:{line:48,column:16}},35:{start:{line:51,column:16},end:{line:51,column:34}},36:{start:{line:52,column:17},end:{line:52,column:36}},37:{start:{line:53,column:16},end:{line:53,column:34}},38:{start:{line:55,column:17},end:{line:55,column:58}},39:{start:{line:56,column:17},end:{line:56,column:58}},40:{start:{line:57,column:14},end:{line:57,column:52}},41:{start:{line:58,column:16},end:{line:58,column:56}},42:{start:{line:71,column:22},end:{line:71,column:39}},43:{start:{line:72,column:20},end:{line:72,column:35}},44:{start:{line:73,column:21},end:{line:73,column:37}},45:{start:{line:74,column:20},end:{line:74,column:35}},46:{start:{line:76,column:17},end:{line:76,column:27}},47:{start:{line:77,column:2},end:{line:77,column:88}},48:{start:{line:78,column:2},end:{line:78,column:16}},49:{start:{line:90,column:21},end:{line:90,column:23}},50:{start:{line:92,column:2},end:{line:92,column:63}},51:{start:{line:92,column:23},end:{line:92,column:63}},52:{start:{line:94,column:16},end:{line:97,column:3}},53:{start:{line:98,column:2},end:{line:119,column:6}},54:{start:{line:99,column:4},end:{line:118,column:5}},55:{start:{line:103,column:6},end:{line:105,column:43}},56:{start:{line:103,column:45},end:{line:103,column:61}},57:{start:{line:104,column:11},end:{line:105,column:43}},58:{start:{line:104,column:53},end:{line:104,column:72}},59:{start:{line:105,column:11},end:{line:105,column:43}},60:{start:{line:107,column:6},end:{line:117,column:45}},61:{start:{line:108,column:8},end:{line:108,column:132}},62:{start:{line:108,column:29},end:{line:108,column:132}},63:{start:{line:108,column:100},end:{line:108,column:129}},64:{start:{line:110,column:11},end:{line:117,column:45}},65:{start:{line:111,column:8},end:{line:115,column:9}},66:{start:{line:112,column:10},end:{line:114,column:12}},67:{start:{line:113,column:50},end:{line:113,column:109}},68:{start:{line:117,column:11},end:{line:117,column:45}},69:{start:{line:121,column:2},end:{line:121,column:43}},70:{start:{line:132,column:21},end:{line:132,column:23}},71:{start:{line:134,column:2},end:{line:134,column:63}},72:{start:{line:134,column:23},end:{line:134,column:63}},73:{start:{line:136,column:2},end:{line:136,column:63}},74:{start:{line:136,column:23},end:{line:136,column:63}},75:{start:{line:138,column:2},end:{line:138,column:66}},76:{start:{line:138,column:24},end:{line:138,column:66}},77:{start:{line:140,column:2},end:{line:140,column:41}},78:{start:{line:150,column:25},end:{line:150,column:45}},79:{start:{line:152,column:2},end:{line:173,column:49}},80:{start:{line:153,column:4},end:{line:160,column:9}},81:{start:{line:159,column:8},end:{line:159,column:64}},82:{start:{line:163,column:7},end:{line:173,column:49}},83:{start:{line:164,column:4},end:{line:171,column:9}},84:{start:{line:170,column:8},end:{line:170,column:65}},85:{start:{line:173,column:7},end:{line:173,column:49}},86:{start:{line:175,column:2},end:{line:175,column:19}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:10,column:2},end:{line:10,column:3}},loc:{start:{line:10,column:41},end:{line:49,column:3}},line:10},1:{name:"(anonymous_1)",decl:{start:{line:51,column:2},end:{line:51,column:3}},loc:{start:{line:51,column:14},end:{line:51,column:36}},line:51},2:{name:"(anonymous_2)",decl:{start:{line:52,column:2},end:{line:52,column:3}},loc:{start:{line:52,column:15},end:{line:52,column:38}},line:52},3:{name:"(anonymous_3)",decl:{start:{line:53,column:2},end:{line:53,column:3}},loc:{start:{line:53,column:14},end:{line:53,column:36}},line:53},4:{name:"(anonymous_4)",decl:{start:{line:55,column:2},end:{line:55,column:3}},loc:{start:{line:55,column:15},end:{line:55,column:60}},line:55},5:{name:"(anonymous_5)",decl:{start:{line:56,column:2},end:{line:56,column:3}},loc:{start:{line:56,column:15},end:{line:56,column:60}},line:56},6:{name:"(anonymous_6)",decl:{start:{line:57,column:2},end:{line:57,column:3}},loc:{start:{line:57,column:12},end:{line:57,column:54}},line:57},7:{name:"(anonymous_7)",decl:{start:{line:58,column:2},end:{line:58,column:3}},loc:{start:{line:58,column:14},end:{line:58,column:58}},line:58},8:{name:"importKeys",decl:{start:{line:70,column:22},end:{line:70,column:32}},loc:{start:{line:70,column:70},end:{line:79,column:1}},line:70},9:{name:"importKeyStrings",decl:{start:{line:89,column:15},end:{line:89,column:31}},loc:{start:{line:89,column:52},end:{line:122,column:1}},line:89},10:{name:"(anonymous_10)",decl:{start:{line:98,column:31},end:{line:98,column:32}},loc:{start:{line:98,column:53},end:{line:119,column:3}},line:98},11:{name:"(anonymous_11)",decl:{start:{line:108,column:92},end:{line:108,column:93}},loc:{start:{line:108,column:100},end:{line:108,column:129}},line:108},12:{name:"(anonymous_12)",decl:{start:{line:113,column:40},end:{line:113,column:41}},loc:{start:{line:113,column:50},end:{line:113,column:109}},line:113},13:{name:"importKeyObjects",decl:{start:{line:131,column:15},end:{line:131,column:31}},loc:{start:{line:131,column:52},end:{line:141,column:1}},line:131},14:{name:"generateKeyObject",decl:{start:{line:149,column:22},end:{line:149,column:39}},loc:{start:{line:149,column:51},end:{line:176,column:1}},line:149},15:{name:"(anonymous_15)",decl:{start:{line:158,column:13},end:{line:158,column:14}},loc:{start:{line:158,column:20},end:{line:160,column:7}},line:158},16:{name:"(anonymous_16)",decl:{start:{line:169,column:13},end:{line:169,column:14}},loc:{start:{line:169,column:20},end:{line:171,column:7}},line:169}},branchMap:{0:{loc:{start:{line:12,column:4},end:{line:19,column:5}},type:"if",locations:[{start:{line:12,column:4},end:{line:19,column:5}},{start:{line:12,column:4},end:{line:19,column:5}}],line:12},1:{loc:{start:{line:13,column:6},end:{line:13,column:101}},type:"if",locations:[{start:{line:13,column:6},end:{line:13,column:101}},{start:{line:13,column:6},end:{line:13,column:101}}],line:13},2:{loc:{start:{line:13,column:9},end:{line:13,column:68}},type:"binary-expr",locations:[{start:{line:13,column:9},end:{line:13,column:36}},{start:{line:13,column:40},end:{line:13,column:68}}],line:13},3:{loc:{start:{line:14,column:6},end:{line:18,column:7}},type:"if",locations:[{start:{line:14,column:6},end:{line:18,column:7}},{start:{line:14,column:6},end:{line:18,column:7}}],line:14},4:{loc:{start:{line:15,column:8},end:{line:15,column:106}},type:"if",locations:[{start:{line:15,column:8},end:{line:15,column:106}},{start:{line:15,column:8},end:{line:15,column:106}}],line:15},5:{loc:{start:{line:17,column:8},end:{line:17,column:102}},type:"if",locations:[{start:{line:17,column:8},end:{line:17,column:102}},{start:{line:17,column:8},end:{line:17,column:102}}],line:17},6:{loc:{start:{line:21,column:4},end:{line:28,column:5}},type:"if",locations:[{start:{line:21,column:4},end:{line:28,column:5}},{start:{line:21,column:4},end:{line:28,column:5}}],line:21},7:{loc:{start:{line:22,column:6},end:{line:22,column:99}},type:"if",locations:[{start:{line:22,column:6},end:{line:22,column:99}},{start:{line:22,column:6},end:{line:22,column:99}}],line:22},8:{loc:{start:{line:22,column:9},end:{line:22,column:66}},type:"binary-expr",locations:[{start:{line:22,column:9},end:{line:22,column:34}},{start:{line:22,column:38},end:{line:22,column:66}}],line:22},9:{loc:{start:{line:23,column:6},end:{line:27,column:7}},type:"if",locations:[{start:{line:23,column:6},end:{line:27,column:7}},{start:{line:23,column:6},end:{line:27,column:7}}],line:23},10:{loc:{start:{line:23,column:10},end:{line:23,column:99}},type:"binary-expr",locations:[{start:{line:23,column:10},end:{line:23,column:56}},{start:{line:23,column:60},end:{line:23,column:99}}],line:23},11:{loc:{start:{line:24,column:8},end:{line:24,column:107}},type:"if",locations:[{start:{line:24,column:8},end:{line:24,column:107}},{start:{line:24,column:8},end:{line:24,column:107}}],line:24},12:{loc:{start:{line:26,column:8},end:{line:26,column:103}},type:"if",locations:[{start:{line:26,column:8},end:{line:26,column:103}},{start:{line:26,column:8},end:{line:26,column:103}}],line:26},13:{loc:{start:{line:30,column:4},end:{line:33,column:5}},type:"if",locations:[{start:{line:30,column:4},end:{line:33,column:5}},{start:{line:30,column:4},end:{line:33,column:5}}],line:30},14:{loc:{start:{line:31,column:6},end:{line:31,column:101}},type:"if",locations:[{start:{line:31,column:6},end:{line:31,column:101}},{start:{line:31,column:6},end:{line:31,column:101}}],line:31},15:{loc:{start:{line:31,column:9},end:{line:31,column:68}},type:"binary-expr",locations:[{start:{line:31,column:9},end:{line:31,column:36}},{start:{line:31,column:40},end:{line:31,column:68}}],line:31},16:{loc:{start:{line:32,column:6},end:{line:32,column:133}},type:"if",locations:[{start:{line:32,column:6},end:{line:32,column:133}},{start:{line:32,column:6},end:{line:32,column:133}}],line:32},17:{loc:{start:{line:32,column:9},end:{line:32,column:99}},type:"binary-expr",locations:[{start:{line:32,column:9},end:{line:32,column:55}},{start:{line:32,column:60},end:{line:32,column:99}}],line:32},18:{loc:{start:{line:34,column:4},end:{line:37,column:5}},type:"if",locations:[{start:{line:34,column:4},end:{line:37,column:5}},{start:{line:34,column:4},end:{line:37,column:5}}],line:34},19:{loc:{start:{line:35,column:6},end:{line:35,column:99}},type:"if",locations:[{start:{line:35,column:6},end:{line:35,column:99}},{start:{line:35,column:6},end:{line:35,column:99}}],line:35},20:{loc:{start:{line:35,column:9},end:{line:35,column:66}},type:"binary-expr",locations:[{start:{line:35,column:9},end:{line:35,column:34}},{start:{line:35,column:38},end:{line:35,column:66}}],line:35},21:{loc:{start:{line:36,column:6},end:{line:36,column:80}},type:"if",locations:[{start:{line:36,column:6},end:{line:36,column:80}},{start:{line:36,column:6},end:{line:36,column:80}}],line:36},22:{loc:{start:{line:40,column:4},end:{line:42,column:51}},type:"if",locations:[{start:{line:40,column:4},end:{line:42,column:51}},{start:{line:40,column:4},end:{line:42,column:51}}],line:40},23:{loc:{start:{line:41,column:9},end:{line:42,column:51}},type:"if",locations:[{start:{line:41,column:9},end:{line:42,column:51}},{start:{line:41,column:9},end:{line:42,column:51}}],line:41},24:{loc:{start:{line:70,column:33},end:{line:70,column:48}},type:"default-arg",locations:[{start:{line:70,column:40},end:{line:70,column:48}}],line:70},25:{loc:{start:{line:92,column:2},end:{line:92,column:63}},type:"if",locations:[{start:{line:92,column:2},end:{line:92,column:63}},{start:{line:92,column:2},end:{line:92,column:63}}],line:92},26:{loc:{start:{line:99,column:4},end:{line:118,column:5}},type:"if",locations:[{start:{line:99,column:4},end:{line:118,column:5}},{start:{line:99,column:4},end:{line:118,column:5}}],line:99},27:{loc:{start:{line:103,column:6},end:{line:105,column:43}},type:"if",locations:[{start:{line:103,column:6},end:{line:105,column:43}},{start:{line:103,column:6},end:{line:105,column:43}}],line:103},28:{loc:{start:{line:104,column:11},end:{line:105,column:43}},type:"if",locations:[{start:{line:104,column:11},end:{line:105,column:43}},{start:{line:104,column:11},end:{line:105,column:43}}],line:104},29:{loc:{start:{line:107,column:6},end:{line:117,column:45}},type:"if",locations:[{start:{line:107,column:6},end:{line:117,column:45}},{start:{line:107,column:6},end:{line:117,column:45}}],line:107},30:{loc:{start:{line:108,column:8},end:{line:108,column:132}},type:"if",locations:[{start:{line:108,column:8},end:{line:108,column:132}},{start:{line:108,column:8},end:{line:108,column:132}}],line:108},31:{loc:{start:{line:110,column:11},end:{line:117,column:45}},type:"if",locations:[{start:{line:110,column:11},end:{line:117,column:45}},{start:{line:110,column:11},end:{line:117,column:45}}],line:110},32:{loc:{start:{line:111,column:8},end:{line:115,column:9}},type:"if",locations:[{start:{line:111,column:8},end:{line:115,column:9}},{start:{line:111,column:8},end:{line:115,column:9}}],line:111},33:{loc:{start:{line:134,column:2},end:{line:134,column:63}},type:"if",locations:[{start:{line:134,column:2},end:{line:134,column:63}},{start:{line:134,column:2},end:{line:134,column:63}}],line:134},34:{loc:{start:{line:136,column:2},end:{line:136,column:63}},type:"if",locations:[{start:{line:136,column:2},end:{line:136,column:63}},{start:{line:136,column:2},end:{line:136,column:63}}],line:136},35:{loc:{start:{line:138,column:2},end:{line:138,column:66}},type:"if",locations:[{start:{line:138,column:2},end:{line:138,column:66}},{start:{line:138,column:2},end:{line:138,column:66}}],line:138},36:{loc:{start:{line:152,column:2},end:{line:173,column:49}},type:"if",locations:[{start:{line:152,column:2},end:{line:173,column:49}},{start:{line:152,column:2},end:{line:173,column:49}}],line:152},37:{loc:{start:{line:163,column:7},end:{line:173,column:49}},type:"if",locations:[{start:{line:163,column:7},end:{line:173,column:49}},{start:{line:163,column:7},end:{line:173,column:49}}],line:163}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0],25:[0,0],26:[0,0],27:[0,0],28:[0,0],29:[0,0],30:[0,0],31:[0,0],32:[0,0],33:[0,0],34:[0,0],35:[0,0],36:[0,0],37:[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});return i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)}(),pn=function(){function n(){u()(this,n)}return a()(n,[{key:"from",value:function(){var n=r()(o.a.mark(function n(e,t){var l,i,r,c;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(l=t.keys,i=t.suite,r=t.mode,fn.f[0]++,fn.s[0]++,!(r.indexOf("encrypt")>=0)){n.next=37;break}if(fn.b[0][0]++,fn.s[1]++,fn.b[2][0]++,!(r.indexOf("verify")>=0||(fn.b[2][1]++,r.indexOf("decrypt")>=0))){n.next=12;break}throw fn.b[1][0]++,fn.s[2]++,new Error("InvalidMode");case 12:fn.b[1][1]++;case 13:if(fn.s[3]++,void 0===l.publicKeys){n.next=26;break}if(fn.b[3][0]++,fn.s[4]++,void 0===l.sessionKey){n.next=23;break}throw fn.b[4][0]++,fn.s[5]++,new Error("SessionKeyAndPublicKeyAreExclusive");case 23:fn.b[4][1]++;case 24:n.next=35;break;case 26:if(fn.b[3][1]++,fn.s[6]++,void 0!==l.sessionKey){n.next=34;break}throw fn.b[5][0]++,fn.s[7]++,new Error("NoSessionKeyOrPublicKeyIsGiven");case 34:fn.b[5][1]++;case 35:n.next=38;break;case 37:fn.b[0][1]++;case 38:if(fn.s[8]++,!(r.indexOf("decrypt")>=0)){n.next=73;break}if(fn.b[6][0]++,fn.s[9]++,fn.b[8][0]++,!(r.indexOf("sign")>=0||(fn.b[8][1]++,r.indexOf("encrypt")>=0))){n.next=48;break}throw fn.b[7][0]++,fn.s[10]++,new Error("InvalidMode");case 48:fn.b[7][1]++;case 49:if(fn.s[11]++,fn.b[10][0]++,void 0===l.privateKeyPassSets&&(fn.b[10][1]++,void 0===l.privateKeys)){n.next=62;break}if(fn.b[9][0]++,fn.s[12]++,void 0===l.sessionKey){n.next=59;break}throw fn.b[11][0]++,fn.s[13]++,new Error("SessionKeyAndPrivateKeyAreExclusive");case 59:fn.b[11][1]++;case 60:n.next=71;break;case 62:if(fn.b[9][1]++,fn.s[14]++,void 0!==l.sessionKey){n.next=70;break}throw fn.b[12][0]++,fn.s[15]++,new Error("NoSessionKeyOrPrivateKeyIsGiven");case 70:fn.b[12][1]++;case 71:n.next=74;break;case 73:fn.b[6][1]++;case 74:if(fn.s[16]++,!(r.indexOf("sign")>=0)){n.next=95;break}if(fn.b[13][0]++,fn.s[17]++,fn.b[15][0]++,!(r.indexOf("verify")>=0||(fn.b[15][1]++,r.indexOf("decrypt")>=0))){n.next=84;break}throw fn.b[14][0]++,fn.s[18]++,new Error("InvalidMode");case 84:fn.b[14][1]++;case 85:if(fn.s[19]++,fn.b[17][0]++,void 0!==l.privateKeyPassSets||(fn.b[17][1]++,void 0!==l.privateKeys)){n.next=92;break}throw fn.b[16][0]++,fn.s[20]++,new Error("NoPrivateKey");case 92:fn.b[16][1]++;case 93:n.next=96;break;case 95:fn.b[13][1]++;case 96:if(fn.s[21]++,!(r.indexOf("verify")>=0)){n.next=117;break}if(fn.b[18][0]++,fn.s[22]++,fn.b[20][0]++,!(r.indexOf("sign")>=0||(fn.b[20][1]++,r.indexOf("encrypt")>=0))){n.next=106;break}throw fn.b[19][0]++,fn.s[23]++,new Error("InvalidMode");case 106:fn.b[19][1]++;case 107:if(fn.s[24]++,void 0!==l.publicKeys){n.next=114;break}throw fn.b[21][0]++,fn.s[25]++,new Error("NoPublicKey");case 114:fn.b[21][1]++;case 115:n.next=118;break;case 117:fn.b[18][1]++;case 118:if(fn.s[26]++,"string"!==e){n.next=127;break}return fn.b[22][0]++,fn.s[27]++,n.next=124,bn({keys:l,suite:i,mode:r});case 124:c=n.sent,n.next=140;break;case 127:if(fn.b[22][1]++,fn.s[28]++,"object"!==e){n.next=137;break}return fn.b[23][0]++,fn.s[29]++,n.next=134,gn({keys:l,suite:i,mode:r});case 134:c=n.sent,n.next=140;break;case 137:throw fn.b[23][1]++,fn.s[30]++,new Error("UnsupportedAtThisPoint");case 140:return fn.s[31]++,this._keys=c.keys,fn.s[32]++,this._suite=c.suite,fn.s[33]++,this._mode=c.mode,fn.s[34]++,n.abrupt("return",!0);case 148:case"end":return n.stop()}},n,this)}));return function(e,t){return n.apply(this,arguments)}}()},{key:"canEncrypt",value:function(){return fn.f[4]++,fn.s[38]++,this.mode.indexOf("encrypt")>=0}},{key:"canDecrypt",value:function(){return fn.f[5]++,fn.s[39]++,this.mode.indexOf("decrypt")>=0}},{key:"canSign",value:function(){return fn.f[6]++,fn.s[40]++,this.mode.indexOf("sign")>=0}},{key:"canVerify",value:function(){return fn.f[7]++,fn.s[41]++,this.mode.indexOf("verify")>=0}},{key:"keys",get:function(){return fn.f[1]++,fn.s[35]++,this._keys}},{key:"suite",get:function(){return fn.f[2]++,fn.s[36]++,this._suite}},{key:"mode",get:function(){return fn.f[3]++,fn.s[37]++,this._mode}}]),n}();function yn(){return hn.apply(this,arguments)}function hn(){return(hn=r()(o.a.mark(function n(){var e,t,l,i,r,c,u,s,a,m,f=arguments;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return e=f.length>0&&void 0!==f[0]?f[0]:(fn.b[24][0]++,"string"),t=f.length>1?f[1]:void 0,l=t.keys,i=t.suite,r=t.mode,fn.f[8]++,fn.s[42]++,c=d()(e),fn.s[43]++,u=d()(l),fn.s[44]++,s=d()(i),fn.s[45]++,a=d()(r),fn.s[46]++,m=new pn,fn.s[47]++,n.next=11,m.from(c,{keys:u,suite:s,mode:a});case 11:return fn.s[48]++,n.abrupt("return",m);case 13:case"end":return n.stop()}},n,this)}))).apply(this,arguments)}function bn(n){return vn.apply(this,arguments)}function vn(){return(vn=r()(o.a.mark(function n(e){var t,l,i,c,u;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.keys,l=e.suite,i=e.mode,fn.f[9]++,fn.s[49]++,c={},fn.s[50]++,t.sessionKey?(fn.b[25][0]++,fn.s[51]++,c.sessionKey=t.sessionKey):fn.b[25][1]++,fn.s[52]++,u=[{name:"encrypt_decrypt",op:{public:"encrypt",private:"decrypt"}},{name:"sign_verify",op:{public:"verify",private:"sign"}}],fn.s[53]++,n.next=9,Promise.all(u.map(function(){var n=r()(o.a.mark(function n(e){var r;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(fn.f[10]++,fn.s[54]++,void 0===l[e.name]){n.next=58;break}if(fn.b[26][0]++,fn.s[55]++,"jscu"!==l[e.name]){n.next=11;break}fn.b[27][0]++,fn.s[56]++,r=an,n.next=22;break;case 11:if(fn.b[27][1]++,fn.s[57]++,"openpgp"!==l[e.name]){n.next=19;break}fn.b[28][0]++,fn.s[58]++,r=dn,n.next=22;break;case 19:throw fn.b[28][1]++,fn.s[59]++,new Error("InvalidSuite");case 22:if(fn.s[60]++,!(i.indexOf(e.op.public)>=0)){n.next=37;break}if(fn.b[29][0]++,fn.s[61]++,!t.publicKeys){n.next=34;break}return fn.b[30][0]++,fn.s[62]++,n.next=31,Promise.all(t.publicKeys.map(function(n){return fn.f[11]++,fn.s[63]++,r.importKey("pem",n)}));case 31:c.publicKeys=n.sent,n.next=35;break;case 34:fn.b[30][1]++;case 35:n.next=56;break;case 37:if(fn.b[29][1]++,fn.s[64]++,!(i.indexOf(e.op.private)>=0)){n.next=53;break}if(fn.b[31][0]++,fn.s[65]++,!t.privateKeyPassSets){n.next=50;break}return fn.b[32][0]++,fn.s[66]++,n.next=47,Promise.all(t.privateKeyPassSets.map(function(n){return fn.f[12]++,fn.s[67]++,r.importKey("pem",n.privateKey,n.passphrase)}));case 47:c.privateKeys=n.sent,n.next=51;break;case 50:fn.b[32][1]++;case 51:n.next=56;break;case 53:throw fn.b[31][1]++,fn.s[68]++,new Error("InvalidKeyMode");case 56:n.next=59;break;case 58:fn.b[26][1]++;case 59:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()));case 9:return fn.s[69]++,n.abrupt("return",{keys:c,suite:l,mode:i});case 11:case"end":return n.stop()}},n,this)}))).apply(this,arguments)}function gn(n){return wn.apply(this,arguments)}function wn(){return(wn=r()(o.a.mark(function n(e){var t,l,i,r;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.keys,l=e.suite,i=e.mode,fn.f[13]++,fn.s[70]++,r={},fn.s[71]++,t.sessionKey?(fn.b[33][0]++,fn.s[72]++,r.sessionKey=t.sessionKey):fn.b[33][1]++,fn.s[73]++,t.publicKeys?(fn.b[34][0]++,fn.s[74]++,r.publicKeys=t.publicKeys):fn.b[34][1]++,fn.s[75]++,t.privateKeys?(fn.b[35][0]++,fn.s[76]++,r.privateKeys=t.privateKeys):fn.b[35][1]++,fn.s[77]++,n.abrupt("return",{keys:r,suite:l,mode:i});case 11:case"end":return n.stop()}},n,this)}))).apply(this,arguments)}function xn(n){return kn.apply(this,arguments)}function kn(){return(kn=r()(o.a.mark(function n(e){var t,l;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(fn.f[14]++,fn.s[78]++,t=d()(e),fn.s[79]++,"openpgp"!==t.suite){n.next=11;break}return fn.b[36][0]++,fn.s[80]++,n.next=8,dn.generateKey({userIds:t.userIds,passphrase:t.passphrase,params:t.keyParams}).catch(function(n){throw fn.f[15]++,fn.s[81]++,new Error("GPGKeyGenerationFailed: ".concat(n.message))});case 8:l=n.sent,n.next=24;break;case 11:if(fn.b[36][1]++,fn.s[82]++,"jscu"!==t.suite){n.next=21;break}return fn.b[37][0]++,fn.s[83]++,n.next=18,an.generateKey({passphrase:t.passphrase,params:t.keyParams,encryptOptions:t.encryptOptions}).catch(function(n){throw fn.f[16]++,fn.s[84]++,new Error("JscuKeyGenerationFailed: ".concat(n.message))});case 18:l=n.sent,n.next=24;break;case 21:throw fn.b[37][1]++,fn.s[85]++,new Error("UnsupportedCryptoSuite");case 24:return fn.s[86]++,n.abrupt("return",l);case 26:case"end":return n.stop()}},n,this)}))).apply(this,arguments)}var _n=function(){var n="/Users/jun/ProjectJavaScript/cascade/src/message.js",e="03339d1c694fc5a88b9c35960d208c2f52749595",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/message.js",statementMap:{0:{start:{line:14,column:23},end:{line:14,column:37}},1:{start:{line:15,column:14},end:{line:15,column:27}},2:{start:{line:16,column:2},end:{line:16,column:26}},3:{start:{line:17,column:2},end:{line:17,column:13}},4:{start:{line:22,column:4},end:{line:30,column:51}},5:{start:{line:23,column:6},end:{line:23,column:26}},6:{start:{line:24,column:6},end:{line:24,column:35}},7:{start:{line:26,column:9},end:{line:30,column:51}},8:{start:{line:27,column:6},end:{line:27,column:60}},9:{start:{line:28,column:6},end:{line:28,column:35}},10:{start:{line:30,column:9},end:{line:30,column:51}},11:{start:{line:34,column:4},end:{line:34,column:25}},12:{start:{line:38,column:4},end:{line:40,column:21}},13:{start:{line:38,column:38},end:{line:38,column:59}},14:{start:{line:39,column:9},end:{line:40,column:21}},15:{start:{line:39,column:44},end:{line:39,column:99}},16:{start:{line:40,column:9},end:{line:40,column:21}},17:{start:{line:42,column:23},end:{line:42,column:48}}},fnMap:{0:{name:"importMessage",decl:{start:{line:13,column:16},end:{line:13,column:29}},loc:{start:{line:13,column:34},end:{line:18,column:1}},line:13},1:{name:"(anonymous_1)",decl:{start:{line:21,column:2},end:{line:21,column:3}},loc:{start:{line:21,column:12},end:{line:31,column:3}},line:21},2:{name:"(anonymous_2)",decl:{start:{line:33,column:2},end:{line:33,column:3}},loc:{start:{line:33,column:16},end:{line:35,column:3}},line:33},3:{name:"(anonymous_3)",decl:{start:{line:37,column:2},end:{line:37,column:3}},loc:{start:{line:37,column:17},end:{line:41,column:3}},line:37},4:{name:"(anonymous_4)",decl:{start:{line:42,column:2},end:{line:42,column:3}},loc:{start:{line:42,column:21},end:{line:42,column:50}},line:42}},branchMap:{0:{loc:{start:{line:22,column:4},end:{line:30,column:51}},type:"if",locations:[{start:{line:22,column:4},end:{line:30,column:51}},{start:{line:22,column:4},end:{line:30,column:51}}],line:22},1:{loc:{start:{line:26,column:9},end:{line:30,column:51}},type:"if",locations:[{start:{line:26,column:9},end:{line:30,column:51}},{start:{line:26,column:9},end:{line:30,column:51}}],line:26},2:{loc:{start:{line:38,column:4},end:{line:40,column:21}},type:"if",locations:[{start:{line:38,column:4},end:{line:40,column:21}},{start:{line:38,column:4},end:{line:40,column:21}}],line:38},3:{loc:{start:{line:39,column:9},end:{line:40,column:21}},type:"if",locations:[{start:{line:39,column:9},end:{line:40,column:21}},{start:{line:39,column:9},end:{line:40,column:21}}],line:39}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0},f:{0:0,1:0,2:0,3:0,4:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});return i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)}();function En(n){_n.f[0]++;var e=(_n.s[0]++,d()(n)),t=(_n.s[1]++,new jn);return _n.s[2]++,t._init(e),_n.s[3]++,t}var jn=function(){function n(){u()(this,n)}return a()(n,[{key:"_init",value:function(n){if(_n.f[1]++,_n.s[4]++,n instanceof Uint8Array)_n.b[0][0]++,_n.s[5]++,this._message=n,_n.s[6]++,this._messageType="binary";else{if(_n.b[0][1]++,_n.s[7]++,"string"!=typeof n)throw _n.b[1][1]++,_n.s[10]++,new Error("UnsupportedMessageType");_n.b[1][0]++,_n.s[8]++,this._message=P.a.encoder.stringToArrayBuffer(n),_n.s[9]++,this._messageType="string"}}},{key:"binary",get:function(){return _n.f[2]++,_n.s[11]++,this._message}},{key:"message",get:function(){return _n.f[3]++,_n.s[12]++,"binary"===this.messageType?(_n.b[2][0]++,_n.s[13]++,this._message):(_n.b[2][1]++,_n.s[14]++,"string"===this.messageType?(_n.b[3][0]++,_n.s[15]++,P.a.encoder.arrayBufferToString(this._message)):(_n.b[3][1]++,_n.s[16]++,null))}},{key:"messageType",get:function(){return _n.f[4]++,_n.s[17]++,this._messageType}}]),n}(),An=function(){var n="/Users/jun/ProjectJavaScript/cascade/src/core.js",e="2959919c9eab3283a7f031fa6cc8f0844d15c085",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/core.js",statementMap:{0:{start:{line:25,column:17},end:{line:25,column:51}},1:{start:{line:28,column:2},end:{line:52,column:3}},2:{start:{line:29,column:4},end:{line:29,column:18}},3:{start:{line:32,column:4},end:{line:51,column:47}},4:{start:{line:33,column:6},end:{line:38,column:8}},5:{start:{line:40,column:9},end:{line:51,column:47}},6:{start:{line:41,column:6},end:{line:49,column:8}},7:{start:{line:51,column:9},end:{line:51,column:47}},8:{start:{line:64,column:2},end:{line:64,column:91}},9:{start:{line:64,column:45},end:{line:64,column:91}},10:{start:{line:67,column:17},end:{line:67,column:39}},11:{start:{line:70,column:15},end:{line:70,column:17}},12:{start:{line:71,column:2},end:{line:79,column:3}},13:{start:{line:75,column:4},end:{line:75,column:104}},14:{start:{line:75,column:54},end:{line:75,column:104}},15:{start:{line:76,column:4},end:{line:78,column:73}},16:{start:{line:78,column:22},end:{line:78,column:69}},17:{start:{line:83,column:2},end:{line:83,column:112}},18:{start:{line:83,column:59},end:{line:83,column:112}},19:{start:{line:84,column:20},end:{line:86,column:74}},20:{start:{line:86,column:21},end:{line:86,column:71}},21:{start:{line:90,column:2},end:{line:90,column:42}},22:{start:{line:100,column:2},end:{line:100,column:88}},23:{start:{line:100,column:42},end:{line:100,column:88}},24:{start:{line:103,column:2},end:{line:103,column:110}},25:{start:{line:103,column:57},end:{line:103,column:110}},26:{start:{line:104,column:20},end:{line:106,column:92}},27:{start:{line:106,column:21},end:{line:106,column:38}},28:{start:{line:106,column:39},end:{line:106,column:89}},29:{start:{line:109,column:17},end:{line:109,column:19}},30:{start:{line:110,column:2},end:{line:115,column:88}},31:{start:{line:111,column:4},end:{line:113,column:78}},32:{start:{line:113,column:22},end:{line:113,column:74}},33:{start:{line:115,column:7},end:{line:115,column:88}},34:{start:{line:115,column:56},end:{line:115,column:88}},35:{start:{line:117,column:2},end:{line:117,column:54}},36:{start:{line:129,column:2},end:{line:129,column:85}},37:{start:{line:129,column:42},end:{line:129,column:85}},38:{start:{line:132,column:17},end:{line:132,column:39}},39:{start:{line:136,column:2},end:{line:142,column:47}},40:{start:{line:137,column:4},end:{line:141,column:7}},41:{start:{line:140,column:6},end:{line:140,column:53}},42:{start:{line:142,column:9},end:{line:142,column:47}},43:{start:{line:144,column:2},end:{line:144,column:16}},44:{start:{line:149,column:2},end:{line:149,column:85}},45:{start:{line:149,column:40},end:{line:149,column:85}},46:{start:{line:151,column:17},end:{line:151,column:39}},47:{start:{line:154,column:17},end:{line:154,column:19}},48:{start:{line:155,column:2},end:{line:161,column:63}},49:{start:{line:156,column:4},end:{line:160,column:7}},50:{start:{line:159,column:6},end:{line:159,column:58}},51:{start:{line:161,column:9},end:{line:161,column:63}},52:{start:{line:163,column:2},end:{line:163,column:18}},53:{start:{line:168,column:20},end:{line:177,column:1}},54:{start:{line:169,column:2},end:{line:169,column:73}},55:{start:{line:169,column:26},end:{line:169,column:73}},56:{start:{line:172,column:2},end:{line:174,column:49}},57:{start:{line:172,column:45},end:{line:172,column:61}},58:{start:{line:173,column:7},end:{line:174,column:49}},59:{start:{line:173,column:53},end:{line:173,column:72}},60:{start:{line:174,column:7},end:{line:174,column:49}},61:{start:{line:176,column:2},end:{line:176,column:65}},62:{start:{line:179,column:20},end:{line:188,column:1}},63:{start:{line:180,column:2},end:{line:180,column:72}},64:{start:{line:180,column:25},end:{line:180,column:72}},65:{start:{line:183,column:2},end:{line:185,column:49}},66:{start:{line:183,column:45},end:{line:183,column:61}},67:{start:{line:184,column:7},end:{line:185,column:49}},68:{start:{line:184,column:53},end:{line:184,column:72}},69:{start:{line:185,column:7},end:{line:185,column:49}},70:{start:{line:187,column:2},end:{line:187,column:67}},71:{start:{line:190,column:17},end:{line:199,column:1}},72:{start:{line:191,column:2},end:{line:191,column:64}},73:{start:{line:191,column:23},end:{line:191,column:64}},74:{start:{line:194,column:2},end:{line:196,column:46}},75:{start:{line:194,column:41},end:{line:194,column:57}},76:{start:{line:195,column:7},end:{line:196,column:46}},77:{start:{line:195,column:49},end:{line:195,column:68}},78:{start:{line:196,column:7},end:{line:196,column:46}},79:{start:{line:198,column:2},end:{line:198,column:62}},80:{start:{line:201,column:19},end:{line:210,column:1}},81:{start:{line:202,column:2},end:{line:202,column:73}},82:{start:{line:202,column:24},end:{line:202,column:73}},83:{start:{line:205,column:2},end:{line:207,column:46}},84:{start:{line:205,column:41},end:{line:205,column:57}},85:{start:{line:206,column:7},end:{line:207,column:46}},86:{start:{line:206,column:49},end:{line:206,column:68}},87:{start:{line:207,column:7},end:{line:207,column:46}},88:{start:{line:209,column:2},end:{line:209,column:74}}},fnMap:{0:{name:"generateKey",decl:{start:{line:24,column:22},end:{line:24,column:33}},loc:{start:{line:24,column:46},end:{line:53,column:1}},line:24},1:{name:"encrypt",decl:{start:{line:62,column:22},end:{line:62,column:29}},loc:{start:{line:62,column:54},end:{line:91,column:1}},line:62},2:{name:"(anonymous_2)",decl:{start:{line:78,column:13},end:{line:78,column:14}},loc:{start:{line:78,column:20},end:{line:78,column:71}},line:78},3:{name:"(anonymous_3)",decl:{start:{line:86,column:12},end:{line:86,column:13}},loc:{start:{line:86,column:19},end:{line:86,column:73}},line:86},4:{name:"decrypt",decl:{start:{line:99,column:22},end:{line:99,column:29}},loc:{start:{line:99,column:43},end:{line:118,column:1}},line:99},5:{name:"(anonymous_5)",decl:{start:{line:106,column:12},end:{line:106,column:13}},loc:{start:{line:106,column:19},end:{line:106,column:91}},line:106},6:{name:"(anonymous_6)",decl:{start:{line:113,column:13},end:{line:113,column:14}},loc:{start:{line:113,column:20},end:{line:113,column:76}},line:113},7:{name:"sign",decl:{start:{line:127,column:22},end:{line:127,column:26}},loc:{start:{line:127,column:51},end:{line:145,column:1}},line:127},8:{name:"(anonymous_8)",decl:{start:{line:139,column:13},end:{line:139,column:14}},loc:{start:{line:139,column:20},end:{line:141,column:5}},line:139},9:{name:"verify",decl:{start:{line:147,column:22},end:{line:147,column:28}},loc:{start:{line:147,column:56},end:{line:164,column:1}},line:147},10:{name:"(anonymous_10)",decl:{start:{line:158,column:13},end:{line:158,column:14}},loc:{start:{line:158,column:20},end:{line:160,column:5}},line:158},11:{name:"(anonymous_11)",decl:{start:{line:168,column:20},end:{line:168,column:21}},loc:{start:{line:168,column:56},end:{line:177,column:1}},line:168},12:{name:"(anonymous_12)",decl:{start:{line:179,column:20},end:{line:179,column:21}},loc:{start:{line:179,column:58},end:{line:188,column:1}},line:179},13:{name:"(anonymous_13)",decl:{start:{line:190,column:17},end:{line:190,column:18}},loc:{start:{line:190,column:53},end:{line:199,column:1}},line:190},14:{name:"(anonymous_14)",decl:{start:{line:201,column:19},end:{line:201,column:20}},loc:{start:{line:201,column:66},end:{line:210,column:1}},line:201}},branchMap:{0:{loc:{start:{line:28,column:2},end:{line:52,column:3}},type:"if",locations:[{start:{line:28,column:2},end:{line:52,column:3}},{start:{line:28,column:2},end:{line:52,column:3}}],line:28},1:{loc:{start:{line:32,column:4},end:{line:51,column:47}},type:"if",locations:[{start:{line:32,column:4},end:{line:51,column:47}},{start:{line:32,column:4},end:{line:51,column:47}}],line:32},2:{loc:{start:{line:37,column:10},end:{line:37,column:74}},type:"cond-expr",locations:[{start:{line:37,column:35},end:{line:37,column:69}},{start:{line:37,column:72},end:{line:37,column:74}}],line:37},3:{loc:{start:{line:40,column:9},end:{line:51,column:47}},type:"if",locations:[{start:{line:40,column:9},end:{line:51,column:47}},{start:{line:40,column:9},end:{line:51,column:47}}],line:40},4:{loc:{start:{line:48,column:10},end:{line:48,column:74}},type:"cond-expr",locations:[{start:{line:48,column:35},end:{line:48,column:69}},{start:{line:48,column:72},end:{line:48,column:74}}],line:48},5:{loc:{start:{line:64,column:2},end:{line:64,column:91}},type:"if",locations:[{start:{line:64,column:2},end:{line:64,column:91}},{start:{line:64,column:2},end:{line:64,column:91}}],line:64},6:{loc:{start:{line:71,column:2},end:{line:79,column:3}},type:"if",locations:[{start:{line:71,column:2},end:{line:79,column:3}},{start:{line:71,column:2},end:{line:79,column:3}}],line:71},7:{loc:{start:{line:71,column:6},end:{line:73,column:120}},type:"binary-expr",locations:[{start:{line:71,column:6},end:{line:71,column:40}},{start:{line:71,column:44},end:{line:71,column:64}},{start:{line:72,column:5},end:{line:72,column:42}},{start:{line:73,column:5},end:{line:73,column:42}},{start:{line:73,column:46},end:{line:73,column:118}}],line:71},8:{loc:{start:{line:73,column:48},end:{line:73,column:117}},type:"binary-expr",locations:[{start:{line:73,column:48},end:{line:73,column:82}},{start:{line:73,column:86},end:{line:73,column:117}}],line:73},9:{loc:{start:{line:75,column:4},end:{line:75,column:104}},type:"if",locations:[{start:{line:75,column:4},end:{line:75,column:104}},{start:{line:75,column:4},end:{line:75,column:104}}],line:75},10:{loc:{start:{line:83,column:2},end:{line:83,column:112}},type:"if",locations:[{start:{line:83,column:2},end:{line:83,column:112}},{start:{line:83,column:2},end:{line:83,column:112}}],line:83},11:{loc:{start:{line:100,column:2},end:{line:100,column:88}},type:"if",locations:[{start:{line:100,column:2},end:{line:100,column:88}},{start:{line:100,column:2},end:{line:100,column:88}}],line:100},12:{loc:{start:{line:103,column:2},end:{line:103,column:110}},type:"if",locations:[{start:{line:103,column:2},end:{line:103,column:110}},{start:{line:103,column:2},end:{line:103,column:110}}],line:103},13:{loc:{start:{line:110,column:2},end:{line:115,column:88}},type:"if",locations:[{start:{line:110,column:2},end:{line:115,column:88}},{start:{line:110,column:2},end:{line:115,column:88}}],line:110},14:{loc:{start:{line:110,column:5},end:{line:110,column:66}},type:"binary-expr",locations:[{start:{line:110,column:5},end:{line:110,column:42}},{start:{line:110,column:46},end:{line:110,column:66}}],line:110},15:{loc:{start:{line:115,column:7},end:{line:115,column:88}},type:"if",locations:[{start:{line:115,column:7},end:{line:115,column:88}},{start:{line:115,column:7},end:{line:115,column:88}}],line:115},16:{loc:{start:{line:129,column:2},end:{line:129,column:85}},type:"if",locations:[{start:{line:129,column:2},end:{line:129,column:85}},{start:{line:129,column:2},end:{line:129,column:85}}],line:129},17:{loc:{start:{line:136,column:2},end:{line:142,column:47}},type:"if",locations:[{start:{line:136,column:2},end:{line:142,column:47}},{start:{line:136,column:2},end:{line:142,column:47}}],line:136},18:{loc:{start:{line:149,column:2},end:{line:149,column:85}},type:"if",locations:[{start:{line:149,column:2},end:{line:149,column:85}},{start:{line:149,column:2},end:{line:149,column:85}}],line:149},19:{loc:{start:{line:155,column:2},end:{line:161,column:63}},type:"if",locations:[{start:{line:155,column:2},end:{line:161,column:63}},{start:{line:155,column:2},end:{line:161,column:63}}],line:155},20:{loc:{start:{line:155,column:5},end:{line:155,column:61}},type:"binary-expr",locations:[{start:{line:155,column:5},end:{line:155,column:37}},{start:{line:155,column:41},end:{line:155,column:61}}],line:155},21:{loc:{start:{line:169,column:2},end:{line:169,column:73}},type:"if",locations:[{start:{line:169,column:2},end:{line:169,column:73}},{start:{line:169,column:2},end:{line:169,column:73}}],line:169},22:{loc:{start:{line:172,column:2},end:{line:174,column:49}},type:"if",locations:[{start:{line:172,column:2},end:{line:174,column:49}},{start:{line:172,column:2},end:{line:174,column:49}}],line:172},23:{loc:{start:{line:173,column:7},end:{line:174,column:49}},type:"if",locations:[{start:{line:173,column:7},end:{line:174,column:49}},{start:{line:173,column:7},end:{line:174,column:49}}],line:173},24:{loc:{start:{line:180,column:2},end:{line:180,column:72}},type:"if",locations:[{start:{line:180,column:2},end:{line:180,column:72}},{start:{line:180,column:2},end:{line:180,column:72}}],line:180},25:{loc:{start:{line:183,column:2},end:{line:185,column:49}},type:"if",locations:[{start:{line:183,column:2},end:{line:185,column:49}},{start:{line:183,column:2},end:{line:185,column:49}}],line:183},26:{loc:{start:{line:184,column:7},end:{line:185,column:49}},type:"if",locations:[{start:{line:184,column:7},end:{line:185,column:49}},{start:{line:184,column:7},end:{line:185,column:49}}],line:184},27:{loc:{start:{line:191,column:2},end:{line:191,column:64}},type:"if",locations:[{start:{line:191,column:2},end:{line:191,column:64}},{start:{line:191,column:2},end:{line:191,column:64}}],line:191},28:{loc:{start:{line:194,column:2},end:{line:196,column:46}},type:"if",locations:[{start:{line:194,column:2},end:{line:196,column:46}},{start:{line:194,column:2},end:{line:196,column:46}}],line:194},29:{loc:{start:{line:195,column:7},end:{line:196,column:46}},type:"if",locations:[{start:{line:195,column:7},end:{line:196,column:46}},{start:{line:195,column:7},end:{line:196,column:46}}],line:195},30:{loc:{start:{line:202,column:2},end:{line:202,column:73}},type:"if",locations:[{start:{line:202,column:2},end:{line:202,column:73}},{start:{line:202,column:2},end:{line:202,column:73}}],line:202},31:{loc:{start:{line:205,column:2},end:{line:207,column:46}},type:"if",locations:[{start:{line:205,column:2},end:{line:207,column:46}},{start:{line:205,column:2},end:{line:207,column:46}}],line:205},32:{loc:{start:{line:206,column:7},end:{line:207,column:46}},type:"if",locations:[{start:{line:206,column:7},end:{line:207,column:46}},{start:{line:206,column:7},end:{line:207,column:46}}],line:206}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0,0,0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0,0],25:[0,0],26:[0,0],27:[0,0],28:[0,0],29:[0,0],30:[0,0],31:[0,0],32:[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});return i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)}();function Kn(n){return Sn.apply(this,arguments)}function Sn(){return(Sn=r()(o.a.mark(function n(e){var t;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return An.f[0]++,An.s[0]++,n.next=4,xn(e);case 4:if(t=n.sent,An.s[1]++,"session"!==e.keyParams.type){n.next=12;break}return An.b[0][0]++,An.s[2]++,n.abrupt("return",t);case 12:if(An.b[0][1]++,An.s[3]++,"openpgp"!==e.suite){n.next=20;break}return An.b[1][0]++,An.s[4]++,n.abrupt("return",{publicKey:{keyString:t.publicKey.armor(),keyIds:t.keyIds},privateKey:Object.assign({keyString:t.privateKey.armor(),keyIds:t.keyIds},e.passphrase?(An.b[2][0]++,{passphrase:e.passphrase}):(An.b[2][1]++,{}))});case 20:if(An.b[1][1]++,An.s[5]++,"jscu"!==e.suite){n.next=41;break}return An.b[3][0]++,An.s[6]++,n.next=27,t.publicKey.export("pem",{outputPublic:!0});case 27:return n.t0=n.sent,n.t1=t.keyIds,n.t2={keyString:n.t0,keyIds:n.t1},n.t3=Object,n.next=33,t.privateKey.export("pem");case 33:return n.t4=n.sent,n.t5=t.keyIds,n.t6={keyString:n.t4,keyIds:n.t5},n.t7=e.passphrase?(An.b[4][0]++,{passphrase:e.passphrase}):(An.b[4][1]++,{}),n.t8=n.t3.assign.call(n.t3,n.t6,n.t7),n.abrupt("return",{publicKey:n.t2,privateKey:n.t8});case 41:throw An.b[3][1]++,An.s[7]++,new Error("InvalidCryptoSuite");case 44:case"end":return n.stop()}},n,this)}))).apply(this,arguments)}function Un(n){return Pn.apply(this,arguments)}function Pn(){return(Pn=r()(o.a.mark(function n(e){var t,l,i,r,c,u;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(t=e.message,l=e.keys,i=e.config,An.f[1]++,An.s[8]++,void 0!==i.encrypt){n.next=9;break}throw An.b[5][0]++,An.s[9]++,new Error("InvalidConfigForEncryption");case 9:An.b[5][1]++;case 10:if(An.s[10]++,r=En(t),An.s[11]++,c={},An.s[12]++,An.b[7][0]++,void 0===i.sign||(An.b[7][1]++,!i.sign.required)||(An.b[7][2]++,void 0!==i.encrypt&&(An.b[7][3]++,void 0===i.encrypt||(An.b[7][4]++,An.b[8][0]++,"openpgp"===i.encrypt.suite&&(An.b[8][1]++,"openpgp"===i.sign.suite))))){n.next=29;break}if(An.b[6][0]++,An.s[13]++,l.suite.sign_verify===i.sign.suite){n.next=22;break}throw An.b[9][0]++,An.s[14]++,new Error("UnmatchedKeyTypeToSigningSuite");case 22:An.b[9][1]++;case 23:return An.s[15]++,n.next=26,Fn({message:r,keys:l,options:i.sign.options}).catch(function(n){throw An.f[2]++,An.s[16]++,new Error("SigningFailed: ".concat(n.message))});case 26:c=n.sent,n.next=30;break;case 29:An.b[6][1]++;case 30:if(An.s[17]++,l.suite.encrypt_decrypt===i.encrypt.suite){n.next=37;break}throw An.b[10][0]++,An.s[18]++,new Error("UnmatchedKeyTypeToEncryptionSuite");case 37:An.b[10][1]++;case 38:return An.s[19]++,n.next=41,Rn({message:r,keys:l,options:i.encrypt.options}).catch(function(n){throw An.f[3]++,An.s[20]++,new Error("EncryptionFailed: ".concat(n.message))});case 41:return u=n.sent,An.s[21]++,n.abrupt("return",Object.assign(u,c));case 44:case"end":return n.stop()}},n,this)}))).apply(this,arguments)}function In(n){return On.apply(this,arguments)}function On(){return(On=r()(o.a.mark(function n(e){var t,l,i,r;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(t=e.data,l=e.keys,An.f[4]++,An.s[22]++,void 0!==t.message){n.next=9;break}throw An.b[11][0]++,An.s[23]++,new Error("InvalidEncryptedDataFormat");case 9:An.b[11][1]++;case 10:if(An.s[24]++,l.suite.encrypt_decrypt===t.message.suite){n.next=17;break}throw An.b[12][0]++,An.s[25]++,new Error("UnmatchedKeyTypeToEncryptionSuite");case 17:An.b[12][1]++;case 18:return An.s[26]++,n.next=21,Ln({encrypted:t,keys:l,options:t.message.options}).catch(function(n){throw An.f[5]++,An.s[27]++,console.error(n),An.s[28]++,new Error("DecryptionFailed: ".concat(n.message))});case 21:if(i=n.sent,An.s[29]++,r={},An.s[30]++,An.b[14][0]++,void 0===t.signature||(An.b[14][1]++,!l.keys.publicKeys)){n.next=32;break}return An.b[13][0]++,An.s[31]++,n.next=29,Cn({message:En(i.data),signature:t.signature,keys:l,options:t.signature.options}).catch(function(n){throw An.f[6]++,An.s[32]++,new Error("VerificationFailed: ".concat(n.message))});case 29:r=n.sent,n.next=35;break;case 32:An.b[13][1]++,An.s[33]++,void 0!==i.signatures?(An.b[15][0]++,An.s[34]++,r=i.signatures):An.b[15][1]++;case 35:return An.s[35]++,n.abrupt("return",{data:i.data,signatures:r});case 37:case"end":return n.stop()}},n,this)}))).apply(this,arguments)}function Bn(n){return Mn.apply(this,arguments)}function Mn(){return(Mn=r()(o.a.mark(function n(e){var t,l,i,r,c;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(t=e.message,l=e.keys,i=e.config,An.f[7]++,An.s[36]++,void 0!==i.sign){n.next=9;break}throw An.b[16][0]++,An.s[37]++,new Error("InvalidConfigForSigning");case 9:An.b[16][1]++;case 10:if(An.s[38]++,r=En(t),An.s[39]++,!l.keys.privateKeys){n.next=20;break}return An.b[17][0]++,An.s[40]++,n.next=17,Fn({message:r,keys:l,options:i.sign.options,output:{sign:i.sign.output}}).catch(function(n){throw An.f[8]++,An.s[41]++,new Error("SigningFailed: ".concat(n.message))});case 17:c=n.sent,n.next=23;break;case 20:throw An.b[17][1]++,An.s[42]++,new Error("InvalidPrivateKeys");case 23:return An.s[43]++,n.abrupt("return",c);case 25:case"end":return n.stop()}},n,this)}))).apply(this,arguments)}function Tn(n){return Nn.apply(this,arguments)}function Nn(){return(Nn=r()(o.a.mark(function n(e){var t,l,i,r,c;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(t=e.message,l=e.signature,i=e.keys,An.f[9]++,An.s[44]++,void 0!==l){n.next=9;break}throw An.b[18][0]++,An.s[45]++,new Error("InvalidObjectForSignature");case 9:An.b[18][1]++;case 10:if(An.s[46]++,r=En(t),An.s[47]++,c={},An.s[48]++,An.b[20][0]++,void 0===l||(An.b[20][1]++,!i.keys.publicKeys)){n.next=21;break}return An.b[19][0]++,An.s[49]++,n.next=18,Cn({message:r,signature:l,keys:i,options:l.options}).catch(function(n){throw An.f[10]++,An.s[50]++,new Error("VerificationFailed: ".concat(n.message))});case 18:c=n.sent,n.next=24;break;case 21:throw An.b[19][1]++,An.s[51]++,new Error("InvalidSignatureOrInvalidPublicKey");case 24:return An.s[52]++,n.abrupt("return",c);case 26:case"end":return n.stop()}},n,this)}))).apply(this,arguments)}An.s[53]++;var Rn=function(){var n=r()(o.a.mark(function n(e){var t,l,i,r;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(t=e.message,l=e.keys,i=e.options,An.f[11]++,An.s[54]++,l.canEncrypt()){n.next=9;break}throw An.b[21][0]++,An.s[55]++,new Error("UnsupportedKeyForEncryption");case 9:An.b[21][1]++;case 10:if(An.s[56]++,"jscu"!==l.suite.encrypt_decrypt){n.next=17;break}An.b[22][0]++,An.s[57]++,r=an,n.next=28;break;case 17:if(An.b[22][1]++,An.s[58]++,"openpgp"!==l.suite.encrypt_decrypt){n.next=25;break}An.b[23][0]++,An.s[59]++,r=dn,n.next=28;break;case 25:throw An.b[23][1]++,An.s[60]++,new Error("UnknownEncryptionSuite");case 28:return An.s[61]++,n.abrupt("return",r.encrypt({message:t,keys:l.keys,options:i}));case 30:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}();An.s[62]++;var Ln=function(){var n=r()(o.a.mark(function n(e){var t,l,i,r;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(t=e.encrypted,l=e.keys,i=e.options,An.f[12]++,An.s[63]++,l.canDecrypt()){n.next=9;break}throw An.b[24][0]++,An.s[64]++,new Error("UnsupportedKeyForDecryption");case 9:An.b[24][1]++;case 10:if(An.s[65]++,"jscu"!==l.suite.encrypt_decrypt){n.next=17;break}An.b[25][0]++,An.s[66]++,r=an,n.next=28;break;case 17:if(An.b[25][1]++,An.s[67]++,"openpgp"!==l.suite.encrypt_decrypt){n.next=25;break}An.b[26][0]++,An.s[68]++,r=dn,n.next=28;break;case 25:throw An.b[26][1]++,An.s[69]++,new Error("UnknownDecryptionSuite");case 28:return An.s[70]++,n.abrupt("return",r.decrypt({encrypted:t,keys:l.keys,options:i}));case 30:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}();An.s[71]++;var Fn=function(){var n=r()(o.a.mark(function n(e){var t,l,i,r;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(t=e.message,l=e.keys,i=e.options,An.f[13]++,An.s[72]++,l.canSign()){n.next=9;break}throw An.b[27][0]++,An.s[73]++,new Error("UnsupportedKeyForSign");case 9:An.b[27][1]++;case 10:if(An.s[74]++,"jscu"!==l.suite.sign_verify){n.next=17;break}An.b[28][0]++,An.s[75]++,r=an,n.next=28;break;case 17:if(An.b[28][1]++,An.s[76]++,"openpgp"!==l.suite.sign_verify){n.next=25;break}An.b[29][0]++,An.s[77]++,r=dn,n.next=28;break;case 25:throw An.b[29][1]++,An.s[78]++,new Error("UnknownSigningSuite");case 28:return An.s[79]++,n.abrupt("return",r.sign({message:t,keys:l.keys,options:i}));case 30:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}();An.s[80]++;var Cn=function(){var n=r()(o.a.mark(function n(e){var t,l,i,r,c;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(t=e.message,l=e.signature,i=e.keys,r=e.options,An.f[14]++,An.s[81]++,i.canVerify()){n.next=9;break}throw An.b[30][0]++,An.s[82]++,new Error("UnsupportedKeyForVerification");case 9:An.b[30][1]++;case 10:if(An.s[83]++,"jscu"!==i.suite.sign_verify){n.next=17;break}An.b[31][0]++,An.s[84]++,c=an,n.next=28;break;case 17:if(An.b[31][1]++,An.s[85]++,"openpgp"!==i.suite.sign_verify){n.next=25;break}An.b[32][0]++,An.s[86]++,c=dn,n.next=28;break;case 25:throw An.b[32][1]++,An.s[87]++,new Error("UnknownSigningSuite");case 28:return An.s[88]++,n.abrupt("return",c.verify({message:t,signature:l,keys:i.keys,options:r}));case 30:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}(),Dn=function(){var n="/Users/jun/ProjectJavaScript/cascade/src/cascaded_data.js",e="b74cc94070ed1efa1ed2c3bb456d5ad9eb7a02ab",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/cascaded_data.js",statementMap:{0:{start:{line:10,column:2},end:{line:10,column:90}},1:{start:{line:10,column:43},end:{line:10,column:90}},2:{start:{line:12,column:2},end:{line:14,column:79}},3:{start:{line:13,column:4},end:{line:13,column:37}},4:{start:{line:14,column:16},end:{line:14,column:77}},5:{start:{line:16,column:2},end:{line:16,column:70}},6:{start:{line:16,column:31},end:{line:16,column:70}},7:{start:{line:18,column:27},end:{line:23,column:4}},8:{start:{line:19,column:25},end:{line:19,column:27}},9:{start:{line:20,column:4},end:{line:20,column:101}},10:{start:{line:20,column:43},end:{line:20,column:101}},11:{start:{line:21,column:4},end:{line:21,column:107}},12:{start:{line:21,column:45},end:{line:21,column:107}},13:{start:{line:22,column:4},end:{line:22,column:24}},14:{start:{line:25,column:2},end:{line:25,column:46}},15:{start:{line:30,column:2},end:{line:30,column:75}},16:{start:{line:30,column:32},end:{line:30,column:75}},17:{start:{line:31,column:2},end:{line:35,column:5}},18:{start:{line:32,column:4},end:{line:32,column:132}},19:{start:{line:32,column:89},end:{line:32,column:132}},20:{start:{line:33,column:4},end:{line:33,column:122}},21:{start:{line:33,column:86},end:{line:33,column:122}},22:{start:{line:34,column:4},end:{line:34,column:133}},23:{start:{line:34,column:83},end:{line:34,column:133}},24:{start:{line:37,column:2},end:{line:37,column:32}},25:{start:{line:42,column:4},end:{line:42,column:12}},26:{start:{line:43,column:4},end:{line:43,column:23}},27:{start:{line:47,column:4},end:{line:47,column:83}},28:{start:{line:47,column:41},end:{line:47,column:83}},29:{start:{line:48,column:4},end:{line:48,column:95}},30:{start:{line:48,column:50},end:{line:48,column:95}},31:{start:{line:50,column:4},end:{line:50,column:39}},32:{start:{line:54,column:4},end:{line:54,column:83}},33:{start:{line:54,column:41},end:{line:54,column:83}},34:{start:{line:55,column:4},end:{line:55,column:85}},35:{start:{line:55,column:37},end:{line:55,column:85}},36:{start:{line:56,column:4},end:{line:56,column:78}},37:{start:{line:56,column:38},end:{line:56,column:78}},38:{start:{line:58,column:4},end:{line:58,column:38}},39:{start:{line:62,column:32},end:{line:67,column:6}},40:{start:{line:63,column:27},end:{line:63,column:29}},41:{start:{line:64,column:6},end:{line:64,column:93}},42:{start:{line:64,column:46},end:{line:64,column:93}},43:{start:{line:65,column:6},end:{line:65,column:99}},44:{start:{line:65,column:48},end:{line:65,column:99}},45:{start:{line:66,column:6},end:{line:66,column:26}},46:{start:{line:68,column:24},end:{line:68,column:59}},47:{start:{line:69,column:4},end:{line:69,column:39}},48:{start:{line:72,column:14},end:{line:72,column:38}},49:{start:{line:74,column:18},end:{line:74,column:56}}},fnMap:{0:{name:"importCascadedBuffer",decl:{start:{line:9,column:16},end:{line:9,column:36}},loc:{start:{line:9,column:48},end:{line:26,column:1}},line:9},1:{name:"(anonymous_1)",decl:{start:{line:18,column:36},end:{line:18,column:37}},loc:{start:{line:18,column:45},end:{line:23,column:3}},line:18},2:{name:"createCascadedData",decl:{start:{line:28,column:16},end:{line:28,column:34}},loc:{start:{line:28,column:41},end:{line:38,column:1}},line:28},3:{name:"(anonymous_3)",decl:{start:{line:31,column:12},end:{line:31,column:13}},loc:{start:{line:31,column:21},end:{line:35,column:3}},line:31},4:{name:"(anonymous_4)",decl:{start:{line:41,column:2},end:{line:41,column:3}},loc:{start:{line:41,column:19},end:{line:44,column:3}},line:41},5:{name:"(anonymous_5)",decl:{start:{line:46,column:2},end:{line:46,column:3}},loc:{start:{line:46,column:15},end:{line:51,column:3}},line:46},6:{name:"(anonymous_6)",decl:{start:{line:53,column:2},end:{line:53,column:3}},loc:{start:{line:53,column:23},end:{line:59,column:3}},line:53},7:{name:"(anonymous_7)",decl:{start:{line:61,column:2},end:{line:61,column:3}},loc:{start:{line:61,column:14},end:{line:70,column:3}},line:61},8:{name:"(anonymous_8)",decl:{start:{line:62,column:42},end:{line:62,column:43}},loc:{start:{line:62,column:51},end:{line:67,column:5}},line:62},9:{name:"(anonymous_9)",decl:{start:{line:72,column:2},end:{line:72,column:3}},loc:{start:{line:72,column:12},end:{line:72,column:40}},line:72},10:{name:"(anonymous_10)",decl:{start:{line:74,column:2},end:{line:74,column:3}},loc:{start:{line:74,column:16},end:{line:74,column:58}},line:74}},branchMap:{0:{loc:{start:{line:10,column:2},end:{line:10,column:90}},type:"if",locations:[{start:{line:10,column:2},end:{line:10,column:90}},{start:{line:10,column:2},end:{line:10,column:90}}],line:10},1:{loc:{start:{line:16,column:2},end:{line:16,column:70}},type:"if",locations:[{start:{line:16,column:2},end:{line:16,column:70}},{start:{line:16,column:2},end:{line:16,column:70}}],line:16},2:{loc:{start:{line:20,column:4},end:{line:20,column:101}},type:"if",locations:[{start:{line:20,column:4},end:{line:20,column:101}},{start:{line:20,column:4},end:{line:20,column:101}}],line:20},3:{loc:{start:{line:21,column:4},end:{line:21,column:107}},type:"if",locations:[{start:{line:21,column:4},end:{line:21,column:107}},{start:{line:21,column:4},end:{line:21,column:107}}],line:21},4:{loc:{start:{line:30,column:2},end:{line:30,column:75}},type:"if",locations:[{start:{line:30,column:2},end:{line:30,column:75}},{start:{line:30,column:2},end:{line:30,column:75}}],line:30},5:{loc:{start:{line:32,column:4},end:{line:32,column:132}},type:"if",locations:[{start:{line:32,column:4},end:{line:32,column:132}},{start:{line:32,column:4},end:{line:32,column:132}}],line:32},6:{loc:{start:{line:32,column:7},end:{line:32,column:87}},type:"binary-expr",locations:[{start:{line:32,column:7},end:{line:32,column:41}},{start:{line:32,column:45},end:{line:32,column:87}}],line:32},7:{loc:{start:{line:33,column:4},end:{line:33,column:122}},type:"if",locations:[{start:{line:33,column:4},end:{line:33,column:122}},{start:{line:33,column:4},end:{line:33,column:122}}],line:33},8:{loc:{start:{line:33,column:7},end:{line:33,column:84}},type:"binary-expr",locations:[{start:{line:33,column:7},end:{line:33,column:43}},{start:{line:33,column:47},end:{line:33,column:84}}],line:33},9:{loc:{start:{line:34,column:4},end:{line:34,column:133}},type:"if",locations:[{start:{line:34,column:4},end:{line:34,column:133}},{start:{line:34,column:4},end:{line:34,column:133}}],line:34},10:{loc:{start:{line:34,column:7},end:{line:34,column:81}},type:"binary-expr",locations:[{start:{line:34,column:7},end:{line:34,column:41}},{start:{line:34,column:45},end:{line:34,column:81}}],line:34},11:{loc:{start:{line:47,column:4},end:{line:47,column:83}},type:"if",locations:[{start:{line:47,column:4},end:{line:47,column:83}},{start:{line:47,column:4},end:{line:47,column:83}}],line:47},12:{loc:{start:{line:47,column:8},end:{line:47,column:39}},type:"binary-expr",locations:[{start:{line:47,column:8},end:{line:47,column:28}},{start:{line:47,column:32},end:{line:47,column:39}}],line:47},13:{loc:{start:{line:48,column:4},end:{line:48,column:95}},type:"if",locations:[{start:{line:48,column:4},end:{line:48,column:95}},{start:{line:48,column:4},end:{line:48,column:95}}],line:48},14:{loc:{start:{line:54,column:4},end:{line:54,column:83}},type:"if",locations:[{start:{line:54,column:4},end:{line:54,column:83}},{start:{line:54,column:4},end:{line:54,column:83}}],line:54},15:{loc:{start:{line:54,column:8},end:{line:54,column:39}},type:"binary-expr",locations:[{start:{line:54,column:8},end:{line:54,column:28}},{start:{line:54,column:32},end:{line:54,column:39}}],line:54},16:{loc:{start:{line:55,column:4},end:{line:55,column:85}},type:"if",locations:[{start:{line:55,column:4},end:{line:55,column:85}},{start:{line:55,column:4},end:{line:55,column:85}}],line:55},17:{loc:{start:{line:56,column:4},end:{line:56,column:78}},type:"if",locations:[{start:{line:56,column:4},end:{line:56,column:78}},{start:{line:56,column:4},end:{line:56,column:78}}],line:56},18:{loc:{start:{line:64,column:6},end:{line:64,column:93}},type:"if",locations:[{start:{line:64,column:6},end:{line:64,column:93}},{start:{line:64,column:6},end:{line:64,column:93}}],line:64},19:{loc:{start:{line:65,column:6},end:{line:65,column:99}},type:"if",locations:[{start:{line:65,column:6},end:{line:65,column:99}},{start:{line:65,column:6},end:{line:65,column:99}}],line:65}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});return i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)}();function Jn(n){if(Dn.f[0]++,Dn.s[0]++,!(n instanceof Uint8Array))throw Dn.b[0][0]++,Dn.s[1]++,new Error("NonUint8ArraySerializedData");var e;Dn.b[0][1]++,Dn.s[2]++;try{Dn.s[3]++,e=J.a.decode(n)}catch(n){throw Dn.s[4]++,new Error("FailedToParseCascadedBuffer: ".concat(n.message))}if(Dn.s[5]++,!(e instanceof Array))throw Dn.b[1][0]++,Dn.s[6]++,new Error("InvalidCascadedData");Dn.b[1][1]++;var t=(Dn.s[7]++,e.map(function(n){Dn.f[1]++;var e=(Dn.s[8]++,{});return Dn.s[9]++,void 0!==n.message?(Dn.b[2][0]++,Dn.s[10]++,e.message=z(n.message)):Dn.b[2][1]++,Dn.s[11]++,void 0!==n.signature?(Dn.b[3][0]++,Dn.s[12]++,e.signature=tn(n.signature)):Dn.b[3][1]++,Dn.s[13]++,e}));return Dn.s[14]++,Gn(t)}function Gn(n){if(Dn.f[2]++,Dn.s[15]++,!(n instanceof Array))throw Dn.b[4][0]++,Dn.s[16]++,new Error("NotArrayForCascadedData");return Dn.b[4][1]++,Dn.s[17]++,n.map(function(n){if(Dn.f[3]++,Dn.s[18]++,Dn.b[6][0]++,!(void 0===n.message||(Dn.b[6][1]++,n.message instanceof $)))throw Dn.b[5][0]++,Dn.s[19]++,new Error("InvalidEncryptedMessage");if(Dn.b[5][1]++,Dn.s[20]++,Dn.b[8][0]++,!(void 0===n.signature||(Dn.b[8][1]++,n.signature instanceof on)))throw Dn.b[7][0]++,Dn.s[21]++,new Error("InvalidSignature");if(Dn.b[7][1]++,Dn.s[22]++,Dn.b[10][0]++,void 0===n.message&&(Dn.b[10][1]++,void 0===n.signature))throw Dn.b[9][0]++,Dn.s[23]++,new Error("NoEncryptedMessageAndSignature");Dn.b[9][1]++}),Dn.s[24]++,new Hn(n)}var Hn=function(n){function e(n){var t,l;return u()(this,e),Dn.f[4]++,Dn.s[25]++,l=h()(this,v()(e).call(this)),Dn.s[26]++,(t=l).push.apply(t,p()(n)),l}return w()(e,n),a()(e,[{key:"extract",value:function(n){if(Dn.f[5]++,Dn.s[27]++,Dn.b[12][0]++,n>this.length-1||(Dn.b[12][1]++,n<0))throw Dn.b[11][0]++,Dn.s[28]++,new Error("InvalidIndexOutOfRange");if(Dn.b[11][1]++,Dn.s[29]++,void 0===this[n].message)throw Dn.b[13][0]++,Dn.s[30]++,new Error("MessageObjectDoesNotExist");return Dn.b[13][1]++,Dn.s[31]++,this[n].message.extract()}},{key:"insert",value:function(n,e){if(Dn.f[6]++,Dn.s[32]++,Dn.b[15][0]++,n>this.length-1||(Dn.b[15][1]++,n<0))throw Dn.b[14][0]++,Dn.s[33]++,new Error("InvalidIndexOutOfRange");if(Dn.b[14][1]++,Dn.s[34]++,!(e instanceof Array))throw Dn.b[16][0]++,Dn.s[35]++,new Error("InvalidEncryptedMessageArray");if(Dn.b[16][1]++,Dn.s[36]++,this[n].message.length>0)throw Dn.b[17][0]++,Dn.s[37]++,new Error("MessageAlreadyExists");Dn.b[17][1]++,Dn.s[38]++,this[n].message.insert(e)}},{key:"serialize",value:function(){Dn.f[7]++;var n=(Dn.s[39]++,this.map(function(n){Dn.f[8]++;var e=(Dn.s[40]++,{});return Dn.s[41]++,void 0!==n.message?(Dn.b[18][0]++,Dn.s[42]++,e.message=n.message.serialize()):Dn.b[18][1]++,Dn.s[43]++,void 0!==n.signature?(Dn.b[19][0]++,Dn.s[44]++,e.signature=n.signature.serialize()):Dn.b[19][1]++,Dn.s[45]++,e})),e=(Dn.s[46]++,J.a.encode(n));return Dn.s[47]++,new Uint8Array(e)}},{key:"toArray",value:function(){return Dn.f[9]++,Dn.s[48]++,Array.from(this)}},{key:"map",value:function(n){return Dn.f[10]++,Dn.s[49]++,Array.from(this).map(n)}}]),e}(S()(Array)),Vn=function(){var n="/Users/jun/ProjectJavaScript/cascade/src/cascade.js",e="c3a7d03cdb7f9eaffefdd506f4037b461c4ffa06",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/cascade.js",statementMap:{0:{start:{line:15,column:20},end:{line:15,column:35}},1:{start:{line:16,column:25},end:{line:16,column:60}},2:{start:{line:16,column:47},end:{line:16,column:59}},3:{start:{line:18,column:18},end:{line:18,column:31}},4:{start:{line:19,column:2},end:{line:19,column:79}},5:{start:{line:20,column:2},end:{line:20,column:43}},6:{start:{line:22,column:2},end:{line:22,column:17}},7:{start:{line:26,column:20},end:{line:26,column:35}},8:{start:{line:28,column:18},end:{line:28,column:31}},9:{start:{line:29,column:2},end:{line:29,column:63}},10:{start:{line:30,column:2},end:{line:30,column:37}},11:{start:{line:32,column:2},end:{line:32,column:17}},12:{start:{line:36,column:14},end:{line:36,column:36}},13:{start:{line:40,column:4},end:{line:40,column:64}},14:{start:{line:40,column:33},end:{line:40,column:64}},15:{start:{line:41,column:4},end:{line:41,column:65}},16:{start:{line:41,column:33},end:{line:41,column:65}},17:{start:{line:42,column:4},end:{line:42,column:73}},18:{start:{line:42,column:37},end:{line:42,column:73}},19:{start:{line:44,column:4},end:{line:44,column:29}},20:{start:{line:45,column:4},end:{line:45,column:25}},21:{start:{line:47,column:4},end:{line:54,column:5}},22:{start:{line:48,column:6},end:{line:48,column:78}},23:{start:{line:48,column:41},end:{line:48,column:78}},24:{start:{line:49,column:22},end:{line:52,column:8}},25:{start:{line:50,column:8},end:{line:50,column:86}},26:{start:{line:50,column:50},end:{line:50,column:86}},27:{start:{line:51,column:8},end:{line:51,column:24}},28:{start:{line:53,column:6},end:{line:53,column:28}},29:{start:{line:56,column:4},end:{line:63,column:5}},30:{start:{line:57,column:6},end:{line:57,column:92}},31:{start:{line:57,column:48},end:{line:57,column:92}},32:{start:{line:58,column:22},end:{line:61,column:8}},33:{start:{line:59,column:8},end:{line:59,column:102}},34:{start:{line:59,column:59},end:{line:59,column:102}},35:{start:{line:60,column:8},end:{line:60,column:39}},36:{start:{line:62,column:6},end:{line:62,column:28}},37:{start:{line:66,column:4},end:{line:66,column:47}},38:{start:{line:71,column:24},end:{line:71,column:54}},39:{start:{line:73,column:23},end:{line:73,column:52}},40:{start:{line:74,column:4},end:{line:108,column:8}},41:{start:{line:75,column:6},end:{line:75,column:101}},42:{start:{line:75,column:65},end:{line:75,column:101}},43:{start:{line:77,column:26},end:{line:77,column:70}},44:{start:{line:78,column:24},end:{line:78,column:35}},45:{start:{line:81,column:24},end:{line:81,column:106}},46:{start:{line:82,column:6},end:{line:82,column:44}},47:{start:{line:83,column:25},end:{line:83,column:59}},48:{start:{line:84,column:31},end:{line:86,column:46}},49:{start:{line:91,column:6},end:{line:96,column:7}},50:{start:{line:91,column:50},end:{line:91,column:83}},51:{start:{line:93,column:8},end:{line:95,column:45}},52:{start:{line:93,column:40},end:{line:93,column:100}},53:{start:{line:94,column:13},end:{line:95,column:45}},54:{start:{line:94,column:48},end:{line:94,column:111}},55:{start:{line:95,column:13},end:{line:95,column:45}},56:{start:{line:97,column:6},end:{line:97,column:44}},57:{start:{line:100,column:6},end:{line:105,column:7}},58:{start:{line:101,column:8},end:{line:101,column:92}},59:{start:{line:102,column:8},end:{line:102,column:51}},60:{start:{line:103,column:8},end:{line:103,column:57}},61:{start:{line:104,column:8},end:{line:104,column:31}},62:{start:{line:107,column:6},end:{line:107,column:112}},63:{start:{line:116,column:4},end:{line:116,column:80}},64:{start:{line:116,column:40},end:{line:116,column:80}},65:{start:{line:117,column:4},end:{line:117,column:81}},66:{start:{line:117,column:41},end:{line:117,column:81}},67:{start:{line:120,column:4},end:{line:120,column:30}},68:{start:{line:122,column:17},end:{line:122,column:75}},69:{start:{line:122,column:55},end:{line:122,column:73}},70:{start:{line:123,column:4},end:{line:123,column:36}},71:{start:{line:127,column:4},end:{line:127,column:80}},72:{start:{line:127,column:40},end:{line:127,column:80}},73:{start:{line:130,column:29},end:{line:130,column:58}},74:{start:{line:133,column:22},end:{line:133,column:44}},75:{start:{line:134,column:4},end:{line:174,column:5}},76:{start:{line:135,column:6},end:{line:135,column:82}},77:{start:{line:135,column:45},end:{line:135,column:82}},78:{start:{line:136,column:6},end:{line:136,column:86}},79:{start:{line:136,column:49},end:{line:136,column:86}},80:{start:{line:138,column:6},end:{line:138,column:53}},81:{start:{line:141,column:6},end:{line:173,column:7}},82:{start:{line:142,column:28},end:{line:142,column:77}},83:{start:{line:143,column:26},end:{line:143,column:37}},84:{start:{line:146,column:8},end:{line:155,column:9}},85:{start:{line:146,column:72},end:{line:146,column:132}},86:{start:{line:148,column:10},end:{line:154,column:47}},87:{start:{line:149,column:12},end:{line:149,column:104}},88:{start:{line:151,column:15},end:{line:154,column:47}},89:{start:{line:152,column:12},end:{line:152,column:107}},90:{start:{line:154,column:15},end:{line:154,column:47}},91:{start:{line:158,column:8},end:{line:170,column:9}},92:{start:{line:159,column:10},end:{line:159,column:64}},93:{start:{line:160,column:10},end:{line:160,column:69}},94:{start:{line:161,column:10},end:{line:161,column:35}},95:{start:{line:164,column:13},end:{line:170,column:9}},96:{start:{line:167,column:10},end:{line:167,column:64}},97:{start:{line:168,column:10},end:{line:168,column:46}},98:{start:{line:169,column:10},end:{line:169,column:35}},99:{start:{line:172,column:8},end:{line:172,column:126}},100:{start:{line:175,column:4},end:{line:175,column:21}},101:{start:{line:179,column:16},end:{line:179,column:41}},102:{start:{line:180,column:16},end:{line:180,column:37}},103:{start:{line:183,column:14},end:{line:183,column:38}},104:{start:{line:185,column:18},end:{line:185,column:54}},105:{start:{line:186,column:17},end:{line:186,column:51}}},fnMap:{0:{name:"createEncryptionCascade",decl:{start:{line:14,column:22},end:{line:14,column:45}},loc:{start:{line:14,column:64},end:{line:23,column:1}},line:14},1:{name:"(anonymous_1)",decl:{start:{line:16,column:40},end:{line:16,column:41}},loc:{start:{line:16,column:47},end:{line:16,column:59}},line:16},2:{name:"createDecryptionCascade",decl:{start:{line:25,column:16},end:{line:25,column:39}},loc:{start:{line:25,column:58},end:{line:33,column:1}},line:25},3:{name:"(anonymous_3)",decl:{start:{line:38,column:2},end:{line:38,column:3}},loc:{start:{line:38,column:43},end:{line:67,column:3}},line:38},4:{name:"(anonymous_4)",decl:{start:{line:49,column:37},end:{line:49,column:38}},loc:{start:{line:49,column:49},end:{line:52,column:7}},line:49},5:{name:"(anonymous_5)",decl:{start:{line:58,column:37},end:{line:58,column:38}},loc:{start:{line:58,column:58},end:{line:61,column:7}},line:58},6:{name:"(anonymous_6)",decl:{start:{line:69,column:2},end:{line:69,column:3}},loc:{start:{line:69,column:34},end:{line:109,column:3}},line:69},7:{name:"(anonymous_7)",decl:{start:{line:74,column:38},end:{line:74,column:39}},loc:{start:{line:74,column:59},end:{line:108,column:5}},line:74},8:{name:"(anonymous_8)",decl:{start:{line:111,column:2},end:{line:111,column:3}},loc:{start:{line:111,column:28},end:{line:113,column:3}},line:111},9:{name:"(anonymous_9)",decl:{start:{line:115,column:2},end:{line:115,column:3}},loc:{start:{line:115,column:24},end:{line:124,column:3}},line:115},10:{name:"(anonymous_10)",decl:{start:{line:122,column:45},end:{line:122,column:46}},loc:{start:{line:122,column:55},end:{line:122,column:73}},line:122},11:{name:"(anonymous_11)",decl:{start:{line:126,column:2},end:{line:126,column:3}},loc:{start:{line:126,column:17},end:{line:177,column:3}},line:126},12:{name:"(anonymous_12)",decl:{start:{line:179,column:2},end:{line:179,column:3}},loc:{start:{line:179,column:14},end:{line:179,column:43}},line:179},13:{name:"(anonymous_13)",decl:{start:{line:180,column:2},end:{line:180,column:3}},loc:{start:{line:180,column:14},end:{line:180,column:39}},line:180},14:{name:"(anonymous_14)",decl:{start:{line:183,column:2},end:{line:183,column:3}},loc:{start:{line:183,column:12},end:{line:183,column:40}},line:183},15:{name:"(anonymous_15)",decl:{start:{line:185,column:2},end:{line:185,column:3}},loc:{start:{line:185,column:16},end:{line:185,column:56}},line:185},16:{name:"(anonymous_16)",decl:{start:{line:186,column:2},end:{line:186,column:3}},loc:{start:{line:186,column:15},end:{line:186,column:53}},line:186}},branchMap:{0:{loc:{start:{line:40,column:4},end:{line:40,column:64}},type:"if",locations:[{start:{line:40,column:4},end:{line:40,column:64}},{start:{line:40,column:4},end:{line:40,column:64}}],line:40},1:{loc:{start:{line:41,column:4},end:{line:41,column:65}},type:"if",locations:[{start:{line:41,column:4},end:{line:41,column:65}},{start:{line:41,column:4},end:{line:41,column:65}}],line:41},2:{loc:{start:{line:42,column:4},end:{line:42,column:73}},type:"if",locations:[{start:{line:42,column:4},end:{line:42,column:73}},{start:{line:42,column:4},end:{line:42,column:73}}],line:42},3:{loc:{start:{line:47,column:4},end:{line:54,column:5}},type:"if",locations:[{start:{line:47,column:4},end:{line:54,column:5}},{start:{line:47,column:4},end:{line:54,column:5}}],line:47},4:{loc:{start:{line:48,column:6},end:{line:48,column:78}},type:"if",locations:[{start:{line:48,column:6},end:{line:48,column:78}},{start:{line:48,column:6},end:{line:48,column:78}}],line:48},5:{loc:{start:{line:50,column:8},end:{line:50,column:86}},type:"if",locations:[{start:{line:50,column:8},end:{line:50,column:86}},{start:{line:50,column:8},end:{line:50,column:86}}],line:50},6:{loc:{start:{line:56,column:4},end:{line:63,column:5}},type:"if",locations:[{start:{line:56,column:4},end:{line:63,column:5}},{start:{line:56,column:4},end:{line:63,column:5}}],line:56},7:{loc:{start:{line:57,column:6},end:{line:57,column:92}},type:"if",locations:[{start:{line:57,column:6},end:{line:57,column:92}},{start:{line:57,column:6},end:{line:57,column:92}}],line:57},8:{loc:{start:{line:59,column:8},end:{line:59,column:102}},type:"if",locations:[{start:{line:59,column:8},end:{line:59,column:102}},{start:{line:59,column:8},end:{line:59,column:102}}],line:59},9:{loc:{start:{line:75,column:6},end:{line:75,column:101}},type:"if",locations:[{start:{line:75,column:6},end:{line:75,column:101}},{start:{line:75,column:6},end:{line:75,column:101}}],line:75},10:{loc:{start:{line:84,column:31},end:{line:86,column:46}},type:"cond-expr",locations:[{start:{line:85,column:10},end:{line:85,column:38}},{start:{line:86,column:10},end:{line:86,column:46}}],line:84},11:{loc:{start:{line:91,column:6},end:{line:96,column:7}},type:"if",locations:[{start:{line:91,column:6},end:{line:96,column:7}},{start:{line:91,column:6},end:{line:96,column:7}}],line:91},12:{loc:{start:{line:93,column:8},end:{line:95,column:45}},type:"if",locations:[{start:{line:93,column:8},end:{line:95,column:45}},{start:{line:93,column:8},end:{line:95,column:45}}],line:93},13:{loc:{start:{line:94,column:13},end:{line:95,column:45}},type:"if",locations:[{start:{line:94,column:13},end:{line:95,column:45}},{start:{line:94,column:13},end:{line:95,column:45}}],line:94},14:{loc:{start:{line:100,column:6},end:{line:105,column:7}},type:"if",locations:[{start:{line:100,column:6},end:{line:105,column:7}},{start:{line:100,column:6},end:{line:105,column:7}}],line:100},15:{loc:{start:{line:100,column:10},end:{line:100,column:78}},type:"binary-expr",locations:[{start:{line:100,column:10},end:{line:100,column:49}},{start:{line:100,column:53},end:{line:100,column:78}}],line:100},16:{loc:{start:{line:116,column:4},end:{line:116,column:80}},type:"if",locations:[{start:{line:116,column:4},end:{line:116,column:80}},{start:{line:116,column:4},end:{line:116,column:80}}],line:116},17:{loc:{start:{line:117,column:4},end:{line:117,column:81}},type:"if",locations:[{start:{line:117,column:4},end:{line:117,column:81}},{start:{line:117,column:4},end:{line:117,column:81}}],line:117},18:{loc:{start:{line:127,column:4},end:{line:127,column:80}},type:"if",locations:[{start:{line:127,column:4},end:{line:127,column:80}},{start:{line:127,column:4},end:{line:127,column:80}}],line:127},19:{loc:{start:{line:135,column:6},end:{line:135,column:82}},type:"if",locations:[{start:{line:135,column:6},end:{line:135,column:82}},{start:{line:135,column:6},end:{line:135,column:82}}],line:135},20:{loc:{start:{line:136,column:6},end:{line:136,column:86}},type:"if",locations:[{start:{line:136,column:6},end:{line:136,column:86}},{start:{line:136,column:6},end:{line:136,column:86}}],line:136},21:{loc:{start:{line:141,column:6},end:{line:173,column:7}},type:"if",locations:[{start:{line:141,column:6},end:{line:173,column:7}},{start:{line:141,column:6},end:{line:173,column:7}}],line:141},22:{loc:{start:{line:146,column:8},end:{line:155,column:9}},type:"if",locations:[{start:{line:146,column:8},end:{line:155,column:9}},{start:{line:146,column:8},end:{line:155,column:9}}],line:146},23:{loc:{start:{line:148,column:10},end:{line:154,column:47}},type:"if",locations:[{start:{line:148,column:10},end:{line:154,column:47}},{start:{line:148,column:10},end:{line:154,column:47}}],line:148},24:{loc:{start:{line:151,column:15},end:{line:154,column:47}},type:"if",locations:[{start:{line:151,column:15},end:{line:154,column:47}},{start:{line:151,column:15},end:{line:154,column:47}}],line:151},25:{loc:{start:{line:158,column:8},end:{line:170,column:9}},type:"if",locations:[{start:{line:158,column:8},end:{line:170,column:9}},{start:{line:158,column:8},end:{line:170,column:9}}],line:158},26:{loc:{start:{line:158,column:12},end:{line:158,column:102}},type:"binary-expr",locations:[{start:{line:158,column:12},end:{line:158,column:59}},{start:{line:158,column:63},end:{line:158,column:102}}],line:158},27:{loc:{start:{line:164,column:13},end:{line:170,column:9}},type:"if",locations:[{start:{line:164,column:13},end:{line:170,column:9}},{start:{line:164,column:13},end:{line:170,column:9}}],line:164},28:{loc:{start:{line:164,column:17},end:{line:166,column:52}},type:"binary-expr",locations:[{start:{line:164,column:17},end:{line:164,column:64}},{start:{line:165,column:13},end:{line:165,column:57}},{start:{line:166,column:13},end:{line:166,column:52}}],line:164}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0,0],25:[0,0],26:[0,0],27:[0,0],28:[0,0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});return i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)}();function zn(n){return Yn.apply(this,arguments)}function Yn(){return(Yn=r()(o.a.mark(function n(e){var t,l,i,r,c;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.keys,l=e.procedure,Vn.f[0]++,Vn.s[0]++,i=d()(t),Vn.s[1]++,r=l.map(function(n){return Vn.f[1]++,Vn.s[2]++,d()(n)}),Vn.s[3]++,c=new $n,Vn.s[4]++,c._init({mode:"encrypt",keys:i,procedure:r}),Vn.s[5]++,n.next=10,c._initEncryptionProcedure();case 10:return Vn.s[6]++,n.abrupt("return",c);case 12:case"end":return n.stop()}},n,this)}))).apply(this,arguments)}function Wn(n){var e=n.keys,t=n.encrypted;Vn.f[2]++;var l=(Vn.s[7]++,d()(e)),o=(Vn.s[8]++,new $n);return Vn.s[9]++,o._init({mode:"decrypt",keys:l,encrypted:t}),Vn.s[10]++,o._initDecryptionProcedure(),Vn.s[11]++,o}var qn=(Vn.s[12]++,["encrypt","decrypt"]),$n=function(n){function e(){return u()(this,e),h()(this,v()(e).apply(this,arguments))}return w()(e,n),a()(e,[{key:"_init",value:function(n){var e=n.mode,t=n.keys,l=n.procedure,o=n.encrypted;if(Vn.f[3]++,Vn.s[13]++,qn.indexOf(e)<0)throw Vn.b[0][0]++,Vn.s[14]++,new Error("InvalidMode");if(Vn.b[0][1]++,Vn.s[15]++,!(t instanceof pn))throw Vn.b[1][0]++,Vn.s[16]++,new Error("NotKeyObject");if(Vn.b[1][1]++,Vn.s[17]++,t.mode.indexOf(e)<0)throw Vn.b[2][0]++,Vn.s[18]++,new Error("UnmatchedKeyMode");if(Vn.b[2][1]++,Vn.s[19]++,this._cascadeMode=e,Vn.s[20]++,this._orgKeys=t,Vn.s[21]++,"encrypt"===e){if(Vn.b[3][0]++,Vn.s[22]++,!(l instanceof Array))throw Vn.b[4][0]++,Vn.s[23]++,new Error("NotArrayProcedure");Vn.b[4][1]++;var i=(Vn.s[24]++,l.map(function(n){if(Vn.f[4]++,Vn.s[25]++,void 0===n.encrypt)throw Vn.b[5][0]++,Vn.s[26]++,new Error("InvalidProcedure");return Vn.b[5][1]++,Vn.s[27]++,{config:n}}));Vn.s[28]++,this.push.apply(this,p()(i))}else Vn.b[3][1]++;if(Vn.s[29]++,"decrypt"===e){if(Vn.b[6][0]++,Vn.s[30]++,!(o instanceof Hn))throw Vn.b[7][0]++,Vn.s[31]++,new Error("NotCascadedEncryptedData");Vn.b[7][1]++;var r=(Vn.s[32]++,o.map(function(n){if(Vn.f[5]++,Vn.s[33]++,void 0===n.message)throw Vn.b[8][0]++,Vn.s[34]++,new Error("InvalidEncryptedMessage");return Vn.b[8][1]++,Vn.s[35]++,{data:n}}));Vn.s[36]++,this.push.apply(this,p()(r))}else Vn.b[6][1]++;Vn.s[37]++,this[this.length-1].keys=this._orgKeys}},{key:"_initEncryptionProcedure",value:function(){var n=r()(o.a.mark(function n(){var e,t,l=this;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return Vn.f[6]++,Vn.s[38]++,e=this._orgKeys.keys.privateKeys,Vn.s[39]++,t=this.slice(0,this.length-1),Vn.s[40]++,n.next=6,Promise.all(t.map(function(){var n=r()(o.a.mark(function n(t,i){var r,c,u,s,a,m;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(Vn.f[7]++,Vn.s[41]++,void 0!==t.config.encrypt.onetimeKey){n.next=8;break}throw Vn.b[9][0]++,Vn.s[42]++,new Error("NoKeyParamsGiven");case 8:Vn.b[9][1]++;case 9:return Vn.s[43]++,r={encrypt_decrypt:t.config.encrypt.suite},Vn.s[44]++,c=["encrypt"],Vn.s[45]++,u=Object.assign({suite:t.config.encrypt.suite},t.config.encrypt.onetimeKey),Vn.s[46]++,delete t.config.encrypt.onetimeKey,Vn.s[47]++,n.next=17,xn(u);case 17:if(s=n.sent,Vn.s[48]++,a="session"===u.keyParams.type?(Vn.b[10][0]++,{sessionKey:s.key}):(Vn.b[10][1]++,{publicKeys:[s.publicKey]}),Vn.s[49]++,"session"!==u.keyParams.type){n.next=26;break}Vn.b[11][0]++,Vn.s[50]++,m=s.key,n.next=47;break;case 26:if(Vn.b[11][1]++,Vn.s[51]++,"jscu"!==u.suite){n.next=36;break}return Vn.b[12][0]++,Vn.s[52]++,n.next=33,s.privateKey.export("der");case 33:m=n.sent,n.next=47;break;case 36:if(Vn.b[12][1]++,Vn.s[53]++,"openpgp"!==u.suite){n.next=44;break}Vn.b[13][0]++,Vn.s[54]++,m=s.privateKey.toPacketlist().write(),n.next=47;break;case 44:throw Vn.b[13][1]++,Vn.s[55]++,new Error("UnknownSuite");case 47:return Vn.s[56]++,l[i+1].message=m,Vn.s[57]++,Vn.b[15][0]++,void 0!==t.config.sign&&(Vn.b[15][1]++,t.config.sign.required)?(Vn.b[14][0]++,Vn.s[58]++,t.config.sign=Object.assign(t.config.sign,l[l.length-1].config.sign),Vn.s[59]++,a.privateKeys=e,Vn.s[60]++,r.sign_verify=t.config.sign.suite,Vn.s[61]++,c.push("sign")):Vn.b[14][1]++,Vn.s[62]++,n.next=54,yn("object",{keys:a,suite:r,mode:c});case 54:l[i].keys=n.sent;case 55:case"end":return n.stop()}},n,this)}));return function(e,t){return n.apply(this,arguments)}}()));case 6:case"end":return n.stop()}},n,this)}));return function(){return n.apply(this,arguments)}}()},{key:"_initDecryptionProcedure",value:function(){Vn.f[8]++}},{key:"encrypt",value:function(){var n=r()(o.a.mark(function n(e){var t;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(Vn.f[9]++,Vn.s[63]++,"encrypt"===this._cascadeMode){n.next=8;break}throw Vn.b[16][0]++,Vn.s[64]++,new Error("NotEncryptionCascade");case 8:Vn.b[16][1]++;case 9:if(Vn.s[65]++,e instanceof Uint8Array){n.next=16;break}throw Vn.b[17][0]++,Vn.s[66]++,new Error("NotUint8ArrayMessage");case 16:Vn.b[17][1]++;case 17:return Vn.s[67]++,this[0].message=e,Vn.s[68]++,n.next=22,Promise.all(this.map(function(n){return Vn.f[10]++,Vn.s[69]++,Un(n)}));case 22:return t=n.sent,Vn.s[70]++,n.abrupt("return",Gn(t));case 25:case"end":return n.stop()}},n,this)}));return function(e){return n.apply(this,arguments)}}()},{key:"decrypt",value:function(){var n=r()(o.a.mark(function n(){var e,t,l,i,r,c;return o.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(Vn.f[11]++,Vn.s[71]++,"decrypt"===this._cascadeMode){n.next=8;break}throw Vn.b[18][0]++,Vn.s[72]++,new Error("NotDecryptionCascade");case 8:Vn.b[18][1]++;case 9:Vn.s[73]++,e=this._orgKeys.keys.publicKeys,Vn.s[74]++,t=new Array(this.length),Vn.s[75]++,l=this.length-1;case 13:if(!(l>=0)){n.next=86;break}if(Vn.s[76]++,this[l].keys instanceof pn){n.next=21;break}throw Vn.b[19][0]++,Vn.s[77]++,new Error("InvalidKeysObject");case 21:Vn.b[19][1]++;case 22:if(Vn.s[78]++,void 0!==this[l].data){n.next=29;break}throw Vn.b[20][0]++,Vn.s[79]++,new Error("InvalidDataObject");case 29:Vn.b[20][1]++;case 30:return Vn.s[80]++,n.next=33,In(this[l]);case 33:if(t[l]=n.sent,Vn.s[81]++,!(l>0)){n.next=82;break}if(Vn.b[21][0]++,Vn.s[82]++,i={encrypt_decrypt:this[l-1].data.message.suite},Vn.s[83]++,r=["decrypt"],c=void 0,Vn.s[84]++,"session_key_encrypt"!==this[l-1].data.message.keyType){n.next=47;break}Vn.b[22][0]++,Vn.s[85]++,c={sessionKey:t[l].data},n.next=74;break;case 47:if(Vn.b[22][1]++,Vn.s[86]++,"jscu"!==this[l-1].data.message.suite){n.next=59;break}return Vn.b[23][0]++,Vn.s[87]++,n.next=54,an.importKey("der",t[l].data);case 54:n.t0=n.sent,n.t1=[n.t0],c={privateKeys:n.t1},n.next=74;break;case 59:if(Vn.b[23][1]++,Vn.s[88]++,"openpgp"!==this[l-1].data.message.suite){n.next=71;break}return Vn.b[24][0]++,Vn.s[89]++,n.next=66,dn.importKey("der",t[l].data);case 66:n.t2=n.sent,n.t3=[n.t2],c={privateKeys:n.t3},n.next=74;break;case 71:throw Vn.b[24][1]++,Vn.s[90]++,new Error("UnknownSuite");case 74:return Vn.s[91]++,Vn.b[26][0]++,this[l-1].data.signature instanceof on&&(Vn.b[26][1]++,void 0!==e)?(Vn.b[25][0]++,Vn.s[92]++,c.publicKeys=e,Vn.s[93]++,i.sign_verify=this[l-1].data.signature.suite,Vn.s[94]++,r.push("verify")):(Vn.b[25][1]++,Vn.s[95]++,Vn.b[28][0]++,void 0!==this[l-1].data.message&&(Vn.b[28][1]++,"openpgp"===this[l-1].data.message.suite)&&(Vn.b[28][2]++,void 0!==e)?(Vn.b[27][0]++,Vn.s[96]++,c.publicKeys=e,Vn.s[97]++,i.sign_verify="openpgp",Vn.s[98]++,r.push("verify")):Vn.b[27][1]++),Vn.s[99]++,n.next=79,yn("object",{keys:c,suite:i,mode:r});case 79:this[l-1].keys=n.sent,n.next=83;break;case 82:Vn.b[21][1]++;case 83:l--,n.next=13;break;case 86:return Vn.s[100]++,n.abrupt("return",t);case 88:case"end":return n.stop()}},n,this)}));return function(){return n.apply(this,arguments)}}()},{key:"toArray",value:function(){return Vn.f[14]++,Vn.s[103]++,Array.from(this)}},{key:"map",value:function(n){return Vn.f[15]++,Vn.s[104]++,this.toArray().map(n)}},{key:"slice",value:function(n,e){return Vn.f[16]++,Vn.s[105]++,this.toArray().slice(n,e)}},{key:"mode",get:function(){return Vn.f[12]++,Vn.s[101]++,this._cascadeMode}},{key:"keys",get:function(){return Vn.f[13]++,Vn.s[102]++,this._orgKeys}}]),e}(S()(Array));t.d(e,"generateKey",function(){return Kn}),t.d(e,"encrypt",function(){return Un}),t.d(e,"decrypt",function(){return In}),t.d(e,"sign",function(){return Bn}),t.d(e,"verify",function(){return Tn}),t.d(e,"importKeys",function(){return yn}),t.d(e,"importEncryptedBuffer",function(){return z}),t.d(e,"importRawEncryptedBufferList",function(){return Y}),t.d(e,"importSignatureBuffer",function(){return tn}),t.d(e,"importCascadedBuffer",function(){return Jn}),t.d(e,"createEncryptionCascade",function(){return zn}),t.d(e,"createDecryptionCascade",function(){return Wn});(function(){var n="/Users/jun/ProjectJavaScript/cascade/src/index.js",e="6c7d423d552f8d57db9d458ae91ce6a09ca3521b",t=new(0,function(){}.constructor)("return this")(),l="__coverage__",o={path:"/Users/jun/ProjectJavaScript/cascade/src/index.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},i=t[l]||(t[l]={});i[n]&&i[n].hash===e?i[n]:(o.hash=e,i[n]=o)})(),e.default={generateKey:Kn,encrypt:Un,decrypt:In,sign:Bn,verify:Tn,importKeys:yn,importEncryptedBuffer:z,importRawEncryptedBufferList:Y,importSignatureBuffer:tn,importCascadedBuffer:Jn,createEncryptionCascade:zn,createDecryptionCascade:Wn}}])});

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

module.exports = _arrayWithoutHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/construct.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/construct.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    module.exports = _construct = Reflect.construct;
  } else {
    module.exports = _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

module.exports = _construct;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/inherits.js":
/*!*********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inherits.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/isNativeFunction.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeFunction.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

module.exports = _isNativeFunction;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArray.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

module.exports = _iterableToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

module.exports = _nonIterableSpread;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ../helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

var assertThisInitialized = __webpack_require__(/*! ./assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toConsumableArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles */ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js");

var iterableToArray = __webpack_require__(/*! ./iterableToArray */ "./node_modules/@babel/runtime/helpers/iterableToArray.js");

var nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread */ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/wrapNativeSuper.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getPrototypeOf = __webpack_require__(/*! ./getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

var isNativeFunction = __webpack_require__(/*! ./isNativeFunction */ "./node_modules/@babel/runtime/helpers/isNativeFunction.js");

var construct = __webpack_require__(/*! ./construct */ "./node_modules/@babel/runtime/helpers/construct.js");

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return construct(Class, arguments, getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

module.exports = _wrapNativeSuper;

/***/ }),

/***/ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() {
  return this || (typeof self === "object" && self);
})() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(/*! ./runtime */ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js");

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),

/***/ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() {
    return this || (typeof self === "object" && self);
  })() || Function("return this")()
);


/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js");


/***/ }),

/***/ "./node_modules/assertion-error/index.js":
/*!***********************************************!*\
  !*** ./node_modules/assertion-error/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * assertion-error
 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
 * MIT Licensed
 */

/*!
 * Return a function that will copy properties from
 * one object to another excluding any originally
 * listed. Returned function will create a new `{}`.
 *
 * @param {String} excluded properties ...
 * @return {Function}
 */

function exclude () {
  var excludes = [].slice.call(arguments);

  function excludeProps (res, obj) {
    Object.keys(obj).forEach(function (key) {
      if (!~excludes.indexOf(key)) res[key] = obj[key];
    });
  }

  return function extendExclude () {
    var args = [].slice.call(arguments)
      , i = 0
      , res = {};

    for (; i < args.length; i++) {
      excludeProps(res, args[i]);
    }

    return res;
  };
};

/*!
 * Primary Exports
 */

module.exports = AssertionError;

/**
 * ### AssertionError
 *
 * An extension of the JavaScript `Error` constructor for
 * assertion and validation scenarios.
 *
 * @param {String} message
 * @param {Object} properties to include (optional)
 * @param {callee} start stack function (optional)
 */

function AssertionError (message, _props, ssf) {
  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
    , props = extend(_props || {});

  // default values
  this.message = message || 'Unspecified AssertionError';
  this.showDiff = false;

  // copy from properties
  for (var key in props) {
    this[key] = props[key];
  }

  // capture stack trace
  ssf = ssf || AssertionError;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, ssf);
  } else {
    try {
      throw new Error();
    } catch(e) {
      this.stack = e.stack;
    }
  }
}

/*!
 * Inherit from Error.prototype
 */

AssertionError.prototype = Object.create(Error.prototype);

/*!
 * Statically set name
 */

AssertionError.prototype.name = 'AssertionError';

/*!
 * Ensure correct constructor
 */

AssertionError.prototype.constructor = AssertionError;

/**
 * Allow errors to be converted to JSON for static transfer.
 *
 * @param {Boolean} include stack (default: `true`)
 * @return {Object} object that can be `JSON.stringify`
 */

AssertionError.prototype.toJSON = function (stack) {
  var extend = exclude('constructor', 'toJSON', 'stack')
    , props = extend({ name: this.name }, this);

  // include stack if exists and not turned off
  if (false !== stack && this.stack) {
    props.stack = this.stack;
  }

  return props;
};


/***/ }),

/***/ "./node_modules/chai/index.js":
/*!************************************!*\
  !*** ./node_modules/chai/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/chai */ "./node_modules/chai/lib/chai.js");


/***/ }),

/***/ "./node_modules/chai/lib/chai.js":
/*!***************************************!*\
  !*** ./node_modules/chai/lib/chai.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var used = [];

/*!
 * Chai version
 */

exports.version = '4.2.0';

/*!
 * Assertion Error
 */

exports.AssertionError = __webpack_require__(/*! assertion-error */ "./node_modules/assertion-error/index.js");

/*!
 * Utils for plugins (not exported)
 */

var util = __webpack_require__(/*! ./chai/utils */ "./node_modules/chai/lib/chai/utils/index.js");

/**
 * # .use(function)
 *
 * Provides a way to extend the internals of Chai.
 *
 * @param {Function}
 * @returns {this} for chaining
 * @api public
 */

exports.use = function (fn) {
  if (!~used.indexOf(fn)) {
    fn(exports, util);
    used.push(fn);
  }

  return exports;
};

/*!
 * Utility Functions
 */

exports.util = util;

/*!
 * Configuration
 */

var config = __webpack_require__(/*! ./chai/config */ "./node_modules/chai/lib/chai/config.js");
exports.config = config;

/*!
 * Primary `Assertion` prototype
 */

var assertion = __webpack_require__(/*! ./chai/assertion */ "./node_modules/chai/lib/chai/assertion.js");
exports.use(assertion);

/*!
 * Core Assertions
 */

var core = __webpack_require__(/*! ./chai/core/assertions */ "./node_modules/chai/lib/chai/core/assertions.js");
exports.use(core);

/*!
 * Expect interface
 */

var expect = __webpack_require__(/*! ./chai/interface/expect */ "./node_modules/chai/lib/chai/interface/expect.js");
exports.use(expect);

/*!
 * Should interface
 */

var should = __webpack_require__(/*! ./chai/interface/should */ "./node_modules/chai/lib/chai/interface/should.js");
exports.use(should);

/*!
 * Assert interface
 */

var assert = __webpack_require__(/*! ./chai/interface/assert */ "./node_modules/chai/lib/chai/interface/assert.js");
exports.use(assert);


/***/ }),

/***/ "./node_modules/chai/lib/chai/assertion.js":
/*!*************************************************!*\
  !*** ./node_modules/chai/lib/chai/assertion.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var config = __webpack_require__(/*! ./config */ "./node_modules/chai/lib/chai/config.js");

module.exports = function (_chai, util) {
  /*!
   * Module dependencies.
   */

  var AssertionError = _chai.AssertionError
    , flag = util.flag;

  /*!
   * Module export.
   */

  _chai.Assertion = Assertion;

  /*!
   * Assertion Constructor
   *
   * Creates object for chaining.
   *
   * `Assertion` objects contain metadata in the form of flags. Three flags can
   * be assigned during instantiation by passing arguments to this constructor:
   *
   * - `object`: This flag contains the target of the assertion. For example, in
   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will
   *   contain `numKittens` so that the `equal` assertion can reference it when
   *   needed.
   *
   * - `message`: This flag contains an optional custom error message to be
   *   prepended to the error message that's generated by the assertion when it
   *   fails.
   *
   * - `ssfi`: This flag stands for "start stack function indicator". It
   *   contains a function reference that serves as the starting point for
   *   removing frames from the stack trace of the error that's created by the
   *   assertion when it fails. The goal is to provide a cleaner stack trace to
   *   end users by removing Chai's internal functions. Note that it only works
   *   in environments that support `Error.captureStackTrace`, and only when
   *   `Chai.config.includeStack` hasn't been set to `false`.
   *
   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag
   *   should retain its current value, even as assertions are chained off of
   *   this object. This is usually set to `true` when creating a new assertion
   *   from within another assertion. It's also temporarily set to `true` before
   *   an overwritten assertion gets called by the overwriting assertion.
   *
   * @param {Mixed} obj target of the assertion
   * @param {String} msg (optional) custom error message
   * @param {Function} ssfi (optional) starting point for removing stack frames
   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked
   * @api private
   */

  function Assertion (obj, msg, ssfi, lockSsfi) {
    flag(this, 'ssfi', ssfi || Assertion);
    flag(this, 'lockSsfi', lockSsfi);
    flag(this, 'object', obj);
    flag(this, 'message', msg);

    return util.proxify(this);
  }

  Object.defineProperty(Assertion, 'includeStack', {
    get: function() {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      return config.includeStack;
    },
    set: function(value) {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      config.includeStack = value;
    }
  });

  Object.defineProperty(Assertion, 'showDiff', {
    get: function() {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      return config.showDiff;
    },
    set: function(value) {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      config.showDiff = value;
    }
  });

  Assertion.addProperty = function (name, fn) {
    util.addProperty(this.prototype, name, fn);
  };

  Assertion.addMethod = function (name, fn) {
    util.addMethod(this.prototype, name, fn);
  };

  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  Assertion.overwriteProperty = function (name, fn) {
    util.overwriteProperty(this.prototype, name, fn);
  };

  Assertion.overwriteMethod = function (name, fn) {
    util.overwriteMethod(this.prototype, name, fn);
  };

  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  /**
   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)
   *
   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
   *
   * @name assert
   * @param {Philosophical} expression to be tested
   * @param {String|Function} message or function that returns message to display if expression fails
   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
   * @param {Mixed} expected value (remember to check for negation)
   * @param {Mixed} actual (optional) will default to `this.obj`
   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails
   * @api private
   */

  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
    var ok = util.test(this, arguments);
    if (false !== showDiff) showDiff = true;
    if (undefined === expected && undefined === _actual) showDiff = false;
    if (true !== config.showDiff) showDiff = false;

    if (!ok) {
      msg = util.getMessage(this, arguments);
      var actual = util.getActual(this, arguments);
      throw new AssertionError(msg, {
          actual: actual
        , expected: expected
        , showDiff: showDiff
      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));
    }
  };

  /*!
   * ### ._obj
   *
   * Quick reference to stored `actual` value for plugin developers.
   *
   * @api private
   */

  Object.defineProperty(Assertion.prototype, '_obj',
    { get: function () {
        return flag(this, 'object');
      }
    , set: function (val) {
        flag(this, 'object', val);
      }
  });
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/config.js":
/*!**********************************************!*\
  !*** ./node_modules/chai/lib/chai/config.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {

  /**
   * ### config.includeStack
   *
   * User configurable property, influences whether stack trace
   * is included in Assertion error message. Default of false
   * suppresses stack trace in the error message.
   *
   *     chai.config.includeStack = true;  // enable stack on error
   *
   * @param {Boolean}
   * @api public
   */

  includeStack: false,

  /**
   * ### config.showDiff
   *
   * User configurable property, influences whether or not
   * the `showDiff` flag should be included in the thrown
   * AssertionErrors. `false` will always be `false`; `true`
   * will be true when the assertion has requested a diff
   * be shown.
   *
   * @param {Boolean}
   * @api public
   */

  showDiff: true,

  /**
   * ### config.truncateThreshold
   *
   * User configurable property, sets length threshold for actual and
   * expected values in assertion errors. If this threshold is exceeded, for
   * example for large data structures, the value is replaced with something
   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.
   *
   * Set it to zero if you want to disable truncating altogether.
   *
   * This is especially userful when doing assertions on arrays: having this
   * set to a reasonable large value makes the failure messages readily
   * inspectable.
   *
   *     chai.config.truncateThreshold = 0;  // disable truncating
   *
   * @param {Number}
   * @api public
   */

  truncateThreshold: 40,

  /**
   * ### config.useProxy
   *
   * User configurable property, defines if chai will use a Proxy to throw
   * an error when a non-existent property is read, which protects users
   * from typos when using property-based assertions.
   *
   * Set it to false if you want to disable this feature.
   *
   *     chai.config.useProxy = false;  // disable use of Proxy
   *
   * This feature is automatically disabled regardless of this config value
   * in environments that don't support proxies.
   *
   * @param {Boolean}
   * @api public
   */

  useProxy: true,

  /**
   * ### config.proxyExcludedKeys
   *
   * User configurable property, defines which properties should be ignored
   * instead of throwing an error if they do not exist on the assertion.
   * This is only applied if the environment Chai is running in supports proxies and
   * if the `useProxy` configuration setting is enabled.
   * By default, `then` and `inspect` will not throw an error if they do not exist on the
   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when
   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.
   *
   *     // By default these keys will not throw an error if they do not exist on the assertion object
   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];
   *
   * @param {Array}
   * @api public
   */

  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/core/assertions.js":
/*!*******************************************************!*\
  !*** ./node_modules/chai/lib/chai/core/assertions.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, _) {
  var Assertion = chai.Assertion
    , AssertionError = chai.AssertionError
    , flag = _.flag;

  /**
   * ### Language Chains
   *
   * The following are provided as chainable getters to improve the readability
   * of your assertions.
   *
   * **Chains**
   *
   * - to
   * - be
   * - been
   * - is
   * - that
   * - which
   * - and
   * - has
   * - have
   * - with
   * - at
   * - of
   * - same
   * - but
   * - does
   * - still
   *
   * @name language chains
   * @namespace BDD
   * @api public
   */

  [ 'to', 'be', 'been', 'is'
  , 'and', 'has', 'have', 'with'
  , 'that', 'which', 'at', 'of'
  , 'same', 'but', 'does', 'still' ].forEach(function (chain) {
    Assertion.addProperty(chain);
  });

  /**
   * ### .not
   *
   * Negates all assertions that follow in the chain.
   *
   *     expect(function () {}).to.not.throw();
   *     expect({a: 1}).to.not.have.property('b');
   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);
   *
   * Just because you can negate any assertion with `.not` doesn't mean you
   * should. With great power comes great responsibility. It's often best to
   * assert that the one expected output was produced, rather than asserting
   * that one of countless unexpected outputs wasn't produced. See individual
   * assertions for specific guidance.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.equal(1); // Not recommended
   *
   * @name not
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('not', function () {
    flag(this, 'negate', true);
  });

  /**
   * ### .deep
   *
   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`
   * assertions that follow in the chain to use deep equality instead of strict
   * (`===`) equality. See the `deep-eql` project page for info on the deep
   * equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) equals `{a: 1}`
   *     expect({a: 1}).to.deep.equal({a: 1});
   *     expect({a: 1}).to.not.equal({a: 1});
   *
   *     // Target array deeply (but not strictly) includes `{a: 1}`
   *     expect([{a: 1}]).to.deep.include({a: 1});
   *     expect([{a: 1}]).to.not.include({a: 1});
   *
   *     // Target object deeply (but not strictly) includes `x: {a: 1}`
   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
   *
   *     // Target array deeply (but not strictly) has member `{a: 1}`
   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
   *
   *     // Target set deeply (but not strictly) has key `{a: 1}`
   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);
   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);
   *
   *     // Target object deeply (but not strictly) has property `x: {a: 1}`
   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
   *
   * @name deep
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('deep', function () {
    flag(this, 'deep', true);
  });

  /**
   * ### .nested
   *
   * Enables dot- and bracket-notation in all `.property` and `.include`
   * assertions that follow in the chain.
   *
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\.a.\\[b\\]': 'x'});
   *
   * `.nested` cannot be combined with `.own`.
   *
   * @name nested
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('nested', function () {
    flag(this, 'nested', true);
  });

  /**
   * ### .own
   *
   * Causes all `.property` and `.include` assertions that follow in the chain
   * to ignore inherited properties.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.have.own.property('a');
   *     expect({a: 1}).to.have.property('b');
   *     expect({a: 1}).to.not.have.own.property('b');
   *
   *     expect({a: 1}).to.own.include({a: 1});
   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
   *
   * `.own` cannot be combined with `.nested`.
   *
   * @name own
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('own', function () {
    flag(this, 'own', true);
  });

  /**
   * ### .ordered
   *
   * Causes all `.members` assertions that follow in the chain to require that
   * members be in the same order.
   *
   *     expect([1, 2]).to.have.ordered.members([1, 2])
   *       .but.not.have.ordered.members([2, 1]);
   *
   * When `.include` and `.ordered` are combined, the ordering begins at the
   * start of both arrays.
   *
   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])
   *       .but.not.include.ordered.members([2, 3]);
   *
   * @name ordered
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('ordered', function () {
    flag(this, 'ordered', true);
  });

  /**
   * ### .any
   *
   * Causes all `.keys` assertions that follow in the chain to only require that
   * the target have at least one of the given keys. This is the opposite of
   * `.all`, which requires that the target have all of the given keys.
   *
   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
   *
   * See the `.keys` doc for guidance on when to use `.any` or `.all`.
   *
   * @name any
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('any', function () {
    flag(this, 'any', true);
    flag(this, 'all', false);
  });

  /**
   * ### .all
   *
   * Causes all `.keys` assertions that follow in the chain to require that the
   * target have all of the given keys. This is the opposite of `.any`, which
   * only requires that the target have at least one of the given keys.
   *
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *
   * Note that `.all` is used by default when neither `.all` nor `.any` are
   * added earlier in the chain. However, it's often best to add `.all` anyway
   * because it improves readability.
   *
   * See the `.keys` doc for guidance on when to use `.any` or `.all`.
   *
   * @name all
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('all', function () {
    flag(this, 'all', true);
    flag(this, 'any', false);
  });

  /**
   * ### .a(type[, msg])
   *
   * Asserts that the target's type is equal to the given string `type`. Types
   * are case insensitive. See the `type-detect` project page for info on the
   * type detection algorithm: https://github.com/chaijs/type-detect.
   *
   *     expect('foo').to.be.a('string');
   *     expect({a: 1}).to.be.an('object');
   *     expect(null).to.be.a('null');
   *     expect(undefined).to.be.an('undefined');
   *     expect(new Error).to.be.an('error');
   *     expect(Promise.resolve()).to.be.a('promise');
   *     expect(new Float32Array).to.be.a('float32array');
   *     expect(Symbol()).to.be.a('symbol');
   *
   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.
   *
   *     var myObj = {
   *       [Symbol.toStringTag]: 'myCustomType'
   *     };
   *
   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');
   *
   * It's often best to use `.a` to check a target's type before making more
   * assertions on the same target. That way, you avoid unexpected behavior from
   * any assertion that does different things based on the target's type.
   *
   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
   *     expect([]).to.be.an('array').that.is.empty;
   *
   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to
   * assert that the target is the expected type, rather than asserting that it
   * isn't one of many unexpected types.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.an('array'); // Not recommended
   *
   * `.a` accepts an optional `msg` argument which is a custom error message to
   * show when the assertion fails. The message can also be given as the second
   * argument to `expect`.
   *
   *     expect(1).to.be.a('string', 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.a('string');
   *
   * `.a` can also be used as a language chain to improve the readability of
   * your assertions.
   *
   *     expect({b: 2}).to.have.a.property('b');
   *
   * The alias `.an` can be used interchangeably with `.a`.
   *
   * @name a
   * @alias an
   * @param {String} type
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function an (type, msg) {
    if (msg) flag(this, 'message', msg);
    type = type.toLowerCase();
    var obj = flag(this, 'object')
      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';

    this.assert(
        type === _.type(obj).toLowerCase()
      , 'expected #{this} to be ' + article + type
      , 'expected #{this} not to be ' + article + type
    );
  }

  Assertion.addChainableMethod('an', an);
  Assertion.addChainableMethod('a', an);

  /**
   * ### .include(val[, msg])
   *
   * When the target is a string, `.include` asserts that the given string `val`
   * is a substring of the target.
   *
   *     expect('foobar').to.include('foo');
   *
   * When the target is an array, `.include` asserts that the given `val` is a
   * member of the target.
   *
   *     expect([1, 2, 3]).to.include(2);
   *
   * When the target is an object, `.include` asserts that the given object
   * `val`'s properties are a subset of the target's properties.
   *
   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});
   *
   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a
   * member of the target. SameValueZero equality algorithm is used.
   *
   *     expect(new Set([1, 2])).to.include(2);
   *
   * When the target is a Map, `.include` asserts that the given `val` is one of
   * the values of the target. SameValueZero equality algorithm is used.
   *
   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);
   *
   * Because `.include` does different things based on the target's type, it's
   * important to check the target's type before using `.include`. See the `.a`
   * doc for info on testing a target's type.
   *
   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
   *
   * By default, strict (`===`) equality is used to compare array members and
   * object properties. Add `.deep` earlier in the chain to use deep equality
   * instead (WeakSet targets are not supported). See the `deep-eql` project
   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target array deeply (but not strictly) includes `{a: 1}`
   *     expect([{a: 1}]).to.deep.include({a: 1});
   *     expect([{a: 1}]).to.not.include({a: 1});
   *
   *     // Target object deeply (but not strictly) includes `x: {a: 1}`
   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
   *
   * By default, all of the target's properties are searched when working with
   * objects. This includes properties that are inherited and/or non-enumerable.
   * Add `.own` earlier in the chain to exclude the target's inherited
   * properties from the search.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.own.include({a: 1});
   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
   *
   * Note that a target object is always only searched for `val`'s own
   * enumerable properties.
   *
   * `.deep` and `.own` can be combined.
   *
   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});
   *
   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
   * referencing nested properties.
   *
   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\.a.\\[b\\]': 2});
   *
   * `.deep` and `.nested` can be combined.
   *
   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});
   *
   * `.own` and `.nested` cannot be combined.
   *
   * Add `.not` earlier in the chain to negate `.include`.
   *
   *     expect('foobar').to.not.include('taco');
   *     expect([1, 2, 3]).to.not.include(4);
   *
   * However, it's dangerous to negate `.include` when the target is an object.
   * The problem is that it creates uncertain expectations by asserting that the
   * target object doesn't have all of `val`'s key/value pairs but may or may
   * not have some of them. It's often best to identify the exact output that's
   * expected, and then write an assertion that only accepts that exact output.
   *
   * When the target object isn't even expected to have `val`'s keys, it's
   * often best to assert exactly that.
   *
   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended
   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended
   *
   * When the target object is expected to have `val`'s keys, it's often best to
   * assert that each of the properties has its expected value, rather than
   * asserting that each property doesn't have one of many unexpected values.
   *
   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended
   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended
   *
   * `.include` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');
   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);
   *
   * `.include` can also be used as a language chain, causing all `.members` and
   * `.keys` assertions that follow in the chain to require the target to be a
   * superset of the expected set, rather than an identical set. Note that
   * `.members` ignores duplicates in the subset when `.include` is added.
   *
   *     // Target object's keys are a superset of ['a', 'b'] but not identical
   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
   *
   *     // Target array is a superset of [1, 2] but not identical
   *     expect([1, 2, 3]).to.include.members([1, 2]);
   *     expect([1, 2, 3]).to.not.have.members([1, 2]);
   *
   *     // Duplicates in the subset are ignored
   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
   *
   * Note that adding `.any` earlier in the chain causes the `.keys` assertion
   * to ignore `.include`.
   *
   *     // Both assertions are identical
   *     expect({a: 1}).to.include.any.keys('a', 'b');
   *     expect({a: 1}).to.have.any.keys('a', 'b');
   *
   * The aliases `.includes`, `.contain`, and `.contains` can be used
   * interchangeably with `.include`.
   *
   * @name include
   * @alias contain
   * @alias includes
   * @alias contains
   * @param {Mixed} val
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function SameValueZero(a, b) {
    return (_.isNaN(a) && _.isNaN(b)) || a === b;
  }

  function includeChainingBehavior () {
    flag(this, 'contains', true);
  }

  function include (val, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object')
      , objType = _.type(obj).toLowerCase()
      , flagMsg = flag(this, 'message')
      , negate = flag(this, 'negate')
      , ssfi = flag(this, 'ssfi')
      , isDeep = flag(this, 'deep')
      , descriptor = isDeep ? 'deep ' : '';

    flagMsg = flagMsg ? flagMsg + ': ' : '';

    var included = false;

    switch (objType) {
      case 'string':
        included = obj.indexOf(val) !== -1;
        break;

      case 'weakset':
        if (isDeep) {
          throw new AssertionError(
            flagMsg + 'unable to use .deep.include with WeakSet',
            undefined,
            ssfi
          );
        }

        included = obj.has(val);
        break;

      case 'map':
        var isEql = isDeep ? _.eql : SameValueZero;
        obj.forEach(function (item) {
          included = included || isEql(item, val);
        });
        break;

      case 'set':
        if (isDeep) {
          obj.forEach(function (item) {
            included = included || _.eql(item, val);
          });
        } else {
          included = obj.has(val);
        }
        break;

      case 'array':
        if (isDeep) {
          included = obj.some(function (item) {
            return _.eql(item, val);
          })
        } else {
          included = obj.indexOf(val) !== -1;
        }
        break;

      default:
        // This block is for asserting a subset of properties in an object.
        // `_.expectTypes` isn't used here because `.include` should work with
        // objects with a custom `@@toStringTag`.
        if (val !== Object(val)) {
          throw new AssertionError(
            flagMsg + 'object tested must be an array, a map, an object,'
              + ' a set, a string, or a weakset, but ' + objType + ' given',
            undefined,
            ssfi
          );
        }

        var props = Object.keys(val)
          , firstErr = null
          , numErrs = 0;

        props.forEach(function (prop) {
          var propAssertion = new Assertion(obj);
          _.transferFlags(this, propAssertion, true);
          flag(propAssertion, 'lockSsfi', true);

          if (!negate || props.length === 1) {
            propAssertion.property(prop, val[prop]);
            return;
          }

          try {
            propAssertion.property(prop, val[prop]);
          } catch (err) {
            if (!_.checkError.compatibleConstructor(err, AssertionError)) {
              throw err;
            }
            if (firstErr === null) firstErr = err;
            numErrs++;
          }
        }, this);

        // When validating .not.include with multiple properties, we only want
        // to throw an assertion error if all of the properties are included,
        // in which case we throw the first property assertion error that we
        // encountered.
        if (negate && props.length > 1 && numErrs === props.length) {
          throw firstErr;
        }
        return;
    }

    // Assert inclusion in collection or substring in a string.
    this.assert(
      included
      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)
      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));
  }

  Assertion.addChainableMethod('include', include, includeChainingBehavior);
  Assertion.addChainableMethod('contain', include, includeChainingBehavior);
  Assertion.addChainableMethod('contains', include, includeChainingBehavior);
  Assertion.addChainableMethod('includes', include, includeChainingBehavior);

  /**
   * ### .ok
   *
   * Asserts that the target is a truthy value (considered `true` in boolean context).
   * However, it's often best to assert that the target is strictly (`===`) or
   * deeply equal to its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.ok; // Not recommended
   *
   *     expect(true).to.be.true; // Recommended
   *     expect(true).to.be.ok; // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.ok`.
   *
   *     expect(0).to.equal(0); // Recommended
   *     expect(0).to.not.be.ok; // Not recommended
   *
   *     expect(false).to.be.false; // Recommended
   *     expect(false).to.not.be.ok; // Not recommended
   *
   *     expect(null).to.be.null; // Recommended
   *     expect(null).to.not.be.ok; // Not recommended
   *
   *     expect(undefined).to.be.undefined; // Recommended
   *     expect(undefined).to.not.be.ok; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(false, 'nooo why fail??').to.be.ok;
   *
   * @name ok
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('ok', function () {
    this.assert(
        flag(this, 'object')
      , 'expected #{this} to be truthy'
      , 'expected #{this} to be falsy');
  });

  /**
   * ### .true
   *
   * Asserts that the target is strictly (`===`) equal to `true`.
   *
   *     expect(true).to.be.true;
   *
   * Add `.not` earlier in the chain to negate `.true`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `true`.
   *
   *     expect(false).to.be.false; // Recommended
   *     expect(false).to.not.be.true; // Not recommended
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.true; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(false, 'nooo why fail??').to.be.true;
   *
   * @name true
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('true', function () {
    this.assert(
        true === flag(this, 'object')
      , 'expected #{this} to be true'
      , 'expected #{this} to be false'
      , flag(this, 'negate') ? false : true
    );
  });

  /**
   * ### .false
   *
   * Asserts that the target is strictly (`===`) equal to `false`.
   *
   *     expect(false).to.be.false;
   *
   * Add `.not` earlier in the chain to negate `.false`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to `false`.
   *
   *     expect(true).to.be.true; // Recommended
   *     expect(true).to.not.be.false; // Not recommended
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.false; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(true, 'nooo why fail??').to.be.false;
   *
   * @name false
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('false', function () {
    this.assert(
        false === flag(this, 'object')
      , 'expected #{this} to be false'
      , 'expected #{this} to be true'
      , flag(this, 'negate') ? true : false
    );
  });

  /**
   * ### .null
   *
   * Asserts that the target is strictly (`===`) equal to `null`.
   *
   *     expect(null).to.be.null;
   *
   * Add `.not` earlier in the chain to negate `.null`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `null`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.null; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.null;
   *
   * @name null
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('null', function () {
    this.assert(
        null === flag(this, 'object')
      , 'expected #{this} to be null'
      , 'expected #{this} not to be null'
    );
  });

  /**
   * ### .undefined
   *
   * Asserts that the target is strictly (`===`) equal to `undefined`.
   *
   *     expect(undefined).to.be.undefined;
   *
   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to `undefined`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.undefined; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.undefined;
   *
   * @name undefined
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('undefined', function () {
    this.assert(
        undefined === flag(this, 'object')
      , 'expected #{this} to be undefined'
      , 'expected #{this} not to be undefined'
    );
  });

  /**
   * ### .NaN
   *
   * Asserts that the target is exactly `NaN`.
   *
   *     expect(NaN).to.be.NaN;
   *
   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `NaN`.
   *
   *     expect('foo').to.equal('foo'); // Recommended
   *     expect('foo').to.not.be.NaN; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.NaN;
   *
   * @name NaN
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('NaN', function () {
    this.assert(
        _.isNaN(flag(this, 'object'))
        , 'expected #{this} to be NaN'
        , 'expected #{this} not to be NaN'
    );
  });

  /**
   * ### .exist
   *
   * Asserts that the target is not strictly (`===`) equal to either `null` or
   * `undefined`. However, it's often best to assert that the target is equal to
   * its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.exist; // Not recommended
   *
   *     expect(0).to.equal(0); // Recommended
   *     expect(0).to.exist; // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.exist`.
   *
   *     expect(null).to.be.null; // Recommended
   *     expect(null).to.not.exist; // Not recommended
   *
   *     expect(undefined).to.be.undefined; // Recommended
   *     expect(undefined).to.not.exist; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(null, 'nooo why fail??').to.exist;
   *
   * @name exist
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('exist', function () {
    var val = flag(this, 'object');
    this.assert(
        val !== null && val !== undefined
      , 'expected #{this} to exist'
      , 'expected #{this} to not exist'
    );
  });

  /**
   * ### .empty
   *
   * When the target is a string or array, `.empty` asserts that the target's
   * `length` property is strictly (`===`) equal to `0`.
   *
   *     expect([]).to.be.empty;
   *     expect('').to.be.empty;
   *
   * When the target is a map or set, `.empty` asserts that the target's `size`
   * property is strictly equal to `0`.
   *
   *     expect(new Set()).to.be.empty;
   *     expect(new Map()).to.be.empty;
   *
   * When the target is a non-function object, `.empty` asserts that the target
   * doesn't have any own enumerable properties. Properties with Symbol-based
   * keys are excluded from the count.
   *
   *     expect({}).to.be.empty;
   *
   * Because `.empty` does different things based on the target's type, it's
   * important to check the target's type before using `.empty`. See the `.a`
   * doc for info on testing a target's type.
   *
   *     expect([]).to.be.an('array').that.is.empty;
   *
   * Add `.not` earlier in the chain to negate `.empty`. However, it's often
   * best to assert that the target contains its expected number of values,
   * rather than asserting that it's not empty.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended
   *
   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended
   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended
   *
   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended
   *     expect({a: 1}).to.not.be.empty; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;
   *
   * @name empty
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('empty', function () {
    var val = flag(this, 'object')
      , ssfi = flag(this, 'ssfi')
      , flagMsg = flag(this, 'message')
      , itemsCount;

    flagMsg = flagMsg ? flagMsg + ': ' : '';

    switch (_.type(val).toLowerCase()) {
      case 'array':
      case 'string':
        itemsCount = val.length;
        break;
      case 'map':
      case 'set':
        itemsCount = val.size;
        break;
      case 'weakmap':
      case 'weakset':
        throw new AssertionError(
          flagMsg + '.empty was passed a weak collection',
          undefined,
          ssfi
        );
      case 'function':
        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);
        throw new AssertionError(msg.trim(), undefined, ssfi);
      default:
        if (val !== Object(val)) {
          throw new AssertionError(
            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),
            undefined,
            ssfi
          );
        }
        itemsCount = Object.keys(val).length;
    }

    this.assert(
        0 === itemsCount
      , 'expected #{this} to be empty'
      , 'expected #{this} not to be empty'
    );
  });

  /**
   * ### .arguments
   *
   * Asserts that the target is an `arguments` object.
   *
   *     function test () {
   *       expect(arguments).to.be.arguments;
   *     }
   *
   *     test();
   *
   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often
   * best to assert which type the target is expected to be, rather than
   * asserting that its not an `arguments` object.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.arguments; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({}, 'nooo why fail??').to.be.arguments;
   *
   * The alias `.Arguments` can be used interchangeably with `.arguments`.
   *
   * @name arguments
   * @alias Arguments
   * @namespace BDD
   * @api public
   */

  function checkArguments () {
    var obj = flag(this, 'object')
      , type = _.type(obj);
    this.assert(
        'Arguments' === type
      , 'expected #{this} to be arguments but got ' + type
      , 'expected #{this} to not be arguments'
    );
  }

  Assertion.addProperty('arguments', checkArguments);
  Assertion.addProperty('Arguments', checkArguments);

  /**
   * ### .equal(val[, msg])
   *
   * Asserts that the target is strictly (`===`) equal to the given `val`.
   *
   *     expect(1).to.equal(1);
   *     expect('foo').to.equal('foo');
   *
   * Add `.deep` earlier in the chain to use deep equality instead. See the
   * `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) equals `{a: 1}`
   *     expect({a: 1}).to.deep.equal({a: 1});
   *     expect({a: 1}).to.not.equal({a: 1});
   *
   *     // Target array deeply (but not strictly) equals `[1, 2]`
   *     expect([1, 2]).to.deep.equal([1, 2]);
   *     expect([1, 2]).to.not.equal([1, 2]);
   *
   * Add `.not` earlier in the chain to negate `.equal`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to one of countless unexpected values.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.equal(2); // Not recommended
   *
   * `.equal` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.equal(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.equal(2);
   *
   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.
   *
   * @name equal
   * @alias equals
   * @alias eq
   * @param {Mixed} val
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertEqual (val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'deep')) {
      var prevLockSsfi = flag(this, 'lockSsfi');
      flag(this, 'lockSsfi', true);
      this.eql(val);
      flag(this, 'lockSsfi', prevLockSsfi);
    } else {
      this.assert(
          val === obj
        , 'expected #{this} to equal #{exp}'
        , 'expected #{this} to not equal #{exp}'
        , val
        , this._obj
        , true
      );
    }
  }

  Assertion.addMethod('equal', assertEqual);
  Assertion.addMethod('equals', assertEqual);
  Assertion.addMethod('eq', assertEqual);

  /**
   * ### .eql(obj[, msg])
   *
   * Asserts that the target is deeply equal to the given `obj`. See the
   * `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target object is deeply (but not strictly) equal to {a: 1}
   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});
   *
   *     // Target array is deeply (but not strictly) equal to [1, 2]
   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);
   *
   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best
   * to assert that the target is deeply equal to its expected value, rather
   * than not deeply equal to one of countless unexpected values.
   *
   *     expect({a: 1}).to.eql({a: 1}); // Recommended
   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended
   *
   * `.eql` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');
   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});
   *
   * The alias `.eqls` can be used interchangeably with `.eql`.
   *
   * The `.deep.equal` assertion is almost identical to `.eql` but with one
   * difference: `.deep.equal` causes deep equality comparisons to also be used
   * for any other assertions that follow in the chain.
   *
   * @name eql
   * @alias eqls
   * @param {Mixed} obj
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertEql(obj, msg) {
    if (msg) flag(this, 'message', msg);
    this.assert(
        _.eql(obj, flag(this, 'object'))
      , 'expected #{this} to deeply equal #{exp}'
      , 'expected #{this} to not deeply equal #{exp}'
      , obj
      , this._obj
      , true
    );
  }

  Assertion.addMethod('eql', assertEql);
  Assertion.addMethod('eqls', assertEql);

  /**
   * ### .above(n[, msg])
   *
   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.above(1); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is greater than the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.above(2); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.above`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(1).to.not.be.above(2); // Not recommended
   *
   * `.above` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.above(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.above(2);
   *
   * The aliases `.gt` and `.greaterThan` can be used interchangeably with
   * `.above`.
   *
   * @name above
   * @alias gt
   * @alias greaterThan
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertAbove (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , nType = _.type(n).toLowerCase()
      , errorMessage
      , shouldThrow = true;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && (objType === 'date' && nType !== 'date')) {
      errorMessage = msgPrefix + 'the argument to above must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to above must be a number';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length'
        , itemsCount;
      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }
      this.assert(
          itemsCount > n
        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'
        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'
        , n
        , itemsCount
      );
    } else {
      this.assert(
          obj > n
        , 'expected #{this} to be above #{exp}'
        , 'expected #{this} to be at most #{exp}'
        , n
      );
    }
  }

  Assertion.addMethod('above', assertAbove);
  Assertion.addMethod('gt', assertAbove);
  Assertion.addMethod('greaterThan', assertAbove);

  /**
   * ### .least(n[, msg])
   *
   * Asserts that the target is a number or a date greater than or equal to the given
   * number or date `n` respectively. However, it's often best to assert that the target is equal to
   * its expected value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.at.least(1); // Not recommended
   *     expect(2).to.be.at.least(2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is greater than or equal to the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.least`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.at.least(2); // Not recommended
   *
   * `.least` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.at.least(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.at.least(2);
   *
   * The alias `.gte` can be used interchangeably with `.least`.
   *
   * @name least
   * @alias gte
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertLeast (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , nType = _.type(n).toLowerCase()
      , errorMessage
      , shouldThrow = true;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && (objType === 'date' && nType !== 'date')) {
      errorMessage = msgPrefix + 'the argument to least must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to least must be a number';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length'
        , itemsCount;
      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }
      this.assert(
          itemsCount >= n
        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'
        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'
        , n
        , itemsCount
      );
    } else {
      this.assert(
          obj >= n
        , 'expected #{this} to be at least #{exp}'
        , 'expected #{this} to be below #{exp}'
        , n
      );
    }
  }

  Assertion.addMethod('least', assertLeast);
  Assertion.addMethod('gte', assertLeast);

  /**
   * ### .below(n[, msg])
   *
   * Asserts that the target is a number or a date less than the given number or date `n` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.below(2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is less than the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.below(4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.length(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.below`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.be.below(1); // Not recommended
   *
   * `.below` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(2).to.be.below(1, 'nooo why fail??');
   *     expect(2, 'nooo why fail??').to.be.below(1);
   *
   * The aliases `.lt` and `.lessThan` can be used interchangeably with
   * `.below`.
   *
   * @name below
   * @alias lt
   * @alias lessThan
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertBelow (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , nType = _.type(n).toLowerCase()
      , errorMessage
      , shouldThrow = true;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && (objType === 'date' && nType !== 'date')) {
      errorMessage = msgPrefix + 'the argument to below must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to below must be a number';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length'
        , itemsCount;
      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }
      this.assert(
          itemsCount < n
        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'
        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'
        , n
        , itemsCount
      );
    } else {
      this.assert(
          obj < n
        , 'expected #{this} to be below #{exp}'
        , 'expected #{this} to be at least #{exp}'
        , n
      );
    }
  }

  Assertion.addMethod('below', assertBelow);
  Assertion.addMethod('lt', assertBelow);
  Assertion.addMethod('lessThan', assertBelow);

  /**
   * ### .most(n[, msg])
   *
   * Asserts that the target is a number or a date less than or equal to the given number
   * or date `n` respectively. However, it's often best to assert that the target is equal to its
   * expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.at.most(2); // Not recommended
   *     expect(1).to.be.at.most(1); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is less than or equal to the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.most`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.be.at.most(1); // Not recommended
   *
   * `.most` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(2).to.be.at.most(1, 'nooo why fail??');
   *     expect(2, 'nooo why fail??').to.be.at.most(1);
   *
   * The alias `.lte` can be used interchangeably with `.most`.
   *
   * @name most
   * @alias lte
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertMost (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , nType = _.type(n).toLowerCase()
      , errorMessage
      , shouldThrow = true;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && (objType === 'date' && nType !== 'date')) {
      errorMessage = msgPrefix + 'the argument to most must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to most must be a number';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length'
        , itemsCount;
      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }
      this.assert(
          itemsCount <= n
        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'
        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'
        , n
        , itemsCount
      );
    } else {
      this.assert(
          obj <= n
        , 'expected #{this} to be at most #{exp}'
        , 'expected #{this} to be above #{exp}'
        , n
      );
    }
  }

  Assertion.addMethod('most', assertMost);
  Assertion.addMethod('lte', assertMost);

  /**
   * ### .within(start, finish[, msg])
   *
   * Asserts that the target is a number or a date greater than or equal to the given
   * number or date `start`, and less than or equal to the given number or date `finish` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.within(1, 3); // Not recommended
   *     expect(2).to.be.within(2, 3); // Not recommended
   *     expect(2).to.be.within(1, 2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is greater than or equal to the given number `start`, and less
   * than or equal to the given number `finish`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.within`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.within(2, 4); // Not recommended
   *
   * `.within` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(4).to.be.within(1, 3, 'nooo why fail??');
   *     expect(4, 'nooo why fail??').to.be.within(1, 3);
   *
   * @name within
   * @param {Number} start lower bound inclusive
   * @param {Number} finish upper bound inclusive
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('within', function (start, finish, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , startType = _.type(start).toLowerCase()
      , finishType = _.type(finish).toLowerCase()
      , errorMessage
      , shouldThrow = true
      , range = (startType === 'date' && finishType === 'date')
          ? start.toUTCString() + '..' + finish.toUTCString()
          : start + '..' + finish;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {
      errorMessage = msgPrefix + 'the arguments to within must be dates';
    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the arguments to within must be numbers';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length'
        , itemsCount;
      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }
      this.assert(
          itemsCount >= start && itemsCount <= finish
        , 'expected #{this} to have a ' + descriptor + ' within ' + range
        , 'expected #{this} to not have a ' + descriptor + ' within ' + range
      );
    } else {
      this.assert(
          obj >= start && obj <= finish
        , 'expected #{this} to be within ' + range
        , 'expected #{this} to not be within ' + range
      );
    }
  });

  /**
   * ### .instanceof(constructor[, msg])
   *
   * Asserts that the target is an instance of the given `constructor`.
   *
   *     function Cat () { }
   *
   *     expect(new Cat()).to.be.an.instanceof(Cat);
   *     expect([1, 2]).to.be.an.instanceof(Array);
   *
   * Add `.not` earlier in the chain to negate `.instanceof`.
   *
   *     expect({a: 1}).to.not.be.an.instanceof(Array);
   *
   * `.instanceof` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);
   *
   * Due to limitations in ES5, `.instanceof` may not always work as expected
   * when using a transpiler such as Babel or TypeScript. In particular, it may
   * produce unexpected results when subclassing built-in object such as
   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:
   *
   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
   *
   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.
   *
   * @name instanceof
   * @param {Constructor} constructor
   * @param {String} msg _optional_
   * @alias instanceOf
   * @namespace BDD
   * @api public
   */

  function assertInstanceOf (constructor, msg) {
    if (msg) flag(this, 'message', msg);

    var target = flag(this, 'object')
    var ssfi = flag(this, 'ssfi');
    var flagMsg = flag(this, 'message');

    try {
      var isInstanceOf = target instanceof constructor;
    } catch (err) {
      if (err instanceof TypeError) {
        flagMsg = flagMsg ? flagMsg + ': ' : '';
        throw new AssertionError(
          flagMsg + 'The instanceof assertion needs a constructor but '
            + _.type(constructor) + ' was given.',
          undefined,
          ssfi
        );
      }
      throw err;
    }

    var name = _.getName(constructor);
    if (name === null) {
      name = 'an unnamed constructor';
    }

    this.assert(
        isInstanceOf
      , 'expected #{this} to be an instance of ' + name
      , 'expected #{this} to not be an instance of ' + name
    );
  };

  Assertion.addMethod('instanceof', assertInstanceOf);
  Assertion.addMethod('instanceOf', assertInstanceOf);

  /**
   * ### .property(name[, val[, msg]])
   *
   * Asserts that the target has a property with the given key `name`.
   *
   *     expect({a: 1}).to.have.property('a');
   *
   * When `val` is provided, `.property` also asserts that the property's value
   * is equal to the given `val`.
   *
   *     expect({a: 1}).to.have.property('a', 1);
   *
   * By default, strict (`===`) equality is used. Add `.deep` earlier in the
   * chain to use deep equality instead. See the `deep-eql` project page for
   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) has property `x: {a: 1}`
   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
   *
   * The target's enumerable and non-enumerable properties are always included
   * in the search. By default, both own and inherited properties are included.
   * Add `.own` earlier in the chain to exclude inherited properties from the
   * search.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.have.own.property('a');
   *     expect({a: 1}).to.have.own.property('a', 1);
   *     expect({a: 1}).to.have.property('b');
   *     expect({a: 1}).to.not.have.own.property('b');
   *
   * `.deep` and `.own` can be combined.
   *
   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});
   *
   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
   * referencing nested properties.
   *
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
   *
   * `.deep` and `.nested` can be combined.
   *
   *     expect({a: {b: [{c: 3}]}})
   *       .to.have.deep.nested.property('a.b[0]', {c: 3});
   *
   * `.own` and `.nested` cannot be combined.
   *
   * Add `.not` earlier in the chain to negate `.property`.
   *
   *     expect({a: 1}).to.not.have.property('b');
   *
   * However, it's dangerous to negate `.property` when providing `val`. The
   * problem is that it creates uncertain expectations by asserting that the
   * target either doesn't have a property with the given key `name`, or that it
   * does have a property with the given key `name` but its value isn't equal to
   * the given `val`. It's often best to identify the exact output that's
   * expected, and then write an assertion that only accepts that exact output.
   *
   * When the target isn't expected to have a property with the given key
   * `name`, it's often best to assert exactly that.
   *
   *     expect({b: 2}).to.not.have.property('a'); // Recommended
   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended
   *
   * When the target is expected to have a property with the given key `name`,
   * it's often best to assert that the property has its expected value, rather
   * than asserting that it doesn't have one of many unexpected values.
   *
   *     expect({a: 3}).to.have.property('a', 3); // Recommended
   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended
   *
   * `.property` changes the target of any assertions that follow in the chain
   * to be the value of the property from the original target object.
   *
   *     expect({a: 1}).to.have.property('a').that.is.a('number');
   *
   * `.property` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing `val`, only use the
   * second form.
   *
   *     // Recommended
   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');
   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);
   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');
   *
   *     // Not recommended
   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');
   *
   * The above assertion isn't the same thing as not providing `val`. Instead,
   * it's asserting that the target object has a `b` property that's equal to
   * `undefined`.
   *
   * The assertions `.ownProperty` and `.haveOwnProperty` can be used
   * interchangeably with `.own.property`.
   *
   * @name property
   * @param {String} name
   * @param {Mixed} val (optional)
   * @param {String} msg _optional_
   * @returns value of property for chaining
   * @namespace BDD
   * @api public
   */

  function assertProperty (name, val, msg) {
    if (msg) flag(this, 'message', msg);

    var isNested = flag(this, 'nested')
      , isOwn = flag(this, 'own')
      , flagMsg = flag(this, 'message')
      , obj = flag(this, 'object')
      , ssfi = flag(this, 'ssfi')
      , nameType = typeof name;

    flagMsg = flagMsg ? flagMsg + ': ' : '';

    if (isNested) {
      if (nameType !== 'string') {
        throw new AssertionError(
          flagMsg + 'the argument to property must be a string when using nested syntax',
          undefined,
          ssfi
        );
      }
    } else {
      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {
        throw new AssertionError(
          flagMsg + 'the argument to property must be a string, number, or symbol',
          undefined,
          ssfi
        );
      }
    }

    if (isNested && isOwn) {
      throw new AssertionError(
        flagMsg + 'The "nested" and "own" flags cannot be combined.',
        undefined,
        ssfi
      );
    }

    if (obj === null || obj === undefined) {
      throw new AssertionError(
        flagMsg + 'Target cannot be null or undefined.',
        undefined,
        ssfi
      );
    }

    var isDeep = flag(this, 'deep')
      , negate = flag(this, 'negate')
      , pathInfo = isNested ? _.getPathInfo(obj, name) : null
      , value = isNested ? pathInfo.value : obj[name];

    var descriptor = '';
    if (isDeep) descriptor += 'deep ';
    if (isOwn) descriptor += 'own ';
    if (isNested) descriptor += 'nested ';
    descriptor += 'property ';

    var hasProperty;
    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);
    else if (isNested) hasProperty = pathInfo.exists;
    else hasProperty = _.hasProperty(obj, name);

    // When performing a negated assertion for both name and val, merely having
    // a property with the given name isn't enough to cause the assertion to
    // fail. It must both have a property with the given name, and the value of
    // that property must equal the given val. Therefore, skip this assertion in
    // favor of the next.
    if (!negate || arguments.length === 1) {
      this.assert(
          hasProperty
        , 'expected #{this} to have ' + descriptor + _.inspect(name)
        , 'expected #{this} to not have ' + descriptor + _.inspect(name));
    }

    if (arguments.length > 1) {
      this.assert(
          hasProperty && (isDeep ? _.eql(val, value) : val === value)
        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'
        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'
        , val
        , value
      );
    }

    flag(this, 'object', value);
  }

  Assertion.addMethod('property', assertProperty);

  function assertOwnProperty (name, value, msg) {
    flag(this, 'own', true);
    assertProperty.apply(this, arguments);
  }

  Assertion.addMethod('ownProperty', assertOwnProperty);
  Assertion.addMethod('haveOwnProperty', assertOwnProperty);

  /**
   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])
   *
   * Asserts that the target has its own property descriptor with the given key
   * `name`. Enumerable and non-enumerable properties are included in the
   * search.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');
   *
   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that
   * the property's descriptor is deeply equal to the given `descriptor`. See
   * the `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.
   *
   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');
   *
   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing
   * a `descriptor`. The problem is that it creates uncertain expectations by
   * asserting that the target either doesn't have a property descriptor with
   * the given key `name`, or that it does have a property descriptor with the
   * given key `name` but its not deeply equal to the given `descriptor`. It's
   * often best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to have a property descriptor with the given
   * key `name`, it's often best to assert exactly that.
   *
   *     // Recommended
   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');
   *
   *     // Not recommended
   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * When the target is expected to have a property descriptor with the given
   * key `name`, it's often best to assert that the property has its expected
   * descriptor, rather than asserting that it doesn't have one of many
   * unexpected descriptors.
   *
   *     // Recommended
   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 3,
   *     });
   *
   *     // Not recommended
   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * `.ownPropertyDescriptor` changes the target of any assertions that follow
   * in the chain to be the value of the property descriptor from the original
   * target object.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')
   *       .that.has.property('enumerable', true);
   *
   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a
   * custom error message to show when the assertion fails. The message can also
   * be given as the second argument to `expect`. When not providing
   * `descriptor`, only use the second form.
   *
   *     // Recommended
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 2,
   *     }, 'nooo why fail??');
   *
   *     // Recommended
   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 2,
   *     });
   *
   *     // Recommended
   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');
   *
   *     // Not recommended
   *     expect({a: 1})
   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');
   *
   * The above assertion isn't the same thing as not providing `descriptor`.
   * Instead, it's asserting that the target object has a `b` property
   * descriptor that's deeply equal to `undefined`.
   *
   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with
   * `.ownPropertyDescriptor`.
   *
   * @name ownPropertyDescriptor
   * @alias haveOwnPropertyDescriptor
   * @param {String} name
   * @param {Object} descriptor _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertOwnPropertyDescriptor (name, descriptor, msg) {
    if (typeof descriptor === 'string') {
      msg = descriptor;
      descriptor = null;
    }
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
    if (actualDescriptor && descriptor) {
      this.assert(
          _.eql(descriptor, actualDescriptor)
        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)
        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)
        , descriptor
        , actualDescriptor
        , true
      );
    } else {
      this.assert(
          actualDescriptor
        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)
        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)
      );
    }
    flag(this, 'object', actualDescriptor);
  }

  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);

  /**
   * ### .lengthOf(n[, msg])
   *
   * Asserts that the target's `length` or `size` is equal to the given number
   * `n`.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3);
   *     expect('foo').to.have.lengthOf(3);
   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);
   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);
   *
   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often
   * best to assert that the target's `length` property is equal to its expected
   * value, rather than not equal to one of many unexpected values.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.not.have.lengthOf(4); // Not recommended
   *
   * `.lengthOf` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');
   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);
   *
   * `.lengthOf` can also be used as a language chain, causing all `.above`,
   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the
   * chain to use the target's `length` property as the target. However, it's
   * often best to assert that the target's `length` property is equal to its
   * expected length, rather than asserting that its `length` property falls
   * within some range of values.
   *
   *     // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf(3);
   *
   *     // Not recommended
   *     expect([1, 2, 3]).to.have.lengthOf.above(2);
   *     expect([1, 2, 3]).to.have.lengthOf.below(4);
   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);
   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);
   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);
   *
   * Due to a compatibility issue, the alias `.length` can't be chained directly
   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used
   * interchangeably with `.lengthOf` in every situation. It's recommended to
   * always use `.lengthOf` instead of `.length`.
   *
   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error
   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected
   *
   * @name lengthOf
   * @alias length
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertLengthChain () {
    flag(this, 'doLength', true);
  }

  function assertLength (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , objType = _.type(obj).toLowerCase()
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi')
      , descriptor = 'length'
      , itemsCount;

    switch (objType) {
      case 'map':
      case 'set':
        descriptor = 'size';
        itemsCount = obj.size;
        break;
      default:
        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
        itemsCount = obj.length;
    }

    this.assert(
        itemsCount == n
      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'
      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'
      , n
      , itemsCount
    );
  }

  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);

  /**
   * ### .match(re[, msg])
   *
   * Asserts that the target matches the given regular expression `re`.
   *
   *     expect('foobar').to.match(/^foo/);
   *
   * Add `.not` earlier in the chain to negate `.match`.
   *
   *     expect('foobar').to.not.match(/taco/);
   *
   * `.match` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect('foobar').to.match(/taco/, 'nooo why fail??');
   *     expect('foobar', 'nooo why fail??').to.match(/taco/);
   *
   * The alias `.matches` can be used interchangeably with `.match`.
   *
   * @name match
   * @alias matches
   * @param {RegExp} re
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */
  function assertMatch(re, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        re.exec(obj)
      , 'expected #{this} to match ' + re
      , 'expected #{this} not to match ' + re
    );
  }

  Assertion.addMethod('match', assertMatch);
  Assertion.addMethod('matches', assertMatch);

  /**
   * ### .string(str[, msg])
   *
   * Asserts that the target string contains the given substring `str`.
   *
   *     expect('foobar').to.have.string('bar');
   *
   * Add `.not` earlier in the chain to negate `.string`.
   *
   *     expect('foobar').to.not.have.string('taco');
   *
   * `.string` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect('foobar').to.have.string('taco', 'nooo why fail??');
   *     expect('foobar', 'nooo why fail??').to.have.string('taco');
   *
   * @name string
   * @param {String} str
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('string', function (str, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(obj, flagMsg, ssfi, true).is.a('string');

    this.assert(
        ~obj.indexOf(str)
      , 'expected #{this} to contain ' + _.inspect(str)
      , 'expected #{this} to not contain ' + _.inspect(str)
    );
  });

  /**
   * ### .keys(key1[, key2[, ...]])
   *
   * Asserts that the target object, array, map, or set has the given keys. Only
   * the target's own inherited properties are included in the search.
   *
   * When the target is an object or array, keys can be provided as one or more
   * string arguments, a single array argument, or a single object argument. In
   * the latter case, only the keys in the given object matter; the values are
   * ignored.
   *
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *     expect(['x', 'y']).to.have.all.keys(0, 1);
   *
   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);
   *     expect(['x', 'y']).to.have.all.keys([0, 1]);
   *
   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5
   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5
   *
   * When the target is a map or set, each key must be provided as a separate
   * argument.
   *
   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');
   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');
   *
   * Because `.keys` does different things based on the target's type, it's
   * important to check the target's type before using `.keys`. See the `.a` doc
   * for info on testing a target's type.
   *
   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');
   *
   * By default, strict (`===`) equality is used to compare keys of maps and
   * sets. Add `.deep` earlier in the chain to use deep equality instead. See
   * the `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target set deeply (but not strictly) has key `{a: 1}`
   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);
   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);
   *
   * By default, the target must have all of the given keys and no more. Add
   * `.any` earlier in the chain to only require that the target have at least
   * one of the given keys. Also, add `.not` earlier in the chain to negate
   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use
   * `.all` when asserting `.keys` without negation.
   *
   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts
   * exactly what's expected of the output, whereas `.not.all.keys` creates
   * uncertain expectations.
   *
   *     // Recommended; asserts that target doesn't have any of the given keys
   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
   *
   *     // Not recommended; asserts that target doesn't have all of the given
   *     // keys but may or may not have some of them
   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');
   *
   * When asserting `.keys` without negation, `.all` is preferred because
   * `.all.keys` asserts exactly what's expected of the output, whereas
   * `.any.keys` creates uncertain expectations.
   *
   *     // Recommended; asserts that target has all the given keys
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *
   *     // Not recommended; asserts that target has at least one of the given
   *     // keys but may or may not have more of them
   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');
   *
   * Note that `.all` is used by default when neither `.all` nor `.any` appear
   * earlier in the chain. However, it's often best to add `.all` anyway because
   * it improves readability.
   *
   *     // Both assertions are identical
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended
   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended
   *
   * Add `.include` earlier in the chain to require that the target's keys be a
   * superset of the expected keys, rather than identical sets.
   *
   *     // Target object's keys are a superset of ['a', 'b'] but not identical
   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
   *
   * However, if `.any` and `.include` are combined, only the `.any` takes
   * effect. The `.include` is ignored in this case.
   *
   *     // Both assertions are identical
   *     expect({a: 1}).to.have.any.keys('a', 'b');
   *     expect({a: 1}).to.include.any.keys('a', 'b');
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');
   *
   * The alias `.key` can be used interchangeably with `.keys`.
   *
   * @name keys
   * @alias key
   * @param {...String|Array|Object} keys
   * @namespace BDD
   * @api public
   */

  function assertKeys (keys) {
    var obj = flag(this, 'object')
      , objType = _.type(obj)
      , keysType = _.type(keys)
      , ssfi = flag(this, 'ssfi')
      , isDeep = flag(this, 'deep')
      , str
      , deepStr = ''
      , actual
      , ok = true
      , flagMsg = flag(this, 'message');

    flagMsg = flagMsg ? flagMsg + ': ' : '';
    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';

    if (objType === 'Map' || objType === 'Set') {
      deepStr = isDeep ? 'deeply ' : '';
      actual = [];

      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.
      obj.forEach(function (val, key) { actual.push(key) });

      if (keysType !== 'Array') {
        keys = Array.prototype.slice.call(arguments);
      }
    } else {
      actual = _.getOwnEnumerableProperties(obj);

      switch (keysType) {
        case 'Array':
          if (arguments.length > 1) {
            throw new AssertionError(mixedArgsMsg, undefined, ssfi);
          }
          break;
        case 'Object':
          if (arguments.length > 1) {
            throw new AssertionError(mixedArgsMsg, undefined, ssfi);
          }
          keys = Object.keys(keys);
          break;
        default:
          keys = Array.prototype.slice.call(arguments);
      }

      // Only stringify non-Symbols because Symbols would become "Symbol()"
      keys = keys.map(function (val) {
        return typeof val === 'symbol' ? val : String(val);
      });
    }

    if (!keys.length) {
      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);
    }

    var len = keys.length
      , any = flag(this, 'any')
      , all = flag(this, 'all')
      , expected = keys;

    if (!any && !all) {
      all = true;
    }

    // Has any
    if (any) {
      ok = expected.some(function(expectedKey) {
        return actual.some(function(actualKey) {
          if (isDeep) {
            return _.eql(expectedKey, actualKey);
          } else {
            return expectedKey === actualKey;
          }
        });
      });
    }

    // Has all
    if (all) {
      ok = expected.every(function(expectedKey) {
        return actual.some(function(actualKey) {
          if (isDeep) {
            return _.eql(expectedKey, actualKey);
          } else {
            return expectedKey === actualKey;
          }
        });
      });

      if (!flag(this, 'contains')) {
        ok = ok && keys.length == actual.length;
      }
    }

    // Key string
    if (len > 1) {
      keys = keys.map(function(key) {
        return _.inspect(key);
      });
      var last = keys.pop();
      if (all) {
        str = keys.join(', ') + ', and ' + last;
      }
      if (any) {
        str = keys.join(', ') + ', or ' + last;
      }
    } else {
      str = _.inspect(keys[0]);
    }

    // Form
    str = (len > 1 ? 'keys ' : 'key ') + str;

    // Have / include
    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;

    // Assertion
    this.assert(
        ok
      , 'expected #{this} to ' + deepStr + str
      , 'expected #{this} to not ' + deepStr + str
      , expected.slice(0).sort(_.compareByInspect)
      , actual.sort(_.compareByInspect)
      , true
    );
  }

  Assertion.addMethod('keys', assertKeys);
  Assertion.addMethod('key', assertKeys);

  /**
   * ### .throw([errorLike], [errMsgMatcher], [msg])
   *
   * When no arguments are provided, `.throw` invokes the target function and
   * asserts that an error is thrown.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw();
   *
   * When one argument is provided, and it's an error constructor, `.throw`
   * invokes the target function and asserts that an error is thrown that's an
   * instance of that error constructor.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(TypeError);
   *
   * When one argument is provided, and it's an error instance, `.throw` invokes
   * the target function and asserts that an error is thrown that's strictly
   * (`===`) equal to that error instance.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(err);
   *
   * When one argument is provided, and it's a string, `.throw` invokes the
   * target function and asserts that an error is thrown with a message that
   * contains that string.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw('salmon');
   *
   * When one argument is provided, and it's a regular expression, `.throw`
   * invokes the target function and asserts that an error is thrown with a
   * message that matches that regular expression.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(/salmon/);
   *
   * When two arguments are provided, and the first is an error instance or
   * constructor, and the second is a string or regular expression, `.throw`
   * invokes the function and asserts that an error is thrown that fulfills both
   * conditions as described above.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(TypeError, 'salmon');
   *     expect(badFn).to.throw(TypeError, /salmon/);
   *     expect(badFn).to.throw(err, 'salmon');
   *     expect(badFn).to.throw(err, /salmon/);
   *
   * Add `.not` earlier in the chain to negate `.throw`.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.not.throw();
   *
   * However, it's dangerous to negate `.throw` when providing any arguments.
   * The problem is that it creates uncertain expectations by asserting that the
   * target either doesn't throw an error, or that it throws an error but of a
   * different type than the given type, or that it throws an error of the given
   * type but with a message that doesn't include the given string. It's often
   * best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to throw an error, it's often best to assert
   * exactly that.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.not.throw(); // Recommended
   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended
   *
   * When the target is expected to throw an error, it's often best to assert
   * that the error is of its expected type, and has a message that includes an
   * expected string, rather than asserting that it doesn't have one of many
   * unexpected types, and doesn't have a message that includes some string.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended
   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended
   *
   * `.throw` changes the target of any assertions that follow in the chain to
   * be the error object that's thrown.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     err.code = 42;
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(TypeError).with.property('code', 42);
   *
   * `.throw` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`. When not providing two arguments, always use
   * the second form.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');
   *     expect(goodFn, 'nooo why fail??').to.throw();
   *
   * Due to limitations in ES5, `.throw` may not always work as expected when
   * using a transpiler such as Babel or TypeScript. In particular, it may
   * produce unexpected results when subclassing the built-in `Error` object and
   * then passing the subclassed constructor to `.throw`. See your transpiler's
   * docs for details:
   *
   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
   *
   * Beware of some common mistakes when using the `throw` assertion. One common
   * mistake is to accidentally invoke the function yourself instead of letting
   * the `throw` assertion invoke the function for you. For example, when
   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as
   * the target for the assertion.
   *
   *     expect(fn).to.throw();     // Good! Tests `fn` as desired
   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`
   *
   * If you need to assert that your function `fn` throws when passed certain
   * arguments, then wrap a call to `fn` inside of another function.
   *
   *     expect(function () { fn(42); }).to.throw();  // Function expression
   *     expect(() => fn(42)).to.throw();             // ES6 arrow function
   *
   * Another common mistake is to provide an object method (or any stand-alone
   * function that relies on `this`) as the target of the assertion. Doing so is
   * problematic because the `this` context will be lost when the function is
   * invoked by `.throw`; there's no way for it to know what `this` is supposed
   * to be. There are two ways around this problem. One solution is to wrap the
   * method or function call inside of another function. Another solution is to
   * use `bind`.
   *
   *     expect(function () { cat.meow(); }).to.throw();  // Function expression
   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function
   *     expect(cat.meow.bind(cat)).to.throw();           // Bind
   *
   * Finally, it's worth mentioning that it's a best practice in JavaScript to
   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,
   * `TypeError`, and user-defined objects that extend `Error`. No other type of
   * value will generate a stack trace when initialized. With that said, the
   * `throw` assertion does technically support any type of value being thrown,
   * not just `Error` and its derivatives.
   *
   * The aliases `.throws` and `.Throw` can be used interchangeably with
   * `.throw`.
   *
   * @name throw
   * @alias throws
   * @alias Throw
   * @param {Error|ErrorConstructor} errorLike
   * @param {String|RegExp} errMsgMatcher error message
   * @param {String} msg _optional_
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @returns error for chaining (null if no error)
   * @namespace BDD
   * @api public
   */

  function assertThrows (errorLike, errMsgMatcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , ssfi = flag(this, 'ssfi')
      , flagMsg = flag(this, 'message')
      , negate = flag(this, 'negate') || false;
    new Assertion(obj, flagMsg, ssfi, true).is.a('function');

    if (errorLike instanceof RegExp || typeof errorLike === 'string') {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    var caughtErr;
    try {
      obj();
    } catch (err) {
      caughtErr = err;
    }

    // If we have the negate flag enabled and at least one valid argument it means we do expect an error
    // but we want it to match a given set of criteria
    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;

    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible
    // See Issue #551 and PR #683@GitHub
    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);
    var errorLikeFail = false;
    var errMsgMatcherFail = false;

    // Checking if error was thrown
    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
      // We need this to display results correctly according to their types
      var errorLikeString = 'an error';
      if (errorLike instanceof Error) {
        errorLikeString = '#{exp}';
      } else if (errorLike) {
        errorLikeString = _.checkError.getConstructorName(errorLike);
      }

      this.assert(
          caughtErr
        , 'expected #{this} to throw ' + errorLikeString
        , 'expected #{this} to not throw an error but #{act} was thrown'
        , errorLike && errorLike.toString()
        , (caughtErr instanceof Error ?
            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&
                                    _.checkError.getConstructorName(caughtErr)))
      );
    }

    if (errorLike && caughtErr) {
      // We should compare instances only if `errorLike` is an instance of `Error`
      if (errorLike instanceof Error) {
        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);

        if (isCompatibleInstance === negate) {
          // These checks were created to ensure we won't fail too soon when we've got both args and a negate
          // See Issue #551 and PR #683@GitHub
          if (everyArgIsDefined && negate) {
            errorLikeFail = true;
          } else {
            this.assert(
                negate
              , 'expected #{this} to throw #{exp} but #{act} was thrown'
              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')
              , errorLike.toString()
              , caughtErr.toString()
            );
          }
        }
      }

      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);
      if (isCompatibleConstructor === negate) {
        if (everyArgIsDefined && negate) {
            errorLikeFail = true;
        } else {
          this.assert(
              negate
            , 'expected #{this} to throw #{exp} but #{act} was thrown'
            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')
            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))
            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))
          );
        }
      }
    }

    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {
      // Here we check compatible messages
      var placeholder = 'including';
      if (errMsgMatcher instanceof RegExp) {
        placeholder = 'matching'
      }

      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);
      if (isCompatibleMessage === negate) {
        if (everyArgIsDefined && negate) {
            errMsgMatcherFail = true;
        } else {
          this.assert(
            negate
            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'
            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'
            ,  errMsgMatcher
            ,  _.checkError.getMessage(caughtErr)
          );
        }
      }
    }

    // If both assertions failed and both should've matched we throw an error
    if (errorLikeFail && errMsgMatcherFail) {
      this.assert(
        negate
        , 'expected #{this} to throw #{exp} but #{act} was thrown'
        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')
        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))
        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))
      );
    }

    flag(this, 'object', caughtErr);
  };

  Assertion.addMethod('throw', assertThrows);
  Assertion.addMethod('throws', assertThrows);
  Assertion.addMethod('Throw', assertThrows);

  /**
   * ### .respondTo(method[, msg])
   *
   * When the target is a non-function object, `.respondTo` asserts that the
   * target has a method with the given name `method`. The method can be own or
   * inherited, and it can be enumerable or non-enumerable.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(new Cat()).to.respondTo('meow');
   *
   * When the target is a function, `.respondTo` asserts that the target's
   * `prototype` property has a method with the given name `method`. Again, the
   * method can be own or inherited, and it can be enumerable or non-enumerable.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(Cat).to.respondTo('meow');
   *
   * Add `.itself` earlier in the chain to force `.respondTo` to treat the
   * target as a non-function object, even if it's a function. Thus, it asserts
   * that the target has a method with the given name `method`, rather than
   * asserting that the target's `prototype` property has a method with the
   * given name `method`.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *     Cat.hiss = function () {};
   *
   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
   *
   * When not adding `.itself`, it's important to check the target's type before
   * using `.respondTo`. See the `.a` doc for info on checking a target's type.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');
   *
   * Add `.not` earlier in the chain to negate `.respondTo`.
   *
   *     function Dog () {}
   *     Dog.prototype.bark = function () {};
   *
   *     expect(new Dog()).to.not.respondTo('meow');
   *
   * `.respondTo` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect({}).to.respondTo('meow', 'nooo why fail??');
   *     expect({}, 'nooo why fail??').to.respondTo('meow');
   *
   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.
   *
   * @name respondTo
   * @alias respondsTo
   * @param {String} method
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function respondTo (method, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , itself = flag(this, 'itself')
      , context = ('function' === typeof obj && !itself)
        ? obj.prototype[method]
        : obj[method];

    this.assert(
        'function' === typeof context
      , 'expected #{this} to respond to ' + _.inspect(method)
      , 'expected #{this} to not respond to ' + _.inspect(method)
    );
  }

  Assertion.addMethod('respondTo', respondTo);
  Assertion.addMethod('respondsTo', respondTo);

  /**
   * ### .itself
   *
   * Forces all `.respondTo` assertions that follow in the chain to behave as if
   * the target is a non-function object, even if it's a function. Thus, it
   * causes `.respondTo` to assert that the target has a method with the given
   * name, rather than asserting that the target's `prototype` property has a
   * method with the given name.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *     Cat.hiss = function () {};
   *
   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
   *
   * @name itself
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('itself', function () {
    flag(this, 'itself', true);
  });

  /**
   * ### .satisfy(matcher[, msg])
   *
   * Invokes the given `matcher` function with the target being passed as the
   * first argument, and asserts that the value returned is truthy.
   *
   *     expect(1).to.satisfy(function(num) {
   *       return num > 0;
   *     });
   *
   * Add `.not` earlier in the chain to negate `.satisfy`.
   *
   *     expect(1).to.not.satisfy(function(num) {
   *       return num > 2;
   *     });
   *
   * `.satisfy` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1).to.satisfy(function(num) {
   *       return num > 2;
   *     }, 'nooo why fail??');
   *
   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {
   *       return num > 2;
   *     });
   *
   * The alias `.satisfies` can be used interchangeably with `.satisfy`.
   *
   * @name satisfy
   * @alias satisfies
   * @param {Function} matcher
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function satisfy (matcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var result = matcher(obj);
    this.assert(
        result
      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)
      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)
      , flag(this, 'negate') ? false : true
      , result
    );
  }

  Assertion.addMethod('satisfy', satisfy);
  Assertion.addMethod('satisfies', satisfy);

  /**
   * ### .closeTo(expected, delta[, msg])
   *
   * Asserts that the target is a number that's within a given +/- `delta` range
   * of the given number `expected`. However, it's often best to assert that the
   * target is equal to its expected value.
   *
   *     // Recommended
   *     expect(1.5).to.equal(1.5);
   *
   *     // Not recommended
   *     expect(1.5).to.be.closeTo(1, 0.5);
   *     expect(1.5).to.be.closeTo(2, 0.5);
   *     expect(1.5).to.be.closeTo(1, 1);
   *
   * Add `.not` earlier in the chain to negate `.closeTo`.
   *
   *     expect(1.5).to.equal(1.5); // Recommended
   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended
   *
   * `.closeTo` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');
   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);
   *
   * The alias `.approximately` can be used interchangeably with `.closeTo`.
   *
   * @name closeTo
   * @alias approximately
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function closeTo(expected, delta, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');

    new Assertion(obj, flagMsg, ssfi, true).is.a('number');
    if (typeof expected !== 'number' || typeof delta !== 'number') {
      flagMsg = flagMsg ? flagMsg + ': ' : '';
      throw new AssertionError(
          flagMsg + 'the arguments to closeTo or approximately must be numbers',
          undefined,
          ssfi
      );
    }

    this.assert(
        Math.abs(obj - expected) <= delta
      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta
      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta
    );
  }

  Assertion.addMethod('closeTo', closeTo);
  Assertion.addMethod('approximately', closeTo);

  // Note: Duplicates are ignored if testing for inclusion instead of sameness.
  function isSubsetOf(subset, superset, cmp, contains, ordered) {
    if (!contains) {
      if (subset.length !== superset.length) return false;
      superset = superset.slice();
    }

    return subset.every(function(elem, idx) {
      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];

      if (!cmp) {
        var matchIdx = superset.indexOf(elem);
        if (matchIdx === -1) return false;

        // Remove match from superset so not counted twice if duplicate in subset.
        if (!contains) superset.splice(matchIdx, 1);
        return true;
      }

      return superset.some(function(elem2, matchIdx) {
        if (!cmp(elem, elem2)) return false;

        // Remove match from superset so not counted twice if duplicate in subset.
        if (!contains) superset.splice(matchIdx, 1);
        return true;
      });
    });
  }

  /**
   * ### .members(set[, msg])
   *
   * Asserts that the target array has the same members as the given array
   * `set`.
   *
   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);
   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);
   *
   * By default, members are compared using strict (`===`) equality. Add `.deep`
   * earlier in the chain to use deep equality instead. See the `deep-eql`
   * project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target array deeply (but not strictly) has member `{a: 1}`
   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
   *
   * By default, order doesn't matter. Add `.ordered` earlier in the chain to
   * require that members appear in the same order.
   *
   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);
   *     expect([1, 2, 3]).to.have.members([2, 1, 3])
   *       .but.not.ordered.members([2, 1, 3]);
   *
   * By default, both arrays must be the same size. Add `.include` earlier in
   * the chain to require that the target's members be a superset of the
   * expected members. Note that duplicates are ignored in the subset when
   * `.include` is added.
   *
   *     // Target array is a superset of [1, 2] but not identical
   *     expect([1, 2, 3]).to.include.members([1, 2]);
   *     expect([1, 2, 3]).to.not.have.members([1, 2]);
   *
   *     // Duplicates in the subset are ignored
   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
   *
   * `.deep`, `.ordered`, and `.include` can all be combined. However, if
   * `.include` and `.ordered` are combined, the ordering begins at the start of
   * both arrays.
   *
   *     expect([{a: 1}, {b: 2}, {c: 3}])
   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])
   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);
   *
   * Add `.not` earlier in the chain to negate `.members`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the target array doesn't have all of the same members as
   * the given array `set` but may or may not have some of them. It's often best
   * to identify the exact output that's expected, and then write an assertion
   * that only accepts that exact output.
   *
   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended
   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended
   *
   * `.members` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');
   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);
   *
   * @name members
   * @param {Array} set
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('members', function (subset, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');

    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');
    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');

    var contains = flag(this, 'contains');
    var ordered = flag(this, 'ordered');

    var subject, failMsg, failNegateMsg;

    if (contains) {
      subject = ordered ? 'an ordered superset' : 'a superset';
      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';
      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';
    } else {
      subject = ordered ? 'ordered members' : 'members';
      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';
      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';
    }

    var cmp = flag(this, 'deep') ? _.eql : undefined;

    this.assert(
        isSubsetOf(subset, obj, cmp, contains, ordered)
      , failMsg
      , failNegateMsg
      , subset
      , obj
      , true
    );
  });

  /**
   * ### .oneOf(list[, msg])
   *
   * Asserts that the target is a member of the given array `list`. However,
   * it's often best to assert that the target is equal to its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended
   *
   * Comparisons are performed using strict (`===`) equality.
   *
   * Add `.not` earlier in the chain to negate `.oneOf`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended
   *
   * `.oneOf` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);
   *
   * @name oneOf
   * @param {Array<*>} list
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function oneOf (list, msg) {
    if (msg) flag(this, 'message', msg);
    var expected = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');

    this.assert(
        list.indexOf(expected) > -1
      , 'expected #{this} to be one of #{exp}'
      , 'expected #{this} to not be one of #{exp}'
      , list
      , expected
    );
  }

  Assertion.addMethod('oneOf', oneOf);

  /**
   * ### .change(subject[, prop[, msg]])
   *
   * When one argument is provided, `.change` asserts that the given function
   * `subject` returns a different value when it's invoked before the target
   * function compared to when it's invoked afterward. However, it's often best
   * to assert that `subject` is equal to its expected value.
   *
   *     var dots = ''
   *       , addDot = function () { dots += '.'; }
   *       , getDots = function () { return dots; };
   *
   *     // Recommended
   *     expect(getDots()).to.equal('');
   *     addDot();
   *     expect(getDots()).to.equal('.');
   *
   *     // Not recommended
   *     expect(addDot).to.change(getDots);
   *
   * When two arguments are provided, `.change` asserts that the value of the
   * given object `subject`'s `prop` property is different before invoking the
   * target function compared to afterward.
   *
   *     var myObj = {dots: ''}
   *       , addDot = function () { myObj.dots += '.'; };
   *
   *     // Recommended
   *     expect(myObj).to.have.property('dots', '');
   *     addDot();
   *     expect(myObj).to.have.property('dots', '.');
   *
   *     // Not recommended
   *     expect(addDot).to.change(myObj, 'dots');
   *
   * Strict (`===`) equality is used to compare before and after values.
   *
   * Add `.not` earlier in the chain to negate `.change`.
   *
   *     var dots = ''
   *       , noop = function () {}
   *       , getDots = function () { return dots; };
   *
   *     expect(noop).to.not.change(getDots);
   *
   *     var myObj = {dots: ''}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'dots');
   *
   * `.change` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {dots: ''}
   *       , addDot = function () { myObj.dots += '.'; };
   *
   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');
   *
   *     var dots = ''
   *       , addDot = function () { dots += '.'; }
   *       , getDots = function () { return dots; };
   *
   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);
   *
   * `.change` also causes all `.by` assertions that follow in the chain to
   * assert how much a numeric subject was increased or decreased by. However,
   * it's dangerous to use `.change.by`. The problem is that it creates
   * uncertain expectations by asserting that the subject either increases by
   * the given delta, or that it decreases by the given delta. It's often best
   * to identify the exact output that's expected, and then write an assertion
   * that only accepts that exact output.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; }
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   * The alias `.changes` can be used interchangeably with `.change`.
   *
   * @name change
   * @alias changes
   * @param {String} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertChanges (subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');

    var initial;
    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    }

    fn();

    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;

    // This gets flagged because of the .by(delta) assertion
    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'change');
    flag(this, 'realDelta', final !== initial);

    this.assert(
      initial !== final
      , 'expected ' + msgObj + ' to change'
      , 'expected ' + msgObj + ' to not change'
    );
  }

  Assertion.addMethod('change', assertChanges);
  Assertion.addMethod('changes', assertChanges);

  /**
   * ### .increase(subject[, prop[, msg]])
   *
   * When one argument is provided, `.increase` asserts that the given function
   * `subject` returns a greater number when it's invoked after invoking the
   * target function compared to when it's invoked beforehand. `.increase` also
   * causes all `.by` assertions that follow in the chain to assert how much
   * greater of a number is returned. It's often best to assert that the return
   * value increased by the expected amount, rather than asserting it increased
   * by any amount.
   *
   *     var val = 1
   *       , addTwo = function () { val += 2; }
   *       , getVal = function () { return val; };
   *
   *     expect(addTwo).to.increase(getVal).by(2); // Recommended
   *     expect(addTwo).to.increase(getVal); // Not recommended
   *
   * When two arguments are provided, `.increase` asserts that the value of the
   * given object `subject`'s `prop` property is greater after invoking the
   * target function compared to beforehand.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.increase`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either decreases, or that it stays the same.
   * It's often best to identify the exact output that's expected, and then
   * write an assertion that only accepts that exact output.
   *
   * When the subject is expected to decrease, it's often best to assert that it
   * decreased by the expected amount.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended
   *
   * When the subject is expected to stay the same, it's often best to assert
   * exactly that.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'val'); // Recommended
   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended
   *
   * `.increase` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');
   *
   *     var val = 1
   *       , noop = function () {}
   *       , getVal = function () { return val; };
   *
   *     expect(noop, 'nooo why fail??').to.increase(getVal);
   *
   * The alias `.increases` can be used interchangeably with `.increase`.
   *
   * @name increase
   * @alias increases
   * @param {String|Function} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertIncreases (subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');

    var initial;
    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    }

    // Make sure that the target is a number
    new Assertion(initial, flagMsg, ssfi, true).is.a('number');

    fn();

    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;

    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'increase');
    flag(this, 'realDelta', final - initial);

    this.assert(
      final - initial > 0
      , 'expected ' + msgObj + ' to increase'
      , 'expected ' + msgObj + ' to not increase'
    );
  }

  Assertion.addMethod('increase', assertIncreases);
  Assertion.addMethod('increases', assertIncreases);

  /**
   * ### .decrease(subject[, prop[, msg]])
   *
   * When one argument is provided, `.decrease` asserts that the given function
   * `subject` returns a lesser number when it's invoked after invoking the
   * target function compared to when it's invoked beforehand. `.decrease` also
   * causes all `.by` assertions that follow in the chain to assert how much
   * lesser of a number is returned. It's often best to assert that the return
   * value decreased by the expected amount, rather than asserting it decreased
   * by any amount.
   *
   *     var val = 1
   *       , subtractTwo = function () { val -= 2; }
   *       , getVal = function () { return val; };
   *
   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended
   *     expect(subtractTwo).to.decrease(getVal); // Not recommended
   *
   * When two arguments are provided, `.decrease` asserts that the value of the
   * given object `subject`'s `prop` property is lesser after invoking the
   * target function compared to beforehand.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.decrease`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either increases, or that it stays the same.
   * It's often best to identify the exact output that's expected, and then
   * write an assertion that only accepts that exact output.
   *
   * When the subject is expected to increase, it's often best to assert that it
   * increased by the expected amount.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended
   *
   * When the subject is expected to stay the same, it's often best to assert
   * exactly that.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'val'); // Recommended
   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended
   *
   * `.decrease` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');
   *
   *     var val = 1
   *       , noop = function () {}
   *       , getVal = function () { return val; };
   *
   *     expect(noop, 'nooo why fail??').to.decrease(getVal);
   *
   * The alias `.decreases` can be used interchangeably with `.decrease`.
   *
   * @name decrease
   * @alias decreases
   * @param {String|Function} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertDecreases (subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');

    var initial;
    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    }

    // Make sure that the target is a number
    new Assertion(initial, flagMsg, ssfi, true).is.a('number');

    fn();

    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;

    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'decrease');
    flag(this, 'realDelta', initial - final);

    this.assert(
      final - initial < 0
      , 'expected ' + msgObj + ' to decrease'
      , 'expected ' + msgObj + ' to not decrease'
    );
  }

  Assertion.addMethod('decrease', assertDecreases);
  Assertion.addMethod('decreases', assertDecreases);

  /**
   * ### .by(delta[, msg])
   *
   * When following an `.increase` assertion in the chain, `.by` asserts that
   * the subject of the `.increase` assertion increased by the given `delta`.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2);
   *
   * When following a `.decrease` assertion in the chain, `.by` asserts that the
   * subject of the `.decrease` assertion decreased by the given `delta`.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);
   *
   * When following a `.change` assertion in the chain, `.by` asserts that the
   * subject of the `.change` assertion either increased or decreased by the
   * given `delta`. However, it's dangerous to use `.change.by`. The problem is
   * that it creates uncertain expectations. It's often best to identify the
   * exact output that's expected, and then write an assertion that only accepts
   * that exact output.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; }
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.by`. However, it's often best
   * to assert that the subject changed by its expected delta, rather than
   * asserting that it didn't change by one of countless unexpected deltas.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     // Recommended
   *     expect(addTwo).to.increase(myObj, 'val').by(2);
   *
   *     // Not recommended
   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);
   *
   * `.by` accepts an optional `msg` argument which is a custom error message to
   * show when the assertion fails. The message can also be given as the second
   * argument to `expect`.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');
   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);
   *
   * @name by
   * @param {Number} delta
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertDelta(delta, msg) {
    if (msg) flag(this, 'message', msg);

    var msgObj = flag(this, 'deltaMsgObj');
    var initial = flag(this, 'initialDeltaValue');
    var final = flag(this, 'finalDeltaValue');
    var behavior = flag(this, 'deltaBehavior');
    var realDelta = flag(this, 'realDelta');

    var expression;
    if (behavior === 'change') {
      expression = Math.abs(final - initial) === Math.abs(delta);
    } else {
      expression = realDelta === Math.abs(delta);
    }

    this.assert(
      expression
      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta
      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta
    );
  }

  Assertion.addMethod('by', assertDelta);

  /**
   * ### .extensible
   *
   * Asserts that the target is extensible, which means that new properties can
   * be added to it. Primitives are never extensible.
   *
   *     expect({a: 1}).to.be.extensible;
   *
   * Add `.not` earlier in the chain to negate `.extensible`.
   *
   *     var nonExtensibleObject = Object.preventExtensions({})
   *       , sealedObject = Object.seal({})
   *       , frozenObject = Object.freeze({});
   *
   *     expect(nonExtensibleObject).to.not.be.extensible;
   *     expect(sealedObject).to.not.be.extensible;
   *     expect(frozenObject).to.not.be.extensible;
   *     expect(1).to.not.be.extensible;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(1, 'nooo why fail??').to.be.extensible;
   *
   * @name extensible
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('extensible', function() {
    var obj = flag(this, 'object');

    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
    // The following provides ES6 behavior for ES5 environments.

    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);

    this.assert(
      isExtensible
      , 'expected #{this} to be extensible'
      , 'expected #{this} to not be extensible'
    );
  });

  /**
   * ### .sealed
   *
   * Asserts that the target is sealed, which means that new properties can't be
   * added to it, and its existing properties can't be reconfigured or deleted.
   * However, it's possible that its existing properties can still be reassigned
   * to different values. Primitives are always sealed.
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     expect(sealedObject).to.be.sealed;
   *     expect(frozenObject).to.be.sealed;
   *     expect(1).to.be.sealed;
   *
   * Add `.not` earlier in the chain to negate `.sealed`.
   *
   *     expect({a: 1}).to.not.be.sealed;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;
   *
   * @name sealed
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('sealed', function() {
    var obj = flag(this, 'object');

    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed
    // The following provides ES6 behavior for ES5 environments.

    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;

    this.assert(
      isSealed
      , 'expected #{this} to be sealed'
      , 'expected #{this} to not be sealed'
    );
  });

  /**
   * ### .frozen
   *
   * Asserts that the target is frozen, which means that new properties can't be
   * added to it, and its existing properties can't be reassigned to different
   * values, reconfigured, or deleted. Primitives are always frozen.
   *
   *     var frozenObject = Object.freeze({});
   *
   *     expect(frozenObject).to.be.frozen;
   *     expect(1).to.be.frozen;
   *
   * Add `.not` earlier in the chain to negate `.frozen`.
   *
   *     expect({a: 1}).to.not.be.frozen;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;
   *
   * @name frozen
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('frozen', function() {
    var obj = flag(this, 'object');

    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen
    // The following provides ES6 behavior for ES5 environments.

    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;

    this.assert(
      isFrozen
      , 'expected #{this} to be frozen'
      , 'expected #{this} to not be frozen'
    );
  });

  /**
   * ### .finite
   *
   * Asserts that the target is a number, and isn't `NaN` or positive/negative
   * `Infinity`.
   *
   *     expect(1).to.be.finite;
   *
   * Add `.not` earlier in the chain to negate `.finite`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either isn't a number, or that it's `NaN`, or
   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often
   * best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to be a number, it's often best to assert
   * that it's the expected type, rather than asserting that it isn't one of
   * many unexpected types.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.finite; // Not recommended
   *
   * When the target is expected to be `NaN`, it's often best to assert exactly
   * that.
   *
   *     expect(NaN).to.be.NaN; // Recommended
   *     expect(NaN).to.not.be.finite; // Not recommended
   *
   * When the target is expected to be positive infinity, it's often best to
   * assert exactly that.
   *
   *     expect(Infinity).to.equal(Infinity); // Recommended
   *     expect(Infinity).to.not.be.finite; // Not recommended
   *
   * When the target is expected to be negative infinity, it's often best to
   * assert exactly that.
   *
   *     expect(-Infinity).to.equal(-Infinity); // Recommended
   *     expect(-Infinity).to.not.be.finite; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect('foo', 'nooo why fail??').to.be.finite;
   *
   * @name finite
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('finite', function(msg) {
    var obj = flag(this, 'object');

    this.assert(
        typeof obj === 'number' && isFinite(obj)
      , 'expected #{this} to be a finite number'
      , 'expected #{this} to not be a finite number'
    );
  });
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/interface/assert.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/interface/assert.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  /*!
   * Chai dependencies.
   */

  var Assertion = chai.Assertion
    , flag = util.flag;

  /*!
   * Module export.
   */

  /**
   * ### assert(expression, message)
   *
   * Write your own test expressions.
   *
   *     assert('foo' !== 'bar', 'foo is not bar');
   *     assert(Array.isArray([]), 'empty arrays are arrays');
   *
   * @param {Mixed} expression to test for truthiness
   * @param {String} message to display on error
   * @name assert
   * @namespace Assert
   * @api public
   */

  var assert = chai.assert = function (express, errmsg) {
    var test = new Assertion(null, null, chai.assert, true);
    test.assert(
        express
      , errmsg
      , '[ negation message unavailable ]'
    );
  };

  /**
   * ### .fail([message])
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure. Node.js `assert` module-compatible.
   *
   *     assert.fail();
   *     assert.fail("custom error message");
   *     assert.fail(1, 2);
   *     assert.fail(1, 2, "custom error message");
   *     assert.fail(1, 2, "custom error message", ">");
   *     assert.fail(1, 2, undefined, ">");
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace Assert
   * @api public
   */

  assert.fail = function (actual, expected, message, operator) {
    if (arguments.length < 2) {
        // Comply with Node's fail([message]) interface

        message = actual;
        actual = undefined;
    }

    message = message || 'assert.fail()';
    throw new chai.AssertionError(message, {
        actual: actual
      , expected: expected
      , operator: operator
    }, assert.fail);
  };

  /**
   * ### .isOk(object, [message])
   *
   * Asserts that `object` is truthy.
   *
   *     assert.isOk('everything', 'everything is ok');
   *     assert.isOk(false, 'this will fail');
   *
   * @name isOk
   * @alias ok
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isOk = function (val, msg) {
    new Assertion(val, msg, assert.isOk, true).is.ok;
  };

  /**
   * ### .isNotOk(object, [message])
   *
   * Asserts that `object` is falsy.
   *
   *     assert.isNotOk('everything', 'this will fail');
   *     assert.isNotOk(false, 'this will pass');
   *
   * @name isNotOk
   * @alias notOk
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotOk = function (val, msg) {
    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;
  };

  /**
   * ### .equal(actual, expected, [message])
   *
   * Asserts non-strict equality (`==`) of `actual` and `expected`.
   *
   *     assert.equal(3, '3', '== coerces values to strings');
   *
   * @name equal
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.equal = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.equal, true);

    test.assert(
        exp == flag(test, 'object')
      , 'expected #{this} to equal #{exp}'
      , 'expected #{this} to not equal #{act}'
      , exp
      , act
      , true
    );
  };

  /**
   * ### .notEqual(actual, expected, [message])
   *
   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
   *
   *     assert.notEqual(3, 4, 'these numbers are not equal');
   *
   * @name notEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notEqual = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.notEqual, true);

    test.assert(
        exp != flag(test, 'object')
      , 'expected #{this} to not equal #{exp}'
      , 'expected #{this} to equal #{act}'
      , exp
      , act
      , true
    );
  };

  /**
   * ### .strictEqual(actual, expected, [message])
   *
   * Asserts strict equality (`===`) of `actual` and `expected`.
   *
   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
   *
   * @name strictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.strictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);
  };

  /**
   * ### .notStrictEqual(actual, expected, [message])
   *
   * Asserts strict inequality (`!==`) of `actual` and `expected`.
   *
   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
   *
   * @name notStrictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);
  };

  /**
   * ### .deepEqual(actual, expected, [message])
   *
   * Asserts that `actual` is deeply equal to `expected`.
   *
   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
   *
   * @name deepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @alias deepStrictEqual
   * @namespace Assert
   * @api public
   */

  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);
  };

  /**
   * ### .notDeepEqual(actual, expected, [message])
   *
   * Assert that `actual` is not deeply equal to `expected`.
   *
   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
   *
   * @name notDeepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);
  };

   /**
   * ### .isAbove(valueToCheck, valueToBeAbove, [message])
   *
   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.
   *
   *     assert.isAbove(5, 2, '5 is strictly greater than 2');
   *
   * @name isAbove
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAbove
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isAbove = function (val, abv, msg) {
    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);
  };

   /**
   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])
   *
   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.
   *
   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');
   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');
   *
   * @name isAtLeast
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAtLeast
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isAtLeast = function (val, atlst, msg) {
    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);
  };

   /**
   * ### .isBelow(valueToCheck, valueToBeBelow, [message])
   *
   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.
   *
   *     assert.isBelow(3, 6, '3 is strictly less than 6');
   *
   * @name isBelow
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeBelow
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isBelow = function (val, blw, msg) {
    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);
  };

   /**
   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])
   *
   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.
   *
   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');
   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');
   *
   * @name isAtMost
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAtMost
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isAtMost = function (val, atmst, msg) {
    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);
  };

  /**
   * ### .isTrue(value, [message])
   *
   * Asserts that `value` is true.
   *
   *     var teaServed = true;
   *     assert.isTrue(teaServed, 'the tea has been served');
   *
   * @name isTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isTrue = function (val, msg) {
    new Assertion(val, msg, assert.isTrue, true).is['true'];
  };

  /**
   * ### .isNotTrue(value, [message])
   *
   * Asserts that `value` is not true.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotTrue(tea, 'great, time for tea!');
   *
   * @name isNotTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotTrue = function (val, msg) {
    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);
  };

  /**
   * ### .isFalse(value, [message])
   *
   * Asserts that `value` is false.
   *
   *     var teaServed = false;
   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
   *
   * @name isFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isFalse = function (val, msg) {
    new Assertion(val, msg, assert.isFalse, true).is['false'];
  };

  /**
   * ### .isNotFalse(value, [message])
   *
   * Asserts that `value` is not false.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotFalse(tea, 'great, time for tea!');
   *
   * @name isNotFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotFalse = function (val, msg) {
    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);
  };

  /**
   * ### .isNull(value, [message])
   *
   * Asserts that `value` is null.
   *
   *     assert.isNull(err, 'there was no error');
   *
   * @name isNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNull = function (val, msg) {
    new Assertion(val, msg, assert.isNull, true).to.equal(null);
  };

  /**
   * ### .isNotNull(value, [message])
   *
   * Asserts that `value` is not null.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotNull(tea, 'great, time for tea!');
   *
   * @name isNotNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotNull = function (val, msg) {
    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);
  };

  /**
   * ### .isNaN
   *
   * Asserts that value is NaN.
   *
   *     assert.isNaN(NaN, 'NaN is NaN');
   *
   * @name isNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNaN = function (val, msg) {
    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;
  };

  /**
   * ### .isNotNaN
   *
   * Asserts that value is not NaN.
   *
   *     assert.isNotNaN(4, '4 is not NaN');
   *
   * @name isNotNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */
  assert.isNotNaN = function (val, msg) {
    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;
  };

  /**
   * ### .exists
   *
   * Asserts that the target is neither `null` nor `undefined`.
   *
   *     var foo = 'hi';
   *
   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');
   *
   * @name exists
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.exists = function (val, msg) {
    new Assertion(val, msg, assert.exists, true).to.exist;
  };

  /**
   * ### .notExists
   *
   * Asserts that the target is either `null` or `undefined`.
   *
   *     var bar = null
   *       , baz;
   *
   *     assert.notExists(bar);
   *     assert.notExists(baz, 'baz is either null or undefined');
   *
   * @name notExists
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notExists = function (val, msg) {
    new Assertion(val, msg, assert.notExists, true).to.not.exist;
  };

  /**
   * ### .isUndefined(value, [message])
   *
   * Asserts that `value` is `undefined`.
   *
   *     var tea;
   *     assert.isUndefined(tea, 'no tea defined');
   *
   * @name isUndefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isUndefined = function (val, msg) {
    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);
  };

  /**
   * ### .isDefined(value, [message])
   *
   * Asserts that `value` is not `undefined`.
   *
   *     var tea = 'cup of chai';
   *     assert.isDefined(tea, 'tea has been defined');
   *
   * @name isDefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isDefined = function (val, msg) {
    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);
  };

  /**
   * ### .isFunction(value, [message])
   *
   * Asserts that `value` is a function.
   *
   *     function serveTea() { return 'cup of tea'; };
   *     assert.isFunction(serveTea, 'great, we can have tea now');
   *
   * @name isFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isFunction = function (val, msg) {
    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');
  };

  /**
   * ### .isNotFunction(value, [message])
   *
   * Asserts that `value` is _not_ a function.
   *
   *     var serveTea = [ 'heat', 'pour', 'sip' ];
   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
   *
   * @name isNotFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotFunction = function (val, msg) {
    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');
  };

  /**
   * ### .isObject(value, [message])
   *
   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).
   * _The assertion does not match subclassed objects._
   *
   *     var selection = { name: 'Chai', serve: 'with spices' };
   *     assert.isObject(selection, 'tea selection is an object');
   *
   * @name isObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isObject = function (val, msg) {
    new Assertion(val, msg, assert.isObject, true).to.be.a('object');
  };

  /**
   * ### .isNotObject(value, [message])
   *
   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).
   *
   *     var selection = 'chai'
   *     assert.isNotObject(selection, 'tea selection is not an object');
   *     assert.isNotObject(null, 'null is not an object');
   *
   * @name isNotObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotObject = function (val, msg) {
    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');
  };

  /**
   * ### .isArray(value, [message])
   *
   * Asserts that `value` is an array.
   *
   *     var menu = [ 'green', 'chai', 'oolong' ];
   *     assert.isArray(menu, 'what kind of tea do we want?');
   *
   * @name isArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isArray = function (val, msg) {
    new Assertion(val, msg, assert.isArray, true).to.be.an('array');
  };

  /**
   * ### .isNotArray(value, [message])
   *
   * Asserts that `value` is _not_ an array.
   *
   *     var menu = 'green|chai|oolong';
   *     assert.isNotArray(menu, 'what kind of tea do we want?');
   *
   * @name isNotArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotArray = function (val, msg) {
    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');
  };

  /**
   * ### .isString(value, [message])
   *
   * Asserts that `value` is a string.
   *
   *     var teaOrder = 'chai';
   *     assert.isString(teaOrder, 'order placed');
   *
   * @name isString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isString = function (val, msg) {
    new Assertion(val, msg, assert.isString, true).to.be.a('string');
  };

  /**
   * ### .isNotString(value, [message])
   *
   * Asserts that `value` is _not_ a string.
   *
   *     var teaOrder = 4;
   *     assert.isNotString(teaOrder, 'order placed');
   *
   * @name isNotString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotString = function (val, msg) {
    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');
  };

  /**
   * ### .isNumber(value, [message])
   *
   * Asserts that `value` is a number.
   *
   *     var cups = 2;
   *     assert.isNumber(cups, 'how many cups');
   *
   * @name isNumber
   * @param {Number} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNumber = function (val, msg) {
    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');
  };

  /**
   * ### .isNotNumber(value, [message])
   *
   * Asserts that `value` is _not_ a number.
   *
   *     var cups = '2 cups please';
   *     assert.isNotNumber(cups, 'how many cups');
   *
   * @name isNotNumber
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotNumber = function (val, msg) {
    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');
  };

   /**
   * ### .isFinite(value, [message])
   *
   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.
   *
   *     var cups = 2;
   *     assert.isFinite(cups, 'how many cups');
   *
   *     assert.isFinite(NaN); // throws
   *
   * @name isFinite
   * @param {Number} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isFinite = function (val, msg) {
    new Assertion(val, msg, assert.isFinite, true).to.be.finite;
  };

  /**
   * ### .isBoolean(value, [message])
   *
   * Asserts that `value` is a boolean.
   *
   *     var teaReady = true
   *       , teaServed = false;
   *
   *     assert.isBoolean(teaReady, 'is the tea ready');
   *     assert.isBoolean(teaServed, 'has tea been served');
   *
   * @name isBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isBoolean = function (val, msg) {
    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');
  };

  /**
   * ### .isNotBoolean(value, [message])
   *
   * Asserts that `value` is _not_ a boolean.
   *
   *     var teaReady = 'yep'
   *       , teaServed = 'nope';
   *
   *     assert.isNotBoolean(teaReady, 'is the tea ready');
   *     assert.isNotBoolean(teaServed, 'has tea been served');
   *
   * @name isNotBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotBoolean = function (val, msg) {
    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');
  };

  /**
   * ### .typeOf(value, name, [message])
   *
   * Asserts that `value`'s type is `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
   *     assert.typeOf('tea', 'string', 'we have a string');
   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
   *     assert.typeOf(null, 'null', 'we have a null');
   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
   *
   * @name typeOf
   * @param {Mixed} value
   * @param {String} name
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.typeOf = function (val, type, msg) {
    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);
  };

  /**
   * ### .notTypeOf(value, name, [message])
   *
   * Asserts that `value`'s type is _not_ `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
   *
   * @name notTypeOf
   * @param {Mixed} value
   * @param {String} typeof name
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notTypeOf = function (val, type, msg) {
    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);
  };

  /**
   * ### .instanceOf(object, constructor, [message])
   *
   * Asserts that `value` is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new Tea('chai');
   *
   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
   *
   * @name instanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.instanceOf = function (val, type, msg) {
    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);
  };

  /**
   * ### .notInstanceOf(object, constructor, [message])
   *
   * Asserts `value` is not an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new String('chai');
   *
   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
   *
   * @name notInstanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notInstanceOf = function (val, type, msg) {
    new Assertion(val, msg, assert.notInstanceOf, true)
      .to.not.be.instanceOf(type);
  };

  /**
   * ### .include(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Can be used to assert the
   * inclusion of a value in an array, a substring in a string, or a subset of
   * properties in an object.
   *
   *     assert.include([1,2,3], 2, 'array contains value');
   *     assert.include('foobar', 'foo', 'string contains substring');
   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');
   *
   * Strict equality (===) is used. When asserting the inclusion of a value in
   * an array, the array is searched for an element that's strictly equal to the
   * given value. When asserting a subset of properties in an object, the object
   * is searched for the given property keys, checking that each one is present
   * and strictly equal to the given property value. For instance:
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.include([obj1, obj2], obj1);
   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});
   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});
   *
   * @name include
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.include = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.include, true).include(inc);
  };

  /**
   * ### .notInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Can be used to assert
   * the absence of a value in an array, a substring in a string, or a subset of
   * properties in an object.
   *
   *     assert.notInclude([1,2,3], 4, "array doesn't contain value");
   *     assert.notInclude('foobar', 'baz', "string doesn't contain substring");
   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');
   *
   * Strict equality (===) is used. When asserting the absence of a value in an
   * array, the array is searched to confirm the absence of an element that's
   * strictly equal to the given value. When asserting a subset of properties in
   * an object, the object is searched to confirm that at least one of the given
   * property keys is either not present or not strictly equal to the given
   * property value. For instance:
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.notInclude([obj1, obj2], {a: 1});
   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});
   *
   * @name notInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);
  };

  /**
   * ### .deepInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Can be used to assert the
   * inclusion of a value in an array or a subset of properties in an object.
   * Deep equality is used.
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.deepInclude([obj1, obj2], {a: 1});
   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});
   *
   * @name deepInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);
  };

  /**
   * ### .notDeepInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Can be used to assert
   * the absence of a value in an array or a subset of properties in an object.
   * Deep equality is used.
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.notDeepInclude([obj1, obj2], {a: 9});
   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});
   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});
   *
   * @name notDeepInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);
  };

  /**
   * ### .nestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\.a.[b]': 'x'});
   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'x'});
   *
   * @name nestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.nestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);
  };

  /**
   * ### .notNestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' does not include 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\.a.b': 'y'});
   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'y'});
   *
   * @name notNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notNestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notNestedInclude, true)
      .not.nested.include(inc);
  };

  /**
   * ### .deepNestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object while checking for deep equality.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});
   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {x: 1}});
   *
   * @name deepNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepNestedInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.deepNestedInclude, true)
      .deep.nested.include(inc);
  };

  /**
   * ### .notDeepNestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' does not include 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object while checking for deep equality.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})
   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {y: 2}});
   *
   * @name notDeepNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepNestedInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepNestedInclude, true)
      .not.deep.nested.include(inc);
  };

  /**
   * ### .ownInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object while ignoring inherited properties.
   *
   *     assert.ownInclude({ a: 1 }, { a: 1 });
   *
   * @name ownInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.ownInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);
  };

  /**
   * ### .notOwnInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object while ignoring inherited properties.
   *
   *     Object.prototype.b = 2;
   *
   *     assert.notOwnInclude({ a: 1 }, { b: 2 });
   *
   * @name notOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notOwnInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);
  };

  /**
   * ### .deepOwnInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object while ignoring inherited properties and checking for deep equality.
   *
   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});
   *
   * @name deepOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepOwnInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.deepOwnInclude, true)
      .deep.own.include(inc);
  };

   /**
   * ### .notDeepOwnInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object while ignoring inherited properties and checking for deep equality.
   *
   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});
   *
   * @name notDeepOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepOwnInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepOwnInclude, true)
      .not.deep.own.include(inc);
  };

  /**
   * ### .match(value, regexp, [message])
   *
   * Asserts that `value` matches the regular expression `regexp`.
   *
   *     assert.match('foobar', /^foo/, 'regexp matches');
   *
   * @name match
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.match = function (exp, re, msg) {
    new Assertion(exp, msg, assert.match, true).to.match(re);
  };

  /**
   * ### .notMatch(value, regexp, [message])
   *
   * Asserts that `value` does not match the regular expression `regexp`.
   *
   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
   *
   * @name notMatch
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notMatch = function (exp, re, msg) {
    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);
  };

  /**
   * ### .property(object, property, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property`.
   *
   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
   *     assert.property({ tea: { green: 'matcha' }}, 'toString');
   *
   * @name property
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.property = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.property, true).to.have.property(prop);
  };

  /**
   * ### .notProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property`.
   *
   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
   *
   * @name notProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notProperty, true)
      .to.not.have.property(prop);
  };

  /**
   * ### .propertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property` with a value given by `value`. Uses a strict equality check
   * (===).
   *
   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
   *
   * @name propertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.propertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.propertyVal, true)
      .to.have.property(prop, val);
  };

  /**
   * ### .notPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property` with value given by `value`. Uses a strict equality check
   * (===).
   *
   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');
   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');
   *
   * @name notPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notPropertyVal, true)
      .to.not.have.property(prop, val);
  };

  /**
   * ### .deepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property` with a value given by `value`. Uses a deep equality check.
   *
   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
   *
   * @name deepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.deepPropertyVal, true)
      .to.have.deep.property(prop, val);
  };

  /**
   * ### .notDeepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property` with value given by `value`. Uses a deep equality check.
   *
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
   *
   * @name notDeepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notDeepPropertyVal, true)
      .to.not.have.deep.property(prop, val);
  };

  /**
   * ### .ownProperty(object, property, [message])
   *
   * Asserts that `object` has a direct property named by `property`. Inherited
   * properties aren't checked.
   *
   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');
   *
   * @name ownProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.ownProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.ownProperty, true)
      .to.have.own.property(prop);
  };

  /**
   * ### .notOwnProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by
   * `property`. Inherited properties aren't checked.
   *
   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');
   *     assert.notOwnProperty({}, 'toString');
   *
   * @name notOwnProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.notOwnProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notOwnProperty, true)
      .to.not.have.own.property(prop);
  };

  /**
   * ### .ownPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct property named by `property` and a value
   * equal to the provided `value`. Uses a strict equality check (===).
   * Inherited properties aren't checked.
   *
   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');
   *
   * @name ownPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.ownPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.ownPropertyVal, true)
      .to.have.own.property(prop, value);
  };

  /**
   * ### .notOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by `property`
   * with a value equal to the provided `value`. Uses a strict equality check
   * (===). Inherited properties aren't checked.
   *
   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');
   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);
   *
   * @name notOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.notOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.notOwnPropertyVal, true)
      .to.not.have.own.property(prop, value);
  };

  /**
   * ### .deepOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct property named by `property` and a value
   * equal to the provided `value`. Uses a deep equality check. Inherited
   * properties aren't checked.
   *
   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
   *
   * @name deepOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)
      .to.have.deep.own.property(prop, value);
  };

  /**
   * ### .notDeepOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by `property`
   * with a value equal to the provided `value`. Uses a deep equality check.
   * Inherited properties aren't checked.
   *
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);
   *
   * @name notDeepOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)
      .to.not.have.deep.own.property(prop, value);
  };

  /**
   * ### .nestedProperty(object, property, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property`, which can be a string using dot- and bracket-notation for
   * nested reference.
   *
   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');
   *
   * @name nestedProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.nestedProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.nestedProperty, true)
      .to.have.nested.property(prop);
  };

  /**
   * ### .notNestedProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`, which
   * can be a string using dot- and bracket-notation for nested reference. The
   * property cannot exist on the object nor anywhere in its prototype chain.
   *
   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
   *
   * @name notNestedProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notNestedProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notNestedProperty, true)
      .to.not.have.nested.property(prop);
  };

  /**
   * ### .nestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`. `property` can use dot- and bracket-notation for nested
   * reference. Uses a strict equality check (===).
   *
   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
   *
   * @name nestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.nestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.nestedPropertyVal, true)
      .to.have.nested.property(prop, val);
  };

  /**
   * ### .notNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property` with
   * value given by `value`. `property` can use dot- and bracket-notation for
   * nested reference. Uses a strict equality check (===).
   *
   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');
   *
   * @name notNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notNestedPropertyVal, true)
      .to.not.have.nested.property(prop, val);
  };

  /**
   * ### .deepNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with a value given
   * by `value`. `property` can use dot- and bracket-notation for nested
   * reference. Uses a deep equality check.
   *
   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });
   *
   * @name deepNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)
      .to.have.deep.nested.property(prop, val);
  };

  /**
   * ### .notDeepNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property` with
   * value given by `value`. `property` can use dot- and bracket-notation for
   * nested reference. Uses a deep equality check.
   *
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });
   *
   * @name notDeepNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)
      .to.not.have.deep.nested.property(prop, val);
  }

  /**
   * ### .lengthOf(object, length, [message])
   *
   * Asserts that `object` has a `length` or `size` with the expected value.
   *
   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
   *     assert.lengthOf('foobar', 6, 'string has length of 6');
   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');
   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');
   *
   * @name lengthOf
   * @param {Mixed} object
   * @param {Number} length
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.lengthOf = function (exp, len, msg) {
    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);
  };

  /**
   * ### .hasAnyKeys(object, [keys], [message])
   *
   * Asserts that `object` has at least one of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);
   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});
   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);
   *
   * @name hasAnyKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.hasAnyKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);
  }

  /**
   * ### .hasAllKeys(object, [keys], [message])
   *
   * Asserts that `object` has all and only all of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);
   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
   *
   * @name hasAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.hasAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);
  }

  /**
   * ### .containsAllKeys(object, [keys], [message])
   *
   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});
   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);
   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);
   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
   *
   * @name containsAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.containsAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.containsAllKeys, true)
      .to.contain.all.keys(keys);
  }

  /**
   * ### .doesNotHaveAnyKeys(object, [keys], [message])
   *
   * Asserts that `object` has none of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
   *
   * @name doesNotHaveAnyKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)
      .to.not.have.any.keys(keys);
  }

  /**
   * ### .doesNotHaveAllKeys(object, [keys], [message])
   *
   * Asserts that `object` does not have at least one of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
   *
   * @name doesNotHaveAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.doesNotHaveAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)
      .to.not.have.all.keys(keys);
  }

  /**
   * ### .hasAnyDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has at least one of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name doesNotHaveAllKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.hasAnyDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)
      .to.have.any.deep.keys(keys);
  }

 /**
   * ### .hasAllDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has all and only all of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});
   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});
   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name hasAllDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.hasAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAllDeepKeys, true)
      .to.have.all.deep.keys(keys);
  }

 /**
   * ### .containsAllDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` contains all of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name containsAllDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.containsAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.containsAllDeepKeys, true)
      .to.contain.all.deep.keys(keys);
  }

 /**
   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has none of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
   *
   * @name doesNotHaveAnyDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)
      .to.not.have.any.deep.keys(keys);
  }

 /**
   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` does not have at least one of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);
   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);
   *
   * @name doesNotHaveAllDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)
      .to.not.have.all.deep.keys(keys);
  }

 /**
   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])
   *
   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an
   * instance of `errorLike`.
   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same
   * instance as `errorLike`.
   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a
   * message matching `errMsgMatcher`.
   *
   *     assert.throws(fn, 'Error thrown must have this msg');
   *     assert.throws(fn, /Error thrown must have a msg that matches this/);
   *     assert.throws(fn, ReferenceError);
   *     assert.throws(fn, errorInstance);
   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');
   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');
   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);
   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);
   *
   * @name throws
   * @alias throw
   * @alias Throw
   * @param {Function} fn
   * @param {ErrorConstructor|Error} errorLike
   * @param {RegExp|String} errMsgMatcher
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @namespace Assert
   * @api public
   */

  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {
    if ('string' === typeof errorLike || errorLike instanceof RegExp) {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    var assertErr = new Assertion(fn, msg, assert.throws, true)
      .to.throw(errorLike, errMsgMatcher);
    return flag(assertErr, 'object');
  };

  /**
   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])
   *
   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an
   * instance of `errorLike`.
   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same
   * instance as `errorLike`.
   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a
   * message matching `errMsgMatcher`.
   *
   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');
   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);
   *     assert.doesNotThrow(fn, Error);
   *     assert.doesNotThrow(fn, errorInstance);
   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');
   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');
   *     assert.doesNotThrow(fn, Error, /Error must not match this/);
   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);
   *
   * @name doesNotThrow
   * @param {Function} fn
   * @param {ErrorConstructor} errorLike
   * @param {RegExp|String} errMsgMatcher
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @namespace Assert
   * @api public
   */

  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {
    if ('string' === typeof errorLike || errorLike instanceof RegExp) {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    new Assertion(fn, msg, assert.doesNotThrow, true)
      .to.not.throw(errorLike, errMsgMatcher);
  };

  /**
   * ### .operator(val1, operator, val2, [message])
   *
   * Compares two values using `operator`.
   *
   *     assert.operator(1, '<', 2, 'everything is ok');
   *     assert.operator(1, '>', 2, 'this will fail');
   *
   * @name operator
   * @param {Mixed} val1
   * @param {String} operator
   * @param {Mixed} val2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.operator = function (val, operator, val2, msg) {
    var ok;
    switch(operator) {
      case '==':
        ok = val == val2;
        break;
      case '===':
        ok = val === val2;
        break;
      case '>':
        ok = val > val2;
        break;
      case '>=':
        ok = val >= val2;
        break;
      case '<':
        ok = val < val2;
        break;
      case '<=':
        ok = val <= val2;
        break;
      case '!=':
        ok = val != val2;
        break;
      case '!==':
        ok = val !== val2;
        break;
      default:
        msg = msg ? msg + ': ' : msg;
        throw new chai.AssertionError(
          msg + 'Invalid operator "' + operator + '"',
          undefined,
          assert.operator
        );
    }
    var test = new Assertion(ok, msg, assert.operator, true);
    test.assert(
        true === flag(test, 'object')
      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)
      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );
  };

  /**
   * ### .closeTo(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
   *
   * @name closeTo
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.closeTo = function (act, exp, delta, msg) {
    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);
  };

  /**
   * ### .approximately(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');
   *
   * @name approximately
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.approximately = function (act, exp, delta, msg) {
    new Assertion(act, msg, assert.approximately, true)
      .to.be.approximately(exp, delta);
  };

  /**
   * ### .sameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in any order. Uses a
   * strict equality check (===).
   *
   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
   *
   * @name sameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameMembers, true)
      .to.have.same.members(set2);
  }

  /**
   * ### .notSameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in any order.
   * Uses a strict equality check (===).
   *
   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');
   *
   * @name notSameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notSameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameMembers, true)
      .to.not.have.same.members(set2);
  }

  /**
   * ### .sameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in any order. Uses a
   * deep equality check.
   *
   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');
   *
   * @name sameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameDeepMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameDeepMembers, true)
      .to.have.same.deep.members(set2);
  }

  /**
   * ### .notSameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in any order.
   * Uses a deep equality check.
   *
   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');
   *
   * @name notSameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notSameDeepMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameDeepMembers, true)
      .to.not.have.same.deep.members(set2);
  }

  /**
   * ### .sameOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in the same order.
   * Uses a strict equality check (===).
   *
   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');
   *
   * @name sameOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameOrderedMembers, true)
      .to.have.same.ordered.members(set2);
  }

  /**
   * ### .notSameOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in the same
   * order. Uses a strict equality check (===).
   *
   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');
   *
   * @name notSameOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notSameOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameOrderedMembers, true)
      .to.not.have.same.ordered.members(set2);
  }

  /**
   * ### .sameDeepOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in the same order.
   * Uses a deep equality check.
   *
   * assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');
   *
   * @name sameDeepOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameDeepOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)
      .to.have.same.deep.ordered.members(set2);
  }

  /**
   * ### .notSameDeepOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in the same
   * order. Uses a deep equality check.
   *
   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');
   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');
   *
   * @name notSameDeepOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)
      .to.not.have.same.deep.ordered.members(set2);
  }

  /**
   * ### .includeMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in any order. Uses a
   * strict equality check (===). Duplicates are ignored.
   *
   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');
   *
   * @name includeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeMembers, true)
      .to.include.members(subset);
  }

  /**
   * ### .notIncludeMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in any order. Uses a
   * strict equality check (===). Duplicates are ignored.
   *
   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');
   *
   * @name notIncludeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notIncludeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeMembers, true)
      .to.not.include.members(subset);
  }

  /**
   * ### .includeDeepMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in any order. Uses a deep
   * equality check. Duplicates are ignored.
   *
   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');
   *
   * @name includeDeepMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeDeepMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeDeepMembers, true)
      .to.include.deep.members(subset);
  }

  /**
   * ### .notIncludeDeepMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in any order. Uses a
   * deep equality check. Duplicates are ignored.
   *
   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');
   *
   * @name notIncludeDeepMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notIncludeDeepMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)
      .to.not.include.deep.members(subset);
  }

  /**
   * ### .includeOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a strict equality
   * check (===).
   *
   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');
   *
   * @name includeOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeOrderedMembers, true)
      .to.include.ordered.members(subset);
  }

  /**
   * ### .notIncludeOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a strict equality
   * check (===).
   *
   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');
   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');
   *
   * @name notIncludeOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notIncludeOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)
      .to.not.include.ordered.members(subset);
  }

  /**
   * ### .includeDeepOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a deep equality
   * check.
   *
   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');
   *
   * @name includeDeepOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeDeepOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)
      .to.include.deep.ordered.members(subset);
  }

  /**
   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a deep equality
   * check.
   *
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');
   *
   * @name notIncludeDeepOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)
      .to.not.include.deep.ordered.members(subset);
  }

  /**
   * ### .oneOf(inList, list, [message])
   *
   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.
   *
   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');
   *
   * @name oneOf
   * @param {*} inList
   * @param {Array<*>} list
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.oneOf = function (inList, list, msg) {
    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);
  }

  /**
   * ### .changes(function, object, property, [message])
   *
   * Asserts that a function changes the value of a property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 22 };
   *     assert.changes(fn, obj, 'val');
   *
   * @name changes
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.changes = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);
  }

   /**
   * ### .changesBy(function, object, property, delta, [message])
   *
   * Asserts that a function changes the value of a property by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 2 };
   *     assert.changesBy(fn, obj, 'val', 2);
   *
   * @name changesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.changesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changesBy, true)
      .to.change(obj, prop).by(delta);
  }

   /**
   * ### .doesNotChange(function, object, property, [message])
   *
   * Asserts that a function does not change the value of a property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { console.log('foo'); };
   *     assert.doesNotChange(fn, obj, 'val');
   *
   * @name doesNotChange
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotChange = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotChange, true)
      .to.not.change(obj, prop);
  }

  /**
   * ### .changesButNotBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 10 };
   *     assert.changesButNotBy(fn, obj, 'val', 5);
   *
   * @name changesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changesButNotBy, true)
      .to.change(obj, prop).but.not.by(delta);
  }

  /**
   * ### .increases(function, object, property, [message])
   *
   * Asserts that a function increases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 13 };
   *     assert.increases(fn, obj, 'val');
   *
   * @name increases
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.increases = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.increases, true)
      .to.increase(obj, prop);
  }

  /**
   * ### .increasesBy(function, object, property, delta, [message])
   *
   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 10 };
   *     assert.increasesBy(fn, obj, 'val', 10);
   *
   * @name increasesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.increasesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.increasesBy, true)
      .to.increase(obj, prop).by(delta);
  }

  /**
   * ### .doesNotIncrease(function, object, property, [message])
   *
   * Asserts that a function does not increase a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 8 };
   *     assert.doesNotIncrease(fn, obj, 'val');
   *
   * @name doesNotIncrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotIncrease = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotIncrease, true)
      .to.not.increase(obj, prop);
  }

  /**
   * ### .increasesButNotBy(function, object, property, [message])
   *
   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.increasesButNotBy(fn, obj, 'val', 10);
   *
   * @name increasesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.increasesButNotBy, true)
      .to.increase(obj, prop).but.not.by(delta);
  }

  /**
   * ### .decreases(function, object, property, [message])
   *
   * Asserts that a function decreases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreases(fn, obj, 'val');
   *
   * @name decreases
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.decreases = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.decreases, true)
      .to.decrease(obj, prop);
  }

  /**
   * ### .decreasesBy(function, object, property, delta, [message])
   *
   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val -= 5 };
   *     assert.decreasesBy(fn, obj, 'val', 5);
   *
   * @name decreasesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.decreasesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.decreasesBy, true)
      .to.decrease(obj, prop).by(delta);
  }

  /**
   * ### .doesNotDecrease(function, object, property, [message])
   *
   * Asserts that a function does not decreases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.doesNotDecrease(fn, obj, 'val');
   *
   * @name doesNotDecrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotDecrease = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotDecrease, true)
      .to.not.decrease(obj, prop);
  }

  /**
   * ### .doesNotDecreaseBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);
   *
   * @name doesNotDecrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)
      .to.not.decrease(obj, prop).by(delta);
  }

  /**
   * ### .decreasesButNotBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreasesButNotBy(fn, obj, 'val', 1);
   *
   * @name decreasesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.decreasesButNotBy, true)
      .to.decrease(obj, prop).but.not.by(delta);
  }

  /*!
   * ### .ifError(object)
   *
   * Asserts if value is not a false value, and throws if it is a true value.
   * This is added to allow for chai to be a drop-in replacement for Node's
   * assert class.
   *
   *     var err = new Error('I am a custom error');
   *     assert.ifError(err); // Rethrows err!
   *
   * @name ifError
   * @param {Object} object
   * @namespace Assert
   * @api public
   */

  assert.ifError = function (val) {
    if (val) {
      throw(val);
    }
  };

  /**
   * ### .isExtensible(object)
   *
   * Asserts that `object` is extensible (can have new properties added to it).
   *
   *     assert.isExtensible({});
   *
   * @name isExtensible
   * @alias extensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isExtensible = function (obj, msg) {
    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;
  };

  /**
   * ### .isNotExtensible(object)
   *
   * Asserts that `object` is _not_ extensible.
   *
   *     var nonExtensibleObject = Object.preventExtensions({});
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     assert.isNotExtensible(nonExtensibleObject);
   *     assert.isNotExtensible(sealedObject);
   *     assert.isNotExtensible(frozenObject);
   *
   * @name isNotExtensible
   * @alias notExtensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotExtensible = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;
  };

  /**
   * ### .isSealed(object)
   *
   * Asserts that `object` is sealed (cannot have new properties added to it
   * and its existing properties cannot be removed).
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.seal({});
   *
   *     assert.isSealed(sealedObject);
   *     assert.isSealed(frozenObject);
   *
   * @name isSealed
   * @alias sealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isSealed = function (obj, msg) {
    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;
  };

  /**
   * ### .isNotSealed(object)
   *
   * Asserts that `object` is _not_ sealed.
   *
   *     assert.isNotSealed({});
   *
   * @name isNotSealed
   * @alias notSealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotSealed = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;
  };

  /**
   * ### .isFrozen(object)
   *
   * Asserts that `object` is frozen (cannot have new properties added to it
   * and its existing properties cannot be modified).
   *
   *     var frozenObject = Object.freeze({});
   *     assert.frozen(frozenObject);
   *
   * @name isFrozen
   * @alias frozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isFrozen = function (obj, msg) {
    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;
  };

  /**
   * ### .isNotFrozen(object)
   *
   * Asserts that `object` is _not_ frozen.
   *
   *     assert.isNotFrozen({});
   *
   * @name isNotFrozen
   * @alias notFrozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotFrozen = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;
  };

  /**
   * ### .isEmpty(target)
   *
   * Asserts that the target does not contain any values.
   * For arrays and strings, it checks the `length` property.
   * For `Map` and `Set` instances, it checks the `size` property.
   * For non-function objects, it gets the count of own
   * enumerable string keys.
   *
   *     assert.isEmpty([]);
   *     assert.isEmpty('');
   *     assert.isEmpty(new Map);
   *     assert.isEmpty({});
   *
   * @name isEmpty
   * @alias empty
   * @param {Object|Array|String|Map|Set} target
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isEmpty = function(val, msg) {
    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;
  };

  /**
   * ### .isNotEmpty(target)
   *
   * Asserts that the target contains values.
   * For arrays and strings, it checks the `length` property.
   * For `Map` and `Set` instances, it checks the `size` property.
   * For non-function objects, it gets the count of own
   * enumerable string keys.
   *
   *     assert.isNotEmpty([1, 2]);
   *     assert.isNotEmpty('34');
   *     assert.isNotEmpty(new Set([5, 6]));
   *     assert.isNotEmpty({ key: 7 });
   *
   * @name isNotEmpty
   * @alias notEmpty
   * @param {Object|Array|String|Map|Set} target
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotEmpty = function(val, msg) {
    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;
  };

  /*!
   * Aliases.
   */

  (function alias(name, as){
    assert[as] = assert[name];
    return alias;
  })
  ('isOk', 'ok')
  ('isNotOk', 'notOk')
  ('throws', 'throw')
  ('throws', 'Throw')
  ('isExtensible', 'extensible')
  ('isNotExtensible', 'notExtensible')
  ('isSealed', 'sealed')
  ('isNotSealed', 'notSealed')
  ('isFrozen', 'frozen')
  ('isNotFrozen', 'notFrozen')
  ('isEmpty', 'empty')
  ('isNotEmpty', 'notEmpty');
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/interface/expect.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/interface/expect.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  chai.expect = function (val, message) {
    return new chai.Assertion(val, message);
  };

  /**
   * ### .fail([message])
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure.
   *
   *     expect.fail();
   *     expect.fail("custom error message");
   *     expect.fail(1, 2);
   *     expect.fail(1, 2, "custom error message");
   *     expect.fail(1, 2, "custom error message", ">");
   *     expect.fail(1, 2, undefined, ">");
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace BDD
   * @api public
   */

  chai.expect.fail = function (actual, expected, message, operator) {
    if (arguments.length < 2) {
        message = actual;
        actual = undefined;
    }

    message = message || 'expect.fail()';
    throw new chai.AssertionError(message, {
        actual: actual
      , expected: expected
      , operator: operator
    }, chai.expect.fail);
  };
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/interface/should.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/interface/should.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  var Assertion = chai.Assertion;

  function loadShould () {
    // explicitly define this method as function as to have it's name to include as `ssfi`
    function shouldGetter() {
      if (this instanceof String
          || this instanceof Number
          || this instanceof Boolean
          || typeof Symbol === 'function' && this instanceof Symbol) {
        return new Assertion(this.valueOf(), null, shouldGetter);
      }
      return new Assertion(this, null, shouldGetter);
    }
    function shouldSetter(value) {
      // See https://github.com/chaijs/chai/issues/86: this makes
      // `whatever.should = someValue` actually set `someValue`, which is
      // especially useful for `global.should = require('chai').should()`.
      //
      // Note that we have to use [[DefineProperty]] instead of [[Put]]
      // since otherwise we would trigger this very setter!
      Object.defineProperty(this, 'should', {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    }
    // modify Object.prototype to have `should`
    Object.defineProperty(Object.prototype, 'should', {
      set: shouldSetter
      , get: shouldGetter
      , configurable: true
    });

    var should = {};

    /**
     * ### .fail([message])
     * ### .fail(actual, expected, [message], [operator])
     *
     * Throw a failure.
     *
     *     should.fail();
     *     should.fail("custom error message");
     *     should.fail(1, 2);
     *     should.fail(1, 2, "custom error message");
     *     should.fail(1, 2, "custom error message", ">");
     *     should.fail(1, 2, undefined, ">");
     *
     *
     * @name fail
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @param {String} operator
     * @namespace BDD
     * @api public
     */

    should.fail = function (actual, expected, message, operator) {
      if (arguments.length < 2) {
          message = actual;
          actual = undefined;
      }

      message = message || 'should.fail()';
      throw new chai.AssertionError(message, {
          actual: actual
        , expected: expected
        , operator: operator
      }, should.fail);
    };

    /**
     * ### .equal(actual, expected, [message])
     *
     * Asserts non-strict equality (`==`) of `actual` and `expected`.
     *
     *     should.equal(3, '3', '== coerces values to strings');
     *
     * @name equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */

    should.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.equal(val2);
    };

    /**
     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])
     *
     * Asserts that `function` will throw an error that is an instance of
     * `constructor`, or alternately that it will throw an error with message
     * matching `regexp`.
     *
     *     should.throw(fn, 'function throws a reference error');
     *     should.throw(fn, /function throws a reference error/);
     *     should.throw(fn, ReferenceError);
     *     should.throw(fn, ReferenceError, 'function throws a reference error');
     *     should.throw(fn, ReferenceError, /function throws a reference error/);
     *
     * @name throw
     * @alias Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */

    should.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.Throw(errt, errs);
    };

    /**
     * ### .exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var foo = 'hi';
     *
     *     should.exist(foo, 'foo exists');
     *
     * @name exist
     * @namespace Should
     * @api public
     */

    should.exist = function (val, msg) {
      new Assertion(val, msg).to.exist;
    }

    // negation
    should.not = {}

    /**
     * ### .not.equal(actual, expected, [message])
     *
     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
     *
     *     should.not.equal(3, 4, 'these numbers are not equal');
     *
     * @name not.equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */

    should.not.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.not.equal(val2);
    };

    /**
     * ### .throw(function, [constructor/regexp], [message])
     *
     * Asserts that `function` will _not_ throw an error that is an instance of
     * `constructor`, or alternately that it will not throw an error with message
     * matching `regexp`.
     *
     *     should.not.throw(fn, Error, 'function does not throw');
     *
     * @name not.throw
     * @alias not.Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */

    should.not.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.not.Throw(errt, errs);
    };

    /**
     * ### .not.exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var bar = null;
     *
     *     should.not.exist(bar, 'bar does not exist');
     *
     * @name not.exist
     * @namespace Should
     * @api public
     */

    should.not.exist = function (val, msg) {
      new Assertion(val, msg).to.not.exist;
    }

    should['throw'] = should['Throw'];
    should.not['throw'] = should.not['Throw'];

    return should;
  };

  chai.should = loadShould;
  chai.Should = loadShould;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/addChainableMethod.js":
/*!****************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/addChainableMethod.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - addChainingMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ "./node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = __webpack_require__(/*! ../../chai */ "./node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var proxify = __webpack_require__(/*! ./proxify */ "./node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");

/*!
 * Module variables
 */

// Check whether `Object.setPrototypeOf` is supported
var canSetPrototype = typeof Object.setPrototypeOf === 'function';

// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.
// However, some of functions' own props are not configurable and should be skipped.
var testFn = function() {};
var excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {
  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);

  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,
  // but then returns `undefined` as the property descriptor for `callee`. As a
  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,
  // and then filter it out if it's not an object as it should be.
  if (typeof propDesc !== 'object')
    return true;

  return !propDesc.configurable;
});

// Cache `Function` properties
var call  = Function.prototype.call,
    apply = Function.prototype.apply;

/**
 * ### .addChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Adds a method to an object, such that the method can also be chained.
 *
 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
 *
 * The result can then be used as both a method assertion, executing both `method` and
 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
 *
 *     expect(fooStr).to.be.foo('bar');
 *     expect(fooStr).to.be.foo.equal('foo');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for `name`, when called
 * @param {Function} chainingBehavior function to be called every time the property is accessed
 * @namespace Utils
 * @name addChainableMethod
 * @api public
 */

module.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {
  if (typeof chainingBehavior !== 'function') {
    chainingBehavior = function () { };
  }

  var chainableBehavior = {
      method: method
    , chainingBehavior: chainingBehavior
  };

  // save the methods so we can overwrite them later, if we need to.
  if (!ctx.__methods) {
    ctx.__methods = {};
  }
  ctx.__methods[name] = chainableBehavior;

  Object.defineProperty(ctx, name,
    { get: function chainableMethodGetter() {
        chainableBehavior.chainingBehavior.call(this);

        var chainableMethodWrapper = function () {
          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this
          // function to be the starting point for removing implementation
          // frames from the stack trace of a failed assertion.
          //
          // However, we only want to use this function as the starting point if
          // the `lockSsfi` flag isn't set.
          //
          // If the `lockSsfi` flag is set, then this assertion is being
          // invoked from inside of another assertion. In this case, the `ssfi`
          // flag has already been set by the outer assertion.
          //
          // Note that overwriting a chainable method merely replaces the saved
          // methods in `ctx.__methods` instead of completely replacing the
          // overwritten assertion. Therefore, an overwriting assertion won't
          // set the `ssfi` or `lockSsfi` flags.
          if (!flag(this, 'lockSsfi')) {
            flag(this, 'ssfi', chainableMethodWrapper);
          }

          var result = chainableBehavior.method.apply(this, arguments);
          if (result !== undefined) {
            return result;
          }

          var newAssertion = new chai.Assertion();
          transferFlags(this, newAssertion);
          return newAssertion;
        };

        addLengthGuard(chainableMethodWrapper, name, true);

        // Use `Object.setPrototypeOf` if available
        if (canSetPrototype) {
          // Inherit all properties from the object by replacing the `Function` prototype
          var prototype = Object.create(this);
          // Restore the `call` and `apply` methods from `Function`
          prototype.call = call;
          prototype.apply = apply;
          Object.setPrototypeOf(chainableMethodWrapper, prototype);
        }
        // Otherwise, redefine all properties (slow!)
        else {
          var asserterNames = Object.getOwnPropertyNames(ctx);
          asserterNames.forEach(function (asserterName) {
            if (excludeNames.indexOf(asserterName) !== -1) {
              return;
            }

            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
            Object.defineProperty(chainableMethodWrapper, asserterName, pd);
          });
        }

        transferFlags(this, chainableMethodWrapper);
        return proxify(chainableMethodWrapper);
      }
    , configurable: true
  });
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/addLengthGuard.js":
/*!************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/addLengthGuard.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');

/*!
 * Chai - addLengthGuard utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .addLengthGuard(fn, assertionName, isChainable)
 *
 * Define `length` as a getter on the given uninvoked method assertion. The
 * getter acts as a guard against chaining `length` directly off of an uninvoked
 * method assertion, which is a problem because it references `function`'s
 * built-in `length` property instead of Chai's `length` assertion. When the
 * getter catches the user making this mistake, it throws an error with a
 * helpful message.
 *
 * There are two ways in which this mistake can be made. The first way is by
 * chaining the `length` assertion directly off of an uninvoked chainable
 * method. In this case, Chai suggests that the user use `lengthOf` instead. The
 * second way is by chaining the `length` assertion directly off of an uninvoked
 * non-chainable method. Non-chainable methods must be invoked prior to
 * chaining. In this case, Chai suggests that the user consult the docs for the
 * given assertion.
 *
 * If the `length` property of functions is unconfigurable, then return `fn`
 * without modification.
 *
 * Note that in ES6, the function's `length` property is configurable, so once
 * support for legacy environments is dropped, Chai's `length` property can
 * replace the built-in function's `length` property, and this length guard will
 * no longer be necessary. In the mean time, maintaining consistency across all
 * environments is the priority.
 *
 * @param {Function} fn
 * @param {String} assertionName
 * @param {Boolean} isChainable
 * @namespace Utils
 * @name addLengthGuard
 */

module.exports = function addLengthGuard (fn, assertionName, isChainable) {
  if (!fnLengthDesc.configurable) return fn;

  Object.defineProperty(fn, 'length', {
    get: function () {
      if (isChainable) {
        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +
          ' to a compatibility issue, "length" cannot directly follow "' +
          assertionName + '". Use "' + assertionName + '.lengthOf" instead.');
      }

      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +
        ' docs for proper usage of "' + assertionName + '".');
    }
  });

  return fn;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/addMethod.js":
/*!*******************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/addMethod.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - addMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ "./node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = __webpack_require__(/*! ../../chai */ "./node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var proxify = __webpack_require__(/*! ./proxify */ "./node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");

/**
 * ### .addMethod(ctx, name, method)
 *
 * Adds a method to the prototype of an object.
 *
 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(fooStr).to.be.foo('bar');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for name
 * @namespace Utils
 * @name addMethod
 * @api public
 */

module.exports = function addMethod(ctx, name, method) {
  var methodWrapper = function () {
    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the
    // starting point for removing implementation frames from the stack trace of
    // a failed assertion.
    //
    // However, we only want to use this function as the starting point if the
    // `lockSsfi` flag isn't set.
    //
    // If the `lockSsfi` flag is set, then either this assertion has been
    // overwritten by another assertion, or this assertion is being invoked from
    // inside of another assertion. In the first case, the `ssfi` flag has
    // already been set by the overwriting assertion. In the second case, the
    // `ssfi` flag has already been set by the outer assertion.
    if (!flag(this, 'lockSsfi')) {
      flag(this, 'ssfi', methodWrapper);
    }

    var result = method.apply(this, arguments);
    if (result !== undefined)
      return result;

    var newAssertion = new chai.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };

  addLengthGuard(methodWrapper, name, false);
  ctx[name] = proxify(methodWrapper, name);
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/addProperty.js":
/*!*********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/addProperty.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - addProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var chai = __webpack_require__(/*! ../../chai */ "./node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ "./node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");

/**
 * ### .addProperty(ctx, name, getter)
 *
 * Adds a property to the prototype of an object.
 *
 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.instanceof(Foo);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.foo;
 *
 * @param {Object} ctx object to which the property is added
 * @param {String} name of property to add
 * @param {Function} getter function to be used for name
 * @namespace Utils
 * @name addProperty
 * @api public
 */

module.exports = function addProperty(ctx, name, getter) {
  getter = getter === undefined ? function () {} : getter;

  Object.defineProperty(ctx, name,
    { get: function propertyGetter() {
        // Setting the `ssfi` flag to `propertyGetter` causes this function to
        // be the starting point for removing implementation frames from the
        // stack trace of a failed assertion.
        //
        // However, we only want to use this function as the starting point if
        // the `lockSsfi` flag isn't set and proxy protection is disabled.
        //
        // If the `lockSsfi` flag is set, then either this assertion has been
        // overwritten by another assertion, or this assertion is being invoked
        // from inside of another assertion. In the first case, the `ssfi` flag
        // has already been set by the overwriting assertion. In the second
        // case, the `ssfi` flag has already been set by the outer assertion.
        //
        // If proxy protection is enabled, then the `ssfi` flag has already been
        // set by the proxy getter.
        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
          flag(this, 'ssfi', propertyGetter);
        }

        var result = getter.call(this);
        if (result !== undefined)
          return result;

        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
      }
    , configurable: true
  });
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/compareByInspect.js":
/*!**************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/compareByInspect.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - compareByInspect utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var inspect = __webpack_require__(/*! ./inspect */ "./node_modules/chai/lib/chai/utils/inspect.js");

/**
 * ### .compareByInspect(mixed, mixed)
 *
 * To be used as a compareFunction with Array.prototype.sort. Compares elements
 * using inspect instead of default behavior of using toString so that Symbols
 * and objects with irregular/missing toString can still be sorted without a
 * TypeError.
 *
 * @param {Mixed} first element to compare
 * @param {Mixed} second element to compare
 * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1
 * @name compareByInspect
 * @namespace Utils
 * @api public
 */

module.exports = function compareByInspect(a, b) {
  return inspect(a) < inspect(b) ? -1 : 1;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/expectTypes.js":
/*!*********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/expectTypes.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - expectTypes utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .expectTypes(obj, types)
 *
 * Ensures that the object being tested against is of a valid type.
 *
 *     utils.expectTypes(this, ['array', 'object', 'string']);
 *
 * @param {Mixed} obj constructed Assertion
 * @param {Array} type A list of allowed types for this assertion
 * @namespace Utils
 * @name expectTypes
 * @api public
 */

var AssertionError = __webpack_require__(/*! assertion-error */ "./node_modules/assertion-error/index.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var type = __webpack_require__(/*! type-detect */ "./node_modules/type-detect/type-detect.js");

module.exports = function expectTypes(obj, types) {
  var flagMsg = flag(obj, 'message');
  var ssfi = flag(obj, 'ssfi');

  flagMsg = flagMsg ? flagMsg + ': ' : '';

  obj = flag(obj, 'object');
  types = types.map(function (t) { return t.toLowerCase(); });
  types.sort();

  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'
  var str = types.map(function (t, index) {
    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';
    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
    return or + art + ' ' + t;
  }).join(', ');

  var objType = type(obj).toLowerCase();

  if (!types.some(function (expected) { return objType === expected; })) {
    throw new AssertionError(
      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',
      undefined,
      ssfi
    );
  }
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/flag.js":
/*!**************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/flag.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .flag(object, key, [value])
 *
 * Get or set a flag value on an object. If a
 * value is provided it will be set, else it will
 * return the currently set value or `undefined` if
 * the value is not set.
 *
 *     utils.flag(this, 'foo', 'bar'); // setter
 *     utils.flag(this, 'foo'); // getter, returns `bar`
 *
 * @param {Object} object constructed Assertion
 * @param {String} key
 * @param {Mixed} value (optional)
 * @namespace Utils
 * @name flag
 * @api private
 */

module.exports = function flag(obj, key, value) {
  var flags = obj.__flags || (obj.__flags = Object.create(null));
  if (arguments.length === 3) {
    flags[key] = value;
  } else {
    return flags[key];
  }
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getActual.js":
/*!*******************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getActual.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - getActual utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getActual(object, [actual])
 *
 * Returns the `actual` value for an Assertion.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getActual
 */

module.exports = function getActual(obj, args) {
  return args.length > 4 ? args[4] : obj._obj;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getEnumerableProperties.js":
/*!*********************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getEnumerableProperties.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - getEnumerableProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getEnumerableProperties(object)
 *
 * This allows the retrieval of enumerable property names of an object,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getEnumerableProperties
 * @api public
 */

module.exports = function getEnumerableProperties(object) {
  var result = [];
  for (var name in object) {
    result.push(name);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getMessage.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getMessage.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - message composition utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js")
  , getActual = __webpack_require__(/*! ./getActual */ "./node_modules/chai/lib/chai/utils/getActual.js")
  , objDisplay = __webpack_require__(/*! ./objDisplay */ "./node_modules/chai/lib/chai/utils/objDisplay.js");

/**
 * ### .getMessage(object, message, negateMessage)
 *
 * Construct the error message based on flags
 * and template tags. Template tags will return
 * a stringified inspection of the object referenced.
 *
 * Message template tags:
 * - `#{this}` current asserted object
 * - `#{act}` actual value
 * - `#{exp}` expected value
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getMessage
 * @api public
 */

module.exports = function getMessage(obj, args) {
  var negate = flag(obj, 'negate')
    , val = flag(obj, 'object')
    , expected = args[3]
    , actual = getActual(obj, args)
    , msg = negate ? args[2] : args[1]
    , flagMsg = flag(obj, 'message');

  if(typeof msg === "function") msg = msg();
  msg = msg || '';
  msg = msg
    .replace(/#\{this\}/g, function () { return objDisplay(val); })
    .replace(/#\{act\}/g, function () { return objDisplay(actual); })
    .replace(/#\{exp\}/g, function () { return objDisplay(expected); });

  return flagMsg ? flagMsg + ': ' + msg : msg;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js":
/*!************************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - getOwnEnumerableProperties utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var getOwnEnumerablePropertySymbols = __webpack_require__(/*! ./getOwnEnumerablePropertySymbols */ "./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");

/**
 * ### .getOwnEnumerableProperties(object)
 *
 * This allows the retrieval of directly-owned enumerable property names and
 * symbols of an object. This function is necessary because Object.keys only
 * returns enumerable property names, not enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerableProperties
 * @api public
 */

module.exports = function getOwnEnumerableProperties(obj) {
  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - getOwnEnumerablePropertySymbols utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getOwnEnumerablePropertySymbols(object)
 *
 * This allows the retrieval of directly-owned enumerable property symbols of an
 * object. This function is necessary because Object.getOwnPropertySymbols
 * returns both enumerable and non-enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerablePropertySymbols
 * @api public
 */

module.exports = function getOwnEnumerablePropertySymbols(obj) {
  if (typeof Object.getOwnPropertySymbols !== 'function') return [];

  return Object.getOwnPropertySymbols(obj).filter(function (sym) {
    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
  });
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getProperties.js":
/*!***********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getProperties.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - getProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getProperties(object)
 *
 * This allows the retrieval of property names of an object, enumerable or not,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getProperties
 * @api public
 */

module.exports = function getProperties(object) {
  var result = Object.getOwnPropertyNames(object);

  function addProperty(property) {
    if (result.indexOf(property) === -1) {
      result.push(property);
    }
  }

  var proto = Object.getPrototypeOf(object);
  while (proto !== null) {
    Object.getOwnPropertyNames(proto).forEach(addProperty);
    proto = Object.getPrototypeOf(proto);
  }

  return result;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/index.js":
/*!***************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Dependencies that are used for multiple exports are required here only once
 */

var pathval = __webpack_require__(/*! pathval */ "./node_modules/pathval/index.js");

/*!
 * test utility
 */

exports.test = __webpack_require__(/*! ./test */ "./node_modules/chai/lib/chai/utils/test.js");

/*!
 * type utility
 */

exports.type = __webpack_require__(/*! type-detect */ "./node_modules/type-detect/type-detect.js");

/*!
 * expectTypes utility
 */
exports.expectTypes = __webpack_require__(/*! ./expectTypes */ "./node_modules/chai/lib/chai/utils/expectTypes.js");

/*!
 * message utility
 */

exports.getMessage = __webpack_require__(/*! ./getMessage */ "./node_modules/chai/lib/chai/utils/getMessage.js");

/*!
 * actual utility
 */

exports.getActual = __webpack_require__(/*! ./getActual */ "./node_modules/chai/lib/chai/utils/getActual.js");

/*!
 * Inspect util
 */

exports.inspect = __webpack_require__(/*! ./inspect */ "./node_modules/chai/lib/chai/utils/inspect.js");

/*!
 * Object Display util
 */

exports.objDisplay = __webpack_require__(/*! ./objDisplay */ "./node_modules/chai/lib/chai/utils/objDisplay.js");

/*!
 * Flag utility
 */

exports.flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");

/*!
 * Flag transferring utility
 */

exports.transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");

/*!
 * Deep equal utility
 */

exports.eql = __webpack_require__(/*! deep-eql */ "./node_modules/deep-eql/index.js");

/*!
 * Deep path info
 */

exports.getPathInfo = pathval.getPathInfo;

/*!
 * Check if a property exists
 */

exports.hasProperty = pathval.hasProperty;

/*!
 * Function name
 */

exports.getName = __webpack_require__(/*! get-func-name */ "./node_modules/get-func-name/index.js");

/*!
 * add Property
 */

exports.addProperty = __webpack_require__(/*! ./addProperty */ "./node_modules/chai/lib/chai/utils/addProperty.js");

/*!
 * add Method
 */

exports.addMethod = __webpack_require__(/*! ./addMethod */ "./node_modules/chai/lib/chai/utils/addMethod.js");

/*!
 * overwrite Property
 */

exports.overwriteProperty = __webpack_require__(/*! ./overwriteProperty */ "./node_modules/chai/lib/chai/utils/overwriteProperty.js");

/*!
 * overwrite Method
 */

exports.overwriteMethod = __webpack_require__(/*! ./overwriteMethod */ "./node_modules/chai/lib/chai/utils/overwriteMethod.js");

/*!
 * Add a chainable method
 */

exports.addChainableMethod = __webpack_require__(/*! ./addChainableMethod */ "./node_modules/chai/lib/chai/utils/addChainableMethod.js");

/*!
 * Overwrite chainable method
 */

exports.overwriteChainableMethod = __webpack_require__(/*! ./overwriteChainableMethod */ "./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js");

/*!
 * Compare by inspect method
 */

exports.compareByInspect = __webpack_require__(/*! ./compareByInspect */ "./node_modules/chai/lib/chai/utils/compareByInspect.js");

/*!
 * Get own enumerable property symbols method
 */

exports.getOwnEnumerablePropertySymbols = __webpack_require__(/*! ./getOwnEnumerablePropertySymbols */ "./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");

/*!
 * Get own enumerable properties method
 */

exports.getOwnEnumerableProperties = __webpack_require__(/*! ./getOwnEnumerableProperties */ "./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js");

/*!
 * Checks error against a given set of criteria
 */

exports.checkError = __webpack_require__(/*! check-error */ "./node_modules/check-error/index.js");

/*!
 * Proxify util
 */

exports.proxify = __webpack_require__(/*! ./proxify */ "./node_modules/chai/lib/chai/utils/proxify.js");

/*!
 * addLengthGuard util
 */

exports.addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ "./node_modules/chai/lib/chai/utils/addLengthGuard.js");

/*!
 * isProxyEnabled helper
 */

exports.isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ "./node_modules/chai/lib/chai/utils/isProxyEnabled.js");

/*!
 * isNaN method
 */

exports.isNaN = __webpack_require__(/*! ./isNaN */ "./node_modules/chai/lib/chai/utils/isNaN.js");


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/inspect.js":
/*!*****************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/inspect.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// This is (almost) directly from Node.js utils
// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js

var getName = __webpack_require__(/*! get-func-name */ "./node_modules/get-func-name/index.js");
var getProperties = __webpack_require__(/*! ./getProperties */ "./node_modules/chai/lib/chai/utils/getProperties.js");
var getEnumerableProperties = __webpack_require__(/*! ./getEnumerableProperties */ "./node_modules/chai/lib/chai/utils/getEnumerableProperties.js");
var config = __webpack_require__(/*! ../config */ "./node_modules/chai/lib/chai/config.js");

module.exports = inspect;

/**
 * ### .inspect(obj, [showHidden], [depth], [colors])
 *
 * Echoes the value of a value. Tries to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
 *    properties of objects. Default is false.
 * @param {Number} depth Depth in which to descend in object. Default is 2.
 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
 *    output. Default is false (no coloring).
 * @namespace Utils
 * @name inspect
 */
function inspect(obj, showHidden, depth, colors) {
  var ctx = {
    showHidden: showHidden,
    seen: [],
    stylize: function (str) { return str; }
  };
  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
}

// Returns true if object is a DOM element.
var isDOMElement = function (object) {
  if (typeof HTMLElement === 'object') {
    return object instanceof HTMLElement;
  } else {
    return object &&
      typeof object === 'object' &&
      'nodeType' in object &&
      object.nodeType === 1 &&
      typeof object.nodeName === 'string';
  }
};

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (value && typeof value.inspect === 'function' &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (typeof ret !== 'string') {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // If this is a DOM element, try to get the outer HTML.
  if (isDOMElement(value)) {
    if ('outerHTML' in value) {
      return value.outerHTML;
      // This value does not have an outerHTML attribute,
      //   it could still be an XML element
    } else {
      // Attempt to serialize it
      try {
        if (document.xmlVersion) {
          var xmlSerializer = new XMLSerializer();
          return xmlSerializer.serializeToString(value);
        } else {
          // Firefox 11- do not support outerHTML
          //   It does, however, support innerHTML
          //   Use the following to render the element
          var ns = "http://www.w3.org/1999/xhtml";
          var container = document.createElementNS(ns, '_');

          container.appendChild(value.cloneNode(false));
          var html = container.innerHTML
            .replace('><', '>' + value.innerHTML + '<');
          container.innerHTML = '';
          return html;
        }
      } catch (err) {
        // This could be a non-native DOM implementation,
        //   continue with the normal flow:
        //   printing the element as if it is an object.
      }
    }
  }

  // Look up the keys of the object.
  var visibleKeys = getEnumerableProperties(value);
  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;

  var name, nameSuffix;

  // Some type of object without properties can be shortcut.
  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
  // a `stack` plus `description` property; ignore those for consistency.
  if (keys.length === 0 || (isError(value) && (
      (keys.length === 1 && keys[0] === 'stack') ||
      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')
     ))) {
    if (typeof value === 'function') {
      name = getName(value);
      nameSuffix = name ? ': ' + name : '';
      return ctx.stylize('[Function' + nameSuffix + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = ''
    , array = false
    , typedArray = false
    , braces = ['{', '}'];

  if (isTypedArray(value)) {
    typedArray = true;
    braces = ['[', ']'];
  }

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (typeof value === 'function') {
    name = getName(value);
    nameSuffix = name ? ': ' + name : '';
    base = ' [Function' + nameSuffix + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    return formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else if (typedArray) {
    return formatTypedArray(value);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  switch (typeof value) {
    case 'undefined':
      return ctx.stylize('undefined', 'undefined');

    case 'string':
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');

    case 'number':
      if (value === 0 && (1/value) === -Infinity) {
        return ctx.stylize('-0', 'number');
      }
      return ctx.stylize('' + value, 'number');

    case 'boolean':
      return ctx.stylize('' + value, 'boolean');

    case 'symbol':
      return ctx.stylize(value.toString(), 'symbol');
  }
  // For some reason typeof null is "object", so special case here.
  if (value === null) {
    return ctx.stylize('null', 'null');
  }
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (Object.prototype.hasOwnProperty.call(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }

  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}

function formatTypedArray(value) {
  var str = '[ ';

  for (var i = 0; i < value.length; ++i) {
    if (str.length >= config.truncateThreshold - 7) {
      str += '...';
      break;
    }
    str += value[i] + ', ';
  }
  str += ' ]';

  // Removing trailing `, ` if the array was not truncated
  if (str.indexOf(',  ]') !== -1) {
    str = str.replace(',  ]', ' ]');
  }

  return str;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name;
  var propDescriptor = Object.getOwnPropertyDescriptor(value, key);
  var str;

  if (propDescriptor) {
    if (propDescriptor.get) {
      if (propDescriptor.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (propDescriptor.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
  }
  if (visibleKeys.indexOf(key) < 0) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(value[key]) < 0) {
      if (recurseTimes === null) {
        str = formatValue(ctx, value[key], null);
      } else {
        str = formatValue(ctx, value[key], recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (typeof name === 'undefined') {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var length = output.reduce(function(prev, cur) {
    return prev + cur.length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function isTypedArray(ar) {
  // Unfortunately there's no way to check if an object is a TypedArray
  // We have to check if it's one of these types
  return (typeof ar === 'object' && /\w+Array]$/.test(objectToString(ar)));
}

function isArray(ar) {
  return Array.isArray(ar) ||
         (typeof ar === 'object' && objectToString(ar) === '[object Array]');
}

function isRegExp(re) {
  return typeof re === 'object' && objectToString(re) === '[object RegExp]';
}

function isDate(d) {
  return typeof d === 'object' && objectToString(d) === '[object Date]';
}

function isError(e) {
  return typeof e === 'object' && objectToString(e) === '[object Error]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/isNaN.js":
/*!***************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/isNaN.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - isNaN utility
 * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>
 * MIT Licensed
 */

/**
 * ### .isNaN(value)
 *
 * Checks if the given value is NaN or not.
 *
 *     utils.isNaN(NaN); // true
 *
 * @param {Value} The value which has to be checked if it is NaN
 * @name isNaN
 * @api private
 */

function isNaN(value) {
  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number
  // section's NOTE.
  return value !== value;
}

// If ECMAScript 6's Number.isNaN is present, prefer that.
module.exports = Number.isNaN || isNaN;


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/isProxyEnabled.js":
/*!************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/isProxyEnabled.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var config = __webpack_require__(/*! ../config */ "./node_modules/chai/lib/chai/config.js");

/*!
 * Chai - isProxyEnabled helper
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .isProxyEnabled()
 *
 * Helper function to check if Chai's proxy protection feature is enabled. If
 * proxies are unsupported or disabled via the user's Chai config, then return
 * false. Otherwise, return true.
 *
 * @namespace Utils
 * @name isProxyEnabled
 */

module.exports = function isProxyEnabled() {
  return config.useProxy &&
    typeof Proxy !== 'undefined' &&
    typeof Reflect !== 'undefined';
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/objDisplay.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/objDisplay.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var inspect = __webpack_require__(/*! ./inspect */ "./node_modules/chai/lib/chai/utils/inspect.js");
var config = __webpack_require__(/*! ../config */ "./node_modules/chai/lib/chai/config.js");

/**
 * ### .objDisplay(object)
 *
 * Determines if an object or an array matches
 * criteria to be inspected in-line for error
 * messages or should be truncated.
 *
 * @param {Mixed} javascript object to inspect
 * @name objDisplay
 * @namespace Utils
 * @api public
 */

module.exports = function objDisplay(obj) {
  var str = inspect(obj)
    , type = Object.prototype.toString.call(obj);

  if (config.truncateThreshold && str.length >= config.truncateThreshold) {
    if (type === '[object Function]') {
      return !obj.name || obj.name === ''
        ? '[Function]'
        : '[Function: ' + obj.name + ']';
    } else if (type === '[object Array]') {
      return '[ Array(' + obj.length + ') ]';
    } else if (type === '[object Object]') {
      var keys = Object.keys(obj)
        , kstr = keys.length > 2
          ? keys.splice(0, 2).join(', ') + ', ...'
          : keys.join(', ');
      return '{ Object (' + kstr + ') }';
    } else {
      return str;
    }
  } else {
    return str;
  }
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js":
/*!**********************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - overwriteChainableMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var chai = __webpack_require__(/*! ../../chai */ "./node_modules/chai/lib/chai.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");

/**
 * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Overwrites an already existing chainable method
 * and provides access to the previous function or
 * property.  Must return functions to be used for
 * name.
 *
 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',
 *       function (_super) {
 *       }
 *     , function (_super) {
 *       }
 *     );
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.have.lengthOf(3);
 *     expect(myFoo).to.have.lengthOf.above(3);
 *
 * @param {Object} ctx object whose method / property is to be overwritten
 * @param {String} name of method / property to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @param {Function} chainingBehavior function that returns a function to be used for property
 * @namespace Utils
 * @name overwriteChainableMethod
 * @api public
 */

module.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {
  var chainableBehavior = ctx.__methods[name];

  var _chainingBehavior = chainableBehavior.chainingBehavior;
  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {
    var result = chainingBehavior(_chainingBehavior).call(this);
    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };

  var _method = chainableBehavior.method;
  chainableBehavior.method = function overwritingChainableMethodWrapper() {
    var result = method(_method).apply(this, arguments);
    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/overwriteMethod.js":
/*!*************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/overwriteMethod.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - overwriteMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ "./node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = __webpack_require__(/*! ../../chai */ "./node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var proxify = __webpack_require__(/*! ./proxify */ "./node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");

/**
 * ### .overwriteMethod(ctx, name, fn)
 *
 * Overwrites an already existing method and provides
 * access to previous function. Must return function
 * to be used for name.
 *
 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
 *       return function (str) {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.value).to.equal(str);
 *         } else {
 *           _super.apply(this, arguments);
 *         }
 *       }
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.equal('bar');
 *
 * @param {Object} ctx object whose method is to be overwritten
 * @param {String} name of method to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @namespace Utils
 * @name overwriteMethod
 * @api public
 */

module.exports = function overwriteMethod(ctx, name, method) {
  var _method = ctx[name]
    , _super = function () {
      throw new Error(name + ' is not a function');
    };

  if (_method && 'function' === typeof _method)
    _super = _method;

  var overwritingMethodWrapper = function () {
    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this
    // function to be the starting point for removing implementation frames from
    // the stack trace of a failed assertion.
    //
    // However, we only want to use this function as the starting point if the
    // `lockSsfi` flag isn't set.
    //
    // If the `lockSsfi` flag is set, then either this assertion has been
    // overwritten by another assertion, or this assertion is being invoked from
    // inside of another assertion. In the first case, the `ssfi` flag has
    // already been set by the overwriting assertion. In the second case, the
    // `ssfi` flag has already been set by the outer assertion.
    if (!flag(this, 'lockSsfi')) {
      flag(this, 'ssfi', overwritingMethodWrapper);
    }

    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion
    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already
    // set to the correct starting point for this assertion.
    var origLockSsfi = flag(this, 'lockSsfi');
    flag(this, 'lockSsfi', true);
    var result = method(_super).apply(this, arguments);
    flag(this, 'lockSsfi', origLockSsfi);

    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  }

  addLengthGuard(overwritingMethodWrapper, name, false);
  ctx[name] = proxify(overwritingMethodWrapper, name);
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/overwriteProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/overwriteProperty.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - overwriteProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var chai = __webpack_require__(/*! ../../chai */ "./node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ "./node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");

/**
 * ### .overwriteProperty(ctx, name, fn)
 *
 * Overwrites an already existing property getter and provides
 * access to previous value. Must return function to use as getter.
 *
 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
 *       return function () {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.name).to.equal('bar');
 *         } else {
 *           _super.call(this);
 *         }
 *       }
 *     });
 *
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.ok;
 *
 * @param {Object} ctx object whose property is to be overwritten
 * @param {String} name of property to overwrite
 * @param {Function} getter function that returns a getter function to be used for name
 * @namespace Utils
 * @name overwriteProperty
 * @api public
 */

module.exports = function overwriteProperty(ctx, name, getter) {
  var _get = Object.getOwnPropertyDescriptor(ctx, name)
    , _super = function () {};

  if (_get && 'function' === typeof _get.get)
    _super = _get.get

  Object.defineProperty(ctx, name,
    { get: function overwritingPropertyGetter() {
        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this
        // function to be the starting point for removing implementation frames
        // from the stack trace of a failed assertion.
        //
        // However, we only want to use this function as the starting point if
        // the `lockSsfi` flag isn't set and proxy protection is disabled.
        //
        // If the `lockSsfi` flag is set, then either this assertion has been
        // overwritten by another assertion, or this assertion is being invoked
        // from inside of another assertion. In the first case, the `ssfi` flag
        // has already been set by the overwriting assertion. In the second
        // case, the `ssfi` flag has already been set by the outer assertion.
        //
        // If proxy protection is enabled, then the `ssfi` flag has already been
        // set by the proxy getter.
        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
          flag(this, 'ssfi', overwritingPropertyGetter);
        }

        // Setting the `lockSsfi` flag to `true` prevents the overwritten
        // assertion from changing the `ssfi` flag. By this point, the `ssfi`
        // flag is already set to the correct starting point for this assertion.
        var origLockSsfi = flag(this, 'lockSsfi');
        flag(this, 'lockSsfi', true);
        var result = getter(_super).call(this);
        flag(this, 'lockSsfi', origLockSsfi);

        if (result !== undefined) {
          return result;
        }

        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
      }
    , configurable: true
  });
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/proxify.js":
/*!*****************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/proxify.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var config = __webpack_require__(/*! ../config */ "./node_modules/chai/lib/chai/config.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var getProperties = __webpack_require__(/*! ./getProperties */ "./node_modules/chai/lib/chai/utils/getProperties.js");
var isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ "./node_modules/chai/lib/chai/utils/isProxyEnabled.js");

/*!
 * Chai - proxify utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .proxify(object)
 *
 * Return a proxy of given object that throws an error when a non-existent
 * property is read. By default, the root cause is assumed to be a misspelled
 * property, and thus an attempt is made to offer a reasonable suggestion from
 * the list of existing properties. However, if a nonChainableMethodName is
 * provided, then the root cause is instead a failure to invoke a non-chainable
 * method prior to reading the non-existent property.
 *
 * If proxies are unsupported or disabled via the user's Chai config, then
 * return object without modification.
 *
 * @param {Object} obj
 * @param {String} nonChainableMethodName
 * @namespace Utils
 * @name proxify
 */

var builtins = ['__flags', '__methods', '_obj', 'assert'];

module.exports = function proxify(obj, nonChainableMethodName) {
  if (!isProxyEnabled()) return obj;

  return new Proxy(obj, {
    get: function proxyGetter(target, property) {
      // This check is here because we should not throw errors on Symbol properties
      // such as `Symbol.toStringTag`.
      // The values for which an error should be thrown can be configured using
      // the `config.proxyExcludedKeys` setting.
      if (typeof property === 'string' &&
          config.proxyExcludedKeys.indexOf(property) === -1 &&
          !Reflect.has(target, property)) {
        // Special message for invalid property access of non-chainable methods.
        if (nonChainableMethodName) {
          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +
            property + '. See docs for proper usage of "' +
            nonChainableMethodName + '".');
        }

        // If the property is reasonably close to an existing Chai property,
        // suggest that property to the user. Only suggest properties with a
        // distance less than 4.
        var suggestion = null;
        var suggestionDistance = 4;
        getProperties(target).forEach(function(prop) {
          if (
            !Object.prototype.hasOwnProperty(prop) &&
            builtins.indexOf(prop) === -1
          ) {
            var dist = stringDistanceCapped(
              property,
              prop,
              suggestionDistance
            );
            if (dist < suggestionDistance) {
              suggestion = prop;
              suggestionDistance = dist;
            }
          }
        });

        if (suggestion !== null) {
          throw Error('Invalid Chai property: ' + property +
            '. Did you mean "' + suggestion + '"?');
        } else {
          throw Error('Invalid Chai property: ' + property);
        }
      }

      // Use this proxy getter as the starting point for removing implementation
      // frames from the stack trace of a failed assertion. For property
      // assertions, this prevents the proxy getter from showing up in the stack
      // trace since it's invoked before the property getter. For method and
      // chainable method assertions, this flag will end up getting changed to
      // the method wrapper, which is good since this frame will no longer be in
      // the stack once the method is invoked. Note that Chai builtin assertion
      // properties such as `__flags` are skipped since this is only meant to
      // capture the starting point of an assertion. This step is also skipped
      // if the `lockSsfi` flag is set, thus indicating that this assertion is
      // being called from within another assertion. In that case, the `ssfi`
      // flag is already set to the outer assertion's starting point.
      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {
        flag(target, 'ssfi', proxyGetter);
      }

      return Reflect.get(target, property);
    }
  });
};

/**
 * # stringDistanceCapped(strA, strB, cap)
 * Return the Levenshtein distance between two strings, but no more than cap.
 * @param {string} strA
 * @param {string} strB
 * @param {number} number
 * @return {number} min(string distance between strA and strB, cap)
 * @api private
 */

function stringDistanceCapped(strA, strB, cap) {
  if (Math.abs(strA.length - strB.length) >= cap) {
    return cap;
  }

  var memo = [];
  // `memo` is a two-dimensional array containing distances.
  // memo[i][j] is the distance between strA.slice(0, i) and
  // strB.slice(0, j).
  for (var i = 0; i <= strA.length; i++) {
    memo[i] = Array(strB.length + 1).fill(0);
    memo[i][0] = i;
  }
  for (var j = 0; j < strB.length; j++) {
    memo[0][j] = j;
  }

  for (var i = 1; i <= strA.length; i++) {
    var ch = strA.charCodeAt(i - 1);
    for (var j = 1; j <= strB.length; j++) {
      if (Math.abs(i - j) >= cap) {
        memo[i][j] = cap;
        continue;
      }
      memo[i][j] = Math.min(
        memo[i - 1][j] + 1,
        memo[i][j - 1] + 1,
        memo[i - 1][j - 1] +
          (ch === strB.charCodeAt(j - 1) ? 0 : 1)
      );
    }
  }

  return memo[strA.length][strB.length];
}


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/test.js":
/*!**************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/test.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - test utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");

/**
 * ### .test(object, expression)
 *
 * Test and object for expression.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name test
 */

module.exports = function test(obj, args) {
  var negate = flag(obj, 'negate')
    , expr = args[0];
  return negate ? !expr : expr;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/transferFlags.js":
/*!***********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/transferFlags.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - transferFlags utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .transferFlags(assertion, object, includeAll = true)
 *
 * Transfer all the flags for `assertion` to `object`. If
 * `includeAll` is set to `false`, then the base Chai
 * assertion flags (namely `object`, `ssfi`, `lockSsfi`,
 * and `message`) will not be transferred.
 *
 *
 *     var newAssertion = new Assertion();
 *     utils.transferFlags(assertion, newAssertion);
 *
 *     var anotherAssertion = new Assertion(myObj);
 *     utils.transferFlags(assertion, anotherAssertion, false);
 *
 * @param {Assertion} assertion the assertion to transfer the flags from
 * @param {Object} object the object to transfer the flags to; usually a new assertion
 * @param {Boolean} includeAll
 * @namespace Utils
 * @name transferFlags
 * @api private
 */

module.exports = function transferFlags(assertion, object, includeAll) {
  var flags = assertion.__flags || (assertion.__flags = Object.create(null));

  if (!object.__flags) {
    object.__flags = Object.create(null);
  }

  includeAll = arguments.length === 3 ? includeAll : true;

  for (var flag in flags) {
    if (includeAll ||
        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {
      object.__flags[flag] = flags[flag];
    }
  }
};


/***/ }),

/***/ "./node_modules/check-error/index.js":
/*!*******************************************!*\
  !*** ./node_modules/check-error/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* !
 * Chai - checkError utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .checkError
 *
 * Checks that an error conforms to a given set of criteria and/or retrieves information about it.
 *
 * @api public
 */

/**
 * ### .compatibleInstance(thrown, errorLike)
 *
 * Checks if two instances are compatible (strict equal).
 * Returns false if errorLike is not an instance of Error, because instances
 * can only be compatible if they're both error instances.
 *
 * @name compatibleInstance
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */

function compatibleInstance(thrown, errorLike) {
  return errorLike instanceof Error && thrown === errorLike;
}

/**
 * ### .compatibleConstructor(thrown, errorLike)
 *
 * Checks if two constructors are compatible.
 * This function can receive either an error constructor or
 * an error instance as the `errorLike` argument.
 * Constructors are compatible if they're the same or if one is
 * an instance of another.
 *
 * @name compatibleConstructor
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */

function compatibleConstructor(thrown, errorLike) {
  if (errorLike instanceof Error) {
    // If `errorLike` is an instance of any error we compare their constructors
    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;
  } else if (errorLike.prototype instanceof Error || errorLike === Error) {
    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly
    return thrown.constructor === errorLike || thrown instanceof errorLike;
  }

  return false;
}

/**
 * ### .compatibleMessage(thrown, errMatcher)
 *
 * Checks if an error's message is compatible with a matcher (String or RegExp).
 * If the message contains the String or passes the RegExp test,
 * it is considered compatible.
 *
 * @name compatibleMessage
 * @param {Error} thrown error
 * @param {String|RegExp} errMatcher to look for into the message
 * @namespace Utils
 * @api public
 */

function compatibleMessage(thrown, errMatcher) {
  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;
  if (errMatcher instanceof RegExp) {
    return errMatcher.test(comparisonString);
  } else if (typeof errMatcher === 'string') {
    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers
  }

  return false;
}

/**
 * ### .getFunctionName(constructorFn)
 *
 * Returns the name of a function.
 * This also includes a polyfill function if `constructorFn.name` is not defined.
 *
 * @name getFunctionName
 * @param {Function} constructorFn
 * @namespace Utils
 * @api private
 */

var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;
function getFunctionName(constructorFn) {
  var name = '';
  if (typeof constructorFn.name === 'undefined') {
    // Here we run a polyfill if constructorFn.name is not defined
    var match = String(constructorFn).match(functionNameMatch);
    if (match) {
      name = match[1];
    }
  } else {
    name = constructorFn.name;
  }

  return name;
}

/**
 * ### .getConstructorName(errorLike)
 *
 * Gets the constructor name for an Error instance or constructor itself.
 *
 * @name getConstructorName
 * @param {Error|ErrorConstructor} errorLike
 * @namespace Utils
 * @api public
 */

function getConstructorName(errorLike) {
  var constructorName = errorLike;
  if (errorLike instanceof Error) {
    constructorName = getFunctionName(errorLike.constructor);
  } else if (typeof errorLike === 'function') {
    // If `err` is not an instance of Error it is an error constructor itself or another function.
    // If we've got a common function we get its name, otherwise we may need to create a new instance
    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.
    constructorName = getFunctionName(errorLike).trim() ||
        getFunctionName(new errorLike()); // eslint-disable-line new-cap
  }

  return constructorName;
}

/**
 * ### .getMessage(errorLike)
 *
 * Gets the error message from an error.
 * If `err` is a String itself, we return it.
 * If the error has no message, we return an empty string.
 *
 * @name getMessage
 * @param {Error|String} errorLike
 * @namespace Utils
 * @api public
 */

function getMessage(errorLike) {
  var msg = '';
  if (errorLike && errorLike.message) {
    msg = errorLike.message;
  } else if (typeof errorLike === 'string') {
    msg = errorLike;
  }

  return msg;
}

module.exports = {
  compatibleInstance: compatibleInstance,
  compatibleConstructor: compatibleConstructor,
  compatibleMessage: compatibleMessage,
  getMessage: getMessage,
  getConstructorName: getConstructorName,
};


/***/ }),

/***/ "./node_modules/deep-eql/index.js":
/*!****************************************!*\
  !*** ./node_modules/deep-eql/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* globals Symbol: false, Uint8Array: false, WeakMap: false */
/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var type = __webpack_require__(/*! type-detect */ "./node_modules/type-detect/type-detect.js");
function FakeMap() {
  this._key = 'chai/deep-eql__' + Math.random() + Date.now();
}

FakeMap.prototype = {
  get: function getMap(key) {
    return key[this._key];
  },
  set: function setMap(key, value) {
    if (Object.isExtensible(key)) {
      Object.defineProperty(key, this._key, {
        value: value,
        configurable: true,
      });
    }
  },
};

var MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;
/*!
 * Check to see if the MemoizeMap has recorded a result of the two operands
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @returns {Boolean|null} result
*/
function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    return null;
  }
  var leftHandMap = memoizeMap.get(leftHandOperand);
  if (leftHandMap) {
    var result = leftHandMap.get(rightHandOperand);
    if (typeof result === 'boolean') {
      return result;
    }
  }
  return null;
}

/*!
 * Set the result of the equality into the MemoizeMap
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @param {Boolean} result
*/
function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    return;
  }
  var leftHandMap = memoizeMap.get(leftHandOperand);
  if (leftHandMap) {
    leftHandMap.set(rightHandOperand, result);
  } else {
    leftHandMap = new MemoizeMap();
    leftHandMap.set(rightHandOperand, result);
    memoizeMap.set(leftHandOperand, leftHandMap);
  }
}

/*!
 * Primary Export
 */

module.exports = deepEqual;
module.exports.MemoizeMap = MemoizeMap;

/**
 * Assert deeply nested sameValue equality between two objects of any type.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
 */
function deepEqual(leftHandOperand, rightHandOperand, options) {
  // If we have a comparator, we can't assume anything; so bail to its check first.
  if (options && options.comparator) {
    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
  }

  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
  if (simpleResult !== null) {
    return simpleResult;
  }

  // Deeper comparisons are pushed through to a larger function
  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}

/**
 * Many comparisons can be canceled out early via simple equality or primitive checks.
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @return {Boolean|null} equal match
 */
function simpleEqual(leftHandOperand, rightHandOperand) {
  // Equal references (except for Numbers) can be returned early
  if (leftHandOperand === rightHandOperand) {
    // Handle +-0 cases
    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
  }

  // handle NaN cases
  if (
    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare
    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare
  ) {
    return true;
  }

  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,
  // strings, and undefined, can be compared by reference.
  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    // Easy out b/c it would have passed the first equality check
    return false;
  }
  return null;
}

/*!
 * The main logic of the `deepEqual` function.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
*/
function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
  options = options || {};
  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
  var comparator = options && options.comparator;

  // Check if a memoized result exists.
  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);
  if (memoizeResultLeft !== null) {
    return memoizeResultLeft;
  }
  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);
  if (memoizeResultRight !== null) {
    return memoizeResultRight;
  }

  // If a comparator is present, use it.
  if (comparator) {
    var comparatorResult = comparator(leftHandOperand, rightHandOperand);
    // Comparators may return null, in which case we want to go back to default behavior.
    if (comparatorResult === false || comparatorResult === true) {
      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
      return comparatorResult;
    }
    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide
    // what to do, we need to make sure to return the basic tests first before we move on.
    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
    if (simpleResult !== null) {
      // Don't memoize this, it takes longer to set/retrieve than to just compare.
      return simpleResult;
    }
  }

  var leftHandType = type(leftHandOperand);
  if (leftHandType !== type(rightHandOperand)) {
    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);
    return false;
  }

  // Temporarily set the operands in the memoize object to prevent blowing the stack
  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);

  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);
  return result;
}

function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
  switch (leftHandType) {
    case 'String':
    case 'Number':
    case 'Boolean':
    case 'Date':
      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values
      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());
    case 'Promise':
    case 'Symbol':
    case 'function':
    case 'WeakMap':
    case 'WeakSet':
    case 'Error':
      return leftHandOperand === rightHandOperand;
    case 'Arguments':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'Array':
      return iterableEqual(leftHandOperand, rightHandOperand, options);
    case 'RegExp':
      return regexpEqual(leftHandOperand, rightHandOperand);
    case 'Generator':
      return generatorEqual(leftHandOperand, rightHandOperand, options);
    case 'DataView':
      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);
    case 'ArrayBuffer':
      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);
    case 'Set':
      return entriesEqual(leftHandOperand, rightHandOperand, options);
    case 'Map':
      return entriesEqual(leftHandOperand, rightHandOperand, options);
    default:
      return objectEqual(leftHandOperand, rightHandOperand, options);
  }
}

/*!
 * Compare two Regular Expressions for equality.
 *
 * @param {RegExp} leftHandOperand
 * @param {RegExp} rightHandOperand
 * @return {Boolean} result
 */

function regexpEqual(leftHandOperand, rightHandOperand) {
  return leftHandOperand.toString() === rightHandOperand.toString();
}

/*!
 * Compare two Sets/Maps for equality. Faster than other equality functions.
 *
 * @param {Set} leftHandOperand
 * @param {Set} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function entriesEqual(leftHandOperand, rightHandOperand, options) {
  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach
  if (leftHandOperand.size !== rightHandOperand.size) {
    return false;
  }
  if (leftHandOperand.size === 0) {
    return true;
  }
  var leftHandItems = [];
  var rightHandItems = [];
  leftHandOperand.forEach(function gatherEntries(key, value) {
    leftHandItems.push([ key, value ]);
  });
  rightHandOperand.forEach(function gatherEntries(key, value) {
    rightHandItems.push([ key, value ]);
  });
  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
}

/*!
 * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function iterableEqual(leftHandOperand, rightHandOperand, options) {
  var length = leftHandOperand.length;
  if (length !== rightHandOperand.length) {
    return false;
  }
  if (length === 0) {
    return true;
  }
  var index = -1;
  while (++index < length) {
    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {
      return false;
    }
  }
  return true;
}

/*!
 * Simple equality for generator objects such as those returned by generator functions.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function generatorEqual(leftHandOperand, rightHandOperand, options) {
  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
}

/*!
 * Determine if the given object has an @@iterator function.
 *
 * @param {Object} target
 * @return {Boolean} `true` if the object has an @@iterator function.
 */
function hasIteratorFunction(target) {
  return typeof Symbol !== 'undefined' &&
    typeof target === 'object' &&
    typeof Symbol.iterator !== 'undefined' &&
    typeof target[Symbol.iterator] === 'function';
}

/*!
 * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.
 * This will consume the iterator - which could have side effects depending on the @@iterator implementation.
 *
 * @param {Object} target
 * @returns {Array} an array of entries from the @@iterator function
 */
function getIteratorEntries(target) {
  if (hasIteratorFunction(target)) {
    try {
      return getGeneratorEntries(target[Symbol.iterator]());
    } catch (iteratorError) {
      return [];
    }
  }
  return [];
}

/*!
 * Gets all entries from a Generator. This will consume the generator - which could have side effects.
 *
 * @param {Generator} target
 * @returns {Array} an array of entries from the Generator.
 */
function getGeneratorEntries(generator) {
  var generatorResult = generator.next();
  var accumulator = [ generatorResult.value ];
  while (generatorResult.done === false) {
    generatorResult = generator.next();
    accumulator.push(generatorResult.value);
  }
  return accumulator;
}

/*!
 * Gets all own and inherited enumerable keys from a target.
 *
 * @param {Object} target
 * @returns {Array} an array of own and inherited enumerable keys from the target.
 */
function getEnumerableKeys(target) {
  var keys = [];
  for (var key in target) {
    keys.push(key);
  }
  return keys;
}

/*!
 * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of
 * each key. If any value of the given key is not equal, the function will return false (early).
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */
function keysEqual(leftHandOperand, rightHandOperand, keys, options) {
  var length = keys.length;
  if (length === 0) {
    return true;
  }
  for (var i = 0; i < length; i += 1) {
    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
      return false;
    }
  }
  return true;
}

/*!
 * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`
 * for each enumerable key in the object.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function objectEqual(leftHandOperand, rightHandOperand, options) {
  var leftHandKeys = getEnumerableKeys(leftHandOperand);
  var rightHandKeys = getEnumerableKeys(rightHandOperand);
  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
    leftHandKeys.sort();
    rightHandKeys.sort();
    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {
      return false;
    }
    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
  }

  var leftHandEntries = getIteratorEntries(leftHandOperand);
  var rightHandEntries = getIteratorEntries(rightHandOperand);
  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
    leftHandEntries.sort();
    rightHandEntries.sort();
    return iterableEqual(leftHandEntries, rightHandEntries, options);
  }

  if (leftHandKeys.length === 0 &&
      leftHandEntries.length === 0 &&
      rightHandKeys.length === 0 &&
      rightHandEntries.length === 0) {
    return true;
  }

  return false;
}

/*!
 * Returns true if the argument is a primitive.
 *
 * This intentionally returns true for all objects that can be compared by reference,
 * including functions and symbols.
 *
 * @param {Mixed} value
 * @return {Boolean} result
 */
function isPrimitive(value) {
  return value === null || typeof value !== 'object';
}


/***/ }),

/***/ "./node_modules/event-lite/event-lite.js":
/*!***********************************************!*\
  !*** ./node_modules/event-lite/event-lite.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * event-lite.js - Light-weight EventEmitter (less than 1KB when gzipped)
 *
 * @copyright Yusuke Kawasaki
 * @license MIT
 * @constructor
 * @see https://github.com/kawanet/event-lite
 * @see http://kawanet.github.io/event-lite/EventLite.html
 * @example
 * var EventLite = require("event-lite");
 *
 * function MyClass() {...}             // your class
 *
 * EventLite.mixin(MyClass.prototype);  // import event methods
 *
 * var obj = new MyClass();
 * obj.on("foo", function() {...});     // add event listener
 * obj.once("bar", function() {...});   // add one-time event listener
 * obj.emit("foo");                     // dispatch event
 * obj.emit("bar");                     // dispatch another event
 * obj.off("foo");                      // remove event listener
 */

function EventLite() {
  if (!(this instanceof EventLite)) return new EventLite();
}

(function(EventLite) {
  // export the class for node.js
  if (true) module.exports = EventLite;

  // property name to hold listeners
  var LISTENERS = "listeners";

  // methods to export
  var methods = {
    on: on,
    once: once,
    off: off,
    emit: emit
  };

  // mixin to self
  mixin(EventLite.prototype);

  // export mixin function
  EventLite.mixin = mixin;

  /**
   * Import on(), once(), off() and emit() methods into target object.
   *
   * @function EventLite.mixin
   * @param target {Prototype}
   */

  function mixin(target) {
    for (var key in methods) {
      target[key] = methods[key];
    }
    return target;
  }

  /**
   * Add an event listener.
   *
   * @function EventLite.prototype.on
   * @param type {string}
   * @param func {Function}
   * @returns {EventLite} Self for method chaining
   */

  function on(type, func) {
    getListeners(this, type).push(func);
    return this;
  }

  /**
   * Add one-time event listener.
   *
   * @function EventLite.prototype.once
   * @param type {string}
   * @param func {Function}
   * @returns {EventLite} Self for method chaining
   */

  function once(type, func) {
    var that = this;
    wrap.originalListener = func;
    getListeners(that, type).push(wrap);
    return that;

    function wrap() {
      off.call(that, type, wrap);
      func.apply(this, arguments);
    }
  }

  /**
   * Remove an event listener.
   *
   * @function EventLite.prototype.off
   * @param [type] {string}
   * @param [func] {Function}
   * @returns {EventLite} Self for method chaining
   */

  function off(type, func) {
    var that = this;
    var listners;
    if (!arguments.length) {
      delete that[LISTENERS];
    } else if (!func) {
      listners = that[LISTENERS];
      if (listners) {
        delete listners[type];
        if (!Object.keys(listners).length) return off.call(that);
      }
    } else {
      listners = getListeners(that, type, true);
      if (listners) {
        listners = listners.filter(ne);
        if (!listners.length) return off.call(that, type);
        that[LISTENERS][type] = listners;
      }
    }
    return that;

    function ne(test) {
      return test !== func && test.originalListener !== func;
    }
  }

  /**
   * Dispatch (trigger) an event.
   *
   * @function EventLite.prototype.emit
   * @param type {string}
   * @param [value] {*}
   * @returns {boolean} True when a listener received the event
   */

  function emit(type, value) {
    var that = this;
    var listeners = getListeners(that, type, true);
    if (!listeners) return false;
    var arglen = arguments.length;
    if (arglen === 1) {
      listeners.forEach(zeroarg);
    } else if (arglen === 2) {
      listeners.forEach(onearg);
    } else {
      var args = Array.prototype.slice.call(arguments, 1);
      listeners.forEach(moreargs);
    }
    return !!listeners.length;

    function zeroarg(func) {
      func.call(that);
    }

    function onearg(func) {
      func.call(that, value);
    }

    function moreargs(func) {
      func.apply(that, args);
    }
  }

  /**
   * @ignore
   */

  function getListeners(that, type, readonly) {
    if (readonly && !that[LISTENERS]) return;
    var listeners = that[LISTENERS] || (that[LISTENERS] = {});
    return listeners[type] || (listeners[type] = []);
  }

})(EventLite);


/***/ }),

/***/ "./node_modules/get-func-name/index.js":
/*!*********************************************!*\
  !*** ./node_modules/get-func-name/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* !
 * Chai - getFuncName utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getFuncName(constructorFn)
 *
 * Returns the name of a function.
 * When a non-function instance is passed, returns `null`.
 * This also includes a polyfill function if `aFunc.name` is not defined.
 *
 * @name getFuncName
 * @param {Function} funct
 * @namespace Utils
 * @api public
 */

var toString = Function.prototype.toString;
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;
function getFuncName(aFunc) {
  if (typeof aFunc !== 'function') {
    return null;
  }

  var name = '';
  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {
    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined
    var match = toString.call(aFunc).match(functionNameMatch);
    if (match) {
      name = match[1];
    }
  } else {
    // If we've got a `name` property we just use it
    name = aFunc.name;
  }

  return name;
}

module.exports = getFuncName;


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/int64-buffer/int64-buffer.js":
/*!***************************************************!*\
  !*** ./node_modules/int64-buffer/int64-buffer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// int64-buffer.js

/*jshint -W018 */ // Confusing use of '!'.
/*jshint -W030 */ // Expected an assignment or function call and instead saw an expression.
/*jshint -W093 */ // Did you mean to return a conditional instead of an assignment?

var Uint64BE, Int64BE, Uint64LE, Int64LE;

!function(exports) {
  // constants

  var UNDEFINED = "undefined";
  var BUFFER = (UNDEFINED !== typeof Buffer) && Buffer;
  var UINT8ARRAY = (UNDEFINED !== typeof Uint8Array) && Uint8Array;
  var ARRAYBUFFER = (UNDEFINED !== typeof ArrayBuffer) && ArrayBuffer;
  var ZERO = [0, 0, 0, 0, 0, 0, 0, 0];
  var isArray = Array.isArray || _isArray;
  var BIT32 = 4294967296;
  var BIT24 = 16777216;

  // storage class

  var storage; // Array;

  // generate classes

  Uint64BE = factory("Uint64BE", true, true);
  Int64BE = factory("Int64BE", true, false);
  Uint64LE = factory("Uint64LE", false, true);
  Int64LE = factory("Int64LE", false, false);

  // class factory

  function factory(name, bigendian, unsigned) {
    var posH = bigendian ? 0 : 4;
    var posL = bigendian ? 4 : 0;
    var pos0 = bigendian ? 0 : 3;
    var pos1 = bigendian ? 1 : 2;
    var pos2 = bigendian ? 2 : 1;
    var pos3 = bigendian ? 3 : 0;
    var fromPositive = bigendian ? fromPositiveBE : fromPositiveLE;
    var fromNegative = bigendian ? fromNegativeBE : fromNegativeLE;
    var proto = Int64.prototype;
    var isName = "is" + name;
    var _isInt64 = "_" + isName;

    // properties
    proto.buffer = void 0;
    proto.offset = 0;
    proto[_isInt64] = true;

    // methods
    proto.toNumber = toNumber;
    proto.toString = toString;
    proto.toJSON = toNumber;
    proto.toArray = toArray;

    // add .toBuffer() method only when Buffer available
    if (BUFFER) proto.toBuffer = toBuffer;

    // add .toArrayBuffer() method only when Uint8Array available
    if (UINT8ARRAY) proto.toArrayBuffer = toArrayBuffer;

    // isUint64BE, isInt64BE
    Int64[isName] = isInt64;

    // CommonJS
    exports[name] = Int64;

    return Int64;

    // constructor
    function Int64(buffer, offset, value, raddix) {
      if (!(this instanceof Int64)) return new Int64(buffer, offset, value, raddix);
      return init(this, buffer, offset, value, raddix);
    }

    // isUint64BE, isInt64BE
    function isInt64(b) {
      return !!(b && b[_isInt64]);
    }

    // initializer
    function init(that, buffer, offset, value, raddix) {
      if (UINT8ARRAY && ARRAYBUFFER) {
        if (buffer instanceof ARRAYBUFFER) buffer = new UINT8ARRAY(buffer);
        if (value instanceof ARRAYBUFFER) value = new UINT8ARRAY(value);
      }

      // Int64BE() style
      if (!buffer && !offset && !value && !storage) {
        // shortcut to initialize with zero
        that.buffer = newArray(ZERO, 0);
        return;
      }

      // Int64BE(value, raddix) style
      if (!isValidBuffer(buffer, offset)) {
        var _storage = storage || Array;
        raddix = offset;
        value = buffer;
        offset = 0;
        buffer = new _storage(8);
      }

      that.buffer = buffer;
      that.offset = offset |= 0;

      // Int64BE(buffer, offset) style
      if (UNDEFINED === typeof value) return;

      // Int64BE(buffer, offset, value, raddix) style
      if ("string" === typeof value) {
        fromString(buffer, offset, value, raddix || 10);
      } else if (isValidBuffer(value, raddix)) {
        fromArray(buffer, offset, value, raddix);
      } else if ("number" === typeof raddix) {
        writeInt32(buffer, offset + posH, value); // high
        writeInt32(buffer, offset + posL, raddix); // low
      } else if (value > 0) {
        fromPositive(buffer, offset, value); // positive
      } else if (value < 0) {
        fromNegative(buffer, offset, value); // negative
      } else {
        fromArray(buffer, offset, ZERO, 0); // zero, NaN and others
      }
    }

    function fromString(buffer, offset, str, raddix) {
      var pos = 0;
      var len = str.length;
      var high = 0;
      var low = 0;
      if (str[0] === "-") pos++;
      var sign = pos;
      while (pos < len) {
        var chr = parseInt(str[pos++], raddix);
        if (!(chr >= 0)) break; // NaN
        low = low * raddix + chr;
        high = high * raddix + Math.floor(low / BIT32);
        low %= BIT32;
      }
      if (sign) {
        high = ~high;
        if (low) {
          low = BIT32 - low;
        } else {
          high++;
        }
      }
      writeInt32(buffer, offset + posH, high);
      writeInt32(buffer, offset + posL, low);
    }

    function toNumber() {
      var buffer = this.buffer;
      var offset = this.offset;
      var high = readInt32(buffer, offset + posH);
      var low = readInt32(buffer, offset + posL);
      if (!unsigned) high |= 0; // a trick to get signed
      return high ? (high * BIT32 + low) : low;
    }

    function toString(radix) {
      var buffer = this.buffer;
      var offset = this.offset;
      var high = readInt32(buffer, offset + posH);
      var low = readInt32(buffer, offset + posL);
      var str = "";
      var sign = !unsigned && (high & 0x80000000);
      if (sign) {
        high = ~high;
        low = BIT32 - low;
      }
      radix = radix || 10;
      while (1) {
        var mod = (high % radix) * BIT32 + low;
        high = Math.floor(high / radix);
        low = Math.floor(mod / radix);
        str = (mod % radix).toString(radix) + str;
        if (!high && !low) break;
      }
      if (sign) {
        str = "-" + str;
      }
      return str;
    }

    function writeInt32(buffer, offset, value) {
      buffer[offset + pos3] = value & 255;
      value = value >> 8;
      buffer[offset + pos2] = value & 255;
      value = value >> 8;
      buffer[offset + pos1] = value & 255;
      value = value >> 8;
      buffer[offset + pos0] = value & 255;
    }

    function readInt32(buffer, offset) {
      return (buffer[offset + pos0] * BIT24) +
        (buffer[offset + pos1] << 16) +
        (buffer[offset + pos2] << 8) +
        buffer[offset + pos3];
    }
  }

  function toArray(raw) {
    var buffer = this.buffer;
    var offset = this.offset;
    storage = null; // Array
    if (raw !== false && offset === 0 && buffer.length === 8 && isArray(buffer)) return buffer;
    return newArray(buffer, offset);
  }

  function toBuffer(raw) {
    var buffer = this.buffer;
    var offset = this.offset;
    storage = BUFFER;
    if (raw !== false && offset === 0 && buffer.length === 8 && Buffer.isBuffer(buffer)) return buffer;
    var dest = new BUFFER(8);
    fromArray(dest, 0, buffer, offset);
    return dest;
  }

  function toArrayBuffer(raw) {
    var buffer = this.buffer;
    var offset = this.offset;
    var arrbuf = buffer.buffer;
    storage = UINT8ARRAY;
    if (raw !== false && offset === 0 && (arrbuf instanceof ARRAYBUFFER) && arrbuf.byteLength === 8) return arrbuf;
    var dest = new UINT8ARRAY(8);
    fromArray(dest, 0, buffer, offset);
    return dest.buffer;
  }

  function isValidBuffer(buffer, offset) {
    var len = buffer && buffer.length;
    offset |= 0;
    return len && (offset + 8 <= len) && ("string" !== typeof buffer[offset]);
  }

  function fromArray(destbuf, destoff, srcbuf, srcoff) {
    destoff |= 0;
    srcoff |= 0;
    for (var i = 0; i < 8; i++) {
      destbuf[destoff++] = srcbuf[srcoff++] & 255;
    }
  }

  function newArray(buffer, offset) {
    return Array.prototype.slice.call(buffer, offset, offset + 8);
  }

  function fromPositiveBE(buffer, offset, value) {
    var pos = offset + 8;
    while (pos > offset) {
      buffer[--pos] = value & 255;
      value /= 256;
    }
  }

  function fromNegativeBE(buffer, offset, value) {
    var pos = offset + 8;
    value++;
    while (pos > offset) {
      buffer[--pos] = ((-value) & 255) ^ 255;
      value /= 256;
    }
  }

  function fromPositiveLE(buffer, offset, value) {
    var end = offset + 8;
    while (offset < end) {
      buffer[offset++] = value & 255;
      value /= 256;
    }
  }

  function fromNegativeLE(buffer, offset, value) {
    var end = offset + 8;
    value++;
    while (offset < end) {
      buffer[offset++] = ((-value) & 255) ^ 255;
      value /= 256;
    }
  }

  // https://github.com/retrofox/is-array
  function _isArray(val) {
    return !!val && "[object Array]" == Object.prototype.toString.call(val);
  }

}( true && typeof exports.nodeName !== 'string' ? exports : (this || {}));


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/js-encoding-utils/dist/jseu.bundle.js":
/*!************************************************************!*\
  !*** ./node_modules/js-encoding-utils/dist/jseu.bundle.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(r,n){ true?module.exports=n():undefined}(this,function(){return function(r){var n={};function t(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return r[e].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=r,t.c=n,t.d=function(r,n,e){t.o(r,n)||Object.defineProperty(r,n,{enumerable:!0,get:e})},t.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},t.t=function(r,n){if(1&n&&(r=t(r)),8&n)return r;if(4&n&&"object"==typeof r&&r&&r.__esModule)return r;var e=Object.create(null);if(t.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:r}),2&n&&"string"!=typeof r)for(var o in r)t.d(e,o,function(n){return r[n]}.bind(null,o));return e},t.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return t.d(n,"a",n),n},t.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},t.p="/Users/jun/ProjectJavaScript/js_buffer_utils/dist",t(t.s=0)}([function(r,n,t){r.exports=t(1)},function(r,n,t){"use strict";t.r(n);var e={};t.r(e),t.d(e,"encodeBase64",function(){return i}),t.d(e,"decodeBase64",function(){return a}),t.d(e,"encodeBase64Url",function(){return s}),t.d(e,"decodeBase64Url",function(){return p}),t.d(e,"arrayBufferToHexString",function(){return d}),t.d(e,"hexStringToArrayBuffer",function(){return l}),t.d(e,"arrayBufferToString",function(){return y}),t.d(e,"stringToArrayBuffer",function(){return g});var o={};t.r(o),t.d(o,"pemToBin",function(){return w}),t.d(o,"binToPem",function(){return m});var u=function(r){if("undefined"!=typeof Buffer){var n=Object.prototype.toString.call(r).slice(8,-1);return(Buffer.isBuffer(r)?r:0<=["ArrayBuffer","TypedArray","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array"].indexOf(n)?Buffer.from(r):Buffer.from(r.toString(),"binary")).toString("base64")}throw new Error("UnsupportedEnvironment")},f=function(r){if("undefined"!=typeof Buffer)return Buffer.from(r,"base64").toString("binary");throw new Error("UnsupportedEnvironment")};function i(r){var n;return n="string"==typeof r?r:y(r),("undefined"==typeof window?u:window.btoa)(n)}function a(r){return function(r){if(r instanceof Uint8Array){for(var n=!0,t=0;t<r.length;t++)if(126<r[t]||32>r[t]&&13!==r[t]&&10!==r[t]){n=!1;break}var e=null;if(n){e="";for(var o=0;o<r.length;o++)e+=String.fromCharCode(r[o])}else e=r;return e}throw new Error("Input data must be an Uint8Array")}(g(("undefined"==typeof window?f:window.atob)(r)))}function c(r){if(r instanceof Uint8Array)return r;if(ArrayBuffer.isView(r)&&void 0!==r.buffer)return new Uint8Array(r.buffer);if(r instanceof ArrayBuffer)return new Uint8Array(r);throw new Error("Input must be an ArrayBuffer or a TypedArray")}function s(r){return i(r).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}function p(r){if("string"!=typeof r)throw new Error("Input must be string");return a(r=r.replace(/-/g,"+").replace(/_/g,"/"))}function d(r){for(var n,t=c(r),e="",o=0;o<t.length;o++)e+=n=1===(n=(255&t[o]).toString(16)).length?"0".concat(n):n;return e}function l(r){if(!r||"string"!=typeof r)throw new Error("Input arg must be a non-null string");for(var n=[],t=r.length,e=0;e<t;e+=2)n.push(parseInt(r.substr(e,2),16));return new Uint8Array(n)}function y(r){var n=c(r);return String.fromCharCode.apply(null,n)}function g(r){if(!r||"string"!=typeof r)throw new Error("Input arg must be a non-null string");for(var n=new Uint8Array(r.length),t=0;t<r.length;t++)n[t]=r.charCodeAt(t);return n}var b={public:"PUBLIC KEY",private:"PRIVATE KEY",encryptedPrivate:"ENCRYPTED PRIVATE KEY",certificate:"CERTIFICATE",certRequest:"CERTIFICATE REQUEST"};function w(r){return a(function(r){if(!r||"string"!=typeof r)throw new Error("Input arg must be a non-null string");try{var n=r.split(/^-----[s]*BEGIN[^-]*-----$/gm)[1].split(/^-----[s]*END[^-]*-----$/gm)[0];return n=n.replace(/\r?\n/g,"")}catch(r){throw new Error("Invalid format as PEM")}}(r))}function m(r,n){return function(r,n){if(!r||"string"!=typeof r)throw new Error("Input arg must be a non-null string");if(!n||"string"!=typeof n)throw new Error("Input arg must be a non-null string");if(0>Object.keys(b).indexOf(n))throw new Error("Unsupported type");for(var t=b[n],e="-----BEGIN ".concat(t,"-----\n");0<r.length;)e+="".concat(r.substring(0,64),"\n"),r=r.substring(64);return e="".concat(e,"-----END ").concat(t,"-----")}(i(r),n)}t.d(n,"encoder",function(){return e}),t.d(n,"formatter",function(){return o});n.default={encoder:e,formatter:o}}])});

/***/ }),

/***/ "./node_modules/lodash.clonedeep/index.js":
/*!************************************************!*\
  !*** ./node_modules/lodash.clonedeep/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `map.set` because it's not chainable in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  // Don't return `set.add` because it's not chainable in IE 11.
  set.add(value);
  return set;
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    objectCreate = Object.create,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @param {boolean} [isFull] Specify a clone including symbols.
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
  var result;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      if (isHostObject(value)) {
        return object ? value : {};
      }
      result = initCloneObject(isFunc ? {} : value);
      if (!isDeep) {
        return copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (!isArr) {
    var props = isFull ? getAllKeys(value) : keys(value);
  }
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
  });
  return result;
}

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var result = new buffer.constructor(buffer.length);
  buffer.copy(result);
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor);
}

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor);
}

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  }
  return object;
}

/**
 * Copies own symbol properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Creates an array of the own enumerable symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, true, true);
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = cloneDeep;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/msgpack-lite/lib/browser.js":
/*!**************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/browser.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// browser.js

exports.encode = __webpack_require__(/*! ./encode */ "./node_modules/msgpack-lite/lib/encode.js").encode;
exports.decode = __webpack_require__(/*! ./decode */ "./node_modules/msgpack-lite/lib/decode.js").decode;

exports.Encoder = __webpack_require__(/*! ./encoder */ "./node_modules/msgpack-lite/lib/encoder.js").Encoder;
exports.Decoder = __webpack_require__(/*! ./decoder */ "./node_modules/msgpack-lite/lib/decoder.js").Decoder;

exports.createCodec = __webpack_require__(/*! ./ext */ "./node_modules/msgpack-lite/lib/ext.js").createCodec;
exports.codec = __webpack_require__(/*! ./codec */ "./node_modules/msgpack-lite/lib/codec.js").codec;


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/buffer-global.js":
/*!********************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/buffer-global.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* globals Buffer */

module.exports =
  c(("undefined" !== typeof Buffer) && Buffer) ||
  c(this.Buffer) ||
  c(("undefined" !== typeof window) && window.Buffer) ||
  this.Buffer;

function c(B) {
  return B && B.isBuffer && B;
}

/***/ }),

/***/ "./node_modules/msgpack-lite/lib/buffer-lite.js":
/*!******************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/buffer-lite.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// buffer-lite.js

var MAXBUFLEN = 8192;

exports.copy = copy;
exports.toString = toString;
exports.write = write;

/**
 * Buffer.prototype.write()
 *
 * @param string {String}
 * @param [offset] {Number}
 * @returns {Number}
 */

function write(string, offset) {
  var buffer = this;
  var index = offset || (offset |= 0);
  var length = string.length;
  var chr = 0;
  var i = 0;
  while (i < length) {
    chr = string.charCodeAt(i++);

    if (chr < 128) {
      buffer[index++] = chr;
    } else if (chr < 0x800) {
      // 2 bytes
      buffer[index++] = 0xC0 | (chr >>> 6);
      buffer[index++] = 0x80 | (chr & 0x3F);
    } else if (chr < 0xD800 || chr > 0xDFFF) {
      // 3 bytes
      buffer[index++] = 0xE0 | (chr  >>> 12);
      buffer[index++] = 0x80 | ((chr >>> 6)  & 0x3F);
      buffer[index++] = 0x80 | (chr          & 0x3F);
    } else {
      // 4 bytes - surrogate pair
      chr = (((chr - 0xD800) << 10) | (string.charCodeAt(i++) - 0xDC00)) + 0x10000;
      buffer[index++] = 0xF0 | (chr >>> 18);
      buffer[index++] = 0x80 | ((chr >>> 12) & 0x3F);
      buffer[index++] = 0x80 | ((chr >>> 6)  & 0x3F);
      buffer[index++] = 0x80 | (chr          & 0x3F);
    }
  }
  return index - offset;
}

/**
 * Buffer.prototype.toString()
 *
 * @param [encoding] {String} ignored
 * @param [start] {Number}
 * @param [end] {Number}
 * @returns {String}
 */

function toString(encoding, start, end) {
  var buffer = this;
  var index = start|0;
  if (!end) end = buffer.length;
  var string = '';
  var chr = 0;

  while (index < end) {
    chr = buffer[index++];
    if (chr < 128) {
      string += String.fromCharCode(chr);
      continue;
    }

    if ((chr & 0xE0) === 0xC0) {
      // 2 bytes
      chr = (chr & 0x1F) << 6 |
            (buffer[index++] & 0x3F);

    } else if ((chr & 0xF0) === 0xE0) {
      // 3 bytes
      chr = (chr & 0x0F)             << 12 |
            (buffer[index++] & 0x3F) << 6  |
            (buffer[index++] & 0x3F);

    } else if ((chr & 0xF8) === 0xF0) {
      // 4 bytes
      chr = (chr & 0x07)             << 18 |
            (buffer[index++] & 0x3F) << 12 |
            (buffer[index++] & 0x3F) << 6  |
            (buffer[index++] & 0x3F);
    }

    if (chr >= 0x010000) {
      // A surrogate pair
      chr -= 0x010000;

      string += String.fromCharCode((chr >>> 10) + 0xD800, (chr & 0x3FF) + 0xDC00);
    } else {
      string += String.fromCharCode(chr);
    }
  }

  return string;
}

/**
 * Buffer.prototype.copy()
 *
 * @param target {Buffer}
 * @param [targetStart] {Number}
 * @param [start] {Number}
 * @param [end] {Number}
 * @returns {number}
 */

function copy(target, targetStart, start, end) {
  var i;
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (!targetStart) targetStart = 0;
  var len = end - start;

  if (target === this && start < targetStart && targetStart < end) {
    // descending
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    // ascending
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start];
    }
  }

  return len;
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/bufferish-array.js":
/*!**********************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/bufferish-array.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// bufferish-array.js

var Bufferish = __webpack_require__(/*! ./bufferish */ "./node_modules/msgpack-lite/lib/bufferish.js");

var exports = module.exports = alloc(0);

exports.alloc = alloc;
exports.concat = Bufferish.concat;
exports.from = from;

/**
 * @param size {Number}
 * @returns {Buffer|Uint8Array|Array}
 */

function alloc(size) {
  return new Array(size);
}

/**
 * @param value {Array|ArrayBuffer|Buffer|String}
 * @returns {Array}
 */

function from(value) {
  if (!Bufferish.isBuffer(value) && Bufferish.isView(value)) {
    // TypedArray to Uint8Array
    value = Bufferish.Uint8Array.from(value);
  } else if (Bufferish.isArrayBuffer(value)) {
    // ArrayBuffer to Uint8Array
    value = new Uint8Array(value);
  } else if (typeof value === "string") {
    // String to Array
    return Bufferish.from.call(exports, value);
  } else if (typeof value === "number") {
    throw new TypeError('"value" argument must not be a number');
  }

  // Array-like to Array
  return Array.prototype.slice.call(value);
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/bufferish-buffer.js":
/*!***********************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/bufferish-buffer.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// bufferish-buffer.js

var Bufferish = __webpack_require__(/*! ./bufferish */ "./node_modules/msgpack-lite/lib/bufferish.js");
var Buffer = Bufferish.global;

var exports = module.exports = Bufferish.hasBuffer ? alloc(0) : [];

exports.alloc = Bufferish.hasBuffer && Buffer.alloc || alloc;
exports.concat = Bufferish.concat;
exports.from = from;

/**
 * @param size {Number}
 * @returns {Buffer|Uint8Array|Array}
 */

function alloc(size) {
  return new Buffer(size);
}

/**
 * @param value {Array|ArrayBuffer|Buffer|String}
 * @returns {Buffer}
 */

function from(value) {
  if (!Bufferish.isBuffer(value) && Bufferish.isView(value)) {
    // TypedArray to Uint8Array
    value = Bufferish.Uint8Array.from(value);
  } else if (Bufferish.isArrayBuffer(value)) {
    // ArrayBuffer to Uint8Array
    value = new Uint8Array(value);
  } else if (typeof value === "string") {
    // String to Buffer
    return Bufferish.from.call(exports, value);
  } else if (typeof value === "number") {
    throw new TypeError('"value" argument must not be a number');
  }

  // Array-like to Buffer
  if (Buffer.from && Buffer.from.length !== 1) {
    return Buffer.from(value); // node v6+
  } else {
    return new Buffer(value); // node v4
  }
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/bufferish-proto.js":
/*!**********************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/bufferish-proto.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// bufferish-proto.js

/* jshint eqnull:true */

var BufferLite = __webpack_require__(/*! ./buffer-lite */ "./node_modules/msgpack-lite/lib/buffer-lite.js");

exports.copy = copy;
exports.slice = slice;
exports.toString = toString;
exports.write = gen("write");

var Bufferish = __webpack_require__(/*! ./bufferish */ "./node_modules/msgpack-lite/lib/bufferish.js");
var Buffer = Bufferish.global;

var isBufferShim = Bufferish.hasBuffer && ("TYPED_ARRAY_SUPPORT" in Buffer);
var brokenTypedArray = isBufferShim && !Buffer.TYPED_ARRAY_SUPPORT;

/**
 * @param target {Buffer|Uint8Array|Array}
 * @param [targetStart] {Number}
 * @param [start] {Number}
 * @param [end] {Number}
 * @returns {Buffer|Uint8Array|Array}
 */

function copy(target, targetStart, start, end) {
  var thisIsBuffer = Bufferish.isBuffer(this);
  var targetIsBuffer = Bufferish.isBuffer(target);
  if (thisIsBuffer && targetIsBuffer) {
    // Buffer to Buffer
    return this.copy(target, targetStart, start, end);
  } else if (!brokenTypedArray && !thisIsBuffer && !targetIsBuffer &&
    Bufferish.isView(this) && Bufferish.isView(target)) {
    // Uint8Array to Uint8Array (except for minor some browsers)
    var buffer = (start || end != null) ? slice.call(this, start, end) : this;
    target.set(buffer, targetStart);
    return buffer.length;
  } else {
    // other cases
    return BufferLite.copy.call(this, target, targetStart, start, end);
  }
}

/**
 * @param [start] {Number}
 * @param [end] {Number}
 * @returns {Buffer|Uint8Array|Array}
 */

function slice(start, end) {
  // for Buffer, Uint8Array (except for minor some browsers) and Array
  var f = this.slice || (!brokenTypedArray && this.subarray);
  if (f) return f.call(this, start, end);

  // Uint8Array (for minor some browsers)
  var target = Bufferish.alloc.call(this, end - start);
  copy.call(this, target, 0, start, end);
  return target;
}

/**
 * Buffer.prototype.toString()
 *
 * @param [encoding] {String} ignored
 * @param [start] {Number}
 * @param [end] {Number}
 * @returns {String}
 */

function toString(encoding, start, end) {
  var f = (!isBufferShim && Bufferish.isBuffer(this)) ? this.toString : BufferLite.toString;
  return f.apply(this, arguments);
}

/**
 * @private
 */

function gen(method) {
  return wrap;

  function wrap() {
    var f = this[method] || BufferLite[method];
    return f.apply(this, arguments);
  }
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/bufferish-uint8array.js":
/*!***************************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/bufferish-uint8array.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// bufferish-uint8array.js

var Bufferish = __webpack_require__(/*! ./bufferish */ "./node_modules/msgpack-lite/lib/bufferish.js");

var exports = module.exports = Bufferish.hasArrayBuffer ? alloc(0) : [];

exports.alloc = alloc;
exports.concat = Bufferish.concat;
exports.from = from;

/**
 * @param size {Number}
 * @returns {Buffer|Uint8Array|Array}
 */

function alloc(size) {
  return new Uint8Array(size);
}

/**
 * @param value {Array|ArrayBuffer|Buffer|String}
 * @returns {Uint8Array}
 */

function from(value) {
  if (Bufferish.isView(value)) {
    // TypedArray to ArrayBuffer
    var byteOffset = value.byteOffset;
    var byteLength = value.byteLength;
    value = value.buffer;
    if (value.byteLength !== byteLength) {
      if (value.slice) {
        value = value.slice(byteOffset, byteOffset + byteLength);
      } else {
        // Android 4.1 does not have ArrayBuffer.prototype.slice
        value = new Uint8Array(value);
        if (value.byteLength !== byteLength) {
          // TypedArray to ArrayBuffer to Uint8Array to Array
          value = Array.prototype.slice.call(value, byteOffset, byteOffset + byteLength);
        }
      }
    }
  } else if (typeof value === "string") {
    // String to Uint8Array
    return Bufferish.from.call(exports, value);
  } else if (typeof value === "number") {
    throw new TypeError('"value" argument must not be a number');
  }

  return new Uint8Array(value);
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/bufferish.js":
/*!****************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/bufferish.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// bufferish.js

var Buffer = exports.global = __webpack_require__(/*! ./buffer-global */ "./node_modules/msgpack-lite/lib/buffer-global.js");
var hasBuffer = exports.hasBuffer = Buffer && !!Buffer.isBuffer;
var hasArrayBuffer = exports.hasArrayBuffer = ("undefined" !== typeof ArrayBuffer);

var isArray = exports.isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");
exports.isArrayBuffer = hasArrayBuffer ? isArrayBuffer : _false;
var isBuffer = exports.isBuffer = hasBuffer ? Buffer.isBuffer : _false;
var isView = exports.isView = hasArrayBuffer ? (ArrayBuffer.isView || _is("ArrayBuffer", "buffer")) : _false;

exports.alloc = alloc;
exports.concat = concat;
exports.from = from;

var BufferArray = exports.Array = __webpack_require__(/*! ./bufferish-array */ "./node_modules/msgpack-lite/lib/bufferish-array.js");
var BufferBuffer = exports.Buffer = __webpack_require__(/*! ./bufferish-buffer */ "./node_modules/msgpack-lite/lib/bufferish-buffer.js");
var BufferUint8Array = exports.Uint8Array = __webpack_require__(/*! ./bufferish-uint8array */ "./node_modules/msgpack-lite/lib/bufferish-uint8array.js");
var BufferProto = exports.prototype = __webpack_require__(/*! ./bufferish-proto */ "./node_modules/msgpack-lite/lib/bufferish-proto.js");

/**
 * @param value {Array|ArrayBuffer|Buffer|String}
 * @returns {Buffer|Uint8Array|Array}
 */

function from(value) {
  if (typeof value === "string") {
    return fromString.call(this, value);
  } else {
    return auto(this).from(value);
  }
}

/**
 * @param size {Number}
 * @returns {Buffer|Uint8Array|Array}
 */

function alloc(size) {
  return auto(this).alloc(size);
}

/**
 * @param list {Array} array of (Buffer|Uint8Array|Array)s
 * @param [length]
 * @returns {Buffer|Uint8Array|Array}
 */

function concat(list, length) {
  if (!length) {
    length = 0;
    Array.prototype.forEach.call(list, dryrun);
  }
  var ref = (this !== exports) && this || list[0];
  var result = alloc.call(ref, length);
  var offset = 0;
  Array.prototype.forEach.call(list, append);
  return result;

  function dryrun(buffer) {
    length += buffer.length;
  }

  function append(buffer) {
    offset += BufferProto.copy.call(buffer, result, offset);
  }
}

var _isArrayBuffer = _is("ArrayBuffer");

function isArrayBuffer(value) {
  return (value instanceof ArrayBuffer) || _isArrayBuffer(value);
}

/**
 * @private
 */

function fromString(value) {
  var expected = value.length * 3;
  var that = alloc.call(this, expected);
  var actual = BufferProto.write.call(that, value);
  if (expected !== actual) {
    that = BufferProto.slice.call(that, 0, actual);
  }
  return that;
}

function auto(that) {
  return isBuffer(that) ? BufferBuffer
    : isView(that) ? BufferUint8Array
    : isArray(that) ? BufferArray
    : hasBuffer ? BufferBuffer
    : hasArrayBuffer ? BufferUint8Array
    : BufferArray;
}

function _false() {
  return false;
}

function _is(name, key) {
  /* jshint eqnull:true */
  name = "[object " + name + "]";
  return function(value) {
    return (value != null) && {}.toString.call(key ? value[key] : value) === name;
  };
}

/***/ }),

/***/ "./node_modules/msgpack-lite/lib/codec-base.js":
/*!*****************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/codec-base.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// codec-base.js

var IS_ARRAY = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");

exports.createCodec = createCodec;
exports.install = install;
exports.filter = filter;

var Bufferish = __webpack_require__(/*! ./bufferish */ "./node_modules/msgpack-lite/lib/bufferish.js");

function Codec(options) {
  if (!(this instanceof Codec)) return new Codec(options);
  this.options = options;
  this.init();
}

Codec.prototype.init = function() {
  var options = this.options;

  if (options && options.uint8array) {
    this.bufferish = Bufferish.Uint8Array;
  }

  return this;
};

function install(props) {
  for (var key in props) {
    Codec.prototype[key] = add(Codec.prototype[key], props[key]);
  }
}

function add(a, b) {
  return (a && b) ? ab : (a || b);

  function ab() {
    a.apply(this, arguments);
    return b.apply(this, arguments);
  }
}

function join(filters) {
  filters = filters.slice();

  return function(value) {
    return filters.reduce(iterator, value);
  };

  function iterator(value, filter) {
    return filter(value);
  }
}

function filter(filter) {
  return IS_ARRAY(filter) ? join(filter) : filter;
}

// @public
// msgpack.createCodec()

function createCodec(options) {
  return new Codec(options);
}

// default shared codec

exports.preset = createCodec({preset: true});


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/codec.js":
/*!************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/codec.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// codec.js

// load both interfaces
__webpack_require__(/*! ./read-core */ "./node_modules/msgpack-lite/lib/read-core.js");
__webpack_require__(/*! ./write-core */ "./node_modules/msgpack-lite/lib/write-core.js");

// @public
// msgpack.codec.preset

exports.codec = {
  preset: __webpack_require__(/*! ./codec-base */ "./node_modules/msgpack-lite/lib/codec-base.js").preset
};


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/decode-buffer.js":
/*!********************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/decode-buffer.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// decode-buffer.js

exports.DecodeBuffer = DecodeBuffer;

var preset = __webpack_require__(/*! ./read-core */ "./node_modules/msgpack-lite/lib/read-core.js").preset;

var FlexDecoder = __webpack_require__(/*! ./flex-buffer */ "./node_modules/msgpack-lite/lib/flex-buffer.js").FlexDecoder;

FlexDecoder.mixin(DecodeBuffer.prototype);

function DecodeBuffer(options) {
  if (!(this instanceof DecodeBuffer)) return new DecodeBuffer(options);

  if (options) {
    this.options = options;
    if (options.codec) {
      var codec = this.codec = options.codec;
      if (codec.bufferish) this.bufferish = codec.bufferish;
    }
  }
}

DecodeBuffer.prototype.codec = preset;

DecodeBuffer.prototype.fetch = function() {
  return this.codec.decode(this);
};


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/decode.js":
/*!*************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/decode.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// decode.js

exports.decode = decode;

var DecodeBuffer = __webpack_require__(/*! ./decode-buffer */ "./node_modules/msgpack-lite/lib/decode-buffer.js").DecodeBuffer;

function decode(input, options) {
  var decoder = new DecodeBuffer(options);
  decoder.write(input);
  return decoder.read();
}

/***/ }),

/***/ "./node_modules/msgpack-lite/lib/decoder.js":
/*!**************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/decoder.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// decoder.js

exports.Decoder = Decoder;

var EventLite = __webpack_require__(/*! event-lite */ "./node_modules/event-lite/event-lite.js");
var DecodeBuffer = __webpack_require__(/*! ./decode-buffer */ "./node_modules/msgpack-lite/lib/decode-buffer.js").DecodeBuffer;

function Decoder(options) {
  if (!(this instanceof Decoder)) return new Decoder(options);
  DecodeBuffer.call(this, options);
}

Decoder.prototype = new DecodeBuffer();

EventLite.mixin(Decoder.prototype);

Decoder.prototype.decode = function(chunk) {
  if (arguments.length) this.write(chunk);
  this.flush();
};

Decoder.prototype.push = function(chunk) {
  this.emit("data", chunk);
};

Decoder.prototype.end = function(chunk) {
  this.decode(chunk);
  this.emit("end");
};


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/encode-buffer.js":
/*!********************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/encode-buffer.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// encode-buffer.js

exports.EncodeBuffer = EncodeBuffer;

var preset = __webpack_require__(/*! ./write-core */ "./node_modules/msgpack-lite/lib/write-core.js").preset;

var FlexEncoder = __webpack_require__(/*! ./flex-buffer */ "./node_modules/msgpack-lite/lib/flex-buffer.js").FlexEncoder;

FlexEncoder.mixin(EncodeBuffer.prototype);

function EncodeBuffer(options) {
  if (!(this instanceof EncodeBuffer)) return new EncodeBuffer(options);

  if (options) {
    this.options = options;
    if (options.codec) {
      var codec = this.codec = options.codec;
      if (codec.bufferish) this.bufferish = codec.bufferish;
    }
  }
}

EncodeBuffer.prototype.codec = preset;

EncodeBuffer.prototype.write = function(input) {
  this.codec.encode(this, input);
};


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/encode.js":
/*!*************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/encode.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// encode.js

exports.encode = encode;

var EncodeBuffer = __webpack_require__(/*! ./encode-buffer */ "./node_modules/msgpack-lite/lib/encode-buffer.js").EncodeBuffer;

function encode(input, options) {
  var encoder = new EncodeBuffer(options);
  encoder.write(input);
  return encoder.read();
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/encoder.js":
/*!**************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/encoder.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// encoder.js

exports.Encoder = Encoder;

var EventLite = __webpack_require__(/*! event-lite */ "./node_modules/event-lite/event-lite.js");
var EncodeBuffer = __webpack_require__(/*! ./encode-buffer */ "./node_modules/msgpack-lite/lib/encode-buffer.js").EncodeBuffer;

function Encoder(options) {
  if (!(this instanceof Encoder)) return new Encoder(options);
  EncodeBuffer.call(this, options);
}

Encoder.prototype = new EncodeBuffer();

EventLite.mixin(Encoder.prototype);

Encoder.prototype.encode = function(chunk) {
  this.write(chunk);
  this.emit("data", this.read());
};

Encoder.prototype.end = function(chunk) {
  if (arguments.length) this.encode(chunk);
  this.flush();
  this.emit("end");
};


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/ext-buffer.js":
/*!*****************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/ext-buffer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// ext-buffer.js

exports.ExtBuffer = ExtBuffer;

var Bufferish = __webpack_require__(/*! ./bufferish */ "./node_modules/msgpack-lite/lib/bufferish.js");

function ExtBuffer(buffer, type) {
  if (!(this instanceof ExtBuffer)) return new ExtBuffer(buffer, type);
  this.buffer = Bufferish.from(buffer);
  this.type = type;
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/ext-packer.js":
/*!*****************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/ext-packer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// ext-packer.js

exports.setExtPackers = setExtPackers;

var Bufferish = __webpack_require__(/*! ./bufferish */ "./node_modules/msgpack-lite/lib/bufferish.js");
var Buffer = Bufferish.global;
var packTypedArray = Bufferish.Uint8Array.from;
var _encode;

var ERROR_COLUMNS = {name: 1, message: 1, stack: 1, columnNumber: 1, fileName: 1, lineNumber: 1};

function setExtPackers(codec) {
  codec.addExtPacker(0x0E, Error, [packError, encode]);
  codec.addExtPacker(0x01, EvalError, [packError, encode]);
  codec.addExtPacker(0x02, RangeError, [packError, encode]);
  codec.addExtPacker(0x03, ReferenceError, [packError, encode]);
  codec.addExtPacker(0x04, SyntaxError, [packError, encode]);
  codec.addExtPacker(0x05, TypeError, [packError, encode]);
  codec.addExtPacker(0x06, URIError, [packError, encode]);

  codec.addExtPacker(0x0A, RegExp, [packRegExp, encode]);
  codec.addExtPacker(0x0B, Boolean, [packValueOf, encode]);
  codec.addExtPacker(0x0C, String, [packValueOf, encode]);
  codec.addExtPacker(0x0D, Date, [Number, encode]);
  codec.addExtPacker(0x0F, Number, [packValueOf, encode]);

  if ("undefined" !== typeof Uint8Array) {
    codec.addExtPacker(0x11, Int8Array, packTypedArray);
    codec.addExtPacker(0x12, Uint8Array, packTypedArray);
    codec.addExtPacker(0x13, Int16Array, packTypedArray);
    codec.addExtPacker(0x14, Uint16Array, packTypedArray);
    codec.addExtPacker(0x15, Int32Array, packTypedArray);
    codec.addExtPacker(0x16, Uint32Array, packTypedArray);
    codec.addExtPacker(0x17, Float32Array, packTypedArray);

    // PhantomJS/1.9.7 doesn't have Float64Array
    if ("undefined" !== typeof Float64Array) {
      codec.addExtPacker(0x18, Float64Array, packTypedArray);
    }

    // IE10 doesn't have Uint8ClampedArray
    if ("undefined" !== typeof Uint8ClampedArray) {
      codec.addExtPacker(0x19, Uint8ClampedArray, packTypedArray);
    }

    codec.addExtPacker(0x1A, ArrayBuffer, packTypedArray);
    codec.addExtPacker(0x1D, DataView, packTypedArray);
  }

  if (Bufferish.hasBuffer) {
    codec.addExtPacker(0x1B, Buffer, Bufferish.from);
  }
}

function encode(input) {
  if (!_encode) _encode = __webpack_require__(/*! ./encode */ "./node_modules/msgpack-lite/lib/encode.js").encode; // lazy load
  return _encode(input);
}

function packValueOf(value) {
  return (value).valueOf();
}

function packRegExp(value) {
  value = RegExp.prototype.toString.call(value).split("/");
  value.shift();
  var out = [value.pop()];
  out.unshift(value.join("/"));
  return out;
}

function packError(value) {
  var out = {};
  for (var key in ERROR_COLUMNS) {
    out[key] = value[key];
  }
  return out;
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/ext-unpacker.js":
/*!*******************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/ext-unpacker.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// ext-unpacker.js

exports.setExtUnpackers = setExtUnpackers;

var Bufferish = __webpack_require__(/*! ./bufferish */ "./node_modules/msgpack-lite/lib/bufferish.js");
var Buffer = Bufferish.global;
var _decode;

var ERROR_COLUMNS = {name: 1, message: 1, stack: 1, columnNumber: 1, fileName: 1, lineNumber: 1};

function setExtUnpackers(codec) {
  codec.addExtUnpacker(0x0E, [decode, unpackError(Error)]);
  codec.addExtUnpacker(0x01, [decode, unpackError(EvalError)]);
  codec.addExtUnpacker(0x02, [decode, unpackError(RangeError)]);
  codec.addExtUnpacker(0x03, [decode, unpackError(ReferenceError)]);
  codec.addExtUnpacker(0x04, [decode, unpackError(SyntaxError)]);
  codec.addExtUnpacker(0x05, [decode, unpackError(TypeError)]);
  codec.addExtUnpacker(0x06, [decode, unpackError(URIError)]);

  codec.addExtUnpacker(0x0A, [decode, unpackRegExp]);
  codec.addExtUnpacker(0x0B, [decode, unpackClass(Boolean)]);
  codec.addExtUnpacker(0x0C, [decode, unpackClass(String)]);
  codec.addExtUnpacker(0x0D, [decode, unpackClass(Date)]);
  codec.addExtUnpacker(0x0F, [decode, unpackClass(Number)]);

  if ("undefined" !== typeof Uint8Array) {
    codec.addExtUnpacker(0x11, unpackClass(Int8Array));
    codec.addExtUnpacker(0x12, unpackClass(Uint8Array));
    codec.addExtUnpacker(0x13, [unpackArrayBuffer, unpackClass(Int16Array)]);
    codec.addExtUnpacker(0x14, [unpackArrayBuffer, unpackClass(Uint16Array)]);
    codec.addExtUnpacker(0x15, [unpackArrayBuffer, unpackClass(Int32Array)]);
    codec.addExtUnpacker(0x16, [unpackArrayBuffer, unpackClass(Uint32Array)]);
    codec.addExtUnpacker(0x17, [unpackArrayBuffer, unpackClass(Float32Array)]);

    // PhantomJS/1.9.7 doesn't have Float64Array
    if ("undefined" !== typeof Float64Array) {
      codec.addExtUnpacker(0x18, [unpackArrayBuffer, unpackClass(Float64Array)]);
    }

    // IE10 doesn't have Uint8ClampedArray
    if ("undefined" !== typeof Uint8ClampedArray) {
      codec.addExtUnpacker(0x19, unpackClass(Uint8ClampedArray));
    }

    codec.addExtUnpacker(0x1A, unpackArrayBuffer);
    codec.addExtUnpacker(0x1D, [unpackArrayBuffer, unpackClass(DataView)]);
  }

  if (Bufferish.hasBuffer) {
    codec.addExtUnpacker(0x1B, unpackClass(Buffer));
  }
}

function decode(input) {
  if (!_decode) _decode = __webpack_require__(/*! ./decode */ "./node_modules/msgpack-lite/lib/decode.js").decode; // lazy load
  return _decode(input);
}

function unpackRegExp(value) {
  return RegExp.apply(null, value);
}

function unpackError(Class) {
  return function(value) {
    var out = new Class();
    for (var key in ERROR_COLUMNS) {
      out[key] = value[key];
    }
    return out;
  };
}

function unpackClass(Class) {
  return function(value) {
    return new Class(value);
  };
}

function unpackArrayBuffer(value) {
  return (new Uint8Array(value)).buffer;
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/ext.js":
/*!**********************************************!*\
  !*** ./node_modules/msgpack-lite/lib/ext.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// ext.js

// load both interfaces
__webpack_require__(/*! ./read-core */ "./node_modules/msgpack-lite/lib/read-core.js");
__webpack_require__(/*! ./write-core */ "./node_modules/msgpack-lite/lib/write-core.js");

exports.createCodec = __webpack_require__(/*! ./codec-base */ "./node_modules/msgpack-lite/lib/codec-base.js").createCodec;


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/flex-buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/flex-buffer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// flex-buffer.js

exports.FlexDecoder = FlexDecoder;
exports.FlexEncoder = FlexEncoder;

var Bufferish = __webpack_require__(/*! ./bufferish */ "./node_modules/msgpack-lite/lib/bufferish.js");

var MIN_BUFFER_SIZE = 2048;
var MAX_BUFFER_SIZE = 65536;
var BUFFER_SHORTAGE = "BUFFER_SHORTAGE";

function FlexDecoder() {
  if (!(this instanceof FlexDecoder)) return new FlexDecoder();
}

function FlexEncoder() {
  if (!(this instanceof FlexEncoder)) return new FlexEncoder();
}

FlexDecoder.mixin = mixinFactory(getDecoderMethods());
FlexDecoder.mixin(FlexDecoder.prototype);

FlexEncoder.mixin = mixinFactory(getEncoderMethods());
FlexEncoder.mixin(FlexEncoder.prototype);

function getDecoderMethods() {
  return {
    bufferish: Bufferish,
    write: write,
    fetch: fetch,
    flush: flush,
    push: push,
    pull: pull,
    read: read,
    reserve: reserve,
    offset: 0
  };

  function write(chunk) {
    var prev = this.offset ? Bufferish.prototype.slice.call(this.buffer, this.offset) : this.buffer;
    this.buffer = prev ? (chunk ? this.bufferish.concat([prev, chunk]) : prev) : chunk;
    this.offset = 0;
  }

  function flush() {
    while (this.offset < this.buffer.length) {
      var start = this.offset;
      var value;
      try {
        value = this.fetch();
      } catch (e) {
        if (e && e.message != BUFFER_SHORTAGE) throw e;
        // rollback
        this.offset = start;
        break;
      }
      this.push(value);
    }
  }

  function reserve(length) {
    var start = this.offset;
    var end = start + length;
    if (end > this.buffer.length) throw new Error(BUFFER_SHORTAGE);
    this.offset = end;
    return start;
  }
}

function getEncoderMethods() {
  return {
    bufferish: Bufferish,
    write: write,
    fetch: fetch,
    flush: flush,
    push: push,
    pull: pull,
    read: read,
    reserve: reserve,
    send: send,
    maxBufferSize: MAX_BUFFER_SIZE,
    minBufferSize: MIN_BUFFER_SIZE,
    offset: 0,
    start: 0
  };

  function fetch() {
    var start = this.start;
    if (start < this.offset) {
      var end = this.start = this.offset;
      return Bufferish.prototype.slice.call(this.buffer, start, end);
    }
  }

  function flush() {
    while (this.start < this.offset) {
      var value = this.fetch();
      if (value) this.push(value);
    }
  }

  function pull() {
    var buffers = this.buffers || (this.buffers = []);
    var chunk = buffers.length > 1 ? this.bufferish.concat(buffers) : buffers[0];
    buffers.length = 0; // buffer exhausted
    return chunk;
  }

  function reserve(length) {
    var req = length | 0;

    if (this.buffer) {
      var size = this.buffer.length;
      var start = this.offset | 0;
      var end = start + req;

      // is it long enough?
      if (end < size) {
        this.offset = end;
        return start;
      }

      // flush current buffer
      this.flush();

      // resize it to 2x current length
      length = Math.max(length, Math.min(size * 2, this.maxBufferSize));
    }

    // minimum buffer size
    length = Math.max(length, this.minBufferSize);

    // allocate new buffer
    this.buffer = this.bufferish.alloc(length);
    this.start = 0;
    this.offset = req;
    return 0;
  }

  function send(buffer) {
    var length = buffer.length;
    if (length > this.minBufferSize) {
      this.flush();
      this.push(buffer);
    } else {
      var offset = this.reserve(length);
      Bufferish.prototype.copy.call(buffer, this.buffer, offset);
    }
  }
}

// common methods

function write() {
  throw new Error("method not implemented: write()");
}

function fetch() {
  throw new Error("method not implemented: fetch()");
}

function read() {
  var length = this.buffers && this.buffers.length;

  // fetch the first result
  if (!length) return this.fetch();

  // flush current buffer
  this.flush();

  // read from the results
  return this.pull();
}

function push(chunk) {
  var buffers = this.buffers || (this.buffers = []);
  buffers.push(chunk);
}

function pull() {
  var buffers = this.buffers || (this.buffers = []);
  return buffers.shift();
}

function mixinFactory(source) {
  return mixin;

  function mixin(target) {
    for (var key in source) {
      target[key] = source[key];
    }
    return target;
  }
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/read-core.js":
/*!****************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/read-core.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// read-core.js

var ExtBuffer = __webpack_require__(/*! ./ext-buffer */ "./node_modules/msgpack-lite/lib/ext-buffer.js").ExtBuffer;
var ExtUnpacker = __webpack_require__(/*! ./ext-unpacker */ "./node_modules/msgpack-lite/lib/ext-unpacker.js");
var readUint8 = __webpack_require__(/*! ./read-format */ "./node_modules/msgpack-lite/lib/read-format.js").readUint8;
var ReadToken = __webpack_require__(/*! ./read-token */ "./node_modules/msgpack-lite/lib/read-token.js");
var CodecBase = __webpack_require__(/*! ./codec-base */ "./node_modules/msgpack-lite/lib/codec-base.js");

CodecBase.install({
  addExtUnpacker: addExtUnpacker,
  getExtUnpacker: getExtUnpacker,
  init: init
});

exports.preset = init.call(CodecBase.preset);

function getDecoder(options) {
  var readToken = ReadToken.getReadToken(options);
  return decode;

  function decode(decoder) {
    var type = readUint8(decoder);
    var func = readToken[type];
    if (!func) throw new Error("Invalid type: " + (type ? ("0x" + type.toString(16)) : type));
    return func(decoder);
  }
}

function init() {
  var options = this.options;
  this.decode = getDecoder(options);

  if (options && options.preset) {
    ExtUnpacker.setExtUnpackers(this);
  }

  return this;
}

function addExtUnpacker(etype, unpacker) {
  var unpackers = this.extUnpackers || (this.extUnpackers = []);
  unpackers[etype] = CodecBase.filter(unpacker);
}

function getExtUnpacker(type) {
  var unpackers = this.extUnpackers || (this.extUnpackers = []);
  return unpackers[type] || extUnpacker;

  function extUnpacker(buffer) {
    return new ExtBuffer(buffer, type);
  }
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/read-format.js":
/*!******************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/read-format.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// read-format.js

var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js");
var Int64Buffer = __webpack_require__(/*! int64-buffer */ "./node_modules/int64-buffer/int64-buffer.js");
var Uint64BE = Int64Buffer.Uint64BE;
var Int64BE = Int64Buffer.Int64BE;

exports.getReadFormat = getReadFormat;
exports.readUint8 = uint8;

var Bufferish = __webpack_require__(/*! ./bufferish */ "./node_modules/msgpack-lite/lib/bufferish.js");
var BufferProto = __webpack_require__(/*! ./bufferish-proto */ "./node_modules/msgpack-lite/lib/bufferish-proto.js");

var HAS_MAP = ("undefined" !== typeof Map);
var NO_ASSERT = true;

function getReadFormat(options) {
  var binarraybuffer = Bufferish.hasArrayBuffer && options && options.binarraybuffer;
  var int64 = options && options.int64;
  var usemap = HAS_MAP && options && options.usemap;

  var readFormat = {
    map: (usemap ? map_to_map : map_to_obj),
    array: array,
    str: str,
    bin: (binarraybuffer ? bin_arraybuffer : bin_buffer),
    ext: ext,
    uint8: uint8,
    uint16: uint16,
    uint32: uint32,
    uint64: read(8, int64 ? readUInt64BE_int64 : readUInt64BE),
    int8: int8,
    int16: int16,
    int32: int32,
    int64: read(8, int64 ? readInt64BE_int64 : readInt64BE),
    float32: read(4, readFloatBE),
    float64: read(8, readDoubleBE)
  };

  return readFormat;
}

function map_to_obj(decoder, len) {
  var value = {};
  var i;
  var k = new Array(len);
  var v = new Array(len);

  var decode = decoder.codec.decode;
  for (i = 0; i < len; i++) {
    k[i] = decode(decoder);
    v[i] = decode(decoder);
  }
  for (i = 0; i < len; i++) {
    value[k[i]] = v[i];
  }
  return value;
}

function map_to_map(decoder, len) {
  var value = new Map();
  var i;
  var k = new Array(len);
  var v = new Array(len);

  var decode = decoder.codec.decode;
  for (i = 0; i < len; i++) {
    k[i] = decode(decoder);
    v[i] = decode(decoder);
  }
  for (i = 0; i < len; i++) {
    value.set(k[i], v[i]);
  }
  return value;
}

function array(decoder, len) {
  var value = new Array(len);
  var decode = decoder.codec.decode;
  for (var i = 0; i < len; i++) {
    value[i] = decode(decoder);
  }
  return value;
}

function str(decoder, len) {
  var start = decoder.reserve(len);
  var end = start + len;
  return BufferProto.toString.call(decoder.buffer, "utf-8", start, end);
}

function bin_buffer(decoder, len) {
  var start = decoder.reserve(len);
  var end = start + len;
  var buf = BufferProto.slice.call(decoder.buffer, start, end);
  return Bufferish.from(buf);
}

function bin_arraybuffer(decoder, len) {
  var start = decoder.reserve(len);
  var end = start + len;
  var buf = BufferProto.slice.call(decoder.buffer, start, end);
  return Bufferish.Uint8Array.from(buf).buffer;
}

function ext(decoder, len) {
  var start = decoder.reserve(len+1);
  var type = decoder.buffer[start++];
  var end = start + len;
  var unpack = decoder.codec.getExtUnpacker(type);
  if (!unpack) throw new Error("Invalid ext type: " + (type ? ("0x" + type.toString(16)) : type));
  var buf = BufferProto.slice.call(decoder.buffer, start, end);
  return unpack(buf);
}

function uint8(decoder) {
  var start = decoder.reserve(1);
  return decoder.buffer[start];
}

function int8(decoder) {
  var start = decoder.reserve(1);
  var value = decoder.buffer[start];
  return (value & 0x80) ? value - 0x100 : value;
}

function uint16(decoder) {
  var start = decoder.reserve(2);
  var buffer = decoder.buffer;
  return (buffer[start++] << 8) | buffer[start];
}

function int16(decoder) {
  var start = decoder.reserve(2);
  var buffer = decoder.buffer;
  var value = (buffer[start++] << 8) | buffer[start];
  return (value & 0x8000) ? value - 0x10000 : value;
}

function uint32(decoder) {
  var start = decoder.reserve(4);
  var buffer = decoder.buffer;
  return (buffer[start++] * 16777216) + (buffer[start++] << 16) + (buffer[start++] << 8) + buffer[start];
}

function int32(decoder) {
  var start = decoder.reserve(4);
  var buffer = decoder.buffer;
  return (buffer[start++] << 24) | (buffer[start++] << 16) | (buffer[start++] << 8) | buffer[start];
}

function read(len, method) {
  return function(decoder) {
    var start = decoder.reserve(len);
    return method.call(decoder.buffer, start, NO_ASSERT);
  };
}

function readUInt64BE(start) {
  return new Uint64BE(this, start).toNumber();
}

function readInt64BE(start) {
  return new Int64BE(this, start).toNumber();
}

function readUInt64BE_int64(start) {
  return new Uint64BE(this, start);
}

function readInt64BE_int64(start) {
  return new Int64BE(this, start);
}

function readFloatBE(start) {
  return ieee754.read(this, start, false, 23, 4);
}

function readDoubleBE(start) {
  return ieee754.read(this, start, false, 52, 8);
}

/***/ }),

/***/ "./node_modules/msgpack-lite/lib/read-token.js":
/*!*****************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/read-token.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// read-token.js

var ReadFormat = __webpack_require__(/*! ./read-format */ "./node_modules/msgpack-lite/lib/read-format.js");

exports.getReadToken = getReadToken;

function getReadToken(options) {
  var format = ReadFormat.getReadFormat(options);

  if (options && options.useraw) {
    return init_useraw(format);
  } else {
    return init_token(format);
  }
}

function init_token(format) {
  var i;
  var token = new Array(256);

  // positive fixint -- 0x00 - 0x7f
  for (i = 0x00; i <= 0x7f; i++) {
    token[i] = constant(i);
  }

  // fixmap -- 0x80 - 0x8f
  for (i = 0x80; i <= 0x8f; i++) {
    token[i] = fix(i - 0x80, format.map);
  }

  // fixarray -- 0x90 - 0x9f
  for (i = 0x90; i <= 0x9f; i++) {
    token[i] = fix(i - 0x90, format.array);
  }

  // fixstr -- 0xa0 - 0xbf
  for (i = 0xa0; i <= 0xbf; i++) {
    token[i] = fix(i - 0xa0, format.str);
  }

  // nil -- 0xc0
  token[0xc0] = constant(null);

  // (never used) -- 0xc1
  token[0xc1] = null;

  // false -- 0xc2
  // true -- 0xc3
  token[0xc2] = constant(false);
  token[0xc3] = constant(true);

  // bin 8 -- 0xc4
  // bin 16 -- 0xc5
  // bin 32 -- 0xc6
  token[0xc4] = flex(format.uint8, format.bin);
  token[0xc5] = flex(format.uint16, format.bin);
  token[0xc6] = flex(format.uint32, format.bin);

  // ext 8 -- 0xc7
  // ext 16 -- 0xc8
  // ext 32 -- 0xc9
  token[0xc7] = flex(format.uint8, format.ext);
  token[0xc8] = flex(format.uint16, format.ext);
  token[0xc9] = flex(format.uint32, format.ext);

  // float 32 -- 0xca
  // float 64 -- 0xcb
  token[0xca] = format.float32;
  token[0xcb] = format.float64;

  // uint 8 -- 0xcc
  // uint 16 -- 0xcd
  // uint 32 -- 0xce
  // uint 64 -- 0xcf
  token[0xcc] = format.uint8;
  token[0xcd] = format.uint16;
  token[0xce] = format.uint32;
  token[0xcf] = format.uint64;

  // int 8 -- 0xd0
  // int 16 -- 0xd1
  // int 32 -- 0xd2
  // int 64 -- 0xd3
  token[0xd0] = format.int8;
  token[0xd1] = format.int16;
  token[0xd2] = format.int32;
  token[0xd3] = format.int64;

  // fixext 1 -- 0xd4
  // fixext 2 -- 0xd5
  // fixext 4 -- 0xd6
  // fixext 8 -- 0xd7
  // fixext 16 -- 0xd8
  token[0xd4] = fix(1, format.ext);
  token[0xd5] = fix(2, format.ext);
  token[0xd6] = fix(4, format.ext);
  token[0xd7] = fix(8, format.ext);
  token[0xd8] = fix(16, format.ext);

  // str 8 -- 0xd9
  // str 16 -- 0xda
  // str 32 -- 0xdb
  token[0xd9] = flex(format.uint8, format.str);
  token[0xda] = flex(format.uint16, format.str);
  token[0xdb] = flex(format.uint32, format.str);

  // array 16 -- 0xdc
  // array 32 -- 0xdd
  token[0xdc] = flex(format.uint16, format.array);
  token[0xdd] = flex(format.uint32, format.array);

  // map 16 -- 0xde
  // map 32 -- 0xdf
  token[0xde] = flex(format.uint16, format.map);
  token[0xdf] = flex(format.uint32, format.map);

  // negative fixint -- 0xe0 - 0xff
  for (i = 0xe0; i <= 0xff; i++) {
    token[i] = constant(i - 0x100);
  }

  return token;
}

function init_useraw(format) {
  var i;
  var token = init_token(format).slice();

  // raw 8 -- 0xd9
  // raw 16 -- 0xda
  // raw 32 -- 0xdb
  token[0xd9] = token[0xc4];
  token[0xda] = token[0xc5];
  token[0xdb] = token[0xc6];

  // fixraw -- 0xa0 - 0xbf
  for (i = 0xa0; i <= 0xbf; i++) {
    token[i] = fix(i - 0xa0, format.bin);
  }

  return token;
}

function constant(value) {
  return function() {
    return value;
  };
}

function flex(lenFunc, decodeFunc) {
  return function(decoder) {
    var len = lenFunc(decoder);
    return decodeFunc(decoder, len);
  };
}

function fix(len, method) {
  return function(decoder) {
    return method(decoder, len);
  };
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/write-core.js":
/*!*****************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/write-core.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// write-core.js

var ExtBuffer = __webpack_require__(/*! ./ext-buffer */ "./node_modules/msgpack-lite/lib/ext-buffer.js").ExtBuffer;
var ExtPacker = __webpack_require__(/*! ./ext-packer */ "./node_modules/msgpack-lite/lib/ext-packer.js");
var WriteType = __webpack_require__(/*! ./write-type */ "./node_modules/msgpack-lite/lib/write-type.js");
var CodecBase = __webpack_require__(/*! ./codec-base */ "./node_modules/msgpack-lite/lib/codec-base.js");

CodecBase.install({
  addExtPacker: addExtPacker,
  getExtPacker: getExtPacker,
  init: init
});

exports.preset = init.call(CodecBase.preset);

function getEncoder(options) {
  var writeType = WriteType.getWriteType(options);
  return encode;

  function encode(encoder, value) {
    var func = writeType[typeof value];
    if (!func) throw new Error("Unsupported type \"" + (typeof value) + "\": " + value);
    func(encoder, value);
  }
}

function init() {
  var options = this.options;
  this.encode = getEncoder(options);

  if (options && options.preset) {
    ExtPacker.setExtPackers(this);
  }

  return this;
}

function addExtPacker(etype, Class, packer) {
  packer = CodecBase.filter(packer);
  var name = Class.name;
  if (name && name !== "Object") {
    var packers = this.extPackers || (this.extPackers = {});
    packers[name] = extPacker;
  } else {
    // fallback for IE
    var list = this.extEncoderList || (this.extEncoderList = []);
    list.unshift([Class, extPacker]);
  }

  function extPacker(value) {
    if (packer) value = packer(value);
    return new ExtBuffer(value, etype);
  }
}

function getExtPacker(value) {
  var packers = this.extPackers || (this.extPackers = {});
  var c = value.constructor;
  var e = c && c.name && packers[c.name];
  if (e) return e;

  // fallback for IE
  var list = this.extEncoderList || (this.extEncoderList = []);
  var len = list.length;
  for (var i = 0; i < len; i++) {
    var pair = list[i];
    if (c === pair[0]) return pair[1];
  }
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/write-token.js":
/*!******************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/write-token.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// write-token.js

var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js");
var Int64Buffer = __webpack_require__(/*! int64-buffer */ "./node_modules/int64-buffer/int64-buffer.js");
var Uint64BE = Int64Buffer.Uint64BE;
var Int64BE = Int64Buffer.Int64BE;

var uint8 = __webpack_require__(/*! ./write-uint8 */ "./node_modules/msgpack-lite/lib/write-uint8.js").uint8;
var Bufferish = __webpack_require__(/*! ./bufferish */ "./node_modules/msgpack-lite/lib/bufferish.js");
var Buffer = Bufferish.global;
var IS_BUFFER_SHIM = Bufferish.hasBuffer && ("TYPED_ARRAY_SUPPORT" in Buffer);
var NO_TYPED_ARRAY = IS_BUFFER_SHIM && !Buffer.TYPED_ARRAY_SUPPORT;
var Buffer_prototype = Bufferish.hasBuffer && Buffer.prototype || {};

exports.getWriteToken = getWriteToken;

function getWriteToken(options) {
  if (options && options.uint8array) {
    return init_uint8array();
  } else if (NO_TYPED_ARRAY || (Bufferish.hasBuffer && options && options.safe)) {
    return init_safe();
  } else {
    return init_token();
  }
}

function init_uint8array() {
  var token = init_token();

  // float 32 -- 0xca
  // float 64 -- 0xcb
  token[0xca] = writeN(0xca, 4, writeFloatBE);
  token[0xcb] = writeN(0xcb, 8, writeDoubleBE);

  return token;
}

// Node.js and browsers with TypedArray

function init_token() {
  // (immediate values)
  // positive fixint -- 0x00 - 0x7f
  // nil -- 0xc0
  // false -- 0xc2
  // true -- 0xc3
  // negative fixint -- 0xe0 - 0xff
  var token = uint8.slice();

  // bin 8 -- 0xc4
  // bin 16 -- 0xc5
  // bin 32 -- 0xc6
  token[0xc4] = write1(0xc4);
  token[0xc5] = write2(0xc5);
  token[0xc6] = write4(0xc6);

  // ext 8 -- 0xc7
  // ext 16 -- 0xc8
  // ext 32 -- 0xc9
  token[0xc7] = write1(0xc7);
  token[0xc8] = write2(0xc8);
  token[0xc9] = write4(0xc9);

  // float 32 -- 0xca
  // float 64 -- 0xcb
  token[0xca] = writeN(0xca, 4, (Buffer_prototype.writeFloatBE || writeFloatBE), true);
  token[0xcb] = writeN(0xcb, 8, (Buffer_prototype.writeDoubleBE || writeDoubleBE), true);

  // uint 8 -- 0xcc
  // uint 16 -- 0xcd
  // uint 32 -- 0xce
  // uint 64 -- 0xcf
  token[0xcc] = write1(0xcc);
  token[0xcd] = write2(0xcd);
  token[0xce] = write4(0xce);
  token[0xcf] = writeN(0xcf, 8, writeUInt64BE);

  // int 8 -- 0xd0
  // int 16 -- 0xd1
  // int 32 -- 0xd2
  // int 64 -- 0xd3
  token[0xd0] = write1(0xd0);
  token[0xd1] = write2(0xd1);
  token[0xd2] = write4(0xd2);
  token[0xd3] = writeN(0xd3, 8, writeInt64BE);

  // str 8 -- 0xd9
  // str 16 -- 0xda
  // str 32 -- 0xdb
  token[0xd9] = write1(0xd9);
  token[0xda] = write2(0xda);
  token[0xdb] = write4(0xdb);

  // array 16 -- 0xdc
  // array 32 -- 0xdd
  token[0xdc] = write2(0xdc);
  token[0xdd] = write4(0xdd);

  // map 16 -- 0xde
  // map 32 -- 0xdf
  token[0xde] = write2(0xde);
  token[0xdf] = write4(0xdf);

  return token;
}

// safe mode: for old browsers and who needs asserts

function init_safe() {
  // (immediate values)
  // positive fixint -- 0x00 - 0x7f
  // nil -- 0xc0
  // false -- 0xc2
  // true -- 0xc3
  // negative fixint -- 0xe0 - 0xff
  var token = uint8.slice();

  // bin 8 -- 0xc4
  // bin 16 -- 0xc5
  // bin 32 -- 0xc6
  token[0xc4] = writeN(0xc4, 1, Buffer.prototype.writeUInt8);
  token[0xc5] = writeN(0xc5, 2, Buffer.prototype.writeUInt16BE);
  token[0xc6] = writeN(0xc6, 4, Buffer.prototype.writeUInt32BE);

  // ext 8 -- 0xc7
  // ext 16 -- 0xc8
  // ext 32 -- 0xc9
  token[0xc7] = writeN(0xc7, 1, Buffer.prototype.writeUInt8);
  token[0xc8] = writeN(0xc8, 2, Buffer.prototype.writeUInt16BE);
  token[0xc9] = writeN(0xc9, 4, Buffer.prototype.writeUInt32BE);

  // float 32 -- 0xca
  // float 64 -- 0xcb
  token[0xca] = writeN(0xca, 4, Buffer.prototype.writeFloatBE);
  token[0xcb] = writeN(0xcb, 8, Buffer.prototype.writeDoubleBE);

  // uint 8 -- 0xcc
  // uint 16 -- 0xcd
  // uint 32 -- 0xce
  // uint 64 -- 0xcf
  token[0xcc] = writeN(0xcc, 1, Buffer.prototype.writeUInt8);
  token[0xcd] = writeN(0xcd, 2, Buffer.prototype.writeUInt16BE);
  token[0xce] = writeN(0xce, 4, Buffer.prototype.writeUInt32BE);
  token[0xcf] = writeN(0xcf, 8, writeUInt64BE);

  // int 8 -- 0xd0
  // int 16 -- 0xd1
  // int 32 -- 0xd2
  // int 64 -- 0xd3
  token[0xd0] = writeN(0xd0, 1, Buffer.prototype.writeInt8);
  token[0xd1] = writeN(0xd1, 2, Buffer.prototype.writeInt16BE);
  token[0xd2] = writeN(0xd2, 4, Buffer.prototype.writeInt32BE);
  token[0xd3] = writeN(0xd3, 8, writeInt64BE);

  // str 8 -- 0xd9
  // str 16 -- 0xda
  // str 32 -- 0xdb
  token[0xd9] = writeN(0xd9, 1, Buffer.prototype.writeUInt8);
  token[0xda] = writeN(0xda, 2, Buffer.prototype.writeUInt16BE);
  token[0xdb] = writeN(0xdb, 4, Buffer.prototype.writeUInt32BE);

  // array 16 -- 0xdc
  // array 32 -- 0xdd
  token[0xdc] = writeN(0xdc, 2, Buffer.prototype.writeUInt16BE);
  token[0xdd] = writeN(0xdd, 4, Buffer.prototype.writeUInt32BE);

  // map 16 -- 0xde
  // map 32 -- 0xdf
  token[0xde] = writeN(0xde, 2, Buffer.prototype.writeUInt16BE);
  token[0xdf] = writeN(0xdf, 4, Buffer.prototype.writeUInt32BE);

  return token;
}

function write1(type) {
  return function(encoder, value) {
    var offset = encoder.reserve(2);
    var buffer = encoder.buffer;
    buffer[offset++] = type;
    buffer[offset] = value;
  };
}

function write2(type) {
  return function(encoder, value) {
    var offset = encoder.reserve(3);
    var buffer = encoder.buffer;
    buffer[offset++] = type;
    buffer[offset++] = value >>> 8;
    buffer[offset] = value;
  };
}

function write4(type) {
  return function(encoder, value) {
    var offset = encoder.reserve(5);
    var buffer = encoder.buffer;
    buffer[offset++] = type;
    buffer[offset++] = value >>> 24;
    buffer[offset++] = value >>> 16;
    buffer[offset++] = value >>> 8;
    buffer[offset] = value;
  };
}

function writeN(type, len, method, noAssert) {
  return function(encoder, value) {
    var offset = encoder.reserve(len + 1);
    encoder.buffer[offset++] = type;
    method.call(encoder.buffer, value, offset, noAssert);
  };
}

function writeUInt64BE(value, offset) {
  new Uint64BE(this, offset, value);
}

function writeInt64BE(value, offset) {
  new Int64BE(this, offset, value);
}

function writeFloatBE(value, offset) {
  ieee754.write(this, value, offset, false, 23, 4);
}

function writeDoubleBE(value, offset) {
  ieee754.write(this, value, offset, false, 52, 8);
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/write-type.js":
/*!*****************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/write-type.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// write-type.js

var IS_ARRAY = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");
var Int64Buffer = __webpack_require__(/*! int64-buffer */ "./node_modules/int64-buffer/int64-buffer.js");
var Uint64BE = Int64Buffer.Uint64BE;
var Int64BE = Int64Buffer.Int64BE;

var Bufferish = __webpack_require__(/*! ./bufferish */ "./node_modules/msgpack-lite/lib/bufferish.js");
var BufferProto = __webpack_require__(/*! ./bufferish-proto */ "./node_modules/msgpack-lite/lib/bufferish-proto.js");
var WriteToken = __webpack_require__(/*! ./write-token */ "./node_modules/msgpack-lite/lib/write-token.js");
var uint8 = __webpack_require__(/*! ./write-uint8 */ "./node_modules/msgpack-lite/lib/write-uint8.js").uint8;
var ExtBuffer = __webpack_require__(/*! ./ext-buffer */ "./node_modules/msgpack-lite/lib/ext-buffer.js").ExtBuffer;

var HAS_UINT8ARRAY = ("undefined" !== typeof Uint8Array);
var HAS_MAP = ("undefined" !== typeof Map);

var extmap = [];
extmap[1] = 0xd4;
extmap[2] = 0xd5;
extmap[4] = 0xd6;
extmap[8] = 0xd7;
extmap[16] = 0xd8;

exports.getWriteType = getWriteType;

function getWriteType(options) {
  var token = WriteToken.getWriteToken(options);
  var useraw = options && options.useraw;
  var binarraybuffer = HAS_UINT8ARRAY && options && options.binarraybuffer;
  var isBuffer = binarraybuffer ? Bufferish.isArrayBuffer : Bufferish.isBuffer;
  var bin = binarraybuffer ? bin_arraybuffer : bin_buffer;
  var usemap = HAS_MAP && options && options.usemap;
  var map = usemap ? map_to_map : obj_to_map;

  var writeType = {
    "boolean": bool,
    "function": nil,
    "number": number,
    "object": (useraw ? object_raw : object),
    "string": _string(useraw ? raw_head_size : str_head_size),
    "symbol": nil,
    "undefined": nil
  };

  return writeType;

  // false -- 0xc2
  // true -- 0xc3
  function bool(encoder, value) {
    var type = value ? 0xc3 : 0xc2;
    token[type](encoder, value);
  }

  function number(encoder, value) {
    var ivalue = value | 0;
    var type;
    if (value !== ivalue) {
      // float 64 -- 0xcb
      type = 0xcb;
      token[type](encoder, value);
      return;
    } else if (-0x20 <= ivalue && ivalue <= 0x7F) {
      // positive fixint -- 0x00 - 0x7f
      // negative fixint -- 0xe0 - 0xff
      type = ivalue & 0xFF;
    } else if (0 <= ivalue) {
      // uint 8 -- 0xcc
      // uint 16 -- 0xcd
      // uint 32 -- 0xce
      type = (ivalue <= 0xFF) ? 0xcc : (ivalue <= 0xFFFF) ? 0xcd : 0xce;
    } else {
      // int 8 -- 0xd0
      // int 16 -- 0xd1
      // int 32 -- 0xd2
      type = (-0x80 <= ivalue) ? 0xd0 : (-0x8000 <= ivalue) ? 0xd1 : 0xd2;
    }
    token[type](encoder, ivalue);
  }

  // uint 64 -- 0xcf
  function uint64(encoder, value) {
    var type = 0xcf;
    token[type](encoder, value.toArray());
  }

  // int 64 -- 0xd3
  function int64(encoder, value) {
    var type = 0xd3;
    token[type](encoder, value.toArray());
  }

  // str 8 -- 0xd9
  // str 16 -- 0xda
  // str 32 -- 0xdb
  // fixstr -- 0xa0 - 0xbf
  function str_head_size(length) {
    return (length < 32) ? 1 : (length <= 0xFF) ? 2 : (length <= 0xFFFF) ? 3 : 5;
  }

  // raw 16 -- 0xda
  // raw 32 -- 0xdb
  // fixraw -- 0xa0 - 0xbf
  function raw_head_size(length) {
    return (length < 32) ? 1 : (length <= 0xFFFF) ? 3 : 5;
  }

  function _string(head_size) {
    return string;

    function string(encoder, value) {
      // prepare buffer
      var length = value.length;
      var maxsize = 5 + length * 3;
      encoder.offset = encoder.reserve(maxsize);
      var buffer = encoder.buffer;

      // expected header size
      var expected = head_size(length);

      // expected start point
      var start = encoder.offset + expected;

      // write string
      length = BufferProto.write.call(buffer, value, start);

      // actual header size
      var actual = head_size(length);

      // move content when needed
      if (expected !== actual) {
        var targetStart = start + actual - expected;
        var end = start + length;
        BufferProto.copy.call(buffer, buffer, targetStart, start, end);
      }

      // write header
      var type = (actual === 1) ? (0xa0 + length) : (actual <= 3) ? (0xd7 + actual) : 0xdb;
      token[type](encoder, length);

      // move cursor
      encoder.offset += length;
    }
  }

  function object(encoder, value) {
    // null
    if (value === null) return nil(encoder, value);

    // Buffer
    if (isBuffer(value)) return bin(encoder, value);

    // Array
    if (IS_ARRAY(value)) return array(encoder, value);

    // int64-buffer objects
    if (Uint64BE.isUint64BE(value)) return uint64(encoder, value);
    if (Int64BE.isInt64BE(value)) return int64(encoder, value);

    // ext formats
    var packer = encoder.codec.getExtPacker(value);
    if (packer) value = packer(value);
    if (value instanceof ExtBuffer) return ext(encoder, value);

    // plain old Objects or Map
    map(encoder, value);
  }

  function object_raw(encoder, value) {
    // Buffer
    if (isBuffer(value)) return raw(encoder, value);

    // others
    object(encoder, value);
  }

  // nil -- 0xc0
  function nil(encoder, value) {
    var type = 0xc0;
    token[type](encoder, value);
  }

  // fixarray -- 0x90 - 0x9f
  // array 16 -- 0xdc
  // array 32 -- 0xdd
  function array(encoder, value) {
    var length = value.length;
    var type = (length < 16) ? (0x90 + length) : (length <= 0xFFFF) ? 0xdc : 0xdd;
    token[type](encoder, length);

    var encode = encoder.codec.encode;
    for (var i = 0; i < length; i++) {
      encode(encoder, value[i]);
    }
  }

  // bin 8 -- 0xc4
  // bin 16 -- 0xc5
  // bin 32 -- 0xc6
  function bin_buffer(encoder, value) {
    var length = value.length;
    var type = (length < 0xFF) ? 0xc4 : (length <= 0xFFFF) ? 0xc5 : 0xc6;
    token[type](encoder, length);
    encoder.send(value);
  }

  function bin_arraybuffer(encoder, value) {
    bin_buffer(encoder, new Uint8Array(value));
  }

  // fixext 1 -- 0xd4
  // fixext 2 -- 0xd5
  // fixext 4 -- 0xd6
  // fixext 8 -- 0xd7
  // fixext 16 -- 0xd8
  // ext 8 -- 0xc7
  // ext 16 -- 0xc8
  // ext 32 -- 0xc9
  function ext(encoder, value) {
    var buffer = value.buffer;
    var length = buffer.length;
    var type = extmap[length] || ((length < 0xFF) ? 0xc7 : (length <= 0xFFFF) ? 0xc8 : 0xc9);
    token[type](encoder, length);
    uint8[value.type](encoder);
    encoder.send(buffer);
  }

  // fixmap -- 0x80 - 0x8f
  // map 16 -- 0xde
  // map 32 -- 0xdf
  function obj_to_map(encoder, value) {
    var keys = Object.keys(value);
    var length = keys.length;
    var type = (length < 16) ? (0x80 + length) : (length <= 0xFFFF) ? 0xde : 0xdf;
    token[type](encoder, length);

    var encode = encoder.codec.encode;
    keys.forEach(function(key) {
      encode(encoder, key);
      encode(encoder, value[key]);
    });
  }

  // fixmap -- 0x80 - 0x8f
  // map 16 -- 0xde
  // map 32 -- 0xdf
  function map_to_map(encoder, value) {
    if (!(value instanceof Map)) return obj_to_map(encoder, value);

    var length = value.size;
    var type = (length < 16) ? (0x80 + length) : (length <= 0xFFFF) ? 0xde : 0xdf;
    token[type](encoder, length);

    var encode = encoder.codec.encode;
    value.forEach(function(val, key, m) {
      encode(encoder, key);
      encode(encoder, val);
    });
  }

  // raw 16 -- 0xda
  // raw 32 -- 0xdb
  // fixraw -- 0xa0 - 0xbf
  function raw(encoder, value) {
    var length = value.length;
    var type = (length < 32) ? (0xa0 + length) : (length <= 0xFFFF) ? 0xda : 0xdb;
    token[type](encoder, length);
    encoder.send(value);
  }
}


/***/ }),

/***/ "./node_modules/msgpack-lite/lib/write-uint8.js":
/*!******************************************************!*\
  !*** ./node_modules/msgpack-lite/lib/write-uint8.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// write-unit8.js

var constant = exports.uint8 = new Array(256);

for (var i = 0x00; i <= 0xFF; i++) {
  constant[i] = write0(i);
}

function write0(type) {
  return function(encoder) {
    var offset = encoder.reserve(1);
    encoder.buffer[offset] = type;
  };
}


/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/pathval/index.js":
/*!***************************************!*\
  !*** ./node_modules/pathval/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* !
 * Chai - pathval utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * @see https://github.com/logicalparadox/filtr
 * MIT Licensed
 */

/**
 * ### .hasProperty(object, name)
 *
 * This allows checking whether an object has own
 * or inherited from prototype chain named property.
 *
 * Basically does the same thing as the `in`
 * operator but works properly with null/undefined values
 * and other primitives.
 *
 *     var obj = {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *
 * The following would be the results.
 *
 *     hasProperty(obj, 'str');  // true
 *     hasProperty(obj, 'constructor');  // true
 *     hasProperty(obj, 'bar');  // false
 *
 *     hasProperty(obj.str, 'length'); // true
 *     hasProperty(obj.str, 1);  // true
 *     hasProperty(obj.str, 5);  // false
 *
 *     hasProperty(obj.arr, 'length');  // true
 *     hasProperty(obj.arr, 2);  // true
 *     hasProperty(obj.arr, 3);  // false
 *
 * @param {Object} object
 * @param {String|Symbol} name
 * @returns {Boolean} whether it exists
 * @namespace Utils
 * @name hasProperty
 * @api public
 */

function hasProperty(obj, name) {
  if (typeof obj === 'undefined' || obj === null) {
    return false;
  }

  // The `in` operator does not work with primitives.
  return name in Object(obj);
}

/* !
 * ## parsePath(path)
 *
 * Helper function used to parse string object
 * paths. Use in conjunction with `internalGetPathValue`.
 *
 *      var parsed = parsePath('myobject.property.subprop');
 *
 * ### Paths:
 *
 * * Can be infinitely deep and nested.
 * * Arrays are also valid using the formal `myobject.document[3].property`.
 * * Literal dots and brackets (not delimiter) must be backslash-escaped.
 *
 * @param {String} path
 * @returns {Object} parsed
 * @api private
 */

function parsePath(path) {
  var str = path.replace(/([^\\])\[/g, '$1.[');
  var parts = str.match(/(\\\.|[^.]+?)+/g);
  return parts.map(function mapMatches(value) {
    var regexp = /^\[(\d+)\]$/;
    var mArr = regexp.exec(value);
    var parsed = null;
    if (mArr) {
      parsed = { i: parseFloat(mArr[1]) };
    } else {
      parsed = { p: value.replace(/\\([.\[\]])/g, '$1') };
    }

    return parsed;
  });
}

/* !
 * ## internalGetPathValue(obj, parsed[, pathDepth])
 *
 * Helper companion function for `.parsePath` that returns
 * the value located at the parsed address.
 *
 *      var value = getPathValue(obj, parsed);
 *
 * @param {Object} object to search against
 * @param {Object} parsed definition from `parsePath`.
 * @param {Number} depth (nesting level) of the property we want to retrieve
 * @returns {Object|Undefined} value
 * @api private
 */

function internalGetPathValue(obj, parsed, pathDepth) {
  var temporaryValue = obj;
  var res = null;
  pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);

  for (var i = 0; i < pathDepth; i++) {
    var part = parsed[i];
    if (temporaryValue) {
      if (typeof part.p === 'undefined') {
        temporaryValue = temporaryValue[part.i];
      } else {
        temporaryValue = temporaryValue[part.p];
      }

      if (i === (pathDepth - 1)) {
        res = temporaryValue;
      }
    }
  }

  return res;
}

/* !
 * ## internalSetPathValue(obj, value, parsed)
 *
 * Companion function for `parsePath` that sets
 * the value located at a parsed address.
 *
 *  internalSetPathValue(obj, 'value', parsed);
 *
 * @param {Object} object to search and define on
 * @param {*} value to use upon set
 * @param {Object} parsed definition from `parsePath`
 * @api private
 */

function internalSetPathValue(obj, val, parsed) {
  var tempObj = obj;
  var pathDepth = parsed.length;
  var part = null;
  // Here we iterate through every part of the path
  for (var i = 0; i < pathDepth; i++) {
    var propName = null;
    var propVal = null;
    part = parsed[i];

    // If it's the last part of the path, we set the 'propName' value with the property name
    if (i === (pathDepth - 1)) {
      propName = typeof part.p === 'undefined' ? part.i : part.p;
      // Now we set the property with the name held by 'propName' on object with the desired val
      tempObj[propName] = val;
    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {
      tempObj = tempObj[part.p];
    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {
      tempObj = tempObj[part.i];
    } else {
      // If the obj doesn't have the property we create one with that name to define it
      var next = parsed[i + 1];
      // Here we set the name of the property which will be defined
      propName = typeof part.p === 'undefined' ? part.i : part.p;
      // Here we decide if this property will be an array or a new object
      propVal = typeof next.p === 'undefined' ? [] : {};
      tempObj[propName] = propVal;
      tempObj = tempObj[propName];
    }
  }
}

/**
 * ### .getPathInfo(object, path)
 *
 * This allows the retrieval of property info in an
 * object given a string path.
 *
 * The path info consists of an object with the
 * following properties:
 *
 * * parent - The parent object of the property referenced by `path`
 * * name - The name of the final property, a number if it was an array indexer
 * * value - The value of the property, if it exists, otherwise `undefined`
 * * exists - Whether the property exists or not
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} info
 * @namespace Utils
 * @name getPathInfo
 * @api public
 */

function getPathInfo(obj, path) {
  var parsed = parsePath(path);
  var last = parsed[parsed.length - 1];
  var info = {
    parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,
    name: last.p || last.i,
    value: internalGetPathValue(obj, parsed),
  };
  info.exists = hasProperty(info.parent, info.name);

  return info;
}

/**
 * ### .getPathValue(object, path)
 *
 * This allows the retrieval of values in an
 * object given a string path.
 *
 *     var obj = {
 *         prop1: {
 *             arr: ['a', 'b', 'c']
 *           , str: 'Hello'
 *         }
 *       , prop2: {
 *             arr: [ { nested: 'Universe' } ]
 *           , str: 'Hello again!'
 *         }
 *     }
 *
 * The following would be the results.
 *
 *     getPathValue(obj, 'prop1.str'); // Hello
 *     getPathValue(obj, 'prop1.att[2]'); // b
 *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} value or `undefined`
 * @namespace Utils
 * @name getPathValue
 * @api public
 */

function getPathValue(obj, path) {
  var info = getPathInfo(obj, path);
  return info.value;
}

/**
 * ### .setPathValue(object, path, value)
 *
 * Define the value in an object at a given string path.
 *
 * ```js
 * var obj = {
 *     prop1: {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *   , prop2: {
 *         arr: [ { nested: 'Universe' } ]
 *       , str: 'Hello again!'
 *     }
 * };
 * ```
 *
 * The following would be acceptable.
 *
 * ```js
 * var properties = require('tea-properties');
 * properties.set(obj, 'prop1.str', 'Hello Universe!');
 * properties.set(obj, 'prop1.arr[2]', 'B');
 * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });
 * ```
 *
 * @param {Object} object
 * @param {String} path
 * @param {Mixed} value
 * @api private
 */

function setPathValue(obj, path, val) {
  var parsed = parsePath(path);
  internalSetPathValue(obj, val, parsed);
  return obj;
}

module.exports = {
  hasProperty: hasProperty,
  getPathInfo: getPathInfo,
  getPathValue: getPathValue,
  setPathValue: setPathValue,
};


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/type-detect/type-detect.js":
/*!*************************************************!*\
  !*** ./node_modules/type-detect/type-detect.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {
	 true ? module.exports = factory() :
	undefined;
}(this, (function () { 'use strict';

/* !
 * type-detect
 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var promiseExists = typeof Promise === 'function';

/* eslint-disable no-undef */
var globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist

var symbolExists = typeof Symbol !== 'undefined';
var mapExists = typeof Map !== 'undefined';
var setExists = typeof Set !== 'undefined';
var weakMapExists = typeof WeakMap !== 'undefined';
var weakSetExists = typeof WeakSet !== 'undefined';
var dataViewExists = typeof DataView !== 'undefined';
var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());
var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());
var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';
var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());
var toStringLeftSliceLength = 8;
var toStringRightSliceLength = -1;
/**
 * ### typeOf (obj)
 *
 * Uses `Object.prototype.toString` to determine the type of an object,
 * normalising behaviour across engine versions & well optimised.
 *
 * @param {Mixed} object
 * @return {String} object type
 * @api public
 */
function typeDetect(obj) {
  /* ! Speed optimisation
   * Pre:
   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)
   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)
   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)
   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)
   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)
   * Post:
   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)
   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)
   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)
   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)
   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)
   */
  var typeofObj = typeof obj;
  if (typeofObj !== 'object') {
    return typeofObj;
  }

  /* ! Speed optimisation
   * Pre:
   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)
   * Post:
   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)
   */
  if (obj === null) {
    return 'null';
  }

  /* ! Spec Conformance
   * Test: `Object.prototype.toString.call(window)``
   *  - Node === "[object global]"
   *  - Chrome === "[object global]"
   *  - Firefox === "[object Window]"
   *  - PhantomJS === "[object Window]"
   *  - Safari === "[object Window]"
   *  - IE 11 === "[object Window]"
   *  - IE Edge === "[object Window]"
   * Test: `Object.prototype.toString.call(this)``
   *  - Chrome Worker === "[object global]"
   *  - Firefox Worker === "[object DedicatedWorkerGlobalScope]"
   *  - Safari Worker === "[object DedicatedWorkerGlobalScope]"
   *  - IE 11 Worker === "[object WorkerGlobalScope]"
   *  - IE Edge Worker === "[object WorkerGlobalScope]"
   */
  if (obj === globalObject) {
    return 'global';
  }

  /* ! Speed optimisation
   * Pre:
   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)
   * Post:
   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)
   */
  if (
    Array.isArray(obj) &&
    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))
  ) {
    return 'Array';
  }

  // Not caching existence of `window` and related properties due to potential
  // for `window` to be unset before tests in quasi-browser environments.
  if (typeof window === 'object' && window !== null) {
    /* ! Spec Conformance
     * (https://html.spec.whatwg.org/multipage/browsers.html#location)
     * WhatWG HTML$7.7.3 - The `Location` interface
     * Test: `Object.prototype.toString.call(window.location)``
     *  - IE <=11 === "[object Object]"
     *  - IE Edge <=13 === "[object Object]"
     */
    if (typeof window.location === 'object' && obj === window.location) {
      return 'Location';
    }

    /* ! Spec Conformance
     * (https://html.spec.whatwg.org/#document)
     * WhatWG HTML$3.1.1 - The `Document` object
     * Note: Most browsers currently adher to the W3C DOM Level 2 spec
     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)
     *       which suggests that browsers should use HTMLTableCellElement for
     *       both TD and TH elements. WhatWG separates these.
     *       WhatWG HTML states:
     *         > For historical reasons, Window objects must also have a
     *         > writable, configurable, non-enumerable property named
     *         > HTMLDocument whose value is the Document interface object.
     * Test: `Object.prototype.toString.call(document)``
     *  - Chrome === "[object HTMLDocument]"
     *  - Firefox === "[object HTMLDocument]"
     *  - Safari === "[object HTMLDocument]"
     *  - IE <=10 === "[object Document]"
     *  - IE 11 === "[object HTMLDocument]"
     *  - IE Edge <=13 === "[object HTMLDocument]"
     */
    if (typeof window.document === 'object' && obj === window.document) {
      return 'Document';
    }

    if (typeof window.navigator === 'object') {
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray
       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``
       *  - IE <=10 === "[object MSMimeTypesCollection]"
       */
      if (typeof window.navigator.mimeTypes === 'object' &&
          obj === window.navigator.mimeTypes) {
        return 'MimeTypeArray';
      }

      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray
       * Test: `Object.prototype.toString.call(navigator.plugins)``
       *  - IE <=10 === "[object MSPluginsCollection]"
       */
      if (typeof window.navigator.plugins === 'object' &&
          obj === window.navigator.plugins) {
        return 'PluginArray';
      }
    }

    if ((typeof window.HTMLElement === 'function' ||
        typeof window.HTMLElement === 'object') &&
        obj instanceof window.HTMLElement) {
      /* ! Spec Conformance
      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`
      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``
      *  - IE <=10 === "[object HTMLBlockElement]"
      */
      if (obj.tagName === 'BLOCKQUOTE') {
        return 'HTMLQuoteElement';
      }

      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltabledatacellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('td'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */
      if (obj.tagName === 'TD') {
        return 'HTMLTableDataCellElement';
      }

      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltableheadercellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('th'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */
      if (obj.tagName === 'TH') {
        return 'HTMLTableHeaderCellElement';
      }
    }
  }

  /* ! Speed optimisation
  * Pre:
  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)
  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)
  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)
  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)
  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)
  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)
  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)
  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)
  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)
  * Post:
  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)
  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)
  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)
  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)
  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)
  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)
  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)
  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)
  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)
  */
  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);
  if (typeof stringTag === 'string') {
    return stringTag;
  }

  var objPrototype = Object.getPrototypeOf(obj);
  /* ! Speed optimisation
  * Pre:
  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)
  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)
  * Post:
  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)
  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)
  */
  if (objPrototype === RegExp.prototype) {
    return 'RegExp';
  }

  /* ! Speed optimisation
  * Pre:
  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)
  * Post:
  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)
  */
  if (objPrototype === Date.prototype) {
    return 'Date';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)
   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be "Promise":
   * Test: `Object.prototype.toString.call(Promise.resolve())``
   *  - Chrome <=47 === "[object Object]"
   *  - Edge <=20 === "[object Object]"
   *  - Firefox 29-Latest === "[object Promise]"
   *  - Safari 7.1-Latest === "[object Promise]"
   */
  if (promiseExists && objPrototype === Promise.prototype) {
    return 'Promise';
  }

  /* ! Speed optimisation
  * Pre:
  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)
  * Post:
  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)
  */
  if (setExists && objPrototype === Set.prototype) {
    return 'Set';
  }

  /* ! Speed optimisation
  * Pre:
  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)
  * Post:
  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)
  */
  if (mapExists && objPrototype === Map.prototype) {
    return 'Map';
  }

  /* ! Speed optimisation
  * Pre:
  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)
  * Post:
  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)
  */
  if (weakSetExists && objPrototype === WeakSet.prototype) {
    return 'WeakSet';
  }

  /* ! Speed optimisation
  * Pre:
  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)
  * Post:
  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)
  */
  if (weakMapExists && objPrototype === WeakMap.prototype) {
    return 'WeakMap';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)
   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be "DataView":
   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``
   *  - Edge <=13 === "[object Object]"
   */
  if (dataViewExists && objPrototype === DataView.prototype) {
    return 'DataView';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)
   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be "Map Iterator":
   * Test: `Object.prototype.toString.call(new Map().entries())``
   *  - Edge <=13 === "[object Object]"
   */
  if (mapExists && objPrototype === mapIteratorPrototype) {
    return 'Map Iterator';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)
   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be "Set Iterator":
   * Test: `Object.prototype.toString.call(new Set().entries())``
   *  - Edge <=13 === "[object Object]"
   */
  if (setExists && objPrototype === setIteratorPrototype) {
    return 'Set Iterator';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)
   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be "Array Iterator":
   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``
   *  - Edge <=13 === "[object Object]"
   */
  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
    return 'Array Iterator';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)
   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be "String Iterator":
   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``
   *  - Edge <=13 === "[object Object]"
   */
  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
    return 'String Iterator';
  }

  /* ! Speed optimisation
  * Pre:
  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)
  * Post:
  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)
  */
  if (objPrototype === null) {
    return 'Object';
  }

  return Object
    .prototype
    .toString
    .call(obj)
    .slice(toStringLeftSliceLength, toStringRightSliceLength);
}

return typeDetect;

})));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/cascade.js":
/*!************************!*\
  !*** ./src/cascade.js ***!
  \************************/
/*! exports provided: createEncryptionCascade, createDecryptionCascade */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEncryptionCascade", function() { return createEncryptionCascade; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDecryptionCascade", function() { return createDecryptionCascade; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js");
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _suite_openpgp_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./suite_openpgp.js */ "./src/suite_openpgp.js");
/* harmony import */ var _suite_jscu_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./suite_jscu.js */ "./src/suite_jscu.js");
/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./keys.js */ "./src/keys.js");
/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./signature.js */ "./src/signature.js");
/* harmony import */ var _cascaded_data_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./cascaded_data.js */ "./src/cascaded_data.js");
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./core.js */ "./src/core.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash.clonedeep */ "./node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_15__);










/**
 * cascade.js
 */






 //'lodash/cloneDeep';

function createEncryptionCascade(_x) {
  return _createEncryptionCascade.apply(this, arguments);
}

function _createEncryptionCascade() {
  _createEncryptionCascade = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5(_ref) {
    var keys, procedure, localKeys, localProcedure, cascade;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            keys = _ref.keys, procedure = _ref.procedure;
            localKeys = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_15___default()(keys);
            localProcedure = procedure.map(function (x) {
              return lodash_clonedeep__WEBPACK_IMPORTED_MODULE_15___default()(x);
            });
            cascade = new Cascade();

            cascade._init({
              mode: 'encrypt',
              keys: localKeys,
              procedure: localProcedure
            });

            _context5.next = 7;
            return cascade._initEncryptionProcedure();

          case 7:
            return _context5.abrupt("return", cascade);

          case 8:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return _createEncryptionCascade.apply(this, arguments);
}

function createDecryptionCascade(_ref2) {
  var keys = _ref2.keys,
      encrypted = _ref2.encrypted;
  var localKeys = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_15___default()(keys);
  var cascade = new Cascade();

  cascade._init({
    mode: 'decrypt',
    keys: localKeys,
    encrypted: encrypted
  });

  cascade._initDecryptionProcedure();

  return cascade;
} ////////////////////

var modes = ['encrypt', 'decrypt'];

var Cascade =
/*#__PURE__*/
function (_Array) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default()(Cascade, _Array);

  function Cascade() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, Cascade);

    return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Cascade).apply(this, arguments));
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(Cascade, [{
    key: "_init",
    value: function _init(_ref3) {
      var mode = _ref3.mode,
          keys = _ref3.keys,
          procedure = _ref3.procedure,
          encrypted = _ref3.encrypted;
      // assertions
      if (modes.indexOf(mode) < 0) throw new Error('InvalidMode');
      if (!(keys instanceof _keys_js__WEBPACK_IMPORTED_MODULE_11__["Keys"])) throw new Error('NotKeyObject');
      if (keys.mode.indexOf(mode) < 0) throw new Error('UnmatchedKeyMode');
      this._cascadeMode = mode;
      this._orgKeys = keys;

      if (mode === 'encrypt') {
        if (!(procedure instanceof Array)) throw new Error('NotArrayProcedure');
        var initial = procedure.map(function (config) {
          if (typeof config.encrypt === 'undefined') throw new Error('InvalidProcedure');
          return {
            config: config
          };
        });
        this.push.apply(this, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(initial));
      }

      if (mode === 'decrypt') {
        if (!(encrypted instanceof _cascaded_data_js__WEBPACK_IMPORTED_MODULE_13__["CascadedData"])) throw new Error('NotCascadedEncryptedData');

        var _initial = encrypted.map(function (encryptedObject) {
          if (typeof encryptedObject.message === 'undefined') throw new Error('InvalidEncryptedMessage');
          return {
            data: encryptedObject
          };
        });

        this.push.apply(this, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(_initial));
      } // set original key to the final step in the procedure


      this[this.length - 1].keys = this._orgKeys;
    }
  }, {
    key: "_initEncryptionProcedure",
    value: function () {
      var _initEncryptionProcedure2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {
        var _this = this;

        var signingKeys, precedence;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // export signingKey for precedence
                signingKeys = this._orgKeys.keys.privateKeys;
                precedence = this.slice(0, this.length - 1);
                _context2.next = 4;
                return Promise.all(precedence.map(
                /*#__PURE__*/
                function () {
                  var _ref4 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8___default()(
                  /*#__PURE__*/
                  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(proc, idx) {
                    var suiteObject, modeArray, keyParams, onetimeKey, onetimeKeyObject, nextStepMessage;
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (!(typeof proc.config.encrypt.onetimeKey === 'undefined')) {
                              _context.next = 2;
                              break;
                            }

                            throw new Error('NoKeyParamsGiven');

                          case 2:
                            suiteObject = {
                              encrypt_decrypt: proc.config.encrypt.suite
                            };
                            modeArray = ['encrypt']; // key generation for encryption at this step

                            keyParams = Object.assign({
                              suite: proc.config.encrypt.suite
                            }, proc.config.encrypt.onetimeKey);
                            delete proc.config.encrypt.onetimeKey;
                            _context.next = 8;
                            return Object(_keys_js__WEBPACK_IMPORTED_MODULE_11__["generateKeyObject"])(keyParams);

                          case 8:
                            onetimeKey = _context.sent;
                            // generate keys
                            onetimeKeyObject = keyParams.keyParams.type === 'session' ? {
                              sessionKey: onetimeKey.key
                            } : {
                              publicKeys: [onetimeKey.publicKey]
                            }; // message for encryption at next step.
                            // [NOTE] message for the first step is directly given message to be encrypted, otherwise, previous private/session keys;

                            if (!(keyParams.keyParams.type === 'session')) {
                              _context.next = 14;
                              break;
                            }

                            nextStepMessage = onetimeKey.key;
                            _context.next = 25;
                            break;

                          case 14:
                            if (!(keyParams.suite === 'jscu')) {
                              _context.next = 20;
                              break;
                            }

                            _context.next = 17;
                            return onetimeKey.privateKey.export('der');

                          case 17:
                            nextStepMessage = _context.sent;
                            _context.next = 25;
                            break;

                          case 20:
                            if (!(keyParams.suite === 'openpgp')) {
                              _context.next = 24;
                              break;
                            }

                            nextStepMessage = onetimeKey.privateKey.toPacketlist().write();
                            _context.next = 25;
                            break;

                          case 24:
                            throw new Error('UnknownSuite');

                          case 25:
                            _this[idx + 1].message = nextStepMessage; // updated config and key object for signing and key import

                            if (typeof proc.config.sign !== 'undefined' && proc.config.sign.required) {
                              proc.config.sign = Object.assign(proc.config.sign, _this[_this.length - 1].config.sign);
                              onetimeKeyObject.privateKeys = signingKeys;
                              suiteObject.sign_verify = proc.config.sign.suite;
                              modeArray.push('sign');
                            }

                            _context.next = 29;
                            return Object(_keys_js__WEBPACK_IMPORTED_MODULE_11__["importKeys"])('object', {
                              keys: onetimeKeyObject,
                              suite: suiteObject,
                              mode: modeArray
                            });

                          case 29:
                            _this[idx].keys = _context.sent;

                          case 30:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, this);
                  }));

                  return function (_x2, _x3) {
                    return _ref4.apply(this, arguments);
                  };
                }()));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function _initEncryptionProcedure() {
        return _initEncryptionProcedure2.apply(this, arguments);
      };
    }()
  }, {
    key: "_initDecryptionProcedure",
    value: function _initDecryptionProcedure() {// do nothing at this point
    }
  }, {
    key: "encrypt",
    value: function () {
      var _encrypt = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3(message) {
        var data;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(this._cascadeMode !== 'encrypt')) {
                  _context3.next = 2;
                  break;
                }

                throw new Error('NotEncryptionCascade');

              case 2:
                if (message instanceof Uint8Array) {
                  _context3.next = 4;
                  break;
                }

                throw new Error('NotUint8ArrayMessage');

              case 4:
                // set given message as the first step message
                this[0].message = message;
                _context3.next = 7;
                return Promise.all(this.map(function (proc) {
                  return _core_js__WEBPACK_IMPORTED_MODULE_14__["encrypt"](proc);
                }));

              case 7:
                data = _context3.sent;
                return _context3.abrupt("return", Object(_cascaded_data_js__WEBPACK_IMPORTED_MODULE_13__["createCascadedData"])(data));

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function encrypt(_x4) {
        return _encrypt.apply(this, arguments);
      };
    }()
  }, {
    key: "decrypt",
    value: function () {
      var _decrypt = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4() {
        var verificationKeys, decrypted, idx, suiteObject, modeArray, nextDecryptionKeyObject;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(this._cascadeMode !== 'decrypt')) {
                  _context4.next = 2;
                  break;
                }

                throw new Error('NotDecryptionCascade');

              case 2:
                // export verificationKey for precedence
                verificationKeys = this._orgKeys.keys.publicKeys; // serialized decryption

                decrypted = new Array(this.length);
                idx = this.length - 1;

              case 5:
                if (!(idx >= 0)) {
                  _context4.next = 45;
                  break;
                }

                if (this[idx].keys instanceof _keys_js__WEBPACK_IMPORTED_MODULE_11__["Keys"]) {
                  _context4.next = 8;
                  break;
                }

                throw new Error('InvalidKeysObject');

              case 8:
                if (!(typeof this[idx].data === 'undefined')) {
                  _context4.next = 10;
                  break;
                }

                throw new Error('InvalidDataObject');

              case 10:
                _context4.next = 12;
                return _core_js__WEBPACK_IMPORTED_MODULE_14__["decrypt"](this[idx]);

              case 12:
                decrypted[idx] = _context4.sent;

                if (!(idx > 0)) {
                  _context4.next = 42;
                  break;
                }

                suiteObject = {
                  encrypt_decrypt: this[idx - 1].data.message.suite
                };
                modeArray = ['decrypt'];
                nextDecryptionKeyObject = void 0;

                if (!(this[idx - 1].data.message.keyType === 'session_key_encrypt')) {
                  _context4.next = 21;
                  break;
                }

                nextDecryptionKeyObject = {
                  sessionKey: decrypted[idx].data
                };
                _context4.next = 38;
                break;

              case 21:
                if (!(this[idx - 1].data.message.suite === 'jscu')) {
                  _context4.next = 29;
                  break;
                }

                _context4.next = 24;
                return _suite_jscu_js__WEBPACK_IMPORTED_MODULE_10__["Jscu"].importKey('der', decrypted[idx].data);

              case 24:
                _context4.t0 = _context4.sent;
                _context4.t1 = [_context4.t0];
                nextDecryptionKeyObject = {
                  privateKeys: _context4.t1
                };
                _context4.next = 38;
                break;

              case 29:
                if (!(this[idx - 1].data.message.suite === 'openpgp')) {
                  _context4.next = 37;
                  break;
                }

                _context4.next = 32;
                return _suite_openpgp_js__WEBPACK_IMPORTED_MODULE_9__["OpenPGP"].importKey('der', decrypted[idx].data);

              case 32:
                _context4.t2 = _context4.sent;
                _context4.t3 = [_context4.t2];
                nextDecryptionKeyObject = {
                  privateKeys: _context4.t3
                };
                _context4.next = 38;
                break;

              case 37:
                throw new Error('UnknownSuite');

              case 38:
                // updated config and key object for signing and key import
                if (this[idx - 1].data.signature instanceof _signature_js__WEBPACK_IMPORTED_MODULE_12__["Signature"] && typeof verificationKeys !== 'undefined') {
                  nextDecryptionKeyObject.publicKeys = verificationKeys;
                  suiteObject.sign_verify = this[idx - 1].data.signature.suite;
                  modeArray.push('verify');
                } // WA for embedded signature
                else if (typeof this[idx - 1].data.message !== 'undefined' && this[idx - 1].data.message.suite === 'openpgp' && typeof verificationKeys !== 'undefined') {
                    nextDecryptionKeyObject.publicKeys = verificationKeys;
                    suiteObject.sign_verify = 'openpgp';
                    modeArray.push('verify');
                  }

                _context4.next = 41;
                return Object(_keys_js__WEBPACK_IMPORTED_MODULE_11__["importKeys"])('object', {
                  keys: nextDecryptionKeyObject,
                  suite: suiteObject,
                  mode: modeArray
                });

              case 41:
                this[idx - 1].keys = _context4.sent;

              case 42:
                idx--;
                _context4.next = 5;
                break;

              case 45:
                return _context4.abrupt("return", decrypted);

              case 46:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function decrypt() {
        return _decrypt.apply(this, arguments);
      };
    }()
  }, {
    key: "toArray",
    // get allKeys () { return null; } // TODO
    value: function toArray() {
      return Array.from(this);
    }
  }, {
    key: "map",
    value: function map(callback) {
      return this.toArray().map(callback);
    }
  }, {
    key: "slice",
    value: function slice(a, b) {
      return this.toArray().slice(a, b);
    }
  }, {
    key: "mode",
    get: function get() {
      return this._cascadeMode;
    }
  }, {
    key: "keys",
    get: function get() {
      return this._orgKeys;
    }
  }]);

  return Cascade;
}(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_7___default()(Array));

/***/ }),

/***/ "./src/cascaded_data.js":
/*!******************************!*\
  !*** ./src/cascaded_data.js ***!
  \******************************/
/*! exports provided: importCascadedBuffer, createCascadedData, CascadedData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "importCascadedBuffer", function() { return importCascadedBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCascadedData", function() { return createCascadedData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CascadedData", function() { return CascadedData; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js");
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var msgpack_lite__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! msgpack-lite */ "./node_modules/msgpack-lite/lib/browser.js");
/* harmony import */ var msgpack_lite__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(msgpack_lite__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _encrypted_message_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./encrypted_message.js */ "./src/encrypted_message.js");
/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./signature.js */ "./src/signature.js");








/**
 * cascaded_data.js
 */



function importCascadedBuffer(serialized) {
  if (!(serialized instanceof Uint8Array)) throw new Error('NonUint8ArraySerializedData');
  var des;

  try {
    des = msgpack_lite__WEBPACK_IMPORTED_MODULE_7___default.a.decode(serialized);
  } catch (e) {
    throw new Error("FailedToParseCascadedBuffer: ".concat(e.message));
  }

  if (!(des instanceof Array)) throw new Error('InvalidCascadedData');
  var desComponentList = des.map(function (obj) {
    var returnObject = {};
    if (typeof obj.message !== 'undefined') returnObject.message = Object(_encrypted_message_js__WEBPACK_IMPORTED_MODULE_8__["importEncryptedBuffer"])(obj.message);
    if (typeof obj.signature !== 'undefined') returnObject.signature = Object(_signature_js__WEBPACK_IMPORTED_MODULE_9__["importSignatureBuffer"])(obj.signature);
    return returnObject;
  });
  return createCascadedData(desComponentList);
}
function createCascadedData(data) {
  // assertion
  if (!(data instanceof Array)) throw new Error('NotArrayForCascadedData');
  data.map(function (obj) {
    if (typeof obj.message !== 'undefined' && !(obj.message instanceof _encrypted_message_js__WEBPACK_IMPORTED_MODULE_8__["EncryptedMessage"])) throw new Error('InvalidEncryptedMessage');
    if (typeof obj.signature !== 'undefined' && !(obj.signature instanceof _signature_js__WEBPACK_IMPORTED_MODULE_9__["Signature"])) throw new Error('InvalidSignature');
    if (typeof obj.message === 'undefined' && typeof obj.signature === 'undefined') throw new Error('NoEncryptedMessageAndSignature');
  });
  return new CascadedData(data);
}
var CascadedData =
/*#__PURE__*/
function (_Array) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(CascadedData, _Array);

  function CascadedData(data) {
    var _this2;

    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CascadedData);

    _this = _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(CascadedData).call(this));

    (_this2 = _this).push.apply(_this2, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(data));

    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CascadedData, [{
    key: "extract",
    value: function extract(idx) {
      if (idx > this.length - 1 || idx < 0) throw new Error('InvalidIndexOutOfRange');
      if (typeof this[idx].message === 'undefined') throw new Error('MessageObjectDoesNotExist');
      return this[idx].message.extract();
    }
  }, {
    key: "insert",
    value: function insert(idx, message) {
      if (idx > this.length - 1 || idx < 0) throw new Error('InvalidIndexOutOfRange');
      if (!(message instanceof Array)) throw new Error('InvalidEncryptedMessageArray');
      if (this[idx].message.length > 0) throw new Error('MessageAlreadyExists');
      this[idx].message.insert(message);
    }
  }, {
    key: "serialize",
    value: function serialize() {
      var serializedCompArray = this.map(function (obj) {
        var returnObject = {};
        if (typeof obj.message !== 'undefined') returnObject.message = new Uint8Array(obj.message.serialize());
        if (typeof obj.signature !== 'undefined') returnObject.signature = new Uint8Array(obj.signature.serialize());
        return returnObject;
      });
      var returnArray = msgpack_lite__WEBPACK_IMPORTED_MODULE_7___default.a.encode(serializedCompArray);
      return new Uint8Array(returnArray);
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return Array.from(this);
    }
  }, {
    key: "map",
    value: function map(callback) {
      return Array.from(this).map(callback);
    }
  }]);

  return CascadedData;
}(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_6___default()(Array));

/***/ }),

/***/ "./src/core.js":
/*!*********************!*\
  !*** ./src/core.js ***!
  \*********************/
/*! exports provided: generateKey, encrypt, decrypt, sign, verify */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateKey", function() { return generateKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encrypt", function() { return encrypt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decrypt", function() { return decrypt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sign", function() { return sign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verify", function() { return verify; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keys.js */ "./src/keys.js");
/* harmony import */ var _message_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./message.js */ "./src/message.js");
/* harmony import */ var _suite_openpgp_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./suite_openpgp.js */ "./src/suite_openpgp.js");
/* harmony import */ var _suite_jscu_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./suite_jscu.js */ "./src/suite_jscu.js");



/**
 * core.js
 */




/**
 * Generate key (pair). This API must be called externally.
 * @param keyParams {object}: a parameter to generate keys in the form of like
 * OpenPGP:
 * { suite: 'openpgp',
 *   userIds,
 *   passphrase: 'omg',
 *   keyParams: { type: 'ECC', keyExpirationTime: 0, curve: 'P-256' } }
 * Simple Crypto Suite using WebCryptoAPI/OpenSSL:
 * { suite: 'jscu',
 *   passphrase: 'omg',
 *   keyParams: {type: 'ECC', curve} } }
 * @return {Promise<*>}
 */

function generateKey(_x) {
  return _generateKey.apply(this, arguments);
}
/**
 * Basic encryption API that enables signing simultaneously with encrypting message.
 * @param message
 * @param keys
 * @param config
 * @return {Promise<{success: boolean, status: string, data: any}>}
 */

function _generateKey() {
  _generateKey = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5(keyParams) {
    var keyObj;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return Object(_keys_js__WEBPACK_IMPORTED_MODULE_2__["generateKeyObject"])(keyParams);

          case 2:
            keyObj = _context5.sent;

            if (!(keyParams.keyParams.type === 'session')) {
              _context5.next = 7;
              break;
            }

            return _context5.abrupt("return", keyObj);

          case 7:
            if (!(keyParams.suite === 'openpgp')) {
              _context5.next = 11;
              break;
            }

            return _context5.abrupt("return", {
              publicKey: {
                keyString: keyObj.publicKey.armor(),
                keyIds: keyObj.keyIds
              },
              privateKey: Object.assign({
                keyString: keyObj.privateKey.armor(),
                keyIds: keyObj.keyIds
              }, keyParams.passphrase ? {
                passphrase: keyParams.passphrase
              } : {})
            });

          case 11:
            if (!(keyParams.suite === 'jscu')) {
              _context5.next = 28;
              break;
            }

            _context5.next = 14;
            return keyObj.publicKey.export('pem', {
              outputPublic: true
            });

          case 14:
            _context5.t0 = _context5.sent;
            _context5.t1 = keyObj.keyIds;
            _context5.t2 = {
              keyString: _context5.t0,
              keyIds: _context5.t1
            };
            _context5.t3 = Object;
            _context5.next = 20;
            return keyObj.privateKey.export('pem');

          case 20:
            _context5.t4 = _context5.sent;
            _context5.t5 = keyObj.keyIds;
            _context5.t6 = {
              keyString: _context5.t4,
              keyIds: _context5.t5
            };
            _context5.t7 = keyParams.passphrase ? {
              passphrase: keyParams.passphrase
            } : {};
            _context5.t8 = _context5.t3.assign.call(_context5.t3, _context5.t6, _context5.t7);
            return _context5.abrupt("return", {
              publicKey: _context5.t2,
              privateKey: _context5.t8
            });

          case 28:
            throw new Error('InvalidCryptoSuite');

          case 29:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return _generateKey.apply(this, arguments);
}

function encrypt(_x2) {
  return _encrypt.apply(this, arguments);
}
/**
 * Decrypt given message and additionally verify attached signatures simultaneously.
 * @param data
 * @param keys
 * @return {Promise<*>}
 */

function _encrypt() {
  _encrypt = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee6(_ref) {
    var message, keys, config, msgObj, signed, encrypted;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            message = _ref.message, keys = _ref.keys, config = _ref.config;

            if (!(typeof config.encrypt === 'undefined')) {
              _context6.next = 3;
              break;
            }

            throw new Error('InvalidConfigForEncryption');

          case 3:
            // compose objects
            msgObj = Object(_message_js__WEBPACK_IMPORTED_MODULE_3__["importMessage"])(message); // do signing

            signed = {};

            if (!(typeof config.sign !== 'undefined' && config.sign.required && (typeof config.encrypt === 'undefined' || typeof config.encrypt !== 'undefined' && !(config.encrypt.suite === 'openpgp' && config.sign.suite === 'openpgp')))) {
              _context6.next = 11;
              break;
            }

            if (!(keys.suite.sign_verify !== config.sign.suite)) {
              _context6.next = 8;
              break;
            }

            throw new Error('UnmatchedKeyTypeToSigningSuite');

          case 8:
            _context6.next = 10;
            return signBase({
              message: msgObj,
              keys: keys,
              options: config.sign.options
            }).catch(function (e) {
              throw new Error("SigningFailed: ".concat(e.message));
            });

          case 10:
            signed = _context6.sent;

          case 11:
            if (!(keys.suite.encrypt_decrypt !== config.encrypt.suite)) {
              _context6.next = 13;
              break;
            }

            throw new Error('UnmatchedKeyTypeToEncryptionSuite');

          case 13:
            _context6.next = 15;
            return encryptBase({
              message: msgObj,
              keys: keys,
              options: config.encrypt.options
            }).catch(function (e) {
              throw new Error("EncryptionFailed: ".concat(e.message));
            });

          case 15:
            encrypted = _context6.sent;
            return _context6.abrupt("return", Object.assign(encrypted, signed));

          case 17:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));
  return _encrypt.apply(this, arguments);
}

function decrypt(_x3) {
  return _decrypt.apply(this, arguments);
}
/**
 * Returns the signature objects.
 * @param message
 * @param keys
 * @param config
 * @return {Promise<{success: boolean, status: string, data}>}
 */

function _decrypt() {
  _decrypt = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee7(_ref2) {
    var data, keys, decrypted, verified;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            data = _ref2.data, keys = _ref2.keys;

            if (!(typeof data.message === 'undefined')) {
              _context7.next = 3;
              break;
            }

            throw new Error('InvalidEncryptedDataFormat');

          case 3:
            if (!(keys.suite.encrypt_decrypt !== data.message.suite)) {
              _context7.next = 5;
              break;
            }

            throw new Error('UnmatchedKeyTypeToEncryptionSuite');

          case 5:
            _context7.next = 7;
            return decryptBase({
              encrypted: data,
              keys: keys,
              options: data.message.options
            }).catch(function (e) {
              console.error(e);
              throw new Error("DecryptionFailed: ".concat(e.message));
            });

          case 7:
            decrypted = _context7.sent;
            // do verification
            verified = {};

            if (!(typeof data.signature !== 'undefined' && keys.keys.publicKeys)) {
              _context7.next = 15;
              break;
            }

            _context7.next = 12;
            return verifyBase({
              message: Object(_message_js__WEBPACK_IMPORTED_MODULE_3__["importMessage"])(decrypted.data),
              signature: data.signature,
              keys: keys,
              options: data.signature.options
            }).catch(function (e) {
              throw new Error("VerificationFailed: ".concat(e.message));
            });

          case 12:
            verified = _context7.sent;
            _context7.next = 16;
            break;

          case 15:
            if (typeof decrypted.signatures !== 'undefined') verified = decrypted.signatures;

          case 16:
            return _context7.abrupt("return", {
              data: decrypted.data,
              signatures: verified
            });

          case 17:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));
  return _decrypt.apply(this, arguments);
}

function sign(_x4) {
  return _sign.apply(this, arguments);
}

function _sign() {
  _sign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee8(_ref3) {
    var message, keys, config, msgObj, signed;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            message = _ref3.message, keys = _ref3.keys, config = _ref3.config;

            if (!(typeof config.sign === 'undefined')) {
              _context8.next = 3;
              break;
            }

            throw new Error('InvalidConfigForSigning');

          case 3:
            // compose objects
            msgObj = Object(_message_js__WEBPACK_IMPORTED_MODULE_3__["importMessage"])(message); // do signing

            if (!keys.keys.privateKeys) {
              _context8.next = 10;
              break;
            }

            _context8.next = 7;
            return signBase({
              message: msgObj,
              keys: keys,
              options: config.sign.options,
              output: {
                sign: config.sign.output
              }
            }).catch(function (e) {
              throw new Error("SigningFailed: ".concat(e.message));
            });

          case 7:
            signed = _context8.sent;
            _context8.next = 11;
            break;

          case 10:
            throw new Error('InvalidPrivateKeys');

          case 11:
            return _context8.abrupt("return", signed);

          case 12:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));
  return _sign.apply(this, arguments);
}

function verify(_x5) {
  return _verify.apply(this, arguments);
} ////////////////////////////////////////////////////////////////////////////
// base functions

function _verify() {
  _verify = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee9(_ref4) {
    var message, signature, keys, msgObj, verified;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            message = _ref4.message, signature = _ref4.signature, keys = _ref4.keys;

            if (!(typeof signature === 'undefined')) {
              _context9.next = 3;
              break;
            }

            throw new Error('InvalidObjectForSignature');

          case 3:
            msgObj = Object(_message_js__WEBPACK_IMPORTED_MODULE_3__["importMessage"])(message); // do verification

            verified = {};

            if (!(typeof signature !== 'undefined' && keys.keys.publicKeys)) {
              _context9.next = 11;
              break;
            }

            _context9.next = 8;
            return verifyBase({
              message: msgObj,
              signature: signature,
              keys: keys,
              options: signature.options
            }).catch(function (e) {
              throw new Error("VerificationFailed: ".concat(e.message));
            });

          case 8:
            verified = _context9.sent;
            _context9.next = 12;
            break;

          case 11:
            throw new Error('InvalidSignatureOrInvalidPublicKey');

          case 12:
            return _context9.abrupt("return", verified);

          case 13:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9, this);
  }));
  return _verify.apply(this, arguments);
}

var encryptBase =
/*#__PURE__*/
function () {
  var _ref6 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(_ref5) {
    var message, keys, options, suiteObj;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            message = _ref5.message, keys = _ref5.keys, options = _ref5.options;

            if (keys.canEncrypt()) {
              _context.next = 3;
              break;
            }

            throw new Error('UnsupportedKeyForEncryption');

          case 3:
            if (!(keys.suite.encrypt_decrypt === 'jscu')) {
              _context.next = 7;
              break;
            }

            suiteObj = _suite_jscu_js__WEBPACK_IMPORTED_MODULE_5__["Jscu"];
            _context.next = 12;
            break;

          case 7:
            if (!(keys.suite.encrypt_decrypt === 'openpgp')) {
              _context.next = 11;
              break;
            }

            suiteObj = _suite_openpgp_js__WEBPACK_IMPORTED_MODULE_4__["OpenPGP"];
            _context.next = 12;
            break;

          case 11:
            throw new Error('UnknownEncryptionSuite');

          case 12:
            return _context.abrupt("return", suiteObj.encrypt({
              message: message,
              keys: keys.keys,
              options: options
            }));

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function encryptBase(_x6) {
    return _ref6.apply(this, arguments);
  };
}();

var decryptBase =
/*#__PURE__*/
function () {
  var _ref8 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2(_ref7) {
    var encrypted, keys, options, suiteObj;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            encrypted = _ref7.encrypted, keys = _ref7.keys, options = _ref7.options;

            if (keys.canDecrypt()) {
              _context2.next = 3;
              break;
            }

            throw new Error('UnsupportedKeyForDecryption');

          case 3:
            if (!(keys.suite.encrypt_decrypt === 'jscu')) {
              _context2.next = 7;
              break;
            }

            suiteObj = _suite_jscu_js__WEBPACK_IMPORTED_MODULE_5__["Jscu"];
            _context2.next = 12;
            break;

          case 7:
            if (!(keys.suite.encrypt_decrypt === 'openpgp')) {
              _context2.next = 11;
              break;
            }

            suiteObj = _suite_openpgp_js__WEBPACK_IMPORTED_MODULE_4__["OpenPGP"];
            _context2.next = 12;
            break;

          case 11:
            throw new Error('UnknownDecryptionSuite');

          case 12:
            return _context2.abrupt("return", suiteObj.decrypt({
              encrypted: encrypted,
              keys: keys.keys,
              options: options
            }));

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function decryptBase(_x7) {
    return _ref8.apply(this, arguments);
  };
}();

var signBase =
/*#__PURE__*/
function () {
  var _ref10 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3(_ref9) {
    var message, keys, options, suiteObj;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            message = _ref9.message, keys = _ref9.keys, options = _ref9.options;

            if (keys.canSign()) {
              _context3.next = 3;
              break;
            }

            throw new Error('UnsupportedKeyForSign');

          case 3:
            if (!(keys.suite.sign_verify === 'jscu')) {
              _context3.next = 7;
              break;
            }

            suiteObj = _suite_jscu_js__WEBPACK_IMPORTED_MODULE_5__["Jscu"];
            _context3.next = 12;
            break;

          case 7:
            if (!(keys.suite.sign_verify === 'openpgp')) {
              _context3.next = 11;
              break;
            }

            suiteObj = _suite_openpgp_js__WEBPACK_IMPORTED_MODULE_4__["OpenPGP"];
            _context3.next = 12;
            break;

          case 11:
            throw new Error('UnknownSigningSuite');

          case 12:
            return _context3.abrupt("return", suiteObj.sign({
              message: message,
              keys: keys.keys,
              options: options
            }));

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function signBase(_x8) {
    return _ref10.apply(this, arguments);
  };
}();

var verifyBase =
/*#__PURE__*/
function () {
  var _ref12 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4(_ref11) {
    var message, signature, keys, options, suiteObj;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            message = _ref11.message, signature = _ref11.signature, keys = _ref11.keys, options = _ref11.options;

            if (keys.canVerify()) {
              _context4.next = 3;
              break;
            }

            throw new Error('UnsupportedKeyForVerification');

          case 3:
            if (!(keys.suite.sign_verify === 'jscu')) {
              _context4.next = 7;
              break;
            }

            suiteObj = _suite_jscu_js__WEBPACK_IMPORTED_MODULE_5__["Jscu"];
            _context4.next = 12;
            break;

          case 7:
            if (!(keys.suite.sign_verify === 'openpgp')) {
              _context4.next = 11;
              break;
            }

            suiteObj = _suite_openpgp_js__WEBPACK_IMPORTED_MODULE_4__["OpenPGP"];
            _context4.next = 12;
            break;

          case 11:
            throw new Error('UnknownSigningSuite');

          case 12:
            return _context4.abrupt("return", suiteObj.verify({
              message: message,
              signature: signature,
              keys: keys.keys,
              options: options
            }));

          case 13:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function verifyBase(_x9) {
    return _ref12.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./src/encrypted_message.js":
/*!**********************************!*\
  !*** ./src/encrypted_message.js ***!
  \**********************************/
/*! exports provided: importEncryptedBuffer, importRawEncryptedBufferList, createEncryptedMessage, createRawEncryptedMessage, EncryptedMessage, RawEncryptedMessage, RawEncryptedMessageList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "importEncryptedBuffer", function() { return importEncryptedBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "importRawEncryptedBufferList", function() { return importRawEncryptedBufferList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEncryptedMessage", function() { return createEncryptedMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createRawEncryptedMessage", function() { return createRawEncryptedMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EncryptedMessage", function() { return EncryptedMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RawEncryptedMessage", function() { return RawEncryptedMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RawEncryptedMessageList", function() { return RawEncryptedMessageList; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js");
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _keyid_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./keyid.js */ "./src/keyid.js");
/* harmony import */ var js_encoding_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! js-encoding-utils */ "./node_modules/js-encoding-utils/dist/jseu.bundle.js");
/* harmony import */ var js_encoding_utils__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(js_encoding_utils__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash.clonedeep */ "./node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var msgpack_lite__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! msgpack-lite */ "./node_modules/msgpack-lite/lib/browser.js");
/* harmony import */ var msgpack_lite__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(msgpack_lite__WEBPACK_IMPORTED_MODULE_10__);








/**
 * encrypted_message.js
 */




var suites = ['jscu', 'openpgp'];
var keyTypes = ['public_key_encrypt', 'session_key_encrypt'];
function importEncryptedBuffer(serialized) {
  if (!(serialized instanceof Uint8Array)) throw new Error('NonUint8ArraySerializedData');
  var des;

  try {
    des = msgpack_lite__WEBPACK_IMPORTED_MODULE_10___default.a.decode(serialized);
  } catch (e) {
    throw new Error("FailedToParseEncryptedMessageBuffer: ".concat(e.message));
  }

  if (!des.suite || !des.keyType || !des.message || !des.options) throw new Error('InvalidEncryptedMessageFormat');
  var messageList = des.message.map(function (elem) {
    var keyId;
    if (elem.keyId instanceof Array) keyId = Object(_keyid_js__WEBPACK_IMPORTED_MODULE_7__["createKeyIdList"])(elem.keyId.map(function (k) {
      return Object(_keyid_js__WEBPACK_IMPORTED_MODULE_7__["createKeyId"])(new Uint8Array(k));
    }));else keyId = Object(_keyid_js__WEBPACK_IMPORTED_MODULE_7__["createKeyId"])(new Uint8Array(elem.keyId));
    return createRawEncryptedMessage(elem.data, keyId, elem.params);
  });
  return createEncryptedMessage(des.suite, des.keyType, messageList, des.options);
}
function importRawEncryptedBufferList(array) {
  if (!(array instanceof Array)) throw new Error('NotArrayOfSerializedData');
  array.forEach(function (ser) {
    if (!(ser instanceof Uint8Array)) throw new Error('NotUint8ArraySerializedData');
  });
  var deserializedArray;

  try {
    deserializedArray = array.map(function (ser) {
      var decoded = msgpack_lite__WEBPACK_IMPORTED_MODULE_10___default.a.decode(ser);
      var keyId;
      if (decoded.keyId instanceof Array) keyId = Object(_keyid_js__WEBPACK_IMPORTED_MODULE_7__["createKeyIdList"])(decoded.keyId.map(function (k) {
        return Object(_keyid_js__WEBPACK_IMPORTED_MODULE_7__["createKeyId"])(new Uint8Array(k));
      }));else keyId = Object(_keyid_js__WEBPACK_IMPORTED_MODULE_7__["createKeyId"])(new Uint8Array(decoded.keyId));
      return createRawEncryptedMessage(decoded.data, keyId, decoded.params);
    });
  } catch (e) {
    throw new Error("FailedToParseRawEncryptedMessage: ".concat(e.message));
  }

  return deserializedArray;
}
function createEncryptedMessage(suite, keyType, message) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  // assertion
  if (suites.indexOf(suite) < 0) throw new Error('UnsupportedSuite');
  if (keyTypes.indexOf(keyType) < 0) throw new Error('UnsupportedKeyType');
  return new EncryptedMessage(suite, keyType, message, options);
}
function createRawEncryptedMessage(data, keyId, params) {
  if (!(data instanceof Uint8Array)) throw new Error('NonUint8ArrayData');
  if (!(keyId instanceof _keyid_js__WEBPACK_IMPORTED_MODULE_7__["KeyId"]) && !(keyId instanceof _keyid_js__WEBPACK_IMPORTED_MODULE_7__["KeyIdList"])) throw new Error('NonKeyIdOrKeyIdListObject');
  return new RawEncryptedMessage(data, keyId, params);
}
var EncryptedMessage =
/*#__PURE__*/
function () {
  function EncryptedMessage(suite, keyType, message) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5___default()(this, EncryptedMessage);

    this._suite = suite;
    this._keyType = keyType;

    this._setMessage(message);

    this._options = options;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6___default()(EncryptedMessage, [{
    key: "_setMessage",
    value: function _setMessage(message) {
      this._message = new RawEncryptedMessageList();

      this._message._set(message);
    }
  }, {
    key: "extract",
    value: function extract() {
      var returnArray = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_9___default()(this._message);
      this._message = new RawEncryptedMessageList();

      this._message._set([]);

      return returnArray.toArray();
    }
  }, {
    key: "insert",
    value: function insert(messageArray) {
      this._message = new RawEncryptedMessageList();

      this._message._set(messageArray);
    }
  }, {
    key: "serialize",
    value: function serialize() {
      return msgpack_lite__WEBPACK_IMPORTED_MODULE_10___default.a.encode({
        suite: this._suite,
        keyType: this._keyType,
        message: this._message.toJsObject(),
        options: this._options
      });
    }
  }, {
    key: "suite",
    get: function get() {
      return this._suite;
    }
  }, {
    key: "keyType",
    get: function get() {
      return this._keyType;
    }
  }, {
    key: "message",
    get: function get() {
      return this._message;
    }
  }, {
    key: "options",
    get: function get() {
      return this._options;
    }
  }]);

  return EncryptedMessage;
}();
var RawEncryptedMessage =
/*#__PURE__*/
function (_Uint8Array) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(RawEncryptedMessage, _Uint8Array);

  function RawEncryptedMessage(data, keyId) {
    var _this;

    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5___default()(this, RawEncryptedMessage);

    _this = _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2___default()(RawEncryptedMessage).call(this, data));
    _this._keyId = keyId;
    _this._params = params;
    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6___default()(RawEncryptedMessage, [{
    key: "toBase64",
    value: function toBase64() {
      return js_encoding_utils__WEBPACK_IMPORTED_MODULE_8___default.a.encoder.encodeBase64(this);
    }
  }, {
    key: "toBuffer",
    value: function toBuffer() {
      var buf = new Uint8Array(this);
      return lodash_clonedeep__WEBPACK_IMPORTED_MODULE_9___default()(buf);
    }
  }, {
    key: "toJsObject",
    value: function toJsObject() {
      return {
        data: this.toBuffer(),
        keyId: this._keyId.toBuffer(),
        params: this._params
      };
    }
  }, {
    key: "serialize",
    value: function serialize() {
      return msgpack_lite__WEBPACK_IMPORTED_MODULE_10___default.a.encode(this.toJsObject());
    }
  }, {
    key: "keyId",
    get: function get() {
      return this._keyId;
    }
  }, {
    key: "params",
    get: function get() {
      return this._params;
    }
  }]);

  return RawEncryptedMessage;
}(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4___default()(Uint8Array));
var RawEncryptedMessageList =
/*#__PURE__*/
function (_Array) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(RawEncryptedMessageList, _Array);

  function RawEncryptedMessageList() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5___default()(this, RawEncryptedMessageList);

    return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2___default()(RawEncryptedMessageList).apply(this, arguments));
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6___default()(RawEncryptedMessageList, [{
    key: "_set",
    value: function _set(message) {
      if (!(message instanceof Array)) throw new Error('InvalidEncryptedMessageList');
      var binaryMessage = message.map(function (m) {
        if (!(m instanceof RawEncryptedMessage)) throw new Error('NotEncryptedMessage');
        return m;
      });
      this.push.apply(this, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(binaryMessage));
    }
  }, {
    key: "toJsObject",
    value: function toJsObject() {
      return this.map(function (raw) {
        return raw.toJsObject();
      });
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return Array.from(this);
    }
  }, {
    key: "map",
    value: function map(callback) {
      return this.toArray().map(callback);
    }
  }, {
    key: "filter",
    value: function filter(callback) {
      return this.toArray().filter(callback);
    }
  }]);

  return RawEncryptedMessageList;
}(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4___default()(Array));

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default, generateKey, encrypt, decrypt, sign, verify, importKeys, importEncryptedBuffer, importRawEncryptedBufferList, importSignatureBuffer, importCascadedBuffer, createEncryptionCascade, createDecryptionCascade */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ "./src/core.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "generateKey", function() { return _core_js__WEBPACK_IMPORTED_MODULE_0__["generateKey"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "encrypt", function() { return _core_js__WEBPACK_IMPORTED_MODULE_0__["encrypt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "decrypt", function() { return _core_js__WEBPACK_IMPORTED_MODULE_0__["decrypt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sign", function() { return _core_js__WEBPACK_IMPORTED_MODULE_0__["sign"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "verify", function() { return _core_js__WEBPACK_IMPORTED_MODULE_0__["verify"]; });

/* harmony import */ var _cascade_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cascade.js */ "./src/cascade.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createEncryptionCascade", function() { return _cascade_js__WEBPACK_IMPORTED_MODULE_1__["createEncryptionCascade"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createDecryptionCascade", function() { return _cascade_js__WEBPACK_IMPORTED_MODULE_1__["createDecryptionCascade"]; });

/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keys.js */ "./src/keys.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "importKeys", function() { return _keys_js__WEBPACK_IMPORTED_MODULE_2__["importKeys"]; });

/* harmony import */ var _encrypted_message_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./encrypted_message.js */ "./src/encrypted_message.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "importEncryptedBuffer", function() { return _encrypted_message_js__WEBPACK_IMPORTED_MODULE_3__["importEncryptedBuffer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "importRawEncryptedBufferList", function() { return _encrypted_message_js__WEBPACK_IMPORTED_MODULE_3__["importRawEncryptedBufferList"]; });

/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./signature.js */ "./src/signature.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "importSignatureBuffer", function() { return _signature_js__WEBPACK_IMPORTED_MODULE_4__["importSignatureBuffer"]; });

/* harmony import */ var _cascaded_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cascaded_data.js */ "./src/cascaded_data.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "importCascadedBuffer", function() { return _cascaded_data_js__WEBPACK_IMPORTED_MODULE_5__["importCascadedBuffer"]; });

/**
 * index.js
 */






/* harmony default export */ __webpack_exports__["default"] = ({
  generateKey: _core_js__WEBPACK_IMPORTED_MODULE_0__["generateKey"],
  encrypt: _core_js__WEBPACK_IMPORTED_MODULE_0__["encrypt"],
  decrypt: _core_js__WEBPACK_IMPORTED_MODULE_0__["decrypt"],
  sign: _core_js__WEBPACK_IMPORTED_MODULE_0__["sign"],
  verify: _core_js__WEBPACK_IMPORTED_MODULE_0__["verify"],
  importKeys: _keys_js__WEBPACK_IMPORTED_MODULE_2__["importKeys"],
  importEncryptedBuffer: _encrypted_message_js__WEBPACK_IMPORTED_MODULE_3__["importEncryptedBuffer"],
  importRawEncryptedBufferList: _encrypted_message_js__WEBPACK_IMPORTED_MODULE_3__["importRawEncryptedBufferList"],
  importSignatureBuffer: _signature_js__WEBPACK_IMPORTED_MODULE_4__["importSignatureBuffer"],
  importCascadedBuffer: _cascaded_data_js__WEBPACK_IMPORTED_MODULE_5__["importCascadedBuffer"],
  createEncryptionCascade: _cascade_js__WEBPACK_IMPORTED_MODULE_1__["createEncryptionCascade"],
  createDecryptionCascade: _cascade_js__WEBPACK_IMPORTED_MODULE_1__["createDecryptionCascade"]
});


/***/ }),

/***/ "./src/keyid.js":
/*!**********************!*\
  !*** ./src/keyid.js ***!
  \**********************/
/*! exports provided: fromOpenPgpKey, fromJscuKey, fromRawKey, createKeyId, KeyId, createKeyIdList, KeyIdList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromOpenPgpKey", function() { return fromOpenPgpKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromJscuKey", function() { return fromJscuKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRawKey", function() { return fromRawKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createKeyId", function() { return createKeyId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyId", function() { return KeyId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createKeyIdList", function() { return createKeyIdList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyIdList", function() { return KeyIdList; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js");
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var js_encoding_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! js-encoding-utils */ "./node_modules/js-encoding-utils/dist/jseu.bundle.js");
/* harmony import */ var js_encoding_utils__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(js_encoding_utils__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _params_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./params.js */ "./src/params.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./util.js */ "./src/util.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash.clonedeep */ "./node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_12__);










/**
 * keyid.js
 */




/**
 * Calculate key id from openpgp key object
 * @param keyObject
 * @param len
 * @return {KeyId}
 */

function fromOpenPgpKey(keyObject) {
  var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _params_js__WEBPACK_IMPORTED_MODULE_10__["default"].publicKeyIdLEN;
  var fp = keyObject.getFingerprint();
  var buf = js_encoding_utils__WEBPACK_IMPORTED_MODULE_9___default.a.encoder.hexStringToArrayBuffer(fp);
  return createKeyId(buf.slice(0, len));
}
/**
 * Calculate key Id from jwk-formatted key
 * Key id is defined as jwk public key thumbprint (NOTE: not private key thumbprint)
 * see the spec here => https://tools.ietf.org/html/rfc7638
 * @param keyObject
 * @param len
 * @return {Promise<KeyId>}
 */

function fromJscuKey(_x) {
  return _fromJscuKey.apply(this, arguments);
}
/**
 * Just a hash of raw binary key
 * @param bin
 * @param len
 * @return {Promise<KeyId>}
 */

function _fromJscuKey() {
  _fromJscuKey = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(keyObject) {
    var len,
        thumbPrintBuf,
        _args = arguments;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            len = _args.length > 1 && _args[1] !== undefined ? _args[1] : _params_js__WEBPACK_IMPORTED_MODULE_10__["default"].publicKeyIdLEN;
            _context.next = 3;
            return keyObject.getJwkThumbprint(_params_js__WEBPACK_IMPORTED_MODULE_10__["default"].publicKeyIdHash, 'binary');

          case 3:
            thumbPrintBuf = _context.sent;
            return _context.abrupt("return", createKeyId(thumbPrintBuf.slice(0, len)));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _fromJscuKey.apply(this, arguments);
}

function fromRawKey(_x2) {
  return _fromRawKey.apply(this, arguments);
}

function _fromRawKey() {
  _fromRawKey = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2(bin) {
    var len,
        jscu,
        digest,
        _args2 = arguments;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            len = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : _params_js__WEBPACK_IMPORTED_MODULE_10__["default"].sessionKeyIdLength;
            jscu = Object(_util_js__WEBPACK_IMPORTED_MODULE_11__["getJscu"])();
            _context2.next = 4;
            return jscu.hash.compute(bin, _params_js__WEBPACK_IMPORTED_MODULE_10__["default"].sessionKeyIdHash);

          case 4:
            digest = _context2.sent;
            return _context2.abrupt("return", createKeyId(digest.slice(0, len)));

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _fromRawKey.apply(this, arguments);
}

function createKeyId(keyId) {
  if (!(keyId instanceof Uint8Array)) throw new Error('NotUint8ArrayKeyId');
  var localKeyId = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_12___default()(keyId);
  return new KeyId(localKeyId);
}
var KeyId =
/*#__PURE__*/
function (_Uint8Array) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default()(KeyId, _Uint8Array);

  // eslint-disable-next-line no-useless-constructor
  function KeyId(keyId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, KeyId);

    return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(KeyId).call(this, keyId));
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(KeyId, [{
    key: "toHex",
    value: function toHex() {
      return js_encoding_utils__WEBPACK_IMPORTED_MODULE_9___default.a.encoder.arrayBufferToHexString(this);
    }
  }, {
    key: "toBuffer",
    value: function toBuffer() {
      var buf = new Uint8Array(this);
      return lodash_clonedeep__WEBPACK_IMPORTED_MODULE_12___default()(buf);
    }
  }]);

  return KeyId;
}(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_7___default()(Uint8Array)); // NOTE: KeyIdList is used only for EncryptedMessage generated in OpenPGP.

function createKeyIdList(keyIds) {
  var obj = new KeyIdList();

  obj._init(keyIds);

  return obj;
}
var KeyIdList =
/*#__PURE__*/
function (_Array) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default()(KeyIdList, _Array);

  function KeyIdList() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, KeyIdList);

    return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(KeyIdList).apply(this, arguments));
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(KeyIdList, [{
    key: "_init",
    value: function _init(keyIds) {
      if (!(keyIds instanceof Array)) throw new Error('InvalidKeyIdList');
      var binaryKeyIds = keyIds.map(function (k) {
        if (!(k instanceof KeyId)) throw new Error('NotKeyId');
        return k;
      });
      this.push.apply(this, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(binaryKeyIds));
    }
  }, {
    key: "toBuffer",
    value: function toBuffer() {
      return this.map(function (kid) {
        return kid.toBuffer();
      });
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return Array.from(this);
    }
  }, {
    key: "map",
    value: function map(callback) {
      return this.toArray().map(callback);
    }
  }]);

  return KeyIdList;
}(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_7___default()(Array));

/***/ }),

/***/ "./src/keys.js":
/*!*********************!*\
  !*** ./src/keys.js ***!
  \*********************/
/*! exports provided: Keys, importKeys, generateKeyObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Keys", function() { return Keys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "importKeys", function() { return importKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateKeyObject", function() { return generateKeyObject; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash.clonedeep */ "./node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _suite_jscu_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./suite_jscu.js */ "./src/suite_jscu.js");
/* harmony import */ var _suite_openpgp_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./suite_openpgp.js */ "./src/suite_openpgp.js");





/**
 * keys.js
 */
 //'lodash/cloneDeep';



var Keys =
/*#__PURE__*/
function () {
  function Keys() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, Keys);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(Keys, [{
    key: "from",
    value: function () {
      var _from = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(format, _ref) {
        var keys, suite, mode, obj;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                keys = _ref.keys, suite = _ref.suite, mode = _ref.mode;

                if (!(mode.indexOf('encrypt') >= 0)) {
                  _context.next = 11;
                  break;
                }

                if (!(mode.indexOf('verify') >= 0 || mode.indexOf('decrypt') >= 0)) {
                  _context.next = 4;
                  break;
                }

                throw new Error('InvalidMode');

              case 4:
                if (!(typeof keys.publicKeys !== 'undefined')) {
                  _context.next = 9;
                  break;
                }

                if (!(typeof keys.sessionKey !== 'undefined')) {
                  _context.next = 7;
                  break;
                }

                throw new Error('SessionKeyAndPublicKeyAreExclusive');

              case 7:
                _context.next = 11;
                break;

              case 9:
                if (!(typeof keys.sessionKey === 'undefined')) {
                  _context.next = 11;
                  break;
                }

                throw new Error('NoSessionKeyOrPublicKeyIsGiven');

              case 11:
                if (!(mode.indexOf('decrypt') >= 0)) {
                  _context.next = 21;
                  break;
                }

                if (!(mode.indexOf('sign') >= 0 || mode.indexOf('encrypt') >= 0)) {
                  _context.next = 14;
                  break;
                }

                throw new Error('InvalidMode');

              case 14:
                if (!(typeof keys.privateKeyPassSets !== 'undefined' || typeof keys.privateKeys !== 'undefined')) {
                  _context.next = 19;
                  break;
                }

                if (!(typeof keys.sessionKey !== 'undefined')) {
                  _context.next = 17;
                  break;
                }

                throw new Error('SessionKeyAndPrivateKeyAreExclusive');

              case 17:
                _context.next = 21;
                break;

              case 19:
                if (!(typeof keys.sessionKey === 'undefined')) {
                  _context.next = 21;
                  break;
                }

                throw new Error('NoSessionKeyOrPrivateKeyIsGiven');

              case 21:
                if (!(mode.indexOf('sign') >= 0)) {
                  _context.next = 26;
                  break;
                }

                if (!(mode.indexOf('verify') >= 0 || mode.indexOf('decrypt') >= 0)) {
                  _context.next = 24;
                  break;
                }

                throw new Error('InvalidMode');

              case 24:
                if (!(typeof keys.privateKeyPassSets === 'undefined' && typeof keys.privateKeys === 'undefined')) {
                  _context.next = 26;
                  break;
                }

                throw new Error('NoPrivateKey');

              case 26:
                if (!(mode.indexOf('verify') >= 0)) {
                  _context.next = 31;
                  break;
                }

                if (!(mode.indexOf('sign') >= 0 || mode.indexOf('encrypt') >= 0)) {
                  _context.next = 29;
                  break;
                }

                throw new Error('InvalidMode');

              case 29:
                if (!(typeof keys.publicKeys === 'undefined')) {
                  _context.next = 31;
                  break;
                }

                throw new Error('NoPublicKey');

              case 31:
                if (!(format === 'string')) {
                  _context.next = 37;
                  break;
                }

                _context.next = 34;
                return importKeyStrings({
                  keys: keys,
                  suite: suite,
                  mode: mode
                });

              case 34:
                obj = _context.sent;
                _context.next = 44;
                break;

              case 37:
                if (!(format === 'object')) {
                  _context.next = 43;
                  break;
                }

                _context.next = 40;
                return importKeyObjects({
                  keys: keys,
                  suite: suite,
                  mode: mode
                });

              case 40:
                obj = _context.sent;
                _context.next = 44;
                break;

              case 43:
                throw new Error('UnsupportedAtThisPoint');

              case 44:
                this._keys = obj.keys;
                this._suite = obj.suite;
                this._mode = obj.mode;
                return _context.abrupt("return", true);

              case 48:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function from(_x, _x2) {
        return _from.apply(this, arguments);
      };
    }()
  }, {
    key: "canEncrypt",
    value: function canEncrypt() {
      return this.mode.indexOf('encrypt') >= 0;
    }
  }, {
    key: "canDecrypt",
    value: function canDecrypt() {
      return this.mode.indexOf('decrypt') >= 0;
    }
  }, {
    key: "canSign",
    value: function canSign() {
      return this.mode.indexOf('sign') >= 0;
    }
  }, {
    key: "canVerify",
    value: function canVerify() {
      return this.mode.indexOf('verify') >= 0;
    }
  }, {
    key: "keys",
    get: function get() {
      return this._keys;
    }
  }, {
    key: "suite",
    get: function get() {
      return this._suite;
    }
  }, {
    key: "mode",
    get: function get() {
      return this._mode;
    }
  }]);

  return Keys;
}();
/**
 * Functions to import keys and translate them to suite-specific key objects.
 * @param format
 * @param keys
 * @param suite
 * @param mode
 * @return {Promise<Keys>}
 */

function importKeys() {
  return _importKeys.apply(this, arguments);
}
/**
 * import from keystring, i.e., pem
 * @param keys
 * @param suite
 * @param mode
 * @return {Promise<{keys, suite: *, mode: *}>}
 */

function _importKeys() {
  _importKeys = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {
    var format,
        _ref2,
        keys,
        suite,
        mode,
        localFormat,
        localKeys,
        localSuite,
        localMode,
        keyObj,
        _args2 = arguments;

    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            format = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : 'string';
            _ref2 = _args2.length > 1 ? _args2[1] : undefined, keys = _ref2.keys, suite = _ref2.suite, mode = _ref2.mode;
            localFormat = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_4___default()(format);
            localKeys = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_4___default()(keys);
            localSuite = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_4___default()(suite);
            localMode = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_4___default()(mode);
            keyObj = new Keys();
            _context2.next = 9;
            return keyObj.from(localFormat, {
              keys: localKeys,
              suite: localSuite,
              mode: localMode
            });

          case 9:
            return _context2.abrupt("return", keyObj);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _importKeys.apply(this, arguments);
}

function importKeyStrings(_x3) {
  return _importKeyStrings.apply(this, arguments);
}
/**
 * just import from key object
 * @param keys
 * @param suite
 * @param mode
 * @return {Promise<{keys, suite: *, mode: *}>}
 */


function _importKeyStrings() {
  _importKeyStrings = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4(_ref3) {
    var keys, suite, mode, keyObjects, modes;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            keys = _ref3.keys, suite = _ref3.suite, mode = _ref3.mode;
            keyObjects = {};
            if (keys.sessionKey) keyObjects.sessionKey = keys.sessionKey; // symmetric key

            modes = [{
              name: 'encrypt_decrypt',
              op: {
                public: 'encrypt',
                private: 'decrypt'
              }
            }, {
              name: 'sign_verify',
              op: {
                public: 'verify',
                private: 'sign'
              }
            }];
            _context4.next = 6;
            return Promise.all(modes.map(
            /*#__PURE__*/
            function () {
              var _ref5 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
              /*#__PURE__*/
              _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3(modeOjbect) {
                var suiteObj;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        if (!(typeof suite[modeOjbect.name] !== 'undefined')) {
                          _context3.next = 25;
                          break;
                        }

                        if (!(suite[modeOjbect.name] === 'jscu')) {
                          _context3.next = 5;
                          break;
                        }

                        suiteObj = _suite_jscu_js__WEBPACK_IMPORTED_MODULE_5__["Jscu"];
                        _context3.next = 10;
                        break;

                      case 5:
                        if (!(suite[modeOjbect.name] === 'openpgp')) {
                          _context3.next = 9;
                          break;
                        }

                        suiteObj = _suite_openpgp_js__WEBPACK_IMPORTED_MODULE_6__["OpenPGP"];
                        _context3.next = 10;
                        break;

                      case 9:
                        throw new Error('InvalidSuite');

                      case 10:
                        if (!(mode.indexOf(modeOjbect.op.public) >= 0)) {
                          _context3.next = 17;
                          break;
                        }

                        if (!keys.publicKeys) {
                          _context3.next = 15;
                          break;
                        }

                        _context3.next = 14;
                        return Promise.all(keys.publicKeys.map(function (pk) {
                          return suiteObj.importKey('pem', pk);
                        }));

                      case 14:
                        keyObjects.publicKeys = _context3.sent;

                      case 15:
                        _context3.next = 25;
                        break;

                      case 17:
                        if (!(mode.indexOf(modeOjbect.op.private) >= 0)) {
                          _context3.next = 24;
                          break;
                        }

                        if (!keys.privateKeyPassSets) {
                          _context3.next = 22;
                          break;
                        }

                        _context3.next = 21;
                        return Promise.all(keys.privateKeyPassSets.map(function (pkps) {
                          return suiteObj.importKey('pem', pkps.privateKey, pkps.passphrase);
                        }));

                      case 21:
                        keyObjects.privateKeys = _context3.sent;

                      case 22:
                        _context3.next = 25;
                        break;

                      case 24:
                        throw new Error('InvalidKeyMode');

                      case 25:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3, this);
              }));

              return function (_x6) {
                return _ref5.apply(this, arguments);
              };
            }()));

          case 6:
            return _context4.abrupt("return", {
              keys: keyObjects,
              suite: suite,
              mode: mode
            });

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return _importKeyStrings.apply(this, arguments);
}

function importKeyObjects(_x4) {
  return _importKeyObjects.apply(this, arguments);
}
/**
 * Basic key generator via openpgp/jscu APIs. Returns raw objects of keys in both environments from the spec with some additional args.
 * @param keyParams
 * @return {Promise<*>}
 */


function _importKeyObjects() {
  _importKeyObjects = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5(_ref4) {
    var keys, suite, mode, keyObjects;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            keys = _ref4.keys, suite = _ref4.suite, mode = _ref4.mode;
            keyObjects = {};
            if (keys.sessionKey) keyObjects.sessionKey = keys.sessionKey; // symmetric key

            if (keys.publicKeys) keyObjects.publicKeys = keys.publicKeys;
            if (keys.privateKeys) keyObjects.privateKeys = keys.privateKeys;
            return _context5.abrupt("return", {
              keys: keyObjects,
              suite: suite,
              mode: mode
            });

          case 6:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return _importKeyObjects.apply(this, arguments);
}

function generateKeyObject(_x5) {
  return _generateKeyObject.apply(this, arguments);
}

function _generateKeyObject() {
  _generateKeyObject = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee6(keyParams) {
    var localKeyParams, returnKey;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            localKeyParams = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_4___default()(keyParams);

            if (!(localKeyParams.suite === 'openpgp')) {
              _context6.next = 7;
              break;
            }

            _context6.next = 4;
            return _suite_openpgp_js__WEBPACK_IMPORTED_MODULE_6__["OpenPGP"].generateKey({
              userIds: localKeyParams.userIds,
              passphrase: localKeyParams.passphrase,
              params: localKeyParams.keyParams
            }).catch(function (e) {
              throw new Error("GPGKeyGenerationFailed: ".concat(e.message));
            });

          case 4:
            returnKey = _context6.sent;
            _context6.next = 14;
            break;

          case 7:
            if (!(localKeyParams.suite === 'jscu')) {
              _context6.next = 13;
              break;
            }

            _context6.next = 10;
            return _suite_jscu_js__WEBPACK_IMPORTED_MODULE_5__["Jscu"].generateKey({
              passphrase: localKeyParams.passphrase,
              params: localKeyParams.keyParams,
              encryptOptions: localKeyParams.encryptOptions
            }).catch(function (e) {
              throw new Error("JscuKeyGenerationFailed: ".concat(e.message));
            });

          case 10:
            returnKey = _context6.sent;
            _context6.next = 14;
            break;

          case 13:
            throw new Error('UnsupportedCryptoSuite');

          case 14:
            return _context6.abrupt("return", returnKey);

          case 15:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));
  return _generateKeyObject.apply(this, arguments);
}

/***/ }),

/***/ "./src/message.js":
/*!************************!*\
  !*** ./src/message.js ***!
  \************************/
/*! exports provided: importMessage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "importMessage", function() { return importMessage; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var js_encoding_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! js-encoding-utils */ "./node_modules/js-encoding-utils/dist/jseu.bundle.js");
/* harmony import */ var js_encoding_utils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(js_encoding_utils__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash.clonedeep */ "./node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_3__);



/**
 * message.js
 */

 //'lodash/cloneDeep';

/**
 * import message and translate it to message object.
 * @param msg
 * @return {Message}
 */

function importMessage(msg) {
  var localMessage = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_3___default()(msg);
  var obj = new Message();

  obj._init(localMessage);

  return obj;
}

var Message =
/*#__PURE__*/
function () {
  function Message() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Message);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Message, [{
    key: "_init",
    value: function _init(msg) {
      if (msg instanceof Uint8Array) {
        this._message = msg;
        this._messageType = 'binary';
      } else if (typeof msg === 'string') {
        this._message = js_encoding_utils__WEBPACK_IMPORTED_MODULE_2___default.a.encoder.stringToArrayBuffer(msg);
        this._messageType = 'string';
      } else throw new Error('UnsupportedMessageType');
    }
  }, {
    key: "binary",
    get: function get() {
      // returns message in binary format
      return this._message;
    }
  }, {
    key: "message",
    get: function get() {
      // return message in original format
      if (this.messageType === 'binary') return this._message;else if (this.messageType === 'string') return js_encoding_utils__WEBPACK_IMPORTED_MODULE_2___default.a.encoder.arrayBufferToString(this._message);else return null;
    }
  }, {
    key: "messageType",
    get: function get() {
      return this._messageType;
    }
  }]);

  return Message;
}();

/***/ }),

/***/ "./src/params.js":
/*!***********************!*\
  !*** ./src/params.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * params.js
 */
/* harmony default export */ __webpack_exports__["default"] = ({
  ////////////////////////////////////////////////////////////
  publicKeyIdLEN: 32,
  publicKeyIdHash: 'SHA-256',
  ////////////////////////////////////////////////////////////
  sessionKeyIdLength: 32,
  // 8 byte session key id given from last 8 byte from sha 256 digest as public key id
  sessionKeyIdHash: 'SHA-256',
  // for hash digest of session key
  ////////////////////////////////////////////////////////////
  // Suite-specific parameters below
  ////////////////////////////////////////////////////////////
  // jscu
  jscu: {
    // iv length for AES-GCM
    ivLengthAesGcm: 12
  },
  ////////////////////////////////////////////////////////////
  // OpenPGP
  openpgp: {
    defaultUser: '<example@example.com>',
    // openpgp.worker.js must be located in the place where api_openpgp.js and js-file bundling core-file.
    // Namely in this project, they are located in 'dist' and it will be './' from the viewpoint of bundled file.
    workerPathWeb: './openpgp.worker.min.js',
    workerPathNode: '../node_modules/openpgp/dist/openpgp.worker.min.js',
    // mapping names of curve
    curveList: {
      'P-256': {
        name: 'p256'
      },
      'P-384': {
        name: 'p384'
      },
      'P-521': {
        name: 'p521'
      }
    }
  }
});

/***/ }),

/***/ "./src/signature.js":
/*!**************************!*\
  !*** ./src/signature.js ***!
  \**************************/
/*! exports provided: importSignatureBuffer, createSignature, Signature, createRawSignature, RawSignature */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "importSignatureBuffer", function() { return importSignatureBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createSignature", function() { return createSignature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Signature", function() { return Signature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createRawSignature", function() { return createRawSignature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RawSignature", function() { return RawSignature; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js");
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _keyid_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./keyid.js */ "./src/keyid.js");
/* harmony import */ var js_encoding_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! js-encoding-utils */ "./node_modules/js-encoding-utils/dist/jseu.bundle.js");
/* harmony import */ var js_encoding_utils__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(js_encoding_utils__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash.clonedeep */ "./node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var msgpack_lite__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! msgpack-lite */ "./node_modules/msgpack-lite/lib/browser.js");
/* harmony import */ var msgpack_lite__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(msgpack_lite__WEBPACK_IMPORTED_MODULE_10__);








/**
 * signature
 */




var suites = ['jscu', 'openpgp'];
var keyTypes = ['public_key_sign'];
function importSignatureBuffer(serialized) {
  if (!(serialized instanceof Uint8Array)) throw new Error('NonUint8ArraySerializedData');
  var des;

  try {
    des = msgpack_lite__WEBPACK_IMPORTED_MODULE_10___default.a.decode(serialized);
  } catch (e) {
    throw new Error("FailedToParseSignatureBuffer: ".concat(e.message));
  }

  if (!des.suite || !des.keyType || !des.signatures || !des.options) throw new Error('InvalidSignatureFormat');
  var signatureList = des.signatures.map(function (elem) {
    return createRawSignature(elem.data, Object(_keyid_js__WEBPACK_IMPORTED_MODULE_7__["createKeyId"])(elem.keyId));
  });
  return createSignature(des.suite, des.keyType, signatureList, des.options);
}
function createSignature(suite, keyType, signatures) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  // assertion
  if (suites.indexOf(suite) < 0) throw new Error('UnsupportedSuite');
  if (keyTypes.indexOf(keyType) < 0) throw new Error('UnsupportedKeyType');
  if (suite === 'jscu' && typeof options.hash === 'undefined') throw new Error('HashMustBeSpecified');
  if (!(signatures instanceof Array)) throw new Error('InvalidSignatureList');
  return new Signature(suite, keyType, signatures, options);
}
var Signature =
/*#__PURE__*/
function () {
  function Signature(suite, keyType, signatures) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5___default()(this, Signature);

    this._suite = suite;
    this._keyType = keyType;
    this._signatures = new SignatureList(signatures);
    this._options = options;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6___default()(Signature, [{
    key: "serialize",
    value: function serialize() {
      return msgpack_lite__WEBPACK_IMPORTED_MODULE_10___default.a.encode({
        suite: this._suite,
        keyType: this._keyType,
        signatures: this._signatures.toJsObject(),
        options: this._options
      });
    }
  }, {
    key: "suite",
    get: function get() {
      return this._suite;
    }
  }, {
    key: "keyType",
    get: function get() {
      return this._keyType;
    }
  }, {
    key: "signatures",
    get: function get() {
      return this._signatures;
    }
  }, {
    key: "options",
    get: function get() {
      return this._options;
    }
  }]);

  return Signature;
}();

var SignatureList =
/*#__PURE__*/
function (_Array) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(SignatureList, _Array);

  function SignatureList(signatures) {
    var _this2;

    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5___default()(this, SignatureList);

    _this = _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2___default()(SignatureList).call(this));
    var binarySignatures = signatures.map(function (sig) {
      if (!(sig instanceof RawSignature)) throw new Error('NotRawSignatureObject');
      return sig;
    });

    (_this2 = _this).push.apply(_this2, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(binarySignatures));

    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6___default()(SignatureList, [{
    key: "toJsObject",
    value: function toJsObject() {
      return this.map(function (s) {
        return s.toJsObject();
      });
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return Array.from(this);
    }
  }, {
    key: "map",
    value: function map(callback) {
      return this.toArray().map(callback);
    }
  }, {
    key: "filter",
    value: function filter(callback) {
      return this.toArray().filter(callback);
    }
  }]);

  return SignatureList;
}(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4___default()(Array));

function createRawSignature(sig, keyId) {
  // assertion
  if (!(sig instanceof Uint8Array)) throw new Error('NonUint8ArraySignature');
  if (!(keyId instanceof _keyid_js__WEBPACK_IMPORTED_MODULE_7__["KeyId"])) throw new Error('NonKeyIdObject');
  return new RawSignature(sig, keyId);
}
var RawSignature =
/*#__PURE__*/
function (_Uint8Array) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(RawSignature, _Uint8Array);

  function RawSignature(sig, keyId) {
    var _this3;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5___default()(this, RawSignature);

    _this3 = _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2___default()(RawSignature).call(this, sig));
    _this3._keyId = keyId;
    return _this3;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6___default()(RawSignature, [{
    key: "toBase64",
    value: function toBase64() {
      return js_encoding_utils__WEBPACK_IMPORTED_MODULE_8___default.a.encoder.encodeBase64(this);
    }
  }, {
    key: "toBuffer",
    value: function toBuffer() {
      var buf = new Uint8Array(this);
      return lodash_clonedeep__WEBPACK_IMPORTED_MODULE_9___default()(buf);
    }
  }, {
    key: "toJsObject",
    value: function toJsObject() {
      return {
        data: this.toBuffer(),
        keyId: this._keyId.toBuffer()
      };
    }
  }, {
    key: "keyId",
    get: function get() {
      return this._keyId;
    }
  }]);

  return RawSignature;
}(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4___default()(Uint8Array));

/***/ }),

/***/ "./src/suite.js":
/*!**********************!*\
  !*** ./src/suite.js ***!
  \**********************/
/*! exports provided: Suite */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Suite", function() { return Suite; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);


/**
 * suite.js
 */
var Suite = function Suite() {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Suite);

  if ((this instanceof Suite ? this.constructor : void 0) === Suite) {
    throw new TypeError('SuiteClassCannotBeInstantiatedDirectly');
  }

  if (this.constructor.generateKey === undefined || this.constructor.encrypt === undefined || this.constructor.decrypt === undefined || this.constructor.sign === undefined || this.constructor.verify === undefined || this.constructor.importKey === undefined) {
    throw new TypeError('MustOverrideAllMethods');
  }
};

/***/ }),

/***/ "./src/suite_jscu.js":
/*!***************************!*\
  !*** ./src/suite_jscu.js ***!
  \***************************/
/*! exports provided: Jscu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Jscu", function() { return Jscu; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _suite_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./suite.js */ "./src/suite.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./util.js */ "./src/util.js");
/* harmony import */ var _keyid_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./keyid.js */ "./src/keyid.js");
/* harmony import */ var _params_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./params.js */ "./src/params.js");
/* harmony import */ var _encrypted_message_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./encrypted_message.js */ "./src/encrypted_message.js");
/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./signature.js */ "./src/signature.js");









/**
 * suite_jscu.js
 */






var Jscu =
/*#__PURE__*/
function (_Suite) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_7___default()(Jscu, _Suite);

  function Jscu() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default()(this, Jscu);

    return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Jscu).apply(this, arguments));
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4___default()(Jscu, null, [{
    key: "generateKey",

    /**
     * Generate publicKeyPair or sessionKeyObject with js-crypto-utils.
     * @param params {Object}
     * @param passphrase {string}
     * @param encryptOptions {Object}
     * @return {Promise<*>}
     */
    value: function () {
      var _generateKey = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee(_ref) {
        var params, _ref$passphrase, passphrase, _ref$encryptOptions, encryptOptions, jscu, rawKey, keyId, keyType, options, jwKeys, _keyId, publicKeyObj, privateKeyObj, encryptedDer;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                params = _ref.params, _ref$passphrase = _ref.passphrase, passphrase = _ref$passphrase === void 0 ? null : _ref$passphrase, _ref$encryptOptions = _ref.encryptOptions, encryptOptions = _ref$encryptOptions === void 0 ? {} : _ref$encryptOptions;
                jscu = Object(_util_js__WEBPACK_IMPORTED_MODULE_9__["getJscu"])();

                if (!(params.type === 'session')) {
                  _context.next = 14;
                  break;
                }

                if (params.length) {
                  _context.next = 5;
                  break;
                }

                throw new Error('params.length must be specified');

              case 5:
                _context.next = 7;
                return jscu.random.getRandomBytes(params.length);

              case 7:
                rawKey = _context.sent;
                _context.next = 10;
                return _keyid_js__WEBPACK_IMPORTED_MODULE_10__["fromRawKey"](rawKey);

              case 10:
                keyId = _context.sent;
                return _context.abrupt("return", {
                  key: rawKey,
                  keyId: keyId
                });

              case 14:
                if (!(params.type === 'ec' || params.type === 'rsa')) {
                  _context.next = 33;
                  break;
                }

                keyType = params.type === 'ec' ? 'EC' : 'RSA';
                options = params.type === 'ec' ? {
                  namedCurve: params.curve
                } : {
                  modulusLength: params.modulusLength
                };
                _context.next = 19;
                return jscu.pkc.generateKey(keyType, options);

              case 19:
                jwKeys = _context.sent;
                _context.next = 22;
                return _keyid_js__WEBPACK_IMPORTED_MODULE_10__["fromJscuKey"](new jscu.Key('jwk', jwKeys.publicKey));

              case 22:
                _keyId = _context.sent;
                publicKeyObj = new jscu.Key('jwk', jwKeys.publicKey);
                privateKeyObj = new jscu.Key('jwk', jwKeys.privateKey); // for encrypted keys

                if (!passphrase) {
                  _context.next = 30;
                  break;
                }

                _context.next = 28;
                return privateKeyObj.export('der', {
                  encryptParams: Object.assign({
                    passphrase: passphrase
                  }, encryptOptions)
                });

              case 28:
                encryptedDer = _context.sent;
                privateKeyObj = new jscu.Key('der', encryptedDer);

              case 30:
                return _context.abrupt("return", {
                  publicKey: publicKeyObj,
                  privateKey: privateKeyObj,
                  keyId: _keyId
                });

              case 33:
                throw new Error('JscuUnsupportedKeyType');

              case 34:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function generateKey(_x) {
        return _generateKey.apply(this, arguments);
      };
    }()
    /**
     * Import jscu key object
     * @param type
     * @param key
     * @param passphrase
     * @return {Promise<jscu.Key>}
     */

  }, {
    key: "importKey",
    value: function () {
      var _importKey = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee2(type, key, passphrase) {
        var jscu, keyObj;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                jscu = Object(_util_js__WEBPACK_IMPORTED_MODULE_9__["getJscu"])();
                keyObj = new jscu.Key(type, key);

                if (!(keyObj.isPrivate && keyObj.isEncrypted)) {
                  _context2.next = 7;
                  break;
                }

                if (passphrase) {
                  _context2.next = 5;
                  break;
                }

                throw new Error('PassphraseRequired');

              case 5:
                _context2.next = 7;
                return keyObj.decrypt(passphrase).catch(function (e) {
                  throw new Error("FailedToDecryptPrivateKey: ".concat(e.message));
                });

              case 7:
                return _context2.abrupt("return", keyObj);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function importKey(_x2, _x3, _x4) {
        return _importKey.apply(this, arguments);
      };
    }()
    /**
     * Encrypt plaintext object with given keys.
     * @param message
     * @param keys
     * @param options
     * @return {Promise<{message: EncryptedMessage}>}
     */

  }, {
    key: "encrypt",
    value: function () {
      var _encrypt = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee4(_ref2) {
        var message, keys, options, jscu, encrypted, encryptedObject, jwk, ephemeral, publicKey, iv, data, keyId, obj;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                message = _ref2.message, keys = _ref2.keys, options = _ref2.options;
                jscu = Object(_util_js__WEBPACK_IMPORTED_MODULE_9__["getJscu"])(); // check options

                if (typeof options === 'undefined') options = {}; // encryption

                if (!keys.publicKeys) {
                  _context4.next = 33;
                  break;
                }

                if (!options.privateKeyPass) {
                  _context4.next = 12;
                  break;
                }

                _context4.next = 7;
                return Jscu.importKey('pem', options.privateKeyPass.privateKey, options.privateKeyPass.passphrase);

              case 7:
                options.privateKey = _context4.sent;
                _context4.next = 10;
                return options.privateKey.export('jwk');

              case 10:
                options.privateKey = _context4.sent;
                delete options.privateKeyPass;

              case 12:
                if (options.privateKey) {
                  _context4.next = 21;
                  break;
                }

                _context4.next = 15;
                return keys.publicKeys[0].export('jwk');

              case 15:
                jwk = _context4.sent;

                if (!(jwk.kty === 'EC')) {
                  _context4.next = 21;
                  break;
                }

                _context4.next = 19;
                return jscu.pkc.generateKey('EC', {
                  namedCurve: jwk.crv
                });

              case 19:
                ephemeral = _context4.sent;
                options.privateKey = ephemeral.privateKey;

              case 21:
                _context4.next = 23;
                return Promise.all(keys.publicKeys.map(
                /*#__PURE__*/
                function () {
                  var _ref3 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default()(
                  /*#__PURE__*/
                  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee3(publicKeyObj) {
                    var publicJwk, data, fed;
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            _context3.next = 2;
                            return publicKeyObj.export('jwk');

                          case 2:
                            publicJwk = _context3.sent;
                            _context3.next = 5;
                            return jscu.pkc.encrypt(message.binary, publicJwk, options);

                          case 5:
                            data = _context3.sent;
                            fed = new Uint8Array(data.data);
                            delete data.data;
                            _context3.t0 = _encrypted_message_js__WEBPACK_IMPORTED_MODULE_12__["createRawEncryptedMessage"];
                            _context3.t1 = fed;
                            _context3.next = 12;
                            return _keyid_js__WEBPACK_IMPORTED_MODULE_10__["fromJscuKey"](publicKeyObj);

                          case 12:
                            _context3.t2 = _context3.sent;
                            _context3.t3 = data;
                            return _context3.abrupt("return", (0, _context3.t0)(_context3.t1, _context3.t2, _context3.t3));

                          case 15:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3, this);
                  }));

                  return function (_x6) {
                    return _ref3.apply(this, arguments);
                  };
                }()));

              case 23:
                encrypted = _context4.sent;

                if (!(typeof options.privateKey !== 'undefined')) {
                  _context4.next = 30;
                  break;
                }

                publicKey = new jscu.Key('jwk', options.privateKey);
                _context4.next = 28;
                return publicKey.export('der', {
                  outputPublic: true
                });

              case 28:
                options.publicKey = _context4.sent;
                // export public key from private key
                delete options.privateKey;

              case 30:
                encryptedObject = {
                  message: Object(_encrypted_message_js__WEBPACK_IMPORTED_MODULE_12__["createEncryptedMessage"])('jscu', 'public_key_encrypt', encrypted, options)
                };
                _context4.next = 53;
                break;

              case 33:
                if (!keys.sessionKey) {
                  _context4.next = 52;
                  break;
                }

                if (!(options.name === 'AES-GCM')) {
                  _context4.next = 48;
                  break;
                }

                _context4.next = 37;
                return jscu.random.getRandomBytes(_params_js__WEBPACK_IMPORTED_MODULE_11__["default"].jscu.ivLengthAesGcm);

              case 37:
                iv = _context4.sent;
                _context4.next = 40;
                return jscu.aes.encrypt(message.binary, keys.sessionKey, {
                  name: options.name,
                  iv: iv
                });

              case 40:
                data = _context4.sent;
                _context4.next = 43;
                return _keyid_js__WEBPACK_IMPORTED_MODULE_10__["fromRawKey"](keys.sessionKey);

              case 43:
                keyId = _context4.sent;
                obj = Object(_encrypted_message_js__WEBPACK_IMPORTED_MODULE_12__["createRawEncryptedMessage"])(data, keyId, {
                  iv: iv
                });
                encrypted = [obj]; // TODO, should be an Array?

                _context4.next = 49;
                break;

              case 48:
                throw new Error('JscuInvalidEncryptionAlgorithm');

              case 49:
                encryptedObject = {
                  message: Object(_encrypted_message_js__WEBPACK_IMPORTED_MODULE_12__["createEncryptedMessage"])('jscu', 'session_key_encrypt', encrypted, options)
                };
                _context4.next = 53;
                break;

              case 52:
                throw new Error('JscuInvalidEncryptionKey');

              case 53:
                return _context4.abrupt("return", encryptedObject);

              case 54:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function encrypt(_x5) {
        return _encrypt.apply(this, arguments);
      };
    }()
    /**
     * Decrypt encrypted object with given keys.
     * @param encrypted
     * @param keys
     * @param options
     * @return {Promise<{data: *}>}
     */

  }, {
    key: "decrypt",
    value: function () {
      var _decrypt = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee8(_ref4) {
        var encrypted, keys, options, jscu, keyType, decrypted, decryptMessageObject, msgKeySet, errMsg, decryptedArray, returnArray, message, iv;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                encrypted = _ref4.encrypted, keys = _ref4.keys, options = _ref4.options;

                if (!(typeof encrypted.message === 'undefined')) {
                  _context8.next = 3;
                  break;
                }

                throw new Error('InvalidEncryptedMessage');

              case 3:
                if (encrypted.message.message instanceof Array) {
                  _context8.next = 5;
                  break;
                }

                throw new Error('NonArrayMessage');

              case 5:
                jscu = Object(_util_js__WEBPACK_IMPORTED_MODULE_9__["getJscu"])();
                keyType = encrypted.message.keyType;

                if (!(keyType === 'public_key_encrypt')) {
                  _context8.next = 35;
                  break;
                }

                if (keys.privateKeys) {
                  _context8.next = 10;
                  break;
                }

                throw new Error('JscuPrivateKeyRequired');

              case 10:
                if (!options.publicKey) {
                  _context8.next = 17;
                  break;
                }

                _context8.next = 13;
                return Jscu.importKey('der', options.publicKey);

              case 13:
                options.publicKey = _context8.sent;
                _context8.next = 16;
                return options.publicKey.export('jwk');

              case 16:
                options.publicKey = _context8.sent;

              case 17:
                // function definition
                decryptMessageObject =
                /*#__PURE__*/
                function () {
                  var _ref5 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default()(
                  /*#__PURE__*/
                  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee5(msgObject, privateKeyObject) {
                    var data, salt, iv, privateJwk, decOptions;
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            data = msgObject.toBuffer();
                            salt = typeof msgObject.params.salt !== 'undefined' ? msgObject.params.salt : undefined;
                            iv = typeof msgObject.params.iv !== 'undefined' ? msgObject.params.iv : undefined;
                            _context5.next = 5;
                            return privateKeyObject.export('jwk');

                          case 5:
                            privateJwk = _context5.sent;
                            decOptions = Object.assign({
                              salt: salt,
                              iv: iv
                            }, options);
                            _context5.next = 9;
                            return jscu.pkc.decrypt(data, privateJwk, decOptions);

                          case 9:
                            return _context5.abrupt("return", _context5.sent);

                          case 10:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5, this);
                  }));

                  return function decryptMessageObject(_x8, _x9) {
                    return _ref5.apply(this, arguments);
                  };
                }(); // filter by keyId


                msgKeySet = [];
                _context8.next = 21;
                return Promise.all(keys.privateKeys.map(
                /*#__PURE__*/
                function () {
                  var _ref6 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default()(
                  /*#__PURE__*/
                  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee6(pk) {
                    var keyId, filtered;
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee6$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            _context6.next = 2;
                            return _keyid_js__WEBPACK_IMPORTED_MODULE_10__["fromJscuKey"](pk);

                          case 2:
                            keyId = _context6.sent;
                            filtered = encrypted.message.message.filter(function (m) {
                              return m.keyId.toHex() === keyId.toHex();
                            });
                            msgKeySet.push.apply(msgKeySet, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(filtered.map(function (m) {
                              return {
                                message: m,
                                privateKey: pk
                              };
                            })));

                          case 5:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, _callee6, this);
                  }));

                  return function (_x10) {
                    return _ref6.apply(this, arguments);
                  };
                }()));

              case 21:
                if (!(msgKeySet.length === 0)) {
                  _context8.next = 23;
                  break;
                }

                throw new Error('UnableToDecryptWithGivenPrivateKey');

              case 23:
                // decrypt
                errMsg = '';
                _context8.next = 26;
                return Promise.all(msgKeySet.map(
                /*#__PURE__*/
                function () {
                  var _ref7 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default()(
                  /*#__PURE__*/
                  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee7(set) {
                    var d;
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee7$(_context7) {
                      while (1) {
                        switch (_context7.prev = _context7.next) {
                          case 0:
                            _context7.next = 2;
                            return decryptMessageObject(set.message, set.privateKey).catch(function (e) {
                              errMsg = e.message;
                            });

                          case 2:
                            d = _context7.sent;

                            if (!d) {
                              _context7.next = 7;
                              break;
                            }

                            return _context7.abrupt("return", d);

                          case 7:
                            return _context7.abrupt("return", null);

                          case 8:
                          case "end":
                            return _context7.stop();
                        }
                      }
                    }, _callee7, this);
                  }));

                  return function (_x11) {
                    return _ref7.apply(this, arguments);
                  };
                }()));

              case 26:
                decryptedArray = _context8.sent;
                returnArray = decryptedArray.filter(function (d) {
                  return d !== null;
                });

                if (!(returnArray.length > 0)) {
                  _context8.next = 32;
                  break;
                }

                decrypted = returnArray[0];
                _context8.next = 33;
                break;

              case 32:
                throw new Error(errMsg);

              case 33:
                _context8.next = 52;
                break;

              case 35:
                if (!(keyType === 'session_key_encrypt')) {
                  _context8.next = 51;
                  break;
                }

                if (keys.sessionKey) {
                  _context8.next = 38;
                  break;
                }

                throw new Error('JscuSessionKeyRequired');

              case 38:
                if (encrypted.message.message instanceof Array) {
                  _context8.next = 40;
                  break;
                }

                throw new Error('NonArrayMessage');

              case 40:
                message = encrypted.message.message[0]; // TODO Should be an array?

                iv = typeof message.params.iv !== 'undefined' ? message.params.iv : null;

                if (!(options.name === 'AES-GCM')) {
                  _context8.next = 48;
                  break;
                }

                _context8.next = 45;
                return jscu.aes.decrypt(message.toBuffer(), keys.sessionKey, {
                  name: keys.sessionKey.algorithm,
                  iv: iv
                });

              case 45:
                decrypted = _context8.sent;
                _context8.next = 49;
                break;

              case 48:
                throw new Error('JscuInvalidEncryptionAlgorithm');

              case 49:
                _context8.next = 52;
                break;

              case 51:
                throw new Error('JscuInvalidKeyType_NotSessionKey');

              case 52:
                return _context8.abrupt("return", {
                  data: decrypted
                });

              case 53:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function decrypt(_x7) {
        return _decrypt.apply(this, arguments);
      };
    }()
    /**
     * Signing on a message with given private key's'
     * @param message
     * @param keys
     * @param options
     * @return {Promise<{signature: Signature}>}
     */

  }, {
    key: "sign",
    value: function () {
      var _sign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee10(_ref8) {
        var message, keys, options, jscu, signatures;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                message = _ref8.message, keys = _ref8.keys, options = _ref8.options;

                if (keys.privateKeys) {
                  _context10.next = 3;
                  break;
                }

                throw new Error('JscuInvalidSigningKeys');

              case 3:
                jscu = Object(_util_js__WEBPACK_IMPORTED_MODULE_9__["getJscu"])();
                _context10.next = 6;
                return Promise.all(keys.privateKeys.map(
                /*#__PURE__*/
                function () {
                  var _ref9 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default()(
                  /*#__PURE__*/
                  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee9(privKey) {
                    var privateJwk, signature, keyId;
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee9$(_context9) {
                      while (1) {
                        switch (_context9.prev = _context9.next) {
                          case 0:
                            _context9.next = 2;
                            return privKey.export('jwk');

                          case 2:
                            privateJwk = _context9.sent;
                            _context9.next = 5;
                            return jscu.pkc.sign(message.binary, privateJwk, options.hash, Object.assign({
                              format: 'raw'
                            }, options));

                          case 5:
                            signature = _context9.sent;
                            _context9.next = 8;
                            return _keyid_js__WEBPACK_IMPORTED_MODULE_10__["fromJscuKey"](privKey);

                          case 8:
                            keyId = _context9.sent;
                            return _context9.abrupt("return", Object(_signature_js__WEBPACK_IMPORTED_MODULE_13__["createRawSignature"])(signature, keyId));

                          case 10:
                          case "end":
                            return _context9.stop();
                        }
                      }
                    }, _callee9, this);
                  }));

                  return function (_x13) {
                    return _ref9.apply(this, arguments);
                  };
                }()));

              case 6:
                signatures = _context10.sent;
                return _context10.abrupt("return", {
                  signature: Object(_signature_js__WEBPACK_IMPORTED_MODULE_13__["createSignature"])('jscu', 'public_key_sign', signatures, options)
                });

              case 8:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function sign(_x12) {
        return _sign.apply(this, arguments);
      };
    }()
    /**
     * Verify signature here
     * @param message
     * @param signature
     * @param keys
     * @param options
     * @return {Promise<{keyId: *, valid: *}[]>}
     */

  }, {
    key: "verify",
    value: function () {
      var _verify = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee13(_ref10) {
        var message, signature, keys, options, jscu, signatureKeySet, unverified, verified;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                message = _ref10.message, signature = _ref10.signature, keys = _ref10.keys, options = _ref10.options;

                if (keys.publicKeys) {
                  _context13.next = 3;
                  break;
                }

                throw new Error('JscuInvalidVerificationKeys');

              case 3:
                jscu = Object(_util_js__WEBPACK_IMPORTED_MODULE_9__["getJscu"])();
                signatureKeySet = [];
                unverified = [];
                _context13.next = 8;
                return Promise.all(keys.publicKeys.map(
                /*#__PURE__*/
                function () {
                  var _ref11 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default()(
                  /*#__PURE__*/
                  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee11(pk) {
                    var keyId, filtered;
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee11$(_context11) {
                      while (1) {
                        switch (_context11.prev = _context11.next) {
                          case 0:
                            _context11.next = 2;
                            return _keyid_js__WEBPACK_IMPORTED_MODULE_10__["fromJscuKey"](pk);

                          case 2:
                            keyId = _context11.sent;
                            filtered = signature.signatures.filter(function (s) {
                              if (s.keyId.toHex() === keyId.toHex()) return true;else {
                                unverified.push({
                                  keyId: s.keyId,
                                  valid: undefined
                                });
                                return false;
                              }
                            }); // WA

                            signatureKeySet.push.apply(signatureKeySet, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(filtered.map(function (s) {
                              return {
                                signature: s,
                                publicKey: pk
                              };
                            })));

                          case 5:
                          case "end":
                            return _context11.stop();
                        }
                      }
                    }, _callee11, this);
                  }));

                  return function (_x15) {
                    return _ref11.apply(this, arguments);
                  };
                }()));

              case 8:
                _context13.next = 10;
                return Promise.all(signatureKeySet.map(
                /*#__PURE__*/
                function () {
                  var _ref12 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default()(
                  /*#__PURE__*/
                  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee12(sigKey) {
                    var valid;
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee12$(_context12) {
                      while (1) {
                        switch (_context12.prev = _context12.next) {
                          case 0:
                            _context12.t0 = jscu.pkc;
                            _context12.t1 = message.binary;
                            _context12.t2 = sigKey.signature.toBuffer();
                            _context12.next = 5;
                            return sigKey.publicKey.export('jwk');

                          case 5:
                            _context12.t3 = _context12.sent;
                            _context12.t4 = options.hash;
                            _context12.t5 = Object.assign({
                              format: 'raw'
                            }, options);
                            _context12.next = 10;
                            return _context12.t0.verify.call(_context12.t0, _context12.t1, _context12.t2, _context12.t3, _context12.t4, _context12.t5);

                          case 10:
                            valid = _context12.sent;
                            return _context12.abrupt("return", {
                              keyId: sigKey.signature.keyId,
                              valid: valid
                            });

                          case 12:
                          case "end":
                            return _context12.stop();
                        }
                      }
                    }, _callee12, this);
                  }));

                  return function (_x16) {
                    return _ref12.apply(this, arguments);
                  };
                }()));

              case 10:
                verified = _context13.sent;
                return _context13.abrupt("return", verified.concat(unverified));

              case 12:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function verify(_x14) {
        return _verify.apply(this, arguments);
      };
    }()
  }]);

  return Jscu;
}(_suite_js__WEBPACK_IMPORTED_MODULE_8__["Suite"]);

/***/ }),

/***/ "./src/suite_openpgp.js":
/*!******************************!*\
  !*** ./src/suite_openpgp.js ***!
  \******************************/
/*! exports provided: OpenPGP */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpenPGP", function() { return OpenPGP; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var js_encoding_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! js-encoding-utils */ "./node_modules/js-encoding-utils/dist/jseu.bundle.js");
/* harmony import */ var js_encoding_utils__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(js_encoding_utils__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util.js */ "./src/util.js");
/* harmony import */ var _suite_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./suite.js */ "./src/suite.js");
/* harmony import */ var _params_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./params.js */ "./src/params.js");
/* harmony import */ var _keyid_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./keyid.js */ "./src/keyid.js");
/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./signature.js */ "./src/signature.js");
/* harmony import */ var _encrypted_message_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./encrypted_message.js */ "./src/encrypted_message.js");








/**
 * suite_openpgp.js
 */







var OpenPGP =
/*#__PURE__*/
function (_Suite) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default()(OpenPGP, _Suite);

  function OpenPGP() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, OpenPGP);

    return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(OpenPGP).apply(this, arguments));
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(OpenPGP, null, [{
    key: "generateKey",

    /**
     * Generated OpenPGP Key Object with given key params.
     * @param userIds {Array}
     * @param passphrase {string}
     * @param params {Object}
     * @return {Promise<*>}
     */
    value: function () {
      var _generateKey = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(_ref) {
        var _ref$userIds, userIds, _ref$passphrase, passphrase, params, openpgp, options, kp, keyId, rawKey, _keyId;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _ref$userIds = _ref.userIds, userIds = _ref$userIds === void 0 ? _params_js__WEBPACK_IMPORTED_MODULE_10__["default"].openpgp.defaultUser : _ref$userIds, _ref$passphrase = _ref.passphrase, passphrase = _ref$passphrase === void 0 ? null : _ref$passphrase, params = _ref.params;
                openpgp = Object(_util_js__WEBPACK_IMPORTED_MODULE_8__["getOpenPgp"])();
                _context.t0 = params.type;
                _context.next = _context.t0 === 'rsa' ? 5 : _context.t0 === 'ec' ? 7 : _context.t0 === 'session' ? 9 : 11;
                break;

              case 5:
                options = {
                  userIds: userIds,
                  // multiple user IDs
                  numBits: params.modulusLength,
                  // RSA key size
                  passphrase: passphrase,
                  // protects the private key
                  keyExpirationTime: params.keyExpirationTime
                };
                return _context.abrupt("break", 12);

              case 7:
                options = {
                  userIds: userIds,
                  // multiple user IDs
                  curve: _params_js__WEBPACK_IMPORTED_MODULE_10__["default"].openpgp.curveList[params.curve].name,
                  // applied the naming rule of jscu
                  passphrase: passphrase,
                  // protects the private key
                  keyExpirationTime: params.keyExpirationTime
                };
                return _context.abrupt("break", 12);

              case 9:
                options = {
                  length: params.length
                };
                return _context.abrupt("break", 12);

              case 11:
                throw new Error('GPGUnsupportedAlgorithm');

              case 12:
                if (!(params.type === 'rsa' || params.type === 'ec')) {
                  _context.next = 21;
                  break;
                }

                _context.next = 15;
                return openpgp.generateKey(options);

              case 15:
                kp = _context.sent;
                keyId = kp.key.getKeys().map(function (k) {
                  return _keyid_js__WEBPACK_IMPORTED_MODULE_11__["fromOpenPgpKey"](k);
                });
                if (keyId.length === 1) keyId = keyId[0];
                return _context.abrupt("return", {
                  publicKey: kp.key.toPublic(),
                  privateKey: kp.key,
                  keyId: keyId //kp.key.getKeyIds().map( (bid) => bid.toHex())

                });

              case 21:
                if (!(params.type === 'session')) {
                  _context.next = 29;
                  break;
                }

                _context.next = 24;
                return openpgp.crypto.random.getRandomBytes(options.length);

              case 24:
                rawKey = _context.sent;
                _context.next = 27;
                return _keyid_js__WEBPACK_IMPORTED_MODULE_11__["fromRawKey"](rawKey);

              case 27:
                _keyId = _context.sent;
                return _context.abrupt("return", {
                  key: rawKey,
                  keyId: _keyId
                });

              case 29:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function generateKey(_x) {
        return _generateKey.apply(this, arguments);
      };
    }()
  }, {
    key: "importKey",
    value: function () {
      var _importKey = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3(type, key, passphrase) {
        var openpgp, read, keyArray;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                openpgp = Object(_util_js__WEBPACK_IMPORTED_MODULE_8__["getOpenPgp"])();

                if (!(type === 'pem')) {
                  _context3.next = 7;
                  break;
                }

                _context3.next = 4;
                return openpgp.key.readArmored(key);

              case 4:
                _context3.t0 = _context3.sent;
                _context3.next = 10;
                break;

              case 7:
                _context3.next = 9;
                return openpgp.key.read(key);

              case 9:
                _context3.t0 = _context3.sent;

              case 10:
                read = _context3.t0;

                if (!read.err) {
                  _context3.next = 13;
                  break;
                }

                throw new Error("InvalidOpenPGPKeyFormat: ".concat(read.err));

              case 13:
                _context3.next = 15;
                return Promise.all(read.keys.map(
                /*#__PURE__*/
                function () {
                  var _ref2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
                  /*#__PURE__*/
                  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2(keyObject) {
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            if (!(keyObject.isPrivate() && keyObject.primaryKey.isEncrypted)) {
                              _context2.next = 3;
                              break;
                            }

                            _context2.next = 3;
                            return keyObject.decrypt(passphrase);

                          case 3:
                            return _context2.abrupt("return", keyObject);

                          case 4:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, this);
                  }));

                  return function (_x5) {
                    return _ref2.apply(this, arguments);
                  };
                }()));

              case 15:
                keyArray = _context3.sent;
                return _context3.abrupt("return", keyArray.length > 1 ? keyArray : keyArray[0]);

              case 17:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function importKey(_x2, _x3, _x4) {
        return _importKey.apply(this, arguments);
      };
    }()
    /**
     * returns {message: { Message, suite }, signature: { Signature, suite }}
     * if encryption is done simultaneously with signing, no signature id is given because of privacy reason (issuer hiding)
     * @param message
     * @param keys
     * @param options
     * @param output
     * @return {Promise<*>}
     */

  }, {
    key: "encrypt",
    value: function () {
      var _encrypt = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4(_ref3) {
        var message, keys, _ref3$options, options, openpgp, msgObj, signingKeys, encrypted, encryptedObject, opt, internalHexKeyIds, externalKeyIds, encryptionKeyId, encryptedMessage, _opt, _encryptedMessage, signatureObj, signatureObjectList;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                message = _ref3.message, keys = _ref3.keys, _ref3$options = _ref3.options, options = _ref3$options === void 0 ? {} : _ref3$options;
                openpgp = Object(_util_js__WEBPACK_IMPORTED_MODULE_8__["getOpenPgp"])(); // check options

                if (options.compression) options.compression = openpgp.enums.compression[options.compression];
                options.armor = false; // armor must be false to get key ids after encryption.
                // convert message

                msgObj = openpgp.message.fromBinary(message.binary); // check signing key format to do signing simultaneously with encryption

                if (typeof keys.privateKeys !== 'undefined' && keys.privateKeys instanceof Array && keys.privateKeys[0] instanceof openpgp.key.Key) signingKeys = keys.privateKeys; // encryption

                if (!keys.publicKeys) {
                  _context4.next = 19;
                  break;
                }

                // public key encryption
                opt = {
                  message: msgObj,
                  publicKeys: keys.publicKeys,
                  // for encryption
                  privateKeys: signingKeys,
                  // for signing (optional)
                  format: 'binary'
                };
                _context4.next = 10;
                return openpgp.encrypt(Object.assign(opt, options));

              case 10:
                encrypted = _context4.sent;
                // construct an encrypted message object
                internalHexKeyIds = encrypted.message.getEncryptionKeyIds().map(function (id) {
                  return id.toHex();
                });
                externalKeyIds = [];
                keys.publicKeys.map(function (x) {
                  return x.getKeys().map(function (k) {
                    externalKeyIds.push(_keyid_js__WEBPACK_IMPORTED_MODULE_11__["fromOpenPgpKey"](k));
                  });
                });
                encryptionKeyId = externalKeyIds.filter(function (fp) {
                  return internalHexKeyIds.indexOf(fp.toHex().slice(0, 16)) >= 0;
                });
                encryptedMessage = [Object(_encrypted_message_js__WEBPACK_IMPORTED_MODULE_13__["createRawEncryptedMessage"])(encrypted.message.packets.write(), _keyid_js__WEBPACK_IMPORTED_MODULE_11__["createKeyIdList"](encryptionKeyId), {})];
                encryptedObject = {
                  message: Object(_encrypted_message_js__WEBPACK_IMPORTED_MODULE_13__["createEncryptedMessage"])('openpgp', 'public_key_encrypt', encryptedMessage, {})
                };
                _context4.next = 36;
                break;

              case 19:
                if (!keys.sessionKey) {
                  _context4.next = 35;
                  break;
                }

                // symmetric key encryption
                _opt = {
                  message: msgObj,
                  sessionKey: {
                    data: keys.sessionKey,
                    algorithm: options.algorithm
                  },
                  // for encryption
                  privateKeys: signingKeys,
                  // for signing (optional)
                  format: 'binary'
                };
                _context4.next = 23;
                return openpgp.encrypt(Object.assign(_opt, options));

              case 23:
                encrypted = _context4.sent;
                _context4.t0 = _encrypted_message_js__WEBPACK_IMPORTED_MODULE_13__["createRawEncryptedMessage"];
                _context4.t1 = encrypted.message.packets.write();
                _context4.next = 28;
                return _keyid_js__WEBPACK_IMPORTED_MODULE_11__["fromRawKey"](keys.sessionKey);

              case 28:
                _context4.t2 = _context4.sent;
                _context4.t3 = {};
                _context4.t4 = (0, _context4.t0)(_context4.t1, _context4.t2, _context4.t3);
                _encryptedMessage = [_context4.t4];
                encryptedObject = {
                  message: Object(_encrypted_message_js__WEBPACK_IMPORTED_MODULE_13__["createEncryptedMessage"])('openpgp', 'session_key_encrypt', _encryptedMessage, {
                    algorithm: options.algorithm
                  })
                };
                _context4.next = 36;
                break;

              case 35:
                throw new Error('InvalidEncryptionKey');

              case 36:
                signatureObj = {};

                if (keys.privateKeys && encrypted.signature) {
                  // if detached is true
                  signatureObjectList = OpenPGP._listFromOpenPgpSig(encrypted.signature.packets, signingKeys);
                  signatureObj = {
                    signature: Object(_signature_js__WEBPACK_IMPORTED_MODULE_12__["createSignature"])('openpgp', 'public_key_sign', signatureObjectList, {})
                  };
                }

                return _context4.abrupt("return", Object.assign(encryptedObject, signatureObj));

              case 39:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function encrypt(_x6) {
        return _encrypt.apply(this, arguments);
      };
    }()
    /**
     * Decrypt OpenPGP encrypted message
     * @param encrypted
     * @param keys
     * @param options
     * @return {Promise<*>}
     */

  }, {
    key: "decrypt",
    value: function () {
      var _decrypt = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5(_ref4) {
        var encrypted, keys, _ref4$options, options, openpgp, message, decrypted;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                encrypted = _ref4.encrypted, keys = _ref4.keys, _ref4$options = _ref4.options, options = _ref4$options === void 0 ? {} : _ref4$options;
                openpgp = Object(_util_js__WEBPACK_IMPORTED_MODULE_8__["getOpenPgp"])();
                _context5.next = 4;
                return openpgp.message.read(encrypted.message.message[0].toBuffer(), false);

              case 4:
                message = _context5.sent;

                if (!(encrypted.message.keyType === 'public_key_encrypt')) {
                  _context5.next = 11;
                  break;
                }

                _context5.next = 8;
                return openpgp.decrypt(Object.assign({
                  message: message,
                  privateKeys: keys.privateKeys,
                  publicKeys: keys.publicKeys,
                  format: 'binary'
                }, options));

              case 8:
                decrypted = _context5.sent;
                _context5.next = 15;
                break;

              case 11:
                if (!(encrypted.message.keyType === 'session_key_encrypt')) {
                  _context5.next = 15;
                  break;
                }

                _context5.next = 14;
                return openpgp.decrypt(Object.assign({
                  message: message,
                  sessionKeys: [{
                    data: keys.sessionKey,
                    algorithm: options.algorithm
                  }],
                  publicKeys: keys.publicKeys,
                  format: 'binary'
                }, options));

              case 14:
                decrypted = _context5.sent;

              case 15:
                decrypted.data = new Uint8Array(decrypted.data);

                if (decrypted.signatures instanceof Array) {
                  decrypted.signatures = decrypted.signatures.map(function (sig) {
                    var short = sig.keyid.toHex();
                    var long = sig.signature.packets.map(function (s) {
                      return new Uint8Array(s.issuerFingerprint);
                    });
                    var filtered = long.filter(function (l) {
                      return short === js_encoding_utils__WEBPACK_IMPORTED_MODULE_7___default.a.encoder.arrayBufferToHexString(l).slice(0, 16);
                    });
                    if (filtered.length === 0) throw new Error('SomethingWrongInOpenPGPSignature');
                    return {
                      keyId: _keyid_js__WEBPACK_IMPORTED_MODULE_11__["createKeyId"](filtered[0]),
                      valid: sig.valid
                    };
                  });
                }

                return _context5.abrupt("return", decrypted);

              case 18:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function decrypt(_x7) {
        return _decrypt.apply(this, arguments);
      };
    }()
    /**
     * Returns detached signature
     * @param message
     * @param keys
     * @param options
     * @param output
     * @return {Promise<*>}
     */

  }, {
    key: "sign",
    value: function () {
      var _sign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee6(_ref5) {
        var message, keys, _ref5$options, options, openpgp, msgObj, opt, signature, signatureObjectList;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                message = _ref5.message, keys = _ref5.keys, _ref5$options = _ref5.options, options = _ref5$options === void 0 ? {} : _ref5$options;
                openpgp = Object(_util_js__WEBPACK_IMPORTED_MODULE_8__["getOpenPgp"])(); // check options

                options.detached = true; // this must be always true for individual signature

                options.armor = false; // this must be always false to get key ids

                msgObj = openpgp.message.fromBinary(message.binary);

                if (keys.privateKeys) {
                  _context6.next = 7;
                  break;
                }

                throw new Error('SigningKeyRequired');

              case 7:
                opt = {
                  message: msgObj,
                  privateKeys: keys.privateKeys // for signing (optional)

                };
                _context6.next = 10;
                return openpgp.sign(Object.assign(opt, options));

              case 10:
                signature = _context6.sent;
                signatureObjectList = OpenPGP._listFromOpenPgpSig(signature.signature.packets, keys.privateKeys);
                return _context6.abrupt("return", {
                  signature: Object(_signature_js__WEBPACK_IMPORTED_MODULE_12__["createSignature"])('openpgp', 'public_key_sign', signatureObjectList, {})
                });

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function sign(_x8) {
        return _sign.apply(this, arguments);
      };
    }()
    /**
     * Returns detached signature with verification result
     * @param message
     * @param signature
     * @param keys
     * @param options
     * @return {Promise<*>}
     */

  }, {
    key: "verify",
    value: function () {
      var _verify = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee8(_ref6) {
        var message, signature, keys, options, openpgp, list, msgObj, verified;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                message = _ref6.message, signature = _ref6.signature, keys = _ref6.keys, options = _ref6.options;
                openpgp = Object(_util_js__WEBPACK_IMPORTED_MODULE_8__["getOpenPgp"])();

                if (keys.publicKeys) {
                  _context8.next = 4;
                  break;
                }

                throw new Error('VerificationKeyRequired');

              case 4:
                list = OpenPGP._ListToOpenPgpSig(signature.signatures, keys.publicKeys);
                msgObj = openpgp.message.fromBinary(message.binary);
                _context8.next = 8;
                return Promise.all(list.signatureObjects.map(
                /*#__PURE__*/
                function () {
                  var _ref7 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
                  /*#__PURE__*/
                  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee7(sigKey) {
                    var msg, literalDataList, signatureList, valid;
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee7$(_context7) {
                      while (1) {
                        switch (_context7.prev = _context7.next) {
                          case 0:
                            msg = msgObj.unwrapCompressed();
                            literalDataList = msg.packets.filterByTag(openpgp.enums.packet.literal);
                            signatureList = [sigKey.openpgpSignature];
                            _context7.next = 5;
                            return openpgp.message.createVerificationObjects(signatureList, literalDataList, [sigKey.publicKey], new Date());

                          case 5:
                            valid = _context7.sent;
                            _context7.t0 = sigKey.signature.keyId;
                            _context7.next = 9;
                            return valid[0].verified;

                          case 9:
                            _context7.t1 = _context7.sent;
                            return _context7.abrupt("return", {
                              keyId: _context7.t0,
                              valid: _context7.t1
                            });

                          case 11:
                          case "end":
                            return _context7.stop();
                        }
                      }
                    }, _callee7, this);
                  }));

                  return function (_x10) {
                    return _ref7.apply(this, arguments);
                  };
                }()));

              case 8:
                verified = _context8.sent;
                return _context8.abrupt("return", verified.concat(list.unverified));

              case 10:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function verify(_x9) {
        return _verify.apply(this, arguments);
      };
    }()
  }, {
    key: "_listFromOpenPgpSig",
    value: function _listFromOpenPgpSig(signatures, keys) {
      if (!(signatures instanceof Array)) throw new Error('InvalidSignatureList');
      var externalKeyIds = [];
      keys.map(function (x) {
        return x.getKeys().map(function (k) {
          externalKeyIds.push(_keyid_js__WEBPACK_IMPORTED_MODULE_11__["fromOpenPgpKey"](k));
        });
      });
      var signatureObjects = [];
      externalKeyIds.map(function (fp) {
        var correspondingSig = signatures.filter(function (sig) {
          return sig.issuerKeyId.toHex() === fp.toHex().slice(0, 16);
        });
        correspondingSig.map(function (sig) {
          signatureObjects.push(Object(_signature_js__WEBPACK_IMPORTED_MODULE_12__["createRawSignature"])(sig.write(), fp));
        });
      });
      return signatureObjects;
    }
  }, {
    key: "_ListToOpenPgpSig",
    value: function _ListToOpenPgpSig(signatures, keys) {
      if (!(signatures instanceof Array)) throw new Error('InvalidSignatureList');
      var openpgp = Object(_util_js__WEBPACK_IMPORTED_MODULE_8__["getOpenPgp"])();
      var openpgpObjects = signatures.map(function (sig) {
        if (!(sig instanceof _signature_js__WEBPACK_IMPORTED_MODULE_12__["RawSignature"])) throw new Error('NotRawSignatureObject');
        var obj = new openpgp.packet.Signature();
        obj.read(sig.toBuffer(), 0, -1);
        return {
          openpgpSignature: obj,
          signature: sig
        };
      });
      var externalKey = [];
      keys.map(function (x) {
        return x.getKeys().map(function (k) {
          externalKey.push({
            publicKey: k,
            keyId: _keyid_js__WEBPACK_IMPORTED_MODULE_11__["fromOpenPgpKey"](k)
          });
        });
      });
      var signatureObjects = [];
      externalKey.map(function (fp) {
        var correspondingSig = openpgpObjects.filter(function (sig) {
          return sig.openpgpSignature.issuerKeyId.toHex() === fp.keyId.toHex().slice(0, 16);
        });
        correspondingSig.map(function (sig) {
          signatureObjects.push(Object.assign({
            publicKey: fp.publicKey
          }, sig));
        });
      });
      var unverified = [];
      var idArray = signatureObjects.map(function (x) {
        return x.openpgpSignature.issuerKeyId.toHex();
      });
      openpgpObjects.map(function (sig) {
        if (idArray.indexOf(sig.openpgpSignature.issuerKeyId.toHex().slice(0, 16)) < 0) {
          unverified.push({
            keyId: _keyid_js__WEBPACK_IMPORTED_MODULE_11__["createKeyId"](sig.openpgpSignature.issuerFingerprint),
            valid: undefined
          });
        }
      });
      return {
        signatureObjects: signatureObjects,
        unverified: unverified
      };
    }
  }]);

  return OpenPGP;
}(_suite_js__WEBPACK_IMPORTED_MODULE_9__["Suite"]);

/***/ }),

/***/ "./src/util.js":
/*!*********************!*\
  !*** ./src/util.js ***!
  \*********************/
/*! exports provided: getJscu, getOpenPgp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getJscu", function() { return getJscu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOpenPgp", function() { return getOpenPgp; });
/* harmony import */ var _params_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./params.js */ "./src/params.js");
/**
 * utils.js
 */

function getJscu() {
  var jscu;

  if (typeof window !== 'undefined' && typeof window.jscu !== 'undefined') {
    jscu = window.jscu;
  } else {
    try {
      jscu = __webpack_require__(/*! js-crypto-utils */ "js-crypto-utils");
    } catch (e) {
      throw new Error("FailedToLoadJSCU: ".concat(e.message));
    } // work around

  }

  return jscu;
}
function getOpenPgp() {
  // load openpgp
  var openpgp;
  var workerPath;

  if (typeof window !== 'undefined' && typeof window.openpgp !== 'undefined') {
    openpgp = window.openpgp;
    workerPath = _params_js__WEBPACK_IMPORTED_MODULE_0__["default"].openpgp.workerPathWeb;
  } else {
    openpgp = __webpack_require__(/*! openpgp */ "openpgp");
    workerPath = _params_js__WEBPACK_IMPORTED_MODULE_0__["default"].openpgp.workerPathNode; // const path = require('path');
    // workerPath = path.join(path.resolve(), openpgpDefault.WORKER_PATH);
  } // initialize openpgp


  try {
    openpgp.initWorker({
      path: workerPath
    }); // set the relative web worker path
  } catch (e) {
    console.error(e.message);
  }

  openpgp.config.aead_protect = true; // activate fast AEAD mode (not yet OpenPGP standard)

  openpgp.config.aead_mode = openpgp.enums.aead.eax; // Default, native AES-EAX mode (AEAD)

  openpgp.config.prefer_hash_algorithm = openpgp.enums.hash.sha512; // use SHA512 (default SHA256)

  openpgp.config.encryption_cipher = openpgp.enums.symmetric.aes256; // use AES256

  openpgp.config.compression = openpgp.enums.compression.zlib; // compression prior to encrypt with zlib

  openpgp.config.integrity_protect = true;
  openpgp.config.rsa_blinding = true;
  openpgp.config.show_version = false;
  openpgp.config.show_comment = false;
  return openpgp;
}

/***/ }),

/***/ "./test/api.basic.encrypt-sign.spec.js":
/*!*********************************************!*\
  !*** ./test/api.basic.encrypt-sign.spec.js ***!
  \*********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _prepare_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prepare.js */ "./test/prepare.js");
/* harmony import */ var chai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! chai */ "./node_modules/chai/index.js");
/* harmony import */ var chai__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(chai__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _params_basic_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./params-basic.js */ "./test/params-basic.js");



var testEnv = Object(_prepare_js__WEBPACK_IMPORTED_MODULE_2__["getTestEnv"])();
var cascade = testEnv.library;
var env = testEnv.envName;
 // const should = chai.should();

var expect = chai__WEBPACK_IMPORTED_MODULE_3___default.a.expect;

describe("".concat(env, ": single public key encryption/decryption with simultaneous signing/verification"), function () {
  var message;
  var param;
  before(
  /*#__PURE__*/
  _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
    var i;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            this.timeout(50000);
            message = new Uint8Array(32);

            for (i = 0; i < 32; i++) {
              message[i] = 0xFF & i;
            }

            _context.next = 5;
            return Object(_params_basic_js__WEBPACK_IMPORTED_MODULE_4__["createParam"])();

          case 5:
            param = _context.sent;

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  })));
  it('jscu: EC/RSA encryption and signing test',
  /*#__PURE__*/
  _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4() {
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            this.timeout(50000);
            _context4.next = 3;
            return Promise.all(param.paramArray.map(
            /*#__PURE__*/
            function () {
              var _ref3 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
              /*#__PURE__*/
              _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3(paramObject) {
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        _context3.next = 2;
                        return Promise.all(paramObject.param.map(
                        /*#__PURE__*/
                        function () {
                          var _ref4 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
                          /*#__PURE__*/
                          _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2(p, idx) {
                            var encryptionKeys, encryptConfig, encryptionKeyImported, encryptionResult, decryptionKeys, decryptionKeyImported, decryptionResult;
                            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
                              while (1) {
                                switch (_context2.prev = _context2.next) {
                                  case 0:
                                    encryptionKeys = {
                                      publicKeys: [param.Keys[paramObject.name][idx].publicKey.keyString],
                                      privateKeyPassSets: [{
                                        privateKey: param.Keys[paramObject.name][idx].privateKey.keyString,
                                        passphrase: ''
                                      }] // for Signing

                                    };
                                    encryptConfig = {
                                      encrypt: param.jscuEncryptConf(paramObject, idx),
                                      sign: param.jscuSignConf(paramObject)
                                    };
                                    _context2.next = 4;
                                    return cascade.importKeys('string', {
                                      keys: encryptionKeys,
                                      suite: {
                                        encrypt_decrypt: 'jscu',
                                        sign_verify: 'jscu'
                                      },
                                      mode: ['encrypt', 'sign']
                                    });

                                  case 4:
                                    encryptionKeyImported = _context2.sent;
                                    _context2.next = 7;
                                    return cascade.encrypt({
                                      message: message,
                                      keys: encryptionKeyImported,
                                      config: encryptConfig
                                    });

                                  case 7:
                                    encryptionResult = _context2.sent;
                                    decryptionKeys = {
                                      privateKeyPassSets: [{
                                        privateKey: param.Keys[paramObject.name][idx].privateKey.keyString,
                                        passphrase: ''
                                      }],
                                      publicKeys: [param.Keys[paramObject.name][idx].publicKey.keyString] // for verification

                                    };
                                    _context2.next = 11;
                                    return cascade.importKeys('string', {
                                      keys: decryptionKeys,
                                      suite: {
                                        encrypt_decrypt: 'jscu',
                                        sign_verify: 'jscu'
                                      },
                                      mode: ['decrypt', 'verify']
                                    });

                                  case 11:
                                    decryptionKeyImported = _context2.sent;
                                    _context2.next = 14;
                                    return cascade.decrypt({
                                      data: encryptionResult,
                                      keys: decryptionKeyImported
                                    });

                                  case 14:
                                    decryptionResult = _context2.sent;
                                    expect(decryptionResult.signatures.every(function (s) {
                                      return s.valid;
                                    }), "failed at ".concat(p)).to.be.true;

                                  case 16:
                                  case "end":
                                    return _context2.stop();
                                }
                              }
                            }, _callee2, this);
                          }));

                          return function (_x2, _x3) {
                            return _ref4.apply(this, arguments);
                          };
                        }()));

                      case 2:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3, this);
              }));

              return function (_x) {
                return _ref3.apply(this, arguments);
              };
            }()));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  })));
  it('jscu: EC/RSA encryption and signing test with ephemeral ECDH keys',
  /*#__PURE__*/
  _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee7() {
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            this.timeout(50000);
            _context7.next = 3;
            return Promise.all(param.paramArray.map(
            /*#__PURE__*/
            function () {
              var _ref6 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
              /*#__PURE__*/
              _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee6(paramObject) {
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        _context6.next = 2;
                        return Promise.all(paramObject.param.map(
                        /*#__PURE__*/
                        function () {
                          var _ref7 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
                          /*#__PURE__*/
                          _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5(p, idx) {
                            var encryptionKeys, encryptConfig, encryptionKeyImported, encryptionResult, decryptionKeys, decryptionKeyImported, decryptionResult;
                            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {
                              while (1) {
                                switch (_context5.prev = _context5.next) {
                                  case 0:
                                    encryptionKeys = {
                                      publicKeys: [param.Keys[paramObject.name][idx].publicKey.keyString],
                                      privateKeyPassSets: [{
                                        privateKey: param.Keys[paramObject.name][idx].privateKey.keyString,
                                        passphrase: ''
                                      }] // for Signing

                                    };
                                    encryptConfig = {
                                      encrypt: param.jscuEncryptConfEphemeral(paramObject),
                                      sign: param.jscuSignConf(paramObject)
                                    };
                                    _context5.next = 4;
                                    return cascade.importKeys('string', {
                                      keys: encryptionKeys,
                                      suite: {
                                        encrypt_decrypt: 'jscu',
                                        sign_verify: 'jscu'
                                      },
                                      mode: ['encrypt', 'sign']
                                    });

                                  case 4:
                                    encryptionKeyImported = _context5.sent;
                                    _context5.next = 7;
                                    return cascade.encrypt({
                                      message: message,
                                      keys: encryptionKeyImported,
                                      config: encryptConfig
                                    });

                                  case 7:
                                    encryptionResult = _context5.sent;
                                    decryptionKeys = {
                                      privateKeyPassSets: [{
                                        privateKey: param.Keys[paramObject.name][idx].privateKey.keyString,
                                        passphrase: ''
                                      }],
                                      publicKeys: [param.Keys[paramObject.name][idx].publicKey.keyString] // for verification

                                    };
                                    _context5.next = 11;
                                    return cascade.importKeys('string', {
                                      keys: decryptionKeys,
                                      suite: {
                                        encrypt_decrypt: 'jscu',
                                        sign_verify: 'jscu'
                                      },
                                      mode: ['decrypt', 'verify']
                                    });

                                  case 11:
                                    decryptionKeyImported = _context5.sent;
                                    _context5.next = 14;
                                    return cascade.decrypt({
                                      data: encryptionResult,
                                      keys: decryptionKeyImported
                                    });

                                  case 14:
                                    decryptionResult = _context5.sent;
                                    expect(decryptionResult.signatures.every(function (s) {
                                      return s.valid;
                                    }), "failed at ".concat(p)).to.be.true;

                                  case 16:
                                  case "end":
                                    return _context5.stop();
                                }
                              }
                            }, _callee5, this);
                          }));

                          return function (_x5, _x6) {
                            return _ref7.apply(this, arguments);
                          };
                        }()));

                      case 2:
                      case "end":
                        return _context6.stop();
                    }
                  }
                }, _callee6, this);
              }));

              return function (_x4) {
                return _ref6.apply(this, arguments);
              };
            }()));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this);
  })));
  it('openpgp: RSA/EC encryption and signing test',
  /*#__PURE__*/
  _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee10() {
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            this.timeout(50000);
            _context10.next = 3;
            return Promise.all(param.paramArray.map(
            /*#__PURE__*/
            function () {
              var _ref9 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
              /*#__PURE__*/
              _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee9(paramObject) {
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee9$(_context9) {
                  while (1) {
                    switch (_context9.prev = _context9.next) {
                      case 0:
                        _context9.next = 2;
                        return Promise.all(paramObject.param.map(
                        /*#__PURE__*/
                        function () {
                          var _ref10 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
                          /*#__PURE__*/
                          _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee8(p, idx) {
                            var encryptionKeys, encryptConfig, encryptionKeyImported, encryptionResult, decryptionKeys, decryptionKeyImported, decryptionResult;
                            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee8$(_context8) {
                              while (1) {
                                switch (_context8.prev = _context8.next) {
                                  case 0:
                                    encryptionKeys = {
                                      publicKeys: [param.KeysGPG[paramObject.name][idx].publicKey.keyString],
                                      privateKeyPassSets: [{
                                        privateKey: param.KeysGPG[paramObject.name][idx].privateKey.keyString,
                                        passphrase: ''
                                      }] // for Signing

                                    };
                                    encryptConfig = {
                                      encrypt: param.openpgpEncryptConf,
                                      sign: param.openpgpSignConf
                                    };
                                    _context8.next = 4;
                                    return cascade.importKeys('string', {
                                      keys: encryptionKeys,
                                      suite: {
                                        encrypt_decrypt: 'openpgp',
                                        sign_verify: 'openpgp'
                                      },
                                      mode: ['encrypt', 'sign']
                                    });

                                  case 4:
                                    encryptionKeyImported = _context8.sent;
                                    _context8.next = 7;
                                    return cascade.encrypt({
                                      message: message,
                                      keys: encryptionKeyImported,
                                      config: encryptConfig
                                    });

                                  case 7:
                                    encryptionResult = _context8.sent;
                                    decryptionKeys = {
                                      privateKeyPassSets: [{
                                        privateKey: param.KeysGPG[paramObject.name][idx].privateKey.keyString,
                                        passphrase: ''
                                      }],
                                      publicKeys: [param.KeysGPG[paramObject.name][idx].publicKey.keyString] // for verification

                                    };
                                    _context8.next = 11;
                                    return cascade.importKeys('string', {
                                      keys: decryptionKeys,
                                      suite: {
                                        encrypt_decrypt: 'openpgp',
                                        sign_verify: 'openpgp'
                                      },
                                      mode: ['decrypt', 'verify']
                                    });

                                  case 11:
                                    decryptionKeyImported = _context8.sent;
                                    _context8.next = 14;
                                    return cascade.decrypt({
                                      data: encryptionResult,
                                      keys: decryptionKeyImported
                                    });

                                  case 14:
                                    decryptionResult = _context8.sent;
                                    expect(decryptionResult.signatures.every(function (s) {
                                      return s.valid;
                                    }), "failed at ".concat(p)).to.be.true;

                                  case 16:
                                  case "end":
                                    return _context8.stop();
                                }
                              }
                            }, _callee8, this);
                          }));

                          return function (_x8, _x9) {
                            return _ref10.apply(this, arguments);
                          };
                        }()));

                      case 2:
                      case "end":
                        return _context9.stop();
                    }
                  }
                }, _callee9, this);
              }));

              return function (_x7) {
                return _ref9.apply(this, arguments);
              };
            }()));

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10, this);
  })));
  it('mix1 (encrypt: openpgp, sign: jscu): RSA/EC encryption and signing test',
  /*#__PURE__*/
  _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee13() {
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            this.timeout(50000);
            _context13.next = 3;
            return Promise.all(param.paramArray.map(
            /*#__PURE__*/
            function () {
              var _ref12 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
              /*#__PURE__*/
              _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee12(paramObject) {
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee12$(_context12) {
                  while (1) {
                    switch (_context12.prev = _context12.next) {
                      case 0:
                        _context12.next = 2;
                        return Promise.all(paramObject.param.map(
                        /*#__PURE__*/
                        function () {
                          var _ref13 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
                          /*#__PURE__*/
                          _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee11(p, idx) {
                            var encryptionKeys, encryptConfig, encryptionKeyImported, encryptionResult, decryptionKeys, decryptionKeyImported, decryptionResult;
                            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee11$(_context11) {
                              while (1) {
                                switch (_context11.prev = _context11.next) {
                                  case 0:
                                    encryptionKeys = {
                                      publicKeys: [param.KeysGPG[paramObject.name][idx].publicKey.keyString],
                                      privateKeyPassSets: [{
                                        privateKey: param.Keys[paramObject.name][idx].privateKey.keyString,
                                        passphrase: ''
                                      }] // for Signing

                                    };
                                    encryptConfig = {
                                      encrypt: param.openpgpEncryptConf,
                                      sign: param.jscuSignConf(paramObject)
                                    };
                                    _context11.next = 4;
                                    return cascade.importKeys('string', {
                                      keys: encryptionKeys,
                                      suite: {
                                        encrypt_decrypt: 'openpgp',
                                        sign_verify: 'jscu'
                                      },
                                      mode: ['encrypt', 'sign']
                                    });

                                  case 4:
                                    encryptionKeyImported = _context11.sent;
                                    _context11.next = 7;
                                    return cascade.encrypt({
                                      message: message,
                                      keys: encryptionKeyImported,
                                      config: encryptConfig
                                    });

                                  case 7:
                                    encryptionResult = _context11.sent;
                                    decryptionKeys = {
                                      privateKeyPassSets: [{
                                        privateKey: param.KeysGPG[paramObject.name][idx].privateKey.keyString,
                                        passphrase: ''
                                      }],
                                      publicKeys: [param.Keys[paramObject.name][idx].publicKey.keyString] // for verification

                                    };
                                    _context11.next = 11;
                                    return cascade.importKeys('string', {
                                      keys: decryptionKeys,
                                      suite: {
                                        encrypt_decrypt: 'openpgp',
                                        sign_verify: 'jscu'
                                      },
                                      mode: ['decrypt', 'verify']
                                    });

                                  case 11:
                                    decryptionKeyImported = _context11.sent;
                                    _context11.next = 14;
                                    return cascade.decrypt({
                                      data: encryptionResult,
                                      keys: decryptionKeyImported
                                    });

                                  case 14:
                                    decryptionResult = _context11.sent;
                                    expect(decryptionResult.signatures.every(function (s) {
                                      return s.valid;
                                    }), "failed at ".concat(p)).to.be.true;

                                  case 16:
                                  case "end":
                                    return _context11.stop();
                                }
                              }
                            }, _callee11, this);
                          }));

                          return function (_x11, _x12) {
                            return _ref13.apply(this, arguments);
                          };
                        }()));

                      case 2:
                      case "end":
                        return _context12.stop();
                    }
                  }
                }, _callee12, this);
              }));

              return function (_x10) {
                return _ref12.apply(this, arguments);
              };
            }()));

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13, this);
  })));
  it('mix2 (encrypt: jscu, sign: openpgp): RSA/EC encryption and sining test',
  /*#__PURE__*/
  _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee16() {
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            this.timeout(50000);
            _context16.next = 3;
            return Promise.all(param.paramArray.map(
            /*#__PURE__*/
            function () {
              var _ref15 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
              /*#__PURE__*/
              _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee15(paramObject) {
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee15$(_context15) {
                  while (1) {
                    switch (_context15.prev = _context15.next) {
                      case 0:
                        _context15.next = 2;
                        return Promise.all(paramObject.param.map(
                        /*#__PURE__*/
                        function () {
                          var _ref16 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
                          /*#__PURE__*/
                          _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee14(p, idx) {
                            var encryptionKeys, encryptConfig, encryptionKeyImported, encryptionResult, decryptionKeys, decryptionKeyImported, decryptionResult;
                            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee14$(_context14) {
                              while (1) {
                                switch (_context14.prev = _context14.next) {
                                  case 0:
                                    encryptionKeys = {
                                      publicKeys: [param.Keys[paramObject.name][idx].publicKey.keyString],
                                      privateKeyPassSets: [{
                                        privateKey: param.KeysGPG[paramObject.name][idx].privateKey.keyString,
                                        passphrase: ''
                                      }] // for Signing

                                    };
                                    encryptConfig = {
                                      encrypt: param.jscuEncryptConf(paramObject, idx),
                                      sign: param.openpgpSignConf
                                    };
                                    _context14.next = 4;
                                    return cascade.importKeys('string', {
                                      keys: encryptionKeys,
                                      suite: {
                                        encrypt_decrypt: 'jscu',
                                        sign_verify: 'openpgp'
                                      },
                                      mode: ['encrypt', 'sign']
                                    });

                                  case 4:
                                    encryptionKeyImported = _context14.sent;
                                    _context14.next = 7;
                                    return cascade.encrypt({
                                      message: message,
                                      keys: encryptionKeyImported,
                                      config: encryptConfig
                                    });

                                  case 7:
                                    encryptionResult = _context14.sent;
                                    decryptionKeys = {
                                      privateKeyPassSets: [{
                                        privateKey: param.Keys[paramObject.name][idx].privateKey.keyString,
                                        passphrase: ''
                                      }],
                                      publicKeys: [param.KeysGPG[paramObject.name][idx].publicKey.keyString] // for verification

                                    };
                                    _context14.next = 11;
                                    return cascade.importKeys('string', {
                                      keys: decryptionKeys,
                                      suite: {
                                        encrypt_decrypt: 'jscu',
                                        sign_verify: 'openpgp'
                                      },
                                      mode: ['decrypt', 'verify']
                                    });

                                  case 11:
                                    decryptionKeyImported = _context14.sent;
                                    _context14.next = 14;
                                    return cascade.decrypt({
                                      data: encryptionResult,
                                      keys: decryptionKeyImported
                                    });

                                  case 14:
                                    decryptionResult = _context14.sent;
                                    expect(decryptionResult.signatures.every(function (s) {
                                      return s.valid;
                                    }), "failed at ".concat(p)).to.be.true;

                                  case 16:
                                  case "end":
                                    return _context14.stop();
                                }
                              }
                            }, _callee14, this);
                          }));

                          return function (_x14, _x15) {
                            return _ref16.apply(this, arguments);
                          };
                        }()));

                      case 2:
                      case "end":
                        return _context15.stop();
                    }
                  }
                }, _callee15, this);
              }));

              return function (_x13) {
                return _ref15.apply(this, arguments);
              };
            }()));

          case 3:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16, this);
  })));
  it('mix2 (encrypt: jscu, sign: openpgp): RSA/EC encryption and sining test with ephemeral ECDH keys',
  /*#__PURE__*/
  _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee19() {
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            this.timeout(50000);
            _context19.next = 3;
            return Promise.all(param.paramArray.map(
            /*#__PURE__*/
            function () {
              var _ref18 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
              /*#__PURE__*/
              _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee18(paramObject) {
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee18$(_context18) {
                  while (1) {
                    switch (_context18.prev = _context18.next) {
                      case 0:
                        _context18.next = 2;
                        return Promise.all(paramObject.param.map(
                        /*#__PURE__*/
                        function () {
                          var _ref19 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
                          /*#__PURE__*/
                          _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee17(p, idx) {
                            var encryptionKeys, encryptConfig, encryptionKeyImported, encryptionResult, decryptionKeys, decryptionKeyImported, decryptionResult;
                            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee17$(_context17) {
                              while (1) {
                                switch (_context17.prev = _context17.next) {
                                  case 0:
                                    encryptionKeys = {
                                      publicKeys: [param.Keys[paramObject.name][idx].publicKey.keyString],
                                      privateKeyPassSets: [{
                                        privateKey: param.KeysGPG[paramObject.name][idx].privateKey.keyString,
                                        passphrase: ''
                                      }] // for Signing

                                    };
                                    encryptConfig = {
                                      encrypt: param.jscuEncryptConfEphemeral(paramObject),
                                      sign: param.openpgpSignConf
                                    };
                                    _context17.next = 4;
                                    return cascade.importKeys('string', {
                                      keys: encryptionKeys,
                                      suite: {
                                        encrypt_decrypt: 'jscu',
                                        sign_verify: 'openpgp'
                                      },
                                      mode: ['encrypt', 'sign']
                                    });

                                  case 4:
                                    encryptionKeyImported = _context17.sent;
                                    _context17.next = 7;
                                    return cascade.encrypt({
                                      message: message,
                                      keys: encryptionKeyImported,
                                      config: encryptConfig
                                    });

                                  case 7:
                                    encryptionResult = _context17.sent;
                                    decryptionKeys = {
                                      privateKeyPassSets: [{
                                        privateKey: param.Keys[paramObject.name][idx].privateKey.keyString,
                                        passphrase: ''
                                      }],
                                      publicKeys: [param.KeysGPG[paramObject.name][idx].publicKey.keyString] // for verification

                                    };
                                    _context17.next = 11;
                                    return cascade.importKeys('string', {
                                      keys: decryptionKeys,
                                      suite: {
                                        encrypt_decrypt: 'jscu',
                                        sign_verify: 'openpgp'
                                      },
                                      mode: ['decrypt', 'verify']
                                    });

                                  case 11:
                                    decryptionKeyImported = _context17.sent;
                                    _context17.next = 14;
                                    return cascade.decrypt({
                                      data: encryptionResult,
                                      keys: decryptionKeyImported
                                    });

                                  case 14:
                                    decryptionResult = _context17.sent;
                                    expect(decryptionResult.signatures.every(function (s) {
                                      return s.valid;
                                    }), "failed at ".concat(p)).to.be.true;

                                  case 16:
                                  case "end":
                                    return _context17.stop();
                                }
                              }
                            }, _callee17, this);
                          }));

                          return function (_x17, _x18) {
                            return _ref19.apply(this, arguments);
                          };
                        }()));

                      case 2:
                      case "end":
                        return _context18.stop();
                    }
                  }
                }, _callee18, this);
              }));

              return function (_x16) {
                return _ref18.apply(this, arguments);
              };
            }()));

          case 3:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19, this);
  })));
});

/***/ }),

/***/ "./test/params-basic.js":
/*!******************************!*\
  !*** ./test/params-basic.js ***!
  \******************************/
/*! exports provided: createParam */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createParam", function() { return createParam; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _src_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../src/index.js */ "./src/index.js");





/**
 * params-basic.js
 */
 // Encryption and Signing Parameters

var curves = ['P-256', 'P-384', 'P-521'];
var modulusLength = [2048, 2048];
var userIds = ['test@example.com'];
var paramArray = [{
  name: 'ec',
  param: curves
}, {
  name: 'rsa',
  param: modulusLength
}];
var openpgpEncryptConf = {
  suite: 'openpgp',
  options: {
    detached: true,
    compression: 'zlib'
  }
};
var openpgpSignConf = {
  required: true,
  suite: 'openpgp',
  options: {}
};
var jscuSessionEncryptConf = {
  suite: 'jscu',
  options: {
    name: 'AES-GCM'
  }
};
var openpgpgSessionEncryptConf = {
  suite: 'openpgp',
  options: {
    algorithm: 'aes256',
    aead: true,
    aead_mode: 'eax'
  }
};
var jscuOnetimeSessionEncryptConf = {
  onetimeKey: {
    keyParams: {
      type: 'session',
      length: 32
    }
  },
  suite: 'jscu',
  options: {
    name: 'AES-GCM'
  }
};
var openpgpOnetimeSessionEncryptConf = {
  onetimeKey: {
    keyParams: {
      type: 'session',
      length: 32
    }
  },
  suite: 'openpgp',
  options: {
    algorithm: 'aes256',
    aead: true,
    aead_mode: 'eax'
  }
};
var jscuOnetimePublicEncryptConf = {
  suite: 'jscu',
  onetimeKey: {
    keyParams: {
      type: 'ec',
      curve: 'P-256'
    }
  },
  options: {
    hash: 'SHA-256',
    encrypt: 'AES-GCM',
    keyLength: 32,
    info: ''
  }
};
var openpgpOnetimePublicEncryptConf = {
  suite: 'openpgp',
  onetimeKey: {
    userIds: ['user@example.com'],
    keyParams: {
      type: 'ec',
      keyExpirationTime: 0,
      curve: 'P-256'
    }
  },
  options: {
    detached: true,
    compression: 'zlib'
  }
};
function createParam() {
  return _createParam.apply(this, arguments);
}

function _createParam() {
  _createParam = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {
    var param;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            param = new ParamsBasic();
            _context2.next = 3;
            return param.init();

          case 3:
            return _context2.abrupt("return", param);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _createParam.apply(this, arguments);
}

var ParamsBasic =
/*#__PURE__*/
function () {
  function ParamsBasic() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, ParamsBasic);

    this.Keys = {};
    this.KeysGPG = {};
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(ParamsBasic, [{
    key: "init",
    value: function () {
      var _init = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
        var jscu;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return Promise.all(curves.map(function (curve) {
                  return _src_index_js__WEBPACK_IMPORTED_MODULE_4__["generateKey"]({
                    suite: 'jscu',
                    keyParams: {
                      type: 'ec',
                      curve: curve
                    }
                  });
                }));

              case 2:
                this.Keys.ec = _context.sent;
                _context.next = 5;
                return Promise.all(curves.map(function (curve) {
                  return _src_index_js__WEBPACK_IMPORTED_MODULE_4__["generateKey"]({
                    suite: 'openpgp',
                    userIds: userIds,
                    keyParams: {
                      type: 'ec',
                      keyExpirationTime: 0,
                      curve: curve
                    }
                  });
                }));

              case 5:
                this.KeysGPG.ec = _context.sent;
                _context.next = 8;
                return Promise.all(modulusLength.map(function (ml) {
                  return _src_index_js__WEBPACK_IMPORTED_MODULE_4__["generateKey"]({
                    suite: 'jscu',
                    keyParams: {
                      type: 'rsa',
                      modulusLength: ml
                    }
                  });
                }));

              case 8:
                this.Keys.rsa = _context.sent;
                _context.next = 11;
                return Promise.all(modulusLength.map(function (ml) {
                  return _src_index_js__WEBPACK_IMPORTED_MODULE_4__["generateKey"]({
                    suite: 'openpgp',
                    userIds: userIds,
                    keyParams: {
                      type: 'rsa',
                      keyExpirationTime: 0,
                      modulusLength: ml
                    }
                  });
                }));

              case 11:
                this.KeysGPG.rsa = _context.sent;

                if (!(typeof window !== 'undefined' && typeof window.jscu !== 'undefined')) {
                  _context.next = 16;
                  break;
                }

                jscu = window.jscu;
                _context.next = 23;
                break;

              case 16:
                _context.prev = 16;
                jscu = __webpack_require__(/*! js-crypto-utils */ "js-crypto-utils");
                _context.next = 23;
                break;

              case 20:
                _context.prev = 20;
                _context.t0 = _context["catch"](16);
                throw new Error("FailedToLoadJSCU: ".concat(_context.t0.message));

              case 23:
                _context.next = 25;
                return jscu.random.getRandomBytes(32);

              case 25:
                this.Keys.sessionKey = _context.sent;

              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[16, 20]]);
      }));

      return function init() {
        return _init.apply(this, arguments);
      };
    }()
  }, {
    key: "jscuEncryptConf",
    value: function jscuEncryptConf(paramObject, idx) {
      return {
        suite: 'jscu',
        options: paramObject.name === 'ec' ? {
          privateKeyPass: {
            privateKey: this.Keys[paramObject.name][idx].privateKey.keyString,
            passphrase: ''
          },
          // only for ECDH
          hash: 'SHA-256',
          encrypt: 'AES-GCM',
          keyLength: 32,
          info: ''
        } : {
          hash: 'SHA-256'
        }
      };
    }
  }, {
    key: "jscuEncryptConfEphemeral",
    value: function jscuEncryptConfEphemeral(paramObject) {
      return {
        suite: 'jscu',
        options: paramObject.name === 'ec' ? {
          hash: 'SHA-256',
          encrypt: 'AES-GCM',
          keyLength: 32,
          info: ''
        } : {
          hash: 'SHA-256'
        }
      };
    }
  }, {
    key: "jscuSignConf",
    value: function jscuSignConf(paramObject) {
      return {
        required: true,
        suite: 'jscu',
        options: paramObject.name === 'ec' ? {
          hash: 'SHA-256'
        } : {
          hash: 'SHA-256',
          name: 'RSA-PSS',
          saltLength: 32
        }
      };
    }
  }, {
    key: "paramArray",
    get: function get() {
      return paramArray;
    }
  }, {
    key: "openpgpEncryptConf",
    get: function get() {
      return openpgpEncryptConf;
    }
  }, {
    key: "openpgpSignConf",
    get: function get() {
      return openpgpSignConf;
    }
  }, {
    key: "jscuSessionEncryptConf",
    get: function get() {
      return jscuSessionEncryptConf;
    }
  }, {
    key: "openpgpgSessionEncryptConf",
    get: function get() {
      return openpgpgSessionEncryptConf;
    }
  }, {
    key: "jscuOnetimeSessionEncryptConf",
    get: function get() {
      return jscuOnetimeSessionEncryptConf;
    }
  }, {
    key: "openpgpOnetimeSessionEncryptConf",
    get: function get() {
      return openpgpOnetimeSessionEncryptConf;
    }
  }, {
    key: "jscuOnetimePublicEncryptConf",
    get: function get() {
      return jscuOnetimePublicEncryptConf;
    }
  }, {
    key: "openpgpOnetimePublicEncryptConf",
    get: function get() {
      return openpgpOnetimePublicEncryptConf;
    }
  }]);

  return ParamsBasic;
}(); //   defaultEncryptConfig: {
//     encrypt: {
//       suite: 'openpgp',  // 'jscu'
//       options: {
//         detached: true,
//         compression: 'zlib'
//       },
//     },
//     sign: {
//       required: true,
//       suite: 'openpgp', // 'jscu'
//       options: { },
//     }
//   },
//   ////////////////////////////////////////////////////////////
//   defaultProcedure: [
//     // keyParams is set for steps that involves automatic key generation.
//
//     // first step that encrypts the given data
//     // non-last step generates key automatically on site.
//     {
//       encrypt: {
//         suite: 'jscu',
//         onetimeKey: {keyParams: {type: 'session', length: 32}}, // this key encrypts step 1 key
//         options: {name: 'AES-GCM'}
//       },
//       sign: {
//         required: true,
//       }
//     },
//
//     // final step that encrypts the key used in the previous step under the given original key.
//     // last step feeds the given key.
//     {
//       encrypt: {
//         suite: 'openpgp',  // 'jscu'
//         options: {
//           detached: false, // for signing simultaneously with encryption
//           compression: 'zlib'
//         },
//       },
//       sign: {
//         required: true,
//         suite: 'openpgp', // 'jscu'
//         options: { },
//       }
//       // keyParams is unnecessary to be set. key params will be ignored at last step.
//     } // -> output "encrypted decryption key for 1", "key id for 1"
//   ],
// ECC_P521_NO_EXPIRE: {
//     type: 'ECC',
//     curve: 'P-521',
//     keyExpirationTime: 0
//   },
//
//   ECC_P256_EXPIRE_1_WEEK: {
//     type: 'ECC',
//     curve: 'P-256',
//     keyExpirationTime: 604800 // one week just in case
//   },
//
//   SYMMETRIC_AES256_AEAD_EAX:{
//     type: 'SYMMETRIC',
//     length: 32, // in bytes
//     algorithm: 'aes256',
//     aead: true,
//     aead_mode: 'eax'
//   },
//
//   ECDSA_SHA_256: {
//     type: 'ECC',
//     hash: 'SHA-256'
//   },
//
//   SYMMETRIC_AES256_GCM: {
//     type: 'SYMMETRIC',
//     algorithm: 'AES-GCM',
//     length: 32
//   },

/***/ }),

/***/ "./test/prepare.js":
/*!*************************!*\
  !*** ./test/prepare.js ***!
  \*************************/
/*! exports provided: getTestEnv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTestEnv", function() { return getTestEnv; });
/**
 * prepare.js
 */
var common = __webpack_require__(/*! ../webpack.common.js */ "./webpack.common.js");

function getTestEnv() {
  var envName;
  var message;
  var library;

  if (true) {
    envName = 'Bundle';
    message = '**This is a test with a bundled library';
    library = __webpack_require__("./dist sync recursive cascade.bundle.js")("./".concat(common.bundleName));
  } else {}

  return {
    library: library,
    envName: envName,
    message: message
  };
}

/***/ }),

/***/ "./webpack.common.js":
/*!***************************!*\
  !*** ./webpack.common.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__dirname) {/**
 * webpack.common.js
 */
//////////////////////////////////////////////////////////////////////////
// Base Config of Your Library
const libName = 'cascade';
const entry = './src/index.js';

//////////////////////////////////////////////////////////////////////////
const path = __webpack_require__(/*! path */ "./node_modules/path-browserify/index.js");

// webpack main configration
const webpackConfig = {
  target: 'web',
  entry: {},
  output: {
    filename: '[name].bundle.js',
    chunkFilename: '[name].js',
    path: path.resolve(__dirname, './dist'),
    publicPath: path.resolve(__dirname, './dist'),
    library: libName,
    libraryTarget: 'umd',
    globalObject: 'this' // for node js import
  },
  resolve: {
    extensions: ['.js', '.jsx', '.mjs'],
    modules: ['node_modules']
  },
  module: {
    rules: [
      {
        test: /\.(m|)js$/,
        use: [{
          loader: 'babel-loader'
        }],
        exclude: path.join(__dirname, 'node_modules') // exclude: /node_modules/
      }
    ]
  },
  externals:[{
    'js-crypto-utils': true,
    'openpgp': true
  }],
  node: {
    fs: 'empty',
    Buffer: false
  }
};

webpackConfig.entry[libName] = [entry];

function getBundleName () {
  const regexp = /\[name\]/g;
  return webpackConfig.output.filename.replace(regexp, libName);
}

function getEntryName () {
  const regexp = /.*src\//;
  return webpackConfig.entry[libName][0].replace(regexp, '');
}

module.exports = {
  webpackConfig,
  libName,
  entryName: getEntryName(),
  bundleName: getBundleName(),
};

// // port babelrc from .babelrc
// function getBabelOptionsForWebpack() {
//   const pluginExclude = []; // add here node-specific plugins
//   const babelrc = JSON.parse(fs.readFileSync('./.babelrc', 'utf8'));
//   babelrc.babelrc = false;
//   babelrc.presets = babelrc.presets.map( (elem) => {
//     if (elem instanceof Array && elem.length > 0){
//       // for browsers. if true, import statements will be transpiled to CommonJS 'require', and webpack tree shaking doesn't work.
//       if(elem[0] === '@babel/preset-env') elem[1].modules = false;
//     }
//     return elem;
//   });
//   babelrc.plugins = babelrc.plugins.filter( (elem) => pluginExclude.indexOf(elem) < 0);
//   return babelrc;
// }


/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),

/***/ 1:
/*!***************************************************!*\
  !*** multi ./test/api.basic.encrypt-sign.spec.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./test/api.basic.encrypt-sign.spec.js */"./test/api.basic.encrypt-sign.spec.js");


/***/ }),

/***/ "js-crypto-utils":
/*!**********************************!*\
  !*** external "js-crypto-utils" ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_js_crypto_utils__;

/***/ }),

/***/ "openpgp":
/*!**************************!*\
  !*** external "openpgp" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_openpgp__;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXNjYWRlL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9jYXNjYWRlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Nhc2NhZGUvLi9kaXN0IHN5bmMgY2FzY2FkZS5idW5kbGUuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL2Rpc3QvY2FzY2FkZS5idW5kbGUuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2lzTmF0aXZlRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy93cmFwTmF0aXZlU3VwZXIuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLW1vZHVsZS5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2Fzc2VydGlvbi1lcnJvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2NoYWkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9hc3NlcnRpb24uanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvY29yZS9hc3NlcnRpb25zLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9pbnRlcmZhY2UvYXNzZXJ0LmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9pbnRlcmZhY2UvZXhwZWN0LmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9pbnRlcmZhY2Uvc2hvdWxkLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9hZGRDaGFpbmFibGVNZXRob2QuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2FkZExlbmd0aEd1YXJkLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9hZGRNZXRob2QuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2FkZFByb3BlcnR5LmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9jb21wYXJlQnlJbnNwZWN0LmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9leHBlY3RUeXBlcy5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvZmxhZy5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvZ2V0QWN0dWFsLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9nZXRFbnVtZXJhYmxlUHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvZ2V0TWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2dldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2dldFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9pbnNwZWN0LmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9pc05hTi5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvaXNQcm94eUVuYWJsZWQuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL29iakRpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL292ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZC5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvb3ZlcndyaXRlTWV0aG9kLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9vdmVyd3JpdGVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvcHJveGlmeS5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvdGVzdC5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvdHJhbnNmZXJGbGFncy5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2NoZWNrLWVycm9yL2luZGV4LmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvZGVlcC1lcWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9ldmVudC1saXRlL2V2ZW50LWxpdGUuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9nZXQtZnVuYy1uYW1lL2luZGV4LmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2ludDY0LWJ1ZmZlci9pbnQ2NC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvanMtZW5jb2RpbmctdXRpbHMvZGlzdC9qc2V1LmJ1bmRsZS5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5jbG9uZWRlZXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9tc2dwYWNrLWxpdGUvbGliL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9tc2dwYWNrLWxpdGUvbGliL2J1ZmZlci1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9tc2dwYWNrLWxpdGUvbGliL2J1ZmZlci1saXRlLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvbXNncGFjay1saXRlL2xpYi9idWZmZXJpc2gtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9tc2dwYWNrLWxpdGUvbGliL2J1ZmZlcmlzaC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9tc2dwYWNrLWxpdGUvbGliL2J1ZmZlcmlzaC1wcm90by5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL21zZ3BhY2stbGl0ZS9saWIvYnVmZmVyaXNoLXVpbnQ4YXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9tc2dwYWNrLWxpdGUvbGliL2J1ZmZlcmlzaC5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL21zZ3BhY2stbGl0ZS9saWIvY29kZWMtYmFzZS5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL21zZ3BhY2stbGl0ZS9saWIvY29kZWMuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9tc2dwYWNrLWxpdGUvbGliL2RlY29kZS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9tc2dwYWNrLWxpdGUvbGliL2RlY29kZS5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL21zZ3BhY2stbGl0ZS9saWIvZGVjb2Rlci5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL21zZ3BhY2stbGl0ZS9saWIvZW5jb2RlLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL21zZ3BhY2stbGl0ZS9saWIvZW5jb2RlLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvbXNncGFjay1saXRlL2xpYi9lbmNvZGVyLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvbXNncGFjay1saXRlL2xpYi9leHQtYnVmZmVyLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvbXNncGFjay1saXRlL2xpYi9leHQtcGFja2VyLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvbXNncGFjay1saXRlL2xpYi9leHQtdW5wYWNrZXIuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9tc2dwYWNrLWxpdGUvbGliL2V4dC5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL21zZ3BhY2stbGl0ZS9saWIvZmxleC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9tc2dwYWNrLWxpdGUvbGliL3JlYWQtY29yZS5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL21zZ3BhY2stbGl0ZS9saWIvcmVhZC1mb3JtYXQuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9tc2dwYWNrLWxpdGUvbGliL3JlYWQtdG9rZW4uanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9tc2dwYWNrLWxpdGUvbGliL3dyaXRlLWNvcmUuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9tc2dwYWNrLWxpdGUvbGliL3dyaXRlLXRva2VuLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvbXNncGFjay1saXRlL2xpYi93cml0ZS10eXBlLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9ub2RlX21vZHVsZXMvbXNncGFjay1saXRlL2xpYi93cml0ZS11aW50OC5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL3BhdGgtYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vbm9kZV9tb2R1bGVzL3BhdGh2YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL25vZGVfbW9kdWxlcy90eXBlLWRldGVjdC90eXBlLWRldGVjdC5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vc3JjL2Nhc2NhZGUuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL3NyYy9jYXNjYWRlZF9kYXRhLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9zcmMvY29yZS5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vc3JjL2VuY3J5cHRlZF9tZXNzYWdlLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL3NyYy9rZXlpZC5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vc3JjL2tleXMuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL3NyYy9tZXNzYWdlLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9zcmMvcGFyYW1zLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9zcmMvc2lnbmF0dXJlLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9zcmMvc3VpdGUuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL3NyYy9zdWl0ZV9qc2N1LmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi9zcmMvc3VpdGVfb3BlbnBncC5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vc3JjL3V0aWwuanMiLCJ3ZWJwYWNrOi8vY2FzY2FkZS8uL3Rlc3QvYXBpLmJhc2ljLmVuY3J5cHQtc2lnbi5zcGVjLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi90ZXN0L3BhcmFtcy1iYXNpYy5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlLy4vdGVzdC9wcmVwYXJlLmpzIiwid2VicGFjazovL2Nhc2NhZGUvLi93ZWJwYWNrLmNvbW1vbi5qcyIsIndlYnBhY2s6Ly9jYXNjYWRlL2V4dGVybmFsIFwianMtY3J5cHRvLXV0aWxzXCIiLCJ3ZWJwYWNrOi8vY2FzY2FkZS9leHRlcm5hbCBcIm9wZW5wZ3BcIiJdLCJuYW1lcyI6WyJjcmVhdGVFbmNyeXB0aW9uQ2FzY2FkZSIsImtleXMiLCJwcm9jZWR1cmUiLCJsb2NhbEtleXMiLCJjbG9uZURlZXAiLCJsb2NhbFByb2NlZHVyZSIsIm1hcCIsIngiLCJjYXNjYWRlIiwiQ2FzY2FkZSIsIl9pbml0IiwibW9kZSIsIl9pbml0RW5jcnlwdGlvblByb2NlZHVyZSIsImNyZWF0ZURlY3J5cHRpb25DYXNjYWRlIiwiZW5jcnlwdGVkIiwiX2luaXREZWNyeXB0aW9uUHJvY2VkdXJlIiwibW9kZXMiLCJpbmRleE9mIiwiRXJyb3IiLCJLZXlzIiwiX2Nhc2NhZGVNb2RlIiwiX29yZ0tleXMiLCJBcnJheSIsImluaXRpYWwiLCJjb25maWciLCJlbmNyeXB0IiwicHVzaCIsIkNhc2NhZGVkRGF0YSIsImVuY3J5cHRlZE9iamVjdCIsIm1lc3NhZ2UiLCJkYXRhIiwibGVuZ3RoIiwic2lnbmluZ0tleXMiLCJwcml2YXRlS2V5cyIsInByZWNlZGVuY2UiLCJzbGljZSIsIlByb21pc2UiLCJhbGwiLCJwcm9jIiwiaWR4Iiwib25ldGltZUtleSIsInN1aXRlT2JqZWN0IiwiZW5jcnlwdF9kZWNyeXB0Iiwic3VpdGUiLCJtb2RlQXJyYXkiLCJrZXlQYXJhbXMiLCJPYmplY3QiLCJhc3NpZ24iLCJnZW5lcmF0ZUtleU9iamVjdCIsIm9uZXRpbWVLZXlPYmplY3QiLCJ0eXBlIiwic2Vzc2lvbktleSIsImtleSIsInB1YmxpY0tleXMiLCJwdWJsaWNLZXkiLCJuZXh0U3RlcE1lc3NhZ2UiLCJwcml2YXRlS2V5IiwiZXhwb3J0IiwidG9QYWNrZXRsaXN0Iiwid3JpdGUiLCJzaWduIiwicmVxdWlyZWQiLCJzaWduX3ZlcmlmeSIsImltcG9ydEtleXMiLCJVaW50OEFycmF5IiwiY29yZSIsImNyZWF0ZUNhc2NhZGVkRGF0YSIsInZlcmlmaWNhdGlvbktleXMiLCJkZWNyeXB0ZWQiLCJuZXh0RGVjcnlwdGlvbktleU9iamVjdCIsImtleVR5cGUiLCJKc2N1IiwiaW1wb3J0S2V5IiwiT3BlblBHUCIsInNpZ25hdHVyZSIsIlNpZ25hdHVyZSIsImZyb20iLCJjYWxsYmFjayIsInRvQXJyYXkiLCJhIiwiYiIsImltcG9ydENhc2NhZGVkQnVmZmVyIiwic2VyaWFsaXplZCIsImRlcyIsIm1zZ3BhY2siLCJkZWNvZGUiLCJlIiwiZGVzQ29tcG9uZW50TGlzdCIsIm9iaiIsInJldHVybk9iamVjdCIsImltcG9ydEVuY3J5cHRlZEJ1ZmZlciIsImltcG9ydFNpZ25hdHVyZUJ1ZmZlciIsIkVuY3J5cHRlZE1lc3NhZ2UiLCJleHRyYWN0IiwiaW5zZXJ0Iiwic2VyaWFsaXplZENvbXBBcnJheSIsInNlcmlhbGl6ZSIsInJldHVybkFycmF5IiwiZW5jb2RlIiwiZ2VuZXJhdGVLZXkiLCJrZXlPYmoiLCJrZXlTdHJpbmciLCJhcm1vciIsImtleUlkcyIsInBhc3NwaHJhc2UiLCJvdXRwdXRQdWJsaWMiLCJtc2dPYmoiLCJpbXBvcnRNZXNzYWdlIiwic2lnbmVkIiwic2lnbkJhc2UiLCJvcHRpb25zIiwiY2F0Y2giLCJlbmNyeXB0QmFzZSIsImRlY3J5cHQiLCJkZWNyeXB0QmFzZSIsImNvbnNvbGUiLCJlcnJvciIsInZlcmlmaWVkIiwidmVyaWZ5QmFzZSIsInNpZ25hdHVyZXMiLCJvdXRwdXQiLCJ2ZXJpZnkiLCJjYW5FbmNyeXB0Iiwic3VpdGVPYmoiLCJjYW5EZWNyeXB0IiwiY2FuU2lnbiIsImNhblZlcmlmeSIsInN1aXRlcyIsImtleVR5cGVzIiwibWVzc2FnZUxpc3QiLCJlbGVtIiwia2V5SWQiLCJjcmVhdGVLZXlJZExpc3QiLCJrIiwiY3JlYXRlS2V5SWQiLCJjcmVhdGVSYXdFbmNyeXB0ZWRNZXNzYWdlIiwicGFyYW1zIiwiY3JlYXRlRW5jcnlwdGVkTWVzc2FnZSIsImltcG9ydFJhd0VuY3J5cHRlZEJ1ZmZlckxpc3QiLCJhcnJheSIsImZvckVhY2giLCJzZXIiLCJkZXNlcmlhbGl6ZWRBcnJheSIsImRlY29kZWQiLCJLZXlJZCIsIktleUlkTGlzdCIsIlJhd0VuY3J5cHRlZE1lc3NhZ2UiLCJfc3VpdGUiLCJfa2V5VHlwZSIsIl9zZXRNZXNzYWdlIiwiX29wdGlvbnMiLCJfbWVzc2FnZSIsIlJhd0VuY3J5cHRlZE1lc3NhZ2VMaXN0IiwiX3NldCIsIm1lc3NhZ2VBcnJheSIsInRvSnNPYmplY3QiLCJfa2V5SWQiLCJfcGFyYW1zIiwianNldSIsImVuY29kZXIiLCJlbmNvZGVCYXNlNjQiLCJidWYiLCJ0b0J1ZmZlciIsImJpbmFyeU1lc3NhZ2UiLCJtIiwicmF3IiwiZmlsdGVyIiwiZnJvbU9wZW5QZ3BLZXkiLCJrZXlPYmplY3QiLCJsZW4iLCJwdWJsaWNLZXlJZExFTiIsImZwIiwiZ2V0RmluZ2VycHJpbnQiLCJoZXhTdHJpbmdUb0FycmF5QnVmZmVyIiwiZnJvbUpzY3VLZXkiLCJnZXRKd2tUaHVtYnByaW50IiwicHVibGljS2V5SWRIYXNoIiwidGh1bWJQcmludEJ1ZiIsImZyb21SYXdLZXkiLCJiaW4iLCJzZXNzaW9uS2V5SWRMZW5ndGgiLCJqc2N1IiwiZ2V0SnNjdSIsImhhc2giLCJjb21wdXRlIiwic2Vzc2lvbktleUlkSGFzaCIsImRpZ2VzdCIsImxvY2FsS2V5SWQiLCJhcnJheUJ1ZmZlclRvSGV4U3RyaW5nIiwiYmluYXJ5S2V5SWRzIiwia2lkIiwiZm9ybWF0IiwicHJpdmF0ZUtleVBhc3NTZXRzIiwiaW1wb3J0S2V5U3RyaW5ncyIsImltcG9ydEtleU9iamVjdHMiLCJfa2V5cyIsIl9tb2RlIiwibG9jYWxGb3JtYXQiLCJsb2NhbFN1aXRlIiwibG9jYWxNb2RlIiwia2V5T2JqZWN0cyIsIm5hbWUiLCJvcCIsInB1YmxpYyIsInByaXZhdGUiLCJtb2RlT2piZWN0IiwicGsiLCJwa3BzIiwibG9jYWxLZXlQYXJhbXMiLCJ1c2VySWRzIiwicmV0dXJuS2V5IiwiZW5jcnlwdE9wdGlvbnMiLCJtc2ciLCJsb2NhbE1lc3NhZ2UiLCJNZXNzYWdlIiwiX21lc3NhZ2VUeXBlIiwic3RyaW5nVG9BcnJheUJ1ZmZlciIsIm1lc3NhZ2VUeXBlIiwiYXJyYXlCdWZmZXJUb1N0cmluZyIsIml2TGVuZ3RoQWVzR2NtIiwib3BlbnBncCIsImRlZmF1bHRVc2VyIiwid29ya2VyUGF0aFdlYiIsIndvcmtlclBhdGhOb2RlIiwiY3VydmVMaXN0Iiwic2lnbmF0dXJlTGlzdCIsImNyZWF0ZVJhd1NpZ25hdHVyZSIsImNyZWF0ZVNpZ25hdHVyZSIsIl9zaWduYXR1cmVzIiwiU2lnbmF0dXJlTGlzdCIsImJpbmFyeVNpZ25hdHVyZXMiLCJzaWciLCJSYXdTaWduYXR1cmUiLCJzIiwiU3VpdGUiLCJUeXBlRXJyb3IiLCJjb25zdHJ1Y3RvciIsInVuZGVmaW5lZCIsInJhbmRvbSIsImdldFJhbmRvbUJ5dGVzIiwicmF3S2V5IiwidXRpbEtleUlkIiwibmFtZWRDdXJ2ZSIsImN1cnZlIiwibW9kdWx1c0xlbmd0aCIsInBrYyIsImp3S2V5cyIsIktleSIsInB1YmxpY0tleU9iaiIsInByaXZhdGVLZXlPYmoiLCJlbmNyeXB0UGFyYW1zIiwiZW5jcnlwdGVkRGVyIiwiaXNQcml2YXRlIiwiaXNFbmNyeXB0ZWQiLCJwcml2YXRlS2V5UGFzcyIsImp3ayIsImt0eSIsImNydiIsImVwaGVtZXJhbCIsInB1YmxpY0p3ayIsImJpbmFyeSIsImZlZCIsIml2IiwiYWVzIiwiZGVjcnlwdE1lc3NhZ2VPYmplY3QiLCJtc2dPYmplY3QiLCJwcml2YXRlS2V5T2JqZWN0Iiwic2FsdCIsInByaXZhdGVKd2siLCJkZWNPcHRpb25zIiwibXNnS2V5U2V0IiwiZmlsdGVyZWQiLCJ0b0hleCIsImVyck1zZyIsInNldCIsImQiLCJkZWNyeXB0ZWRBcnJheSIsImFsZ29yaXRobSIsInByaXZLZXkiLCJzaWduYXR1cmVLZXlTZXQiLCJ1bnZlcmlmaWVkIiwidmFsaWQiLCJzaWdLZXkiLCJjb25jYXQiLCJjb21tb25QYXJhbXMiLCJnZXRPcGVuUGdwIiwibnVtQml0cyIsImtleUV4cGlyYXRpb25UaW1lIiwia3AiLCJnZXRLZXlzIiwidG9QdWJsaWMiLCJjcnlwdG8iLCJyZWFkQXJtb3JlZCIsInJlYWQiLCJlcnIiLCJwcmltYXJ5S2V5Iiwia2V5QXJyYXkiLCJjb21wcmVzc2lvbiIsImVudW1zIiwiZnJvbUJpbmFyeSIsIm9wdCIsImludGVybmFsSGV4S2V5SWRzIiwiZ2V0RW5jcnlwdGlvbktleUlkcyIsImlkIiwiZXh0ZXJuYWxLZXlJZHMiLCJlbmNyeXB0aW9uS2V5SWQiLCJlbmNyeXB0ZWRNZXNzYWdlIiwicGFja2V0cyIsInNpZ25hdHVyZU9iaiIsInNpZ25hdHVyZU9iamVjdExpc3QiLCJfbGlzdEZyb21PcGVuUGdwU2lnIiwic2Vzc2lvbktleXMiLCJzaG9ydCIsImtleWlkIiwibG9uZyIsImlzc3VlckZpbmdlcnByaW50IiwibCIsImRldGFjaGVkIiwibGlzdCIsIl9MaXN0VG9PcGVuUGdwU2lnIiwic2lnbmF0dXJlT2JqZWN0cyIsInVud3JhcENvbXByZXNzZWQiLCJsaXRlcmFsRGF0YUxpc3QiLCJmaWx0ZXJCeVRhZyIsInBhY2tldCIsImxpdGVyYWwiLCJvcGVucGdwU2lnbmF0dXJlIiwiY3JlYXRlVmVyaWZpY2F0aW9uT2JqZWN0cyIsIkRhdGUiLCJjb3JyZXNwb25kaW5nU2lnIiwiaXNzdWVyS2V5SWQiLCJvcGVucGdwT2JqZWN0cyIsImV4dGVybmFsS2V5IiwiaWRBcnJheSIsIndpbmRvdyIsInJlcXVpcmUiLCJ3b3JrZXJQYXRoIiwiaW5pdFdvcmtlciIsInBhdGgiLCJhZWFkX3Byb3RlY3QiLCJhZWFkX21vZGUiLCJhZWFkIiwiZWF4IiwicHJlZmVyX2hhc2hfYWxnb3JpdGhtIiwic2hhNTEyIiwiZW5jcnlwdGlvbl9jaXBoZXIiLCJzeW1tZXRyaWMiLCJhZXMyNTYiLCJ6bGliIiwiaW50ZWdyaXR5X3Byb3RlY3QiLCJyc2FfYmxpbmRpbmciLCJzaG93X3ZlcnNpb24iLCJzaG93X2NvbW1lbnQiLCJ0ZXN0RW52IiwiZ2V0VGVzdEVudiIsImxpYnJhcnkiLCJlbnYiLCJlbnZOYW1lIiwiZXhwZWN0IiwiY2hhaSIsImRlc2NyaWJlIiwicGFyYW0iLCJiZWZvcmUiLCJ0aW1lb3V0IiwiaSIsImNyZWF0ZVBhcmFtIiwiaXQiLCJwYXJhbUFycmF5IiwicGFyYW1PYmplY3QiLCJwIiwiZW5jcnlwdGlvbktleXMiLCJlbmNyeXB0Q29uZmlnIiwianNjdUVuY3J5cHRDb25mIiwianNjdVNpZ25Db25mIiwiZW5jcnlwdGlvbktleUltcG9ydGVkIiwiZW5jcnlwdGlvblJlc3VsdCIsImRlY3J5cHRpb25LZXlzIiwiZGVjcnlwdGlvbktleUltcG9ydGVkIiwiZGVjcnlwdGlvblJlc3VsdCIsImV2ZXJ5IiwidG8iLCJiZSIsInRydWUiLCJqc2N1RW5jcnlwdENvbmZFcGhlbWVyYWwiLCJLZXlzR1BHIiwib3BlbnBncEVuY3J5cHRDb25mIiwib3BlbnBncFNpZ25Db25mIiwiY3VydmVzIiwianNjdVNlc3Npb25FbmNyeXB0Q29uZiIsIm9wZW5wZ3BnU2Vzc2lvbkVuY3J5cHRDb25mIiwianNjdU9uZXRpbWVTZXNzaW9uRW5jcnlwdENvbmYiLCJvcGVucGdwT25ldGltZVNlc3Npb25FbmNyeXB0Q29uZiIsImpzY3VPbmV0aW1lUHVibGljRW5jcnlwdENvbmYiLCJrZXlMZW5ndGgiLCJpbmZvIiwib3BlbnBncE9uZXRpbWVQdWJsaWNFbmNyeXB0Q29uZiIsIlBhcmFtc0Jhc2ljIiwiaW5pdCIsImVjIiwibWwiLCJyc2EiLCJzYWx0TGVuZ3RoIiwiY29tbW9uIiwicHJvY2VzcyIsImJ1bmRsZU5h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LE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsS0FBSyw0QkFBNEIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixTQUFTLEtBQUssNEJBQTRCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsU0FBUyxLQUFLLDRCQUE0QixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFNBQVMsS0FBSyw0QkFBNEIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixVQUFVLFlBQVksR0FBRyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLGdDQUFnQyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixVQUFVLElBQUksS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixnQ0FBZ0MsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsZ0NBQWdDLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFdBQVcsSUFBSSw0SUFBNEksSUFBSSw0REFBNEQsSUFBSSwwQ0FBMEMsNERBQTRELGlCQUFpQixFQUFFLGtEQUFrRCxHQUFHLGNBQWMsNEZBQTRGLFNBQVMsdUZBQXVGLGdDQUFnQyxjQUFjLCtCQUErQixhQUFhLG9DQUFvQyxvQkFBb0IsNEJBQTRCLE1BQU0sdUJBQXVCLHdKQUF3SixtRUFBbUUsa0NBQWtDLFNBQVMsMEJBQTBCLGNBQWMsK0JBQStCLGFBQWEsb0NBQW9DLHNCQUFzQiw0QkFBNEIsTUFBTSx1QkFBdUIsaUtBQWlLLG1FQUFtRSxrQ0FBa0MsU0FBUywwQkFBMEIsY0FBYywyR0FBMkcsWUFBWSx5QkFBeUIsMEJBQTBCLGtCQUFrQixjQUFjLG9FQUFvRSx3QkFBd0IsNkJBQTZCLG9FQUFvRSxFQUFFLGdDQUFnQyxTQUFTLHVDQUF1Qyx5QkFBeUIsS0FBSyxrQkFBa0IsY0FBYyxTQUFTLHdCQUF3Qix3Q0FBd0Msa0JBQWtCLGFBQWEsMERBQTBELHdCQUF3Qiw4QkFBOEIsc0dBQXNHLFlBQVksbUNBQW1DLDBGQUEwRiwrQkFBK0IsR0FBRyx3Q0FBd0MsRUFBRSxnQ0FBZ0MsZ0RBQWdELHdDQUF3QyxHQUFHLEVBQUUsK0JBQStCLDZDQUE2QyxFQUFFLDRCQUE0QixrREFBa0QsS0FBSywyQ0FBMkMsdUlBQXVJLG1EQUFtRCxtRkFBbUYsR0FBRyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixJQUFJLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLElBQUksT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsSUFBSSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixJQUFJLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLElBQUksT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsSUFBSSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixJQUFJLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLElBQUksT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsSUFBSSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLFFBQVEsR0FBRyxtQ0FBbUMsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLElBQUksMkJBQTJCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFNBQVMsSUFBSSwwQ0FBMEMsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLElBQUksMkJBQTJCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixTQUFTLElBQUksb0NBQW9DLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLHVDQUF1QyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLEtBQUssNEJBQTRCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxLQUFLLDRCQUE0QixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsS0FBSyw0QkFBNEIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLEtBQUssNEJBQTRCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsU0FBUyxLQUFLLDRCQUE0QixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFNBQVMsS0FBSyw0QkFBNEIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixTQUFTLEtBQUssNEJBQTRCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsU0FBUyxLQUFLLDRCQUE0QixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFNBQVMsS0FBSyw0QkFBNEIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsVUFBVSxLQUFLLDRCQUE0QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLDRCQUE0QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLDRCQUE0QixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsVUFBVSxLQUFLLDRCQUE0QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsV0FBVyxZQUFZLEdBQUcsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixVQUFVLElBQUksS0FBSyxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixVQUFVLElBQUksS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixnQ0FBZ0MsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsZ0NBQWdDLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyxLQUFL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LE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixRQUFRLEdBQUcsbUNBQW1DLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFNBQVMsSUFBSSw2QkFBNkIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLElBQUksMkJBQTJCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixTQUFTLElBQUksMkJBQTJCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLElBQUksMkJBQTJCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxLQUFLLDRCQUE0QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsS0FBSyw0QkFBNEIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixTQUFTLEtBQUssNEJBQTRCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsU0FBUyxLQUFLLDRCQUE0QixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFNBQVMsS0FBSyw0QkFBNEIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixTQUFTLEtBQUssNEJBQTRCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsU0FBUyxLQUFLLGdDQUFnQyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsS0FBSyw0QkFBNEIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLEtBQUssNEJBQTRCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsU0FBUyxLQUFLLDRCQUE0QixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsS0FBSyw0QkFBNEIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLEtBQUssNEJBQTRCLE9BQU8sa0JBQWtC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LEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxxQkFBcUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxxQkFBcUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsS0FBSyxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxxQkFBcUIsUUFBUSxHQUFHLDJCQUEyQixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLElBQUksMkJBQTJCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLElBQUksMkJBQTJCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLDJCQUEyQixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSwyQkFBMkIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLElBQUksMkJBQTJCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsVUFBVSxJQUFJLDJCQUEyQixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsVUFBVSxLQUFLLDRCQUE0QixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLDRCQUE0QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLDRCQUE0QixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixXQUFXLFlBQVksR0FBRyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLGdDQUFnQyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixVQUFVLElBQUksS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixnQ0FBZ0MsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsZ0NBQWdDLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsOEJBQThCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsOEJBQThCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsVUFBVSxJQUFJLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsVUFBVSxJQUFJLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsVUFBVSxLQUFLLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsZ0NBQWdDLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsVUFBVSxLQUFLLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsV0FBVyxLQUFLLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsOEJBQThCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsV0FBVyxLQUFLLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsOEJBQThCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsOEJBQThCLE9BQU8sbUJBQW1CLE1BQU0s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LEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsS0FBSyxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxxQkFBcUIsS0FBSyxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsS0FBSyxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxxQkFBcUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLHFCQUFxQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsS0FBSyxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLHFCQUFxQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxxQkFBcUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0scUJBQXFCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxxQkFBcUIsUUFBUSxHQUFHLDJCQUEyQixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixTQUFTLElBQUksMkJBQTJCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixTQUFTLElBQUksMkJBQTJCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsVUFBVSxJQUFJLDJCQUEyQixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLFVBQVUsSUFBSSwyQkFBMkIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixVQUFVLElBQUksMkJBQTJCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsVUFBVSxJQUFJLDJCQUEyQixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsVUFBVSxLQUFLLDRCQUE0QixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLDRCQUE0QixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsVUFBVSxLQUFLLDRCQUE0QixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsVUFBVSxLQUFLLDRCQUE0QixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLDRCQUE0QixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIs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QUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsZ0NBQWdDLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsZ0NBQWdDLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFv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cUVBQXFFLEdBQUcscUNBQXFDLDBIQUEwSCwyREFBMkQsaUJBQWlCLGVBQWUsa0NBQWtDLEtBQUssa0JBQWtCLDBIQUEwSCxtREFBbUQsc0VBQXNFLEdBQUcsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsSUFBSSxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixJQUFJLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLElBQUksT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsSUFBSSxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixJQUFJLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLElBQUksT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsSUFBSSxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixJQUFJLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLElBQUksT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLHFCQUFxQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLEtBQUssT0FBTyxvQkFBb0IsTUFBTSxxQkFBcUIsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0scUJBQXFCLFFBQVEsR0FBRywyQkFBMkIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLElBQUksMkJBQTJCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixTQUFTLElBQUksMkJBQTJCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixTQUFTLElBQUksMkJBQTJCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsU0FBUyxJQUFJLHdCQUF3QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsSUFBSSw4QkFBOEIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixTQUFTLEtBQUssNEJBQTRCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsU0FBUyxLQUFLLDRCQUE0QixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sb0JBQW9CLE1BQU0scUJBQXFCLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixVQUFVLEtBQUssOEJBQThCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLCtCQUErQixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsV0FBVyxZQUFZLEdBQUcsS0FBSyxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixVQUFVLElBQUksS0FBSyxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixVQUFVLElBQUksS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixnQ0FBZ0MsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixVQUFVLElBQUksS0FBSyxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixVQUFVLElBQUksS0FBSyxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixVQUFVLElBQUksS0FBSyxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixVQUFVLElBQUksS0FBSyxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixVQUFVLElBQUksS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixVQUFVLElBQUksS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixnQ0FBZ0MsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixVQUFVLElBQUksS0FBSyxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixVQUFVLEtBQUssS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixnQ0FBZ0MsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixVQUFVLEtBQUssS0FBSyxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixVQUFVLEtBQUssS0FBSyxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixVQUFVLEtBQUssS0FBSyxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixVQUFVLEtBQUssS0FBSyxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixVQUFVLEtBQUssS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixnQ0FBZ0MsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixVQUFVLEtBQUssS0FBSyxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixVQUFVLEtBQUssS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixnQ0FBZ0MsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixVQUFVLEtBQUssS0FBSyxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsRUFBRSxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixVQUFVLEtBQUssS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixVQUFVLEtBQUssS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixnQ0FBZ0MsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixVQUFVLEtBQUssS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixVQUFVLEtBQUssS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixVQUFVLEtBQUssS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQix1QkFBdUIsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixVQUFVLEtBQUssS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixnQ0FBZ0MsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxxQkFBcUIsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0scUJBQXFCLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxxQkFBcUIsV0FBVyxLQUFLLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsV0FBVyxLQUFLLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsdUJBQXVCLE9BQU8sa0JBQWtCLE1B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QUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLHFCQUFxQixRQUFRLEdBQUcseUJBQXlCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLHFCQUFxQixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixTQUFTLElBQUksMkJBQTJCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsU0FBUyxJQUFJLHFCQUFxQixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixVQUFVLElBQUksMkJBQTJCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsVUFBVSxJQUFJLGtCQUFrQixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSwyQkFBMkIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLElBQUksb0JBQW9CLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLDRCQUE0QixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLDRCQUE0QixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixXQUFXLFlBQVksR0FBRyxLQUFLLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLDhCQUE4QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLDhCQUE4QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLGdDQUFnQyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEVBQUUsT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsRUFBRSxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFVBQVUsSUFBSSxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLGdDQUFnQyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLFVBQVUsS0FBSyxLQUFLLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLFVBQVUsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0scUJBQXFCLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLHFCQUFxQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0scUJBQXFCLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLGdDQUFnQyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLGdDQUFnQyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8s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LGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsUUFBUSxHQUFHLGtDQUFrQyxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLFFBQVEsSUFBSSwyQkFBMkIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLElBQUksZ0NBQWdDLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLElBQUksMkJBQTJCLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLElBQUksMkJBQTJCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFNBQVMsS0FBSyw0QkFBNEIsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixVQUFVLFlBQVksR0FBRyxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLGdDQUFnQyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLGdDQUFnQyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLFVBQVUsS0FBSyxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLGdDQUFnQyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLGdDQUFnQyxPQUFP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QU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxpQkFBaUIsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0scUJBQXFCLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsS0FBSyxPQUFPLG1CQUFtQixNQUFNLHFCQUFxQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLEtBQUssT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsS0FBSyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLEtBQUssT0FBTyxrQkFBa0IsTUFBTSxxQkFBcUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxxQkFBcUIsUUFBUSxHQUFHLHFDQUFxQyxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixTQUFTLElBQUkscUNBQXFDLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sa0JBQWtCLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixTQUFTLElBQUksMkJBQTJCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxrQkFBa0IsTUFBTSxrQkFBa0IsU0FBUyxJQUFJLDJCQUEyQixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixNQUFNLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFNBQVMsSUFBSSwyQkFBMkIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixTQUFTLElBQUksMkJBQTJCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsVUFBVSxJQUFJLDJCQUEyQixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxtQkFBbUIsVUFBVSxLQUFLLDRCQUE0QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixVQUFVLEtBQUssNEJBQTRCLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLE1BQU0sT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsVUFBVSxLQUFLLDRCQUE0QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixNQUFNLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFVBQVUsS0FBSyw0QkFBNEIsT0FBTyxrQkFBa0IsTUFBTSxtQkFBbUIsTUFBTSxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixXQUFXLFlBQVksR0FBRyxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLFVBQVUsSUFBSSxLQUFLLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG9CQUFvQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sb0JBQW9CLFVBQVUsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLDhCQUE4QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyxLQUFLLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLGtCQUFrQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sa0JBQWtCLFVBQVUsS0FBSyxLQUFLLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGlCQUFpQixNQUFNLG1CQUFtQixFQUFFLE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFVBQVUsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFdBQVcsS0FBSyxLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLGdDQUFnQyxPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFdBQVcsS0FBSyxLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLHVCQUF1QixPQUFPLG1CQUFtQixNQUFNLG9CQUFvQixFQUFFLE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxLQUFLLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLHVCQUF1QixPQUFPLGtCQUFrQixNQUFNLG1CQUFtQixFQUFFLE9BQU8sa0JBQWtCLE1BQU0sbUJBQW1CLFdBQVcsS0FBSyxLQUFLLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLGdDQUFnQyxPQUFPLG1CQUFt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O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsa0M7Ozs7Ozs7Ozs7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLDRGQUFXOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLEtBQUs7QUFDTCxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQSx3Q0FBd0MsV0FBVztBQUNuRDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0MsY0FBYztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUNBQWlDLGtCQUFrQjtBQUNuRDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUEsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLDhDQUE4QyxRQUFRO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIscUJBQXFCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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LGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNEJBQTRCO0FBQ3pDLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixTQUFTO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNEJBQTRCO0FBQ3pDLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7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QUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQyxPQUFPO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7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akI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsRUFBRTtBQUNiLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsRUFBRTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsRUFBRTtBQUNiLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsRUFBRTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsRUFBRTtBQUNiLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFdBQVcsUUFBUTtBQUNuQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNB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YixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7Ozs7QUNudERBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLDJEQUFVO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDJEQUFVOztBQUVuQyxrQkFBa0IsbUJBQU8sQ0FBQyw2REFBVztBQUNyQyxrQkFBa0IsbUJBQU8sQ0FBQyw2REFBVzs7QUFFckMsc0JBQXNCLG1CQUFPLENBQUMscURBQU87QUFDckMsZ0JBQWdCLG1CQUFPLENBQUMseURBQVM7Ozs7Ozs7Ozs7OztBQ1RqQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDOzs7Ozs7Ozs7OztBQ1ZBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsb0JBQW9CO0FBQ3BCLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixPQUFPO0FBQzdCLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFDakIsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQix5QkFBeUI7QUFDekIsbUJBQW1CO0FBQ25CLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUIsUUFBUTtBQUM3QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNySUE7O0FBRUEsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQWE7O0FBRXJDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQjtBQUNoQixhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ3hDQTs7QUFFQSxnQkFBZ0IsbUJBQU8sQ0FBQyxpRUFBYTtBQUNyQzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0I7QUFDaEIsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QixHQUFHO0FBQ0gsNkJBQTZCO0FBQzdCO0FBQ0E7Ozs7Ozs7Ozs7OztBQzdDQTs7QUFFQTs7QUFFQSxpQkFBaUIsbUJBQU8sQ0FBQyxxRUFBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQWE7QUFDckM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQjtBQUNsQix5QkFBeUI7QUFDekIsbUJBQW1CO0FBQ25CLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUI7QUFDbkIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixPQUFPO0FBQzdCLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFDakIsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ3JGQTs7QUFFQSxnQkFBZ0IsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFckM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNsREE7O0FBRUEsOEJBQThCLG1CQUFPLENBQUMseUVBQWlCO0FBQ3ZEO0FBQ0E7O0FBRUEsZ0NBQWdDLG1CQUFPLENBQUMsZ0RBQVM7QUFDakQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0MsbUJBQU8sQ0FBQyw2RUFBbUI7QUFDN0Qsb0NBQW9DLG1CQUFPLENBQUMsK0VBQW9CO0FBQ2hFLDRDQUE0QyxtQkFBTyxDQUFDLHVGQUF3QjtBQUM1RSxzQ0FBc0MsbUJBQU8sQ0FBQyw2RUFBbUI7O0FBRWpFO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsTUFBTTtBQUN0QjtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQSxDOzs7Ozs7Ozs7OztBQzNHQTs7QUFFQSxlQUFlLG1CQUFPLENBQUMsZ0RBQVM7O0FBRWhDO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0IsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSw4QkFBOEIsYUFBYTs7Ozs7Ozs7Ozs7O0FDbEUzQzs7QUFFQTtBQUNBLG1CQUFPLENBQUMsaUVBQWE7QUFDckIsbUJBQU8sQ0FBQyxtRUFBYzs7QUFFdEI7QUFDQTs7QUFFQTtBQUNBLFVBQVUsbUJBQU8sQ0FBQyxtRUFBYztBQUNoQzs7Ozs7Ozs7Ozs7O0FDWEE7O0FBRUE7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLGlFQUFhOztBQUVsQyxrQkFBa0IsbUJBQU8sQ0FBQyxxRUFBZTs7QUFFekM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDMUJBOztBQUVBOztBQUVBLG1CQUFtQixtQkFBTyxDQUFDLHlFQUFpQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDOzs7Ozs7Ozs7OztBQ1ZBOztBQUVBOztBQUVBLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFZO0FBQ3BDLG1CQUFtQixtQkFBTyxDQUFDLHlFQUFpQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUM1QkE7O0FBRUE7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLG1FQUFjOztBQUVuQyxrQkFBa0IsbUJBQU8sQ0FBQyxxRUFBZTs7QUFFekM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDMUJBOztBQUVBOztBQUVBLG1CQUFtQixtQkFBTyxDQUFDLHlFQUFpQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDVkE7O0FBRUE7O0FBRUEsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVk7QUFDcEMsbUJBQW1CLG1CQUFPLENBQUMseUVBQWlCOztBQUU1QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUN6QkE7O0FBRUE7O0FBRUEsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQWE7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ1ZBOztBQUVBOztBQUVBLGdCQUFnQixtQkFBTyxDQUFDLGlFQUFhO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQixtQkFBTyxDQUFDLDJEQUFVLFNBQVM7QUFDckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQzdFQTs7QUFFQTs7QUFFQSxnQkFBZ0IsbUJBQU8sQ0FBQyxpRUFBYTtBQUNyQztBQUNBOztBQUVBLHFCQUFxQjs7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCLG1CQUFPLENBQUMsMkRBQVUsU0FBUztBQUNyRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ2hGQTs7QUFFQTtBQUNBLG1CQUFPLENBQUMsaUVBQWE7QUFDckIsbUJBQU8sQ0FBQyxtRUFBYzs7QUFFdEIsc0JBQXNCLG1CQUFPLENBQUMsbUVBQWM7Ozs7Ozs7Ozs7OztBQ041Qzs7QUFFQTtBQUNBOztBQUVBLGdCQUFnQixtQkFBTyxDQUFDLGlFQUFhOztBQUVyQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNqTUE7O0FBRUEsZ0JBQWdCLG1CQUFPLENBQUMsbUVBQWM7QUFDdEMsa0JBQWtCLG1CQUFPLENBQUMsdUVBQWdCO0FBQzFDLGdCQUFnQixtQkFBTyxDQUFDLHFFQUFlO0FBQ3ZDLGdCQUFnQixtQkFBTyxDQUFDLG1FQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLG1FQUFjOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ25EQTs7QUFFQSxjQUFjLG1CQUFPLENBQUMsZ0RBQVM7QUFDL0Isa0JBQWtCLG1CQUFPLENBQUMsaUVBQWM7QUFDeEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGdCQUFnQixtQkFBTyxDQUFDLGlFQUFhO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLDZFQUFtQjs7QUFFN0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQzs7Ozs7Ozs7Ozs7QUNwTEE7O0FBRUEsaUJBQWlCLG1CQUFPLENBQUMscUVBQWU7O0FBRXhDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLFdBQVc7QUFDM0I7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixXQUFXO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLFdBQVc7QUFDM0I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLFdBQVc7QUFDM0I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFD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bUJBQU8sQ0FBQyxxRUFBZTtBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQyxtRUFBYzs7QUFFdEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsWUFBWTtBQUMvQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVTs7Ozs7Ozs7Ozs7O0FDdkx0QztBQUNBLENBQUMsS0FBNEQ7QUFDN0QsQ0FBQyxTQUMrQjtBQUNoQyxDQUFDLHFCQUFxQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNERBQTREOztBQUU1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUM7Ozs7Ozs7Ozs7Ozs7QUNuWUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FB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QTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyxxREFBTTs7QUFFM0I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbEZBLDZEOzs7Ozs7Ozs7OztBQ0FBLHFEIiwiZmlsZSI6Ii4uL3Rlc3QvaHRtbC9hcGkuYmFzaWMuZW5jcnlwdC1zaWduLmZyb21CdW5kbGVkLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcImpzLWNyeXB0by11dGlsc1wiKSwgcmVxdWlyZShcIm9wZW5wZ3BcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wianMtY3J5cHRvLXV0aWxzXCIsIFwib3BlbnBncFwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJjYXNjYWRlXCJdID0gZmFjdG9yeShyZXF1aXJlKFwianMtY3J5cHRvLXV0aWxzXCIpLCByZXF1aXJlKFwib3BlbnBncFwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiY2FzY2FkZVwiXSA9IGZhY3Rvcnkocm9vdFtcImpzLWNyeXB0by11dGlsc1wiXSwgcm9vdFtcIm9wZW5wZ3BcIl0pO1xufSkodGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9qc19jcnlwdG9fdXRpbHNfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9vcGVucGdwX18pIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9Vc2Vycy9qdW4vUHJvamVjdEphdmFTY3JpcHQvY2FzY2FkZS9kaXN0XCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9jYXNjYWRlLmJ1bmRsZS5qc1wiOiBcIi4vZGlzdC9jYXNjYWRlLmJ1bmRsZS5qc1wiXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSB7IC8vIGNoZWNrIGZvciBudW1iZXIgb3Igc3RyaW5nXG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBpZDtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSBcIi4vZGlzdCBzeW5jIHJlY3Vyc2l2ZSBjYXNjYWRlLmJ1bmRsZS5qc1wiOyIsIiFmdW5jdGlvbihuLGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoZnVuY3Rpb24oKXt0cnl7cmV0dXJuIHJlcXVpcmUoXCJqcy1jcnlwdG8tdXRpbHNcIil9Y2F0Y2gobil7fX0oKSxyZXF1aXJlKFwib3BlbnBncFwiKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJqcy1jcnlwdG8tdXRpbHNcIixcIm9wZW5wZ3BcIl0sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5jYXNjYWRlPWUoZnVuY3Rpb24oKXt0cnl7cmV0dXJuIHJlcXVpcmUoXCJqcy1jcnlwdG8tdXRpbHNcIil9Y2F0Y2gobil7fX0oKSxyZXF1aXJlKFwib3BlbnBncFwiKSk6bi5jYXNjYWRlPWUobltcImpzLWNyeXB0by11dGlsc1wiXSxuLm9wZW5wZ3ApfSh0aGlzLGZ1bmN0aW9uKG4sZSl7cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciBlPXt9O2Z1bmN0aW9uIHQobCl7aWYoZVtsXSlyZXR1cm4gZVtsXS5leHBvcnRzO3ZhciBvPWVbbF09e2k6bCxsOiExLGV4cG9ydHM6e319O3JldHVybiBuW2xdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHQpLG8ubD0hMCxvLmV4cG9ydHN9cmV0dXJuIHQubT1uLHQuYz1lLHQuZD1mdW5jdGlvbihuLGUsbCl7dC5vKG4sZSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLGUse2VudW1lcmFibGU6ITAsZ2V0Omx9KX0sdC5yPWZ1bmN0aW9uKG4pe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LHQudD1mdW5jdGlvbihuLGUpe2lmKDEmZSYmKG49dChuKSksOCZlKXJldHVybiBuO2lmKDQmZSYmXCJvYmplY3RcIj09dHlwZW9mIG4mJm4mJm4uX19lc01vZHVsZSlyZXR1cm4gbjt2YXIgbD1PYmplY3QuY3JlYXRlKG51bGwpO2lmKHQucihsKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobCxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTpufSksMiZlJiZcInN0cmluZ1wiIT10eXBlb2Ygbilmb3IodmFyIG8gaW4gbil0LmQobCxvLGZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfS5iaW5kKG51bGwsbykpO3JldHVybiBsfSx0Lm49ZnVuY3Rpb24obil7dmFyIGU9biYmbi5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIG4uZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gbn07cmV0dXJuIHQuZChlLFwiYVwiLGUpLGV9LHQubz1mdW5jdGlvbihuLGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixlKX0sdC5wPVwiL1VzZXJzL2p1bi9Qcm9qZWN0SmF2YVNjcmlwdC9jYXNjYWRlL2Rpc3RcIix0KHQucz0zMCl9KFtmdW5jdGlvbihuLGUsdCl7bi5leHBvcnRzPXQoMzEpfSxmdW5jdGlvbihuLGUpe2Z1bmN0aW9uIHQobixlLHQsbCxvLGkscil7dHJ5e3ZhciBjPW5baV0ociksdT1jLnZhbHVlfWNhdGNoKG4pe3JldHVybiB2b2lkIHQobil9Yy5kb25lP2UodSk6UHJvbWlzZS5yZXNvbHZlKHUpLnRoZW4obCxvKX1uLmV4cG9ydHM9ZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxsPWFyZ3VtZW50cztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obyxpKXt2YXIgcj1uLmFwcGx5KGUsbCk7ZnVuY3Rpb24gYyhuKXt0KHIsbyxpLGMsdSxcIm5leHRcIixuKX1mdW5jdGlvbiB1KG4pe3QocixvLGksYyx1LFwidGhyb3dcIixuKX1jKHZvaWQgMCl9KX19fSxmdW5jdGlvbihuLGUpe24uZXhwb3J0cz1mdW5jdGlvbihuLGUpe2lmKCEobiBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9fSxmdW5jdGlvbihuLGUpe2Z1bmN0aW9uIHQobixlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIGw9ZVt0XTtsLmVudW1lcmFibGU9bC5lbnVtZXJhYmxlfHwhMSxsLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBsJiYobC53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sbC5rZXksbCl9fW4uZXhwb3J0cz1mdW5jdGlvbihuLGUsbCl7cmV0dXJuIGUmJnQobi5wcm90b3R5cGUsZSksbCYmdChuLGwpLG59fSxmdW5jdGlvbihuLGUsdCl7KGZ1bmN0aW9uKG4sdCl7dmFyIGw9MjAwLG89XCJfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fXCIsaT05MDA3MTk5MjU0NzQwOTkxLHI9XCJbb2JqZWN0IEFyZ3VtZW50c11cIixjPVwiW29iamVjdCBCb29sZWFuXVwiLHU9XCJbb2JqZWN0IERhdGVdXCIscz1cIltvYmplY3QgRnVuY3Rpb25dXCIsYT1cIltvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dXCIsbT1cIltvYmplY3QgTWFwXVwiLGQ9XCJbb2JqZWN0IE51bWJlcl1cIixmPVwiW29iamVjdCBPYmplY3RdXCIscD1cIltvYmplY3QgUmVnRXhwXVwiLHk9XCJbb2JqZWN0IFNldF1cIixoPVwiW29iamVjdCBTdHJpbmddXCIsYj1cIltvYmplY3QgU3ltYm9sXVwiLHY9XCJbb2JqZWN0IEFycmF5QnVmZmVyXVwiLGc9XCJbb2JqZWN0IERhdGFWaWV3XVwiLHc9XCJbb2JqZWN0IEZsb2F0MzJBcnJheV1cIix4PVwiW29iamVjdCBGbG9hdDY0QXJyYXldXCIsaz1cIltvYmplY3QgSW50OEFycmF5XVwiLF89XCJbb2JqZWN0IEludDE2QXJyYXldXCIsRT1cIltvYmplY3QgSW50MzJBcnJheV1cIixqPVwiW29iamVjdCBVaW50OEFycmF5XVwiLEE9XCJbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XVwiLEs9XCJbb2JqZWN0IFVpbnQxNkFycmF5XVwiLFM9XCJbb2JqZWN0IFVpbnQzMkFycmF5XVwiLFU9L1xcdyokLyxQPS9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC8sST0vXig/OjB8WzEtOV1cXGQqKSQvLE89e307T1tyXT1PW1wiW29iamVjdCBBcnJheV1cIl09T1t2XT1PW2ddPU9bY109T1t1XT1PW3ddPU9beF09T1trXT1PW19dPU9bRV09T1ttXT1PW2RdPU9bZl09T1twXT1PW3ldPU9baF09T1tiXT1PW2pdPU9bQV09T1tLXT1PW1NdPSEwLE9bXCJbb2JqZWN0IEVycm9yXVwiXT1PW3NdPU9bXCJbb2JqZWN0IFdlYWtNYXBdXCJdPSExO3ZhciBCPVwib2JqZWN0XCI9PXR5cGVvZiBuJiZuJiZuLk9iamVjdD09PU9iamVjdCYmbixNPVwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmJiZzZWxmLk9iamVjdD09PU9iamVjdCYmc2VsZixUPUJ8fE18fEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSxOPWUmJiFlLm5vZGVUeXBlJiZlLFI9TiYmXCJvYmplY3RcIj09dHlwZW9mIHQmJnQmJiF0Lm5vZGVUeXBlJiZ0LEw9UiYmUi5leHBvcnRzPT09TjtmdW5jdGlvbiBGKG4sZSl7cmV0dXJuIG4uc2V0KGVbMF0sZVsxXSksbn1mdW5jdGlvbiBDKG4sZSl7cmV0dXJuIG4uYWRkKGUpLG59ZnVuY3Rpb24gRChuLGUsdCxsKXt2YXIgbz0tMSxpPW4/bi5sZW5ndGg6MDtmb3IobCYmaSYmKHQ9blsrK29dKTsrK288aTspdD1lKHQsbltvXSxvLG4pO3JldHVybiB0fWZ1bmN0aW9uIEoobil7dmFyIGU9ITE7aWYobnVsbCE9biYmXCJmdW5jdGlvblwiIT10eXBlb2Ygbi50b1N0cmluZyl0cnl7ZT0hIShuK1wiXCIpfWNhdGNoKG4pe31yZXR1cm4gZX1mdW5jdGlvbiBHKG4pe3ZhciBlPS0xLHQ9QXJyYXkobi5zaXplKTtyZXR1cm4gbi5mb3JFYWNoKGZ1bmN0aW9uKG4sbCl7dFsrK2VdPVtsLG5dfSksdH1mdW5jdGlvbiBIKG4sZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBuKGUodCkpfX1mdW5jdGlvbiBWKG4pe3ZhciBlPS0xLHQ9QXJyYXkobi5zaXplKTtyZXR1cm4gbi5mb3JFYWNoKGZ1bmN0aW9uKG4pe3RbKytlXT1ufSksdH12YXIgej1BcnJheS5wcm90b3R5cGUsWT1GdW5jdGlvbi5wcm90b3R5cGUsVz1PYmplY3QucHJvdG90eXBlLHE9VFtcIl9fY29yZS1qc19zaGFyZWRfX1wiXSwkPWZ1bmN0aW9uKCl7dmFyIG49L1teLl0rJC8uZXhlYyhxJiZxLmtleXMmJnEua2V5cy5JRV9QUk9UT3x8XCJcIik7cmV0dXJuIG4/XCJTeW1ib2woc3JjKV8xLlwiK246XCJcIn0oKSxRPVkudG9TdHJpbmcsWD1XLmhhc093blByb3BlcnR5LFo9Vy50b1N0cmluZyxubj1SZWdFeHAoXCJeXCIrUS5jYWxsKFgpLnJlcGxhY2UoL1tcXFxcXiQuKis/KClbXFxde318XS9nLFwiXFxcXCQmXCIpLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csXCIkMS4qP1wiKStcIiRcIiksZW49TD9ULkJ1ZmZlcjp2b2lkIDAsdG49VC5TeW1ib2wsbG49VC5VaW50OEFycmF5LG9uPUgoT2JqZWN0LmdldFByb3RvdHlwZU9mLE9iamVjdCkscm49T2JqZWN0LmNyZWF0ZSxjbj1XLnByb3BlcnR5SXNFbnVtZXJhYmxlLHVuPXouc3BsaWNlLHNuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsYW49ZW4/ZW4uaXNCdWZmZXI6dm9pZCAwLG1uPUgoT2JqZWN0LmtleXMsT2JqZWN0KSxkbj1SbihULFwiRGF0YVZpZXdcIiksZm49Um4oVCxcIk1hcFwiKSxwbj1SbihULFwiUHJvbWlzZVwiKSx5bj1SbihULFwiU2V0XCIpLGhuPVJuKFQsXCJXZWFrTWFwXCIpLGJuPVJuKE9iamVjdCxcImNyZWF0ZVwiKSx2bj1KbihkbiksZ249Sm4oZm4pLHduPUpuKHBuKSx4bj1Kbih5biksa249Sm4oaG4pLF9uPXRuP3RuLnByb3RvdHlwZTp2b2lkIDAsRW49X24/X24udmFsdWVPZjp2b2lkIDA7ZnVuY3Rpb24gam4obil7dmFyIGU9LTEsdD1uP24ubGVuZ3RoOjA7Zm9yKHRoaXMuY2xlYXIoKTsrK2U8dDspe3ZhciBsPW5bZV07dGhpcy5zZXQobFswXSxsWzFdKX19ZnVuY3Rpb24gQW4obil7dmFyIGU9LTEsdD1uP24ubGVuZ3RoOjA7Zm9yKHRoaXMuY2xlYXIoKTsrK2U8dDspe3ZhciBsPW5bZV07dGhpcy5zZXQobFswXSxsWzFdKX19ZnVuY3Rpb24gS24obil7dmFyIGU9LTEsdD1uP24ubGVuZ3RoOjA7Zm9yKHRoaXMuY2xlYXIoKTsrK2U8dDspe3ZhciBsPW5bZV07dGhpcy5zZXQobFswXSxsWzFdKX19ZnVuY3Rpb24gU24obil7dGhpcy5fX2RhdGFfXz1uZXcgQW4obil9ZnVuY3Rpb24gVW4obixlKXt2YXIgdD1IbihuKXx8ZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiBmdW5jdGlvbihuKXtyZXR1cm4hIW4mJlwib2JqZWN0XCI9PXR5cGVvZiBufShuKSYmVm4obil9KG4pJiZYLmNhbGwobixcImNhbGxlZVwiKSYmKCFjbi5jYWxsKG4sXCJjYWxsZWVcIil8fFouY2FsbChuKT09cil9KG4pP2Z1bmN0aW9uKG4sZSl7Zm9yKHZhciB0PS0xLGw9QXJyYXkobik7Kyt0PG47KWxbdF09ZSh0KTtyZXR1cm4gbH0obi5sZW5ndGgsU3RyaW5nKTpbXSxsPXQubGVuZ3RoLG89ISFsO2Zvcih2YXIgaSBpbiBuKSFlJiYhWC5jYWxsKG4saSl8fG8mJihcImxlbmd0aFwiPT1pfHxDbihpLGwpKXx8dC5wdXNoKGkpO3JldHVybiB0fWZ1bmN0aW9uIFBuKG4sZSx0KXt2YXIgbD1uW2VdO1guY2FsbChuLGUpJiZHbihsLHQpJiYodm9pZCAwIT09dHx8ZSBpbiBuKXx8KG5bZV09dCl9ZnVuY3Rpb24gSW4obixlKXtmb3IodmFyIHQ9bi5sZW5ndGg7dC0tOylpZihHbihuW3RdWzBdLGUpKXJldHVybiB0O3JldHVybi0xfWZ1bmN0aW9uIE9uKG4sZSx0LGwsbyxpLFApe3ZhciBJO2lmKGwmJihJPWk/bChuLG8saSxQKTpsKG4pKSx2b2lkIDAhPT1JKXJldHVybiBJO2lmKCFXbihuKSlyZXR1cm4gbjt2YXIgQj1IbihuKTtpZihCKXtpZihJPWZ1bmN0aW9uKG4pe3ZhciBlPW4ubGVuZ3RoLHQ9bi5jb25zdHJ1Y3RvcihlKTtlJiZcInN0cmluZ1wiPT10eXBlb2YgblswXSYmWC5jYWxsKG4sXCJpbmRleFwiKSYmKHQuaW5kZXg9bi5pbmRleCx0LmlucHV0PW4uaW5wdXQpO3JldHVybiB0fShuKSwhZSlyZXR1cm4gZnVuY3Rpb24obixlKXt2YXIgdD0tMSxsPW4ubGVuZ3RoO2V8fChlPUFycmF5KGwpKTtmb3IoOysrdDxsOyllW3RdPW5bdF07cmV0dXJuIGV9KG4sSSl9ZWxzZXt2YXIgTT1GbihuKSxUPU09PXN8fE09PWE7aWYoem4obikpcmV0dXJuIGZ1bmN0aW9uKG4sZSl7aWYoZSlyZXR1cm4gbi5zbGljZSgpO3ZhciB0PW5ldyBuLmNvbnN0cnVjdG9yKG4ubGVuZ3RoKTtyZXR1cm4gbi5jb3B5KHQpLHR9KG4sZSk7aWYoTT09Znx8TT09cnx8VCYmIWkpe2lmKEoobikpcmV0dXJuIGk/bjp7fTtpZihJPWZ1bmN0aW9uKG4pe3JldHVyblwiZnVuY3Rpb25cIiE9dHlwZW9mIG4uY29uc3RydWN0b3J8fERuKG4pP3t9OmZ1bmN0aW9uKG4pe3JldHVybiBXbihuKT9ybihuKTp7fX0ob24obikpfShUP3t9Om4pLCFlKXJldHVybiBmdW5jdGlvbihuLGUpe3JldHVybiBUbihuLExuKG4pLGUpfShuLGZ1bmN0aW9uKG4sZSl7cmV0dXJuIG4mJlRuKGUscW4oZSksbil9KEksbikpfWVsc2V7aWYoIU9bTV0pcmV0dXJuIGk/bjp7fTtJPWZ1bmN0aW9uKG4sZSx0LGwpe3ZhciBvPW4uY29uc3RydWN0b3I7c3dpdGNoKGUpe2Nhc2UgdjpyZXR1cm4gTW4obik7Y2FzZSBjOmNhc2UgdTpyZXR1cm4gbmV3IG8oK24pO2Nhc2UgZzpyZXR1cm4gZnVuY3Rpb24obixlKXt2YXIgdD1lP01uKG4uYnVmZmVyKTpuLmJ1ZmZlcjtyZXR1cm4gbmV3IG4uY29uc3RydWN0b3IodCxuLmJ5dGVPZmZzZXQsbi5ieXRlTGVuZ3RoKX0obixsKTtjYXNlIHc6Y2FzZSB4OmNhc2UgazpjYXNlIF86Y2FzZSBFOmNhc2UgajpjYXNlIEE6Y2FzZSBLOmNhc2UgUzpyZXR1cm4gZnVuY3Rpb24obixlKXt2YXIgdD1lP01uKG4uYnVmZmVyKTpuLmJ1ZmZlcjtyZXR1cm4gbmV3IG4uY29uc3RydWN0b3IodCxuLmJ5dGVPZmZzZXQsbi5sZW5ndGgpfShuLGwpO2Nhc2UgbTpyZXR1cm4gZnVuY3Rpb24obixlLHQpe3JldHVybiBEKGU/dChHKG4pLCEwKTpHKG4pLEYsbmV3IG4uY29uc3RydWN0b3IpfShuLGwsdCk7Y2FzZSBkOmNhc2UgaDpyZXR1cm4gbmV3IG8obik7Y2FzZSBwOnJldHVybiBmdW5jdGlvbihuKXt2YXIgZT1uZXcgbi5jb25zdHJ1Y3RvcihuLnNvdXJjZSxVLmV4ZWMobikpO3JldHVybiBlLmxhc3RJbmRleD1uLmxhc3RJbmRleCxlfShuKTtjYXNlIHk6cmV0dXJuIGZ1bmN0aW9uKG4sZSx0KXtyZXR1cm4gRChlP3QoVihuKSwhMCk6VihuKSxDLG5ldyBuLmNvbnN0cnVjdG9yKX0obixsLHQpO2Nhc2UgYjpyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIEVuP09iamVjdChFbi5jYWxsKG4pKTp7fX0obil9fShuLE0sT24sZSl9fVB8fChQPW5ldyBTbik7dmFyIE49UC5nZXQobik7aWYoTilyZXR1cm4gTjtpZihQLnNldChuLEkpLCFCKXZhciBSPXQ/ZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKG4sZSx0KXt2YXIgbD1lKG4pO3JldHVybiBIbihuKT9sOmZ1bmN0aW9uKG4sZSl7Zm9yKHZhciB0PS0xLGw9ZS5sZW5ndGgsbz1uLmxlbmd0aDsrK3Q8bDspbltvK3RdPWVbdF07cmV0dXJuIG59KGwsdChuKSl9KG4scW4sTG4pfShuKTpxbihuKTtyZXR1cm4gZnVuY3Rpb24obixlKXtmb3IodmFyIHQ9LTEsbD1uP24ubGVuZ3RoOjA7Kyt0PGwmJiExIT09ZShuW3RdLHQsbik7KTt9KFJ8fG4sZnVuY3Rpb24obyxpKXtSJiYobz1uW2k9b10pLFBuKEksaSxPbihvLGUsdCxsLGksbixQKSl9KSxJfWZ1bmN0aW9uIEJuKG4pe3JldHVybiEoIVduKG4pfHxmdW5jdGlvbihuKXtyZXR1cm4hISQmJiQgaW4gbn0obikpJiYoWW4obil8fEoobik/bm46UCkudGVzdChKbihuKSl9ZnVuY3Rpb24gTW4obil7dmFyIGU9bmV3IG4uY29uc3RydWN0b3Iobi5ieXRlTGVuZ3RoKTtyZXR1cm4gbmV3IGxuKGUpLnNldChuZXcgbG4obikpLGV9ZnVuY3Rpb24gVG4obixlLHQsbCl7dHx8KHQ9e30pO2Zvcih2YXIgbz0tMSxpPWUubGVuZ3RoOysrbzxpOyl7dmFyIHI9ZVtvXSxjPWw/bCh0W3JdLG5bcl0scix0LG4pOnZvaWQgMDtQbih0LHIsdm9pZCAwPT09Yz9uW3JdOmMpfXJldHVybiB0fWZ1bmN0aW9uIE5uKG4sZSl7dmFyIHQ9bi5fX2RhdGFfXztyZXR1cm4gZnVuY3Rpb24obil7dmFyIGU9dHlwZW9mIG47cmV0dXJuXCJzdHJpbmdcIj09ZXx8XCJudW1iZXJcIj09ZXx8XCJzeW1ib2xcIj09ZXx8XCJib29sZWFuXCI9PWU/XCJfX3Byb3RvX19cIiE9PW46bnVsbD09PW59KGUpP3RbXCJzdHJpbmdcIj09dHlwZW9mIGU/XCJzdHJpbmdcIjpcImhhc2hcIl06dC5tYXB9ZnVuY3Rpb24gUm4obixlKXt2YXIgdD1mdW5jdGlvbihuLGUpe3JldHVybiBudWxsPT1uP3ZvaWQgMDpuW2VdfShuLGUpO3JldHVybiBCbih0KT90OnZvaWQgMH1qbi5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLl9fZGF0YV9fPWJuP2JuKG51bGwpOnt9fSxqbi5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLmhhcyhuKSYmZGVsZXRlIHRoaXMuX19kYXRhX19bbl19LGpuLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24obil7dmFyIGU9dGhpcy5fX2RhdGFfXztpZihibil7dmFyIHQ9ZVtuXTtyZXR1cm4gdD09PW8/dm9pZCAwOnR9cmV0dXJuIFguY2FsbChlLG4pP2Vbbl06dm9pZCAwfSxqbi5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKG4pe3ZhciBlPXRoaXMuX19kYXRhX187cmV0dXJuIGJuP3ZvaWQgMCE9PWVbbl06WC5jYWxsKGUsbil9LGpuLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24obixlKXtyZXR1cm4gdGhpcy5fX2RhdGFfX1tuXT1ibiYmdm9pZCAwPT09ZT9vOmUsdGhpc30sQW4ucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5fX2RhdGFfXz1bXX0sQW4ucHJvdG90eXBlLmRlbGV0ZT1mdW5jdGlvbihuKXt2YXIgZT10aGlzLl9fZGF0YV9fLHQ9SW4oZSxuKTtyZXR1cm4hKHQ8MHx8KHQ9PWUubGVuZ3RoLTE/ZS5wb3AoKTp1bi5jYWxsKGUsdCwxKSwwKSl9LEFuLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24obil7dmFyIGU9dGhpcy5fX2RhdGFfXyx0PUluKGUsbik7cmV0dXJuIHQ8MD92b2lkIDA6ZVt0XVsxXX0sQW4ucHJvdG90eXBlLmhhcz1mdW5jdGlvbihuKXtyZXR1cm4gSW4odGhpcy5fX2RhdGFfXyxuKT4tMX0sQW4ucHJvdG90eXBlLnNldD1mdW5jdGlvbihuLGUpe3ZhciB0PXRoaXMuX19kYXRhX18sbD1Jbih0LG4pO3JldHVybiBsPDA/dC5wdXNoKFtuLGVdKTp0W2xdWzFdPWUsdGhpc30sS24ucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5fX2RhdGFfXz17aGFzaDpuZXcgam4sbWFwOm5ldyhmbnx8QW4pLHN0cmluZzpuZXcgam59fSxLbi5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKG4pe3JldHVybiBObih0aGlzLG4pLmRlbGV0ZShuKX0sS24ucHJvdG90eXBlLmdldD1mdW5jdGlvbihuKXtyZXR1cm4gTm4odGhpcyxuKS5nZXQobil9LEtuLnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24obil7cmV0dXJuIE5uKHRoaXMsbikuaGFzKG4pfSxLbi5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKG4sZSl7cmV0dXJuIE5uKHRoaXMsbikuc2V0KG4sZSksdGhpc30sU24ucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5fX2RhdGFfXz1uZXcgQW59LFNuLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMuX19kYXRhX18uZGVsZXRlKG4pfSxTbi5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLl9fZGF0YV9fLmdldChuKX0sU24ucHJvdG90eXBlLmhhcz1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMobil9LFNuLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24obixlKXt2YXIgdD10aGlzLl9fZGF0YV9fO2lmKHQgaW5zdGFuY2VvZiBBbil7dmFyIG89dC5fX2RhdGFfXztpZighZm58fG8ubGVuZ3RoPGwtMSlyZXR1cm4gby5wdXNoKFtuLGVdKSx0aGlzO3Q9dGhpcy5fX2RhdGFfXz1uZXcgS24obyl9cmV0dXJuIHQuc2V0KG4sZSksdGhpc307dmFyIExuPXNuP0goc24sT2JqZWN0KTpmdW5jdGlvbigpe3JldHVybltdfSxGbj1mdW5jdGlvbihuKXtyZXR1cm4gWi5jYWxsKG4pfTtmdW5jdGlvbiBDbihuLGUpe3JldHVybiEhKGU9bnVsbD09ZT9pOmUpJiYoXCJudW1iZXJcIj09dHlwZW9mIG58fEkudGVzdChuKSkmJm4+LTEmJm4lMT09MCYmbjxlfWZ1bmN0aW9uIERuKG4pe3ZhciBlPW4mJm4uY29uc3RydWN0b3I7cmV0dXJuIG49PT0oXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmZS5wcm90b3R5cGV8fFcpfWZ1bmN0aW9uIEpuKG4pe2lmKG51bGwhPW4pe3RyeXtyZXR1cm4gUS5jYWxsKG4pfWNhdGNoKG4pe310cnl7cmV0dXJuIG4rXCJcIn1jYXRjaChuKXt9fXJldHVyblwiXCJ9ZnVuY3Rpb24gR24obixlKXtyZXR1cm4gbj09PWV8fG4hPW4mJmUhPWV9KGRuJiZGbihuZXcgZG4obmV3IEFycmF5QnVmZmVyKDEpKSkhPWd8fGZuJiZGbihuZXcgZm4pIT1tfHxwbiYmXCJbb2JqZWN0IFByb21pc2VdXCIhPUZuKHBuLnJlc29sdmUoKSl8fHluJiZGbihuZXcgeW4pIT15fHxobiYmXCJbb2JqZWN0IFdlYWtNYXBdXCIhPUZuKG5ldyBobikpJiYoRm49ZnVuY3Rpb24obil7dmFyIGU9Wi5jYWxsKG4pLHQ9ZT09Zj9uLmNvbnN0cnVjdG9yOnZvaWQgMCxsPXQ/Sm4odCk6dm9pZCAwO2lmKGwpc3dpdGNoKGwpe2Nhc2Ugdm46cmV0dXJuIGc7Y2FzZSBnbjpyZXR1cm4gbTtjYXNlIHduOnJldHVyblwiW29iamVjdCBQcm9taXNlXVwiO2Nhc2UgeG46cmV0dXJuIHk7Y2FzZSBrbjpyZXR1cm5cIltvYmplY3QgV2Vha01hcF1cIn1yZXR1cm4gZX0pO3ZhciBIbj1BcnJheS5pc0FycmF5O2Z1bmN0aW9uIFZuKG4pe3JldHVybiBudWxsIT1uJiZmdW5jdGlvbihuKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgbiYmbj4tMSYmbiUxPT0wJiZuPD1pfShuLmxlbmd0aCkmJiFZbihuKX12YXIgem49YW58fGZ1bmN0aW9uKCl7cmV0dXJuITF9O2Z1bmN0aW9uIFluKG4pe3ZhciBlPVduKG4pP1ouY2FsbChuKTpcIlwiO3JldHVybiBlPT1zfHxlPT1hfWZ1bmN0aW9uIFduKG4pe3ZhciBlPXR5cGVvZiBuO3JldHVybiEhbiYmKFwib2JqZWN0XCI9PWV8fFwiZnVuY3Rpb25cIj09ZSl9ZnVuY3Rpb24gcW4obil7cmV0dXJuIFZuKG4pP1VuKG4pOmZ1bmN0aW9uKG4pe2lmKCFEbihuKSlyZXR1cm4gbW4obik7dmFyIGU9W107Zm9yKHZhciB0IGluIE9iamVjdChuKSlYLmNhbGwobix0KSYmXCJjb25zdHJ1Y3RvclwiIT10JiZlLnB1c2godCk7cmV0dXJuIGV9KG4pfXQuZXhwb3J0cz1mdW5jdGlvbihuKXtyZXR1cm4gT24obiwhMCwhMCl9fSkuY2FsbCh0aGlzLHQoMzMpLHQoMzQpKG4pKX0sZnVuY3Rpb24obixlKXtmdW5jdGlvbiB0KGUpe3JldHVybiBuLmV4cG9ydHM9dD1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mOmZ1bmN0aW9uKG4pe3JldHVybiBuLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKG4pfSx0KGUpfW4uZXhwb3J0cz10fSxmdW5jdGlvbihuLGUsdCl7dmFyIGw9dCgzOCksbz10KDM5KTtuLmV4cG9ydHM9ZnVuY3Rpb24obixlKXtyZXR1cm4hZXx8XCJvYmplY3RcIiE9PWwoZSkmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGU/byhuKTplfX0sZnVuY3Rpb24obixlLHQpe3ZhciBsPXQoMTQpO24uZXhwb3J0cz1mdW5jdGlvbihuLGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtuLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6bix3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmbChuLGUpfX0sZnVuY3Rpb24obixlLHQpe3ZhciBsPXQoMzUpLG89dCgzNiksaT10KDM3KTtuLmV4cG9ydHM9ZnVuY3Rpb24obil7cmV0dXJuIGwobil8fG8obil8fGkoKX19LGZ1bmN0aW9uKG4sZSx0KXt2YXIgbD10KDUpLG89dCgxNCksaT10KDQyKSxyPXQoNDMpO2Z1bmN0aW9uIGMoZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgTWFwP25ldyBNYXA6dm9pZCAwO3JldHVybiBuLmV4cG9ydHM9Yz1mdW5jdGlvbihuKXtpZihudWxsPT09bnx8IWkobikpcmV0dXJuIG47aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbil0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7aWYodm9pZCAwIT09dCl7aWYodC5oYXMobikpcmV0dXJuIHQuZ2V0KG4pO3Quc2V0KG4sZSl9ZnVuY3Rpb24gZSgpe3JldHVybiByKG4sYXJndW1lbnRzLGwodGhpcykuY29uc3RydWN0b3IpfXJldHVybiBlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG4ucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxvKGUsbil9LGMoZSl9bi5leHBvcnRzPWN9LGZ1bmN0aW9uKG4sZSx0KXt2YXIgbD1lLmdsb2JhbD10KDQ0KSxvPWUuaGFzQnVmZmVyPWwmJiEhbC5pc0J1ZmZlcixpPWUuaGFzQXJyYXlCdWZmZXI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyLHI9ZS5pc0FycmF5PXQoMTcpO2UuaXNBcnJheUJ1ZmZlcj1pP2Z1bmN0aW9uKG4pe3JldHVybiBuIGluc3RhbmNlb2YgQXJyYXlCdWZmZXJ8fHAobil9Omg7dmFyIGM9ZS5pc0J1ZmZlcj1vP2wuaXNCdWZmZXI6aCx1PWUuaXNWaWV3PWk/QXJyYXlCdWZmZXIuaXNWaWV3fHxiKFwiQXJyYXlCdWZmZXJcIixcImJ1ZmZlclwiKTpoO2UuYWxsb2M9ZixlLmNvbmNhdD1mdW5jdGlvbihuLHQpe3R8fCh0PTAsQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChuLGZ1bmN0aW9uKG4pe3QrPW4ubGVuZ3RofSkpO3ZhciBsPXRoaXMhPT1lJiZ0aGlzfHxuWzBdLG89Zi5jYWxsKGwsdCksaT0wO3JldHVybiBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG4sZnVuY3Rpb24obil7aSs9ZC5jb3B5LmNhbGwobixvLGkpfSksb30sZS5mcm9tPWZ1bmN0aW9uKG4pe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBuP2Z1bmN0aW9uKG4pe3ZhciBlPTMqbi5sZW5ndGgsdD1mLmNhbGwodGhpcyxlKSxsPWQud3JpdGUuY2FsbCh0LG4pO2UhPT1sJiYodD1kLnNsaWNlLmNhbGwodCwwLGwpKTtyZXR1cm4gdH0uY2FsbCh0aGlzLG4pOnkodGhpcykuZnJvbShuKX07dmFyIHM9ZS5BcnJheT10KDQ1KSxhPWUuQnVmZmVyPXQoNDYpLG09ZS5VaW50OEFycmF5PXQoNDcpLGQ9ZS5wcm90b3R5cGU9dCgxOCk7ZnVuY3Rpb24gZihuKXtyZXR1cm4geSh0aGlzKS5hbGxvYyhuKX12YXIgcD1iKFwiQXJyYXlCdWZmZXJcIik7ZnVuY3Rpb24geShuKXtyZXR1cm4gYyhuKT9hOnUobik/bTpyKG4pP3M6bz9hOmk/bTpzfWZ1bmN0aW9uIGgoKXtyZXR1cm4hMX1mdW5jdGlvbiBiKG4sZSl7cmV0dXJuIG49XCJbb2JqZWN0IFwiK24rXCJdXCIsZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPXQmJnt9LnRvU3RyaW5nLmNhbGwoZT90W2VdOnQpPT09bn19fSxmdW5jdGlvbihuLGUsdCl7bi5leHBvcnRzPWZ1bmN0aW9uKG4pe3ZhciBlPXt9O2Z1bmN0aW9uIHQobCl7aWYoZVtsXSlyZXR1cm4gZVtsXS5leHBvcnRzO3ZhciBvPWVbbF09e2k6bCxsOiExLGV4cG9ydHM6e319O3JldHVybiBuW2xdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHQpLG8ubD0hMCxvLmV4cG9ydHN9cmV0dXJuIHQubT1uLHQuYz1lLHQuZD1mdW5jdGlvbihuLGUsbCl7dC5vKG4sZSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLGUse2VudW1lcmFibGU6ITAsZ2V0Omx9KX0sdC5yPWZ1bmN0aW9uKG4pe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LHQudD1mdW5jdGlvbihuLGUpe2lmKDEmZSYmKG49dChuKSksOCZlKXJldHVybiBuO2lmKDQmZSYmXCJvYmplY3RcIj09dHlwZW9mIG4mJm4mJm4uX19lc01vZHVsZSlyZXR1cm4gbjt2YXIgbD1PYmplY3QuY3JlYXRlKG51bGwpO2lmKHQucihsKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobCxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTpufSksMiZlJiZcInN0cmluZ1wiIT10eXBlb2Ygbilmb3IodmFyIG8gaW4gbil0LmQobCxvLGZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfS5iaW5kKG51bGwsbykpO3JldHVybiBsfSx0Lm49ZnVuY3Rpb24obil7dmFyIGU9biYmbi5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIG4uZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gbn07cmV0dXJuIHQuZChlLFwiYVwiLGUpLGV9LHQubz1mdW5jdGlvbihuLGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixlKX0sdC5wPVwiL1VzZXJzL2p1bi9Qcm9qZWN0SmF2YVNjcmlwdC9qc19idWZmZXJfdXRpbHMvZGlzdFwiLHQodC5zPTApfShbZnVuY3Rpb24obixlLHQpe24uZXhwb3J0cz10KDEpfSxmdW5jdGlvbihuLGUsdCl7XCJ1c2Ugc3RyaWN0XCI7dC5yKGUpO3ZhciBsPXt9O3QucihsKSx0LmQobCxcImVuY29kZUJhc2U2NFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGN9KSx0LmQobCxcImRlY29kZUJhc2U2NFwiLGZ1bmN0aW9uKCl7cmV0dXJuIHV9KSx0LmQobCxcImVuY29kZUJhc2U2NFVybFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGF9KSx0LmQobCxcImRlY29kZUJhc2U2NFVybFwiLGZ1bmN0aW9uKCl7cmV0dXJuIG19KSx0LmQobCxcImFycmF5QnVmZmVyVG9IZXhTdHJpbmdcIixmdW5jdGlvbigpe3JldHVybiBkfSksdC5kKGwsXCJoZXhTdHJpbmdUb0FycmF5QnVmZmVyXCIsZnVuY3Rpb24oKXtyZXR1cm4gZn0pLHQuZChsLFwiYXJyYXlCdWZmZXJUb1N0cmluZ1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHB9KSx0LmQobCxcInN0cmluZ1RvQXJyYXlCdWZmZXJcIixmdW5jdGlvbigpe3JldHVybiB5fSk7dmFyIG89e307dC5yKG8pLHQuZChvLFwicGVtVG9CaW5cIixmdW5jdGlvbigpe3JldHVybiBifSksdC5kKG8sXCJiaW5Ub1BlbVwiLGZ1bmN0aW9uKCl7cmV0dXJuIHZ9KTt2YXIgaT1mdW5jdGlvbihuKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgQnVmZmVyKXt2YXIgZT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobikuc2xpY2UoOCwtMSk7cmV0dXJuKEJ1ZmZlci5pc0J1ZmZlcihuKT9uOjA8PVtcIkFycmF5QnVmZmVyXCIsXCJUeXBlZEFycmF5XCIsXCJVaW50OEFycmF5XCIsXCJJbnQ4QXJyYXlcIixcIlVpbnQ4Q2xhbXBlZEFycmF5XCIsXCJJbnQxNkFycmF5XCIsXCJVaW50MTZBcnJheVwiLFwiSW50MzJBcnJheVwiLFwiVWludDMyQXJyYXlcIixcIkZsb2F0MzJBcnJheVwiLFwiRmxvYXQ2NEFycmF5XCJdLmluZGV4T2YoZSk/QnVmZmVyLmZyb20obik6QnVmZmVyLmZyb20obi50b1N0cmluZygpLFwiYmluYXJ5XCIpKS50b1N0cmluZyhcImJhc2U2NFwiKX10aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZEVudmlyb25tZW50XCIpfSxyPWZ1bmN0aW9uKG4pe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBCdWZmZXIpcmV0dXJuIEJ1ZmZlci5mcm9tKG4sXCJiYXNlNjRcIikudG9TdHJpbmcoXCJiaW5hcnlcIik7dGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWRFbnZpcm9ubWVudFwiKX07ZnVuY3Rpb24gYyhuKXt2YXIgZTtyZXR1cm4gZT1cInN0cmluZ1wiPT10eXBlb2Ygbj9uOnAobiksKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3c/aTp3aW5kb3cuYnRvYSkoZSl9ZnVuY3Rpb24gdShuKXtyZXR1cm4gZnVuY3Rpb24obil7aWYobiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpe2Zvcih2YXIgZT0hMCx0PTA7dDxuLmxlbmd0aDt0KyspaWYoMTI2PG5bdF18fDMyPm5bdF0mJjEzIT09blt0XSYmMTAhPT1uW3RdKXtlPSExO2JyZWFrfXZhciBsPW51bGw7aWYoZSl7bD1cIlwiO2Zvcih2YXIgbz0wO288bi5sZW5ndGg7bysrKWwrPVN0cmluZy5mcm9tQ2hhckNvZGUobltvXSl9ZWxzZSBsPW47cmV0dXJuIGx9dGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgZGF0YSBtdXN0IGJlIGFuIFVpbnQ4QXJyYXlcIil9KHkoKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3c/cjp3aW5kb3cuYXRvYikobikpKX1mdW5jdGlvbiBzKG4pe2lmKG4gaW5zdGFuY2VvZiBVaW50OEFycmF5KXJldHVybiBuO2lmKEFycmF5QnVmZmVyLmlzVmlldyhuKSYmdm9pZCAwIT09bi5idWZmZXIpcmV0dXJuIG5ldyBVaW50OEFycmF5KG4uYnVmZmVyKTtpZihuIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpcmV0dXJuIG5ldyBVaW50OEFycmF5KG4pO3Rocm93IG5ldyBFcnJvcihcIklucHV0IG11c3QgYmUgYW4gQXJyYXlCdWZmZXIgb3IgYSBUeXBlZEFycmF5XCIpfWZ1bmN0aW9uIGEobil7cmV0dXJuIGMobikucmVwbGFjZSgvXFwrL2csXCItXCIpLnJlcGxhY2UoL1xcLy9nLFwiX1wiKS5yZXBsYWNlKC89KyQvLFwiXCIpfWZ1bmN0aW9uIG0obil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIG4pdGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgbXVzdCBiZSBzdHJpbmdcIik7cmV0dXJuIHUobj1uLnJlcGxhY2UoLy0vZyxcIitcIikucmVwbGFjZSgvXy9nLFwiL1wiKSl9ZnVuY3Rpb24gZChuKXtmb3IodmFyIGUsdD1zKG4pLGw9XCJcIixvPTA7bzx0Lmxlbmd0aDtvKyspbCs9ZT0xPT09KGU9KDI1NSZ0W29dKS50b1N0cmluZygxNikpLmxlbmd0aD9cIjBcIi5jb25jYXQoZSk6ZTtyZXR1cm4gbH1mdW5jdGlvbiBmKG4pe2lmKCFufHxcInN0cmluZ1wiIT10eXBlb2Ygbil0aHJvdyBuZXcgRXJyb3IoXCJJbnB1dCBhcmcgbXVzdCBiZSBhIG5vbi1udWxsIHN0cmluZ1wiKTtmb3IodmFyIGU9W10sdD1uLmxlbmd0aCxsPTA7bDx0O2wrPTIpZS5wdXNoKHBhcnNlSW50KG4uc3Vic3RyKGwsMiksMTYpKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZSl9ZnVuY3Rpb24gcChuKXt2YXIgZT1zKG4pO3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsZSl9ZnVuY3Rpb24geShuKXtpZighbnx8XCJzdHJpbmdcIiE9dHlwZW9mIG4pdGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgYXJnIG11c3QgYmUgYSBub24tbnVsbCBzdHJpbmdcIik7Zm9yKHZhciBlPW5ldyBVaW50OEFycmF5KG4ubGVuZ3RoKSx0PTA7dDxuLmxlbmd0aDt0KyspZVt0XT1uLmNoYXJDb2RlQXQodCk7cmV0dXJuIGV9dmFyIGg9e3B1YmxpYzpcIlBVQkxJQyBLRVlcIixwcml2YXRlOlwiUFJJVkFURSBLRVlcIixlbmNyeXB0ZWRQcml2YXRlOlwiRU5DUllQVEVEIFBSSVZBVEUgS0VZXCIsY2VydGlmaWNhdGU6XCJDRVJUSUZJQ0FURVwiLGNlcnRSZXF1ZXN0OlwiQ0VSVElGSUNBVEUgUkVRVUVTVFwifTtmdW5jdGlvbiBiKG4pe3JldHVybiB1KGZ1bmN0aW9uKG4pe2lmKCFufHxcInN0cmluZ1wiIT10eXBlb2Ygbil0aHJvdyBuZXcgRXJyb3IoXCJJbnB1dCBhcmcgbXVzdCBiZSBhIG5vbi1udWxsIHN0cmluZ1wiKTt0cnl7dmFyIGU9bi5zcGxpdCgvXi0tLS0tW3NdKkJFR0lOW14tXSotLS0tLSQvZ20pWzFdLnNwbGl0KC9eLS0tLS1bc10qRU5EW14tXSotLS0tLSQvZ20pWzBdO3JldHVybiBlPWUucmVwbGFjZSgvXFxyP1xcbi9nLFwiXCIpfWNhdGNoKG4pe3Rocm93IG5ldyBFcnJvcihcIkludmFsaWQgZm9ybWF0IGFzIFBFTVwiKX19KG4pKX1mdW5jdGlvbiB2KG4sZSl7cmV0dXJuIGZ1bmN0aW9uKG4sZSl7aWYoIW58fFwic3RyaW5nXCIhPXR5cGVvZiBuKXRocm93IG5ldyBFcnJvcihcIklucHV0IGFyZyBtdXN0IGJlIGEgbm9uLW51bGwgc3RyaW5nXCIpO2lmKCFlfHxcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJJbnB1dCBhcmcgbXVzdCBiZSBhIG5vbi1udWxsIHN0cmluZ1wiKTtpZigwPk9iamVjdC5rZXlzKGgpLmluZGV4T2YoZSkpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgdHlwZVwiKTtmb3IodmFyIHQ9aFtlXSxsPVwiLS0tLS1CRUdJTiBcIi5jb25jYXQodCxcIi0tLS0tXFxuXCIpOzA8bi5sZW5ndGg7KWwrPVwiXCIuY29uY2F0KG4uc3Vic3RyaW5nKDAsNjQpLFwiXFxuXCIpLG49bi5zdWJzdHJpbmcoNjQpO3JldHVybiBsPVwiXCIuY29uY2F0KGwsXCItLS0tLUVORCBcIikuY29uY2F0KHQsXCItLS0tLVwiKX0oYyhuKSxlKX10LmQoZSxcImVuY29kZXJcIixmdW5jdGlvbigpe3JldHVybiBsfSksdC5kKGUsXCJmb3JtYXR0ZXJcIixmdW5jdGlvbigpe3JldHVybiBvfSksZS5kZWZhdWx0PXtlbmNvZGVyOmwsZm9ybWF0dGVyOm99fV0pfSxmdW5jdGlvbihuLGUsdCl7ZS5lbmNvZGU9dCgyMSkuZW5jb2RlLGUuZGVjb2RlPXQoMjYpLmRlY29kZSxlLkVuY29kZXI9dCg1NCkuRW5jb2RlcixlLkRlY29kZXI9dCg1NSkuRGVjb2RlcixlLmNyZWF0ZUNvZGVjPXQoNTYpLmNyZWF0ZUNvZGVjLGUuY29kZWM9dCg1NykuY29kZWN9LGZ1bmN0aW9uKG4sZSx0KXt2YXIgbD10KDE3KTtlLmluc3RhbGw9ZnVuY3Rpb24obil7Zm9yKHZhciBlIGluIG4paS5wcm90b3R5cGVbZV09cihpLnByb3RvdHlwZVtlXSxuW2VdKX0sZS5maWx0ZXI9ZnVuY3Rpb24obil7cmV0dXJuIGwobik/ZnVuY3Rpb24obil7cmV0dXJuIG49bi5zbGljZSgpLGZ1bmN0aW9uKHQpe3JldHVybiBuLnJlZHVjZShlLHQpfTtmdW5jdGlvbiBlKG4sZSl7cmV0dXJuIGUobil9fShuKTpufTt2YXIgbz10KDEwKTtmdW5jdGlvbiBpKG4pe2lmKCEodGhpcyBpbnN0YW5jZW9mIGkpKXJldHVybiBuZXcgaShuKTt0aGlzLm9wdGlvbnM9bix0aGlzLmluaXQoKX1mdW5jdGlvbiByKG4sZSl7cmV0dXJuIG4mJmU/ZnVuY3Rpb24oKXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyksZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9Om58fGV9ZnVuY3Rpb24gYyhuKXtyZXR1cm4gbmV3IGkobil9aS5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbigpe3ZhciBuPXRoaXMub3B0aW9ucztyZXR1cm4gbiYmbi51aW50OGFycmF5JiYodGhpcy5idWZmZXJpc2g9by5VaW50OEFycmF5KSx0aGlzfSxlLnByZXNldD1jKHtwcmVzZXQ6ITB9KX0sZnVuY3Rpb24obixlKXtmdW5jdGlvbiB0KGUsbCl7cmV0dXJuIG4uZXhwb3J0cz10PU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24obixlKXtyZXR1cm4gbi5fX3Byb3RvX189ZSxufSx0KGUsbCl9bi5leHBvcnRzPXR9LGZ1bmN0aW9uKG4sZSx0KXt2YXIgbD10KDE2KS5FeHRCdWZmZXIsbz10KDQ5KSxpPXQoNTApLHI9dCgxMyk7ZnVuY3Rpb24gYygpe3ZhciBuPXRoaXMub3B0aW9ucztyZXR1cm4gdGhpcy5lbmNvZGU9ZnVuY3Rpb24obil7dmFyIGU9aS5nZXRXcml0ZVR5cGUobik7cmV0dXJuIGZ1bmN0aW9uKG4sdCl7dmFyIGw9ZVt0eXBlb2YgdF07aWYoIWwpdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB0eXBlIFwiJyt0eXBlb2YgdCsnXCI6ICcrdCk7bChuLHQpfX0obiksbiYmbi5wcmVzZXQmJm8uc2V0RXh0UGFja2Vycyh0aGlzKSx0aGlzfXIuaW5zdGFsbCh7YWRkRXh0UGFja2VyOmZ1bmN0aW9uKG4sZSx0KXt0PXIuZmlsdGVyKHQpO3ZhciBvPWUubmFtZTtpZihvJiZcIk9iamVjdFwiIT09byl7dmFyIGk9dGhpcy5leHRQYWNrZXJzfHwodGhpcy5leHRQYWNrZXJzPXt9KTtpW29dPXV9ZWxzZXt2YXIgYz10aGlzLmV4dEVuY29kZXJMaXN0fHwodGhpcy5leHRFbmNvZGVyTGlzdD1bXSk7Yy51bnNoaWZ0KFtlLHVdKX1mdW5jdGlvbiB1KGUpe3JldHVybiB0JiYoZT10KGUpKSxuZXcgbChlLG4pfX0sZ2V0RXh0UGFja2VyOmZ1bmN0aW9uKG4pe3ZhciBlPXRoaXMuZXh0UGFja2Vyc3x8KHRoaXMuZXh0UGFja2Vycz17fSksdD1uLmNvbnN0cnVjdG9yLGw9dCYmdC5uYW1lJiZlW3QubmFtZV07aWYobClyZXR1cm4gbDtmb3IodmFyIG89dGhpcy5leHRFbmNvZGVyTGlzdHx8KHRoaXMuZXh0RW5jb2Rlckxpc3Q9W10pLGk9by5sZW5ndGgscj0wO3I8aTtyKyspe3ZhciBjPW9bcl07aWYodD09PWNbMF0pcmV0dXJuIGNbMV19fSxpbml0OmN9KSxlLnByZXNldD1jLmNhbGwoci5wcmVzZXQpfSxmdW5jdGlvbihuLGUsdCl7ZS5FeHRCdWZmZXI9ZnVuY3Rpb24gbihlLHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG4pKXJldHVybiBuZXcgbihlLHQpO3RoaXMuYnVmZmVyPWwuZnJvbShlKTt0aGlzLnR5cGU9dH07dmFyIGw9dCgxMCl9LGZ1bmN0aW9uKG4sZSl7dmFyIHQ9e30udG9TdHJpbmc7bi5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKG4pe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09dC5jYWxsKG4pfX0sZnVuY3Rpb24obixlLHQpe3ZhciBsPXQoNDgpO2UuY29weT11LGUuc2xpY2U9cyxlLnRvU3RyaW5nPWZ1bmN0aW9uKG4sZSx0KXtyZXR1cm4oIXImJm8uaXNCdWZmZXIodGhpcyk/dGhpcy50b1N0cmluZzpsLnRvU3RyaW5nKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUud3JpdGU9ZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuKHRoaXNbbl18fGxbbl0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KFwid3JpdGVcIik7dmFyIG89dCgxMCksaT1vLmdsb2JhbCxyPW8uaGFzQnVmZmVyJiZcIlRZUEVEX0FSUkFZX1NVUFBPUlRcImluIGksYz1yJiYhaS5UWVBFRF9BUlJBWV9TVVBQT1JUO2Z1bmN0aW9uIHUobixlLHQsaSl7dmFyIHI9by5pc0J1ZmZlcih0aGlzKSx1PW8uaXNCdWZmZXIobik7aWYociYmdSlyZXR1cm4gdGhpcy5jb3B5KG4sZSx0LGkpO2lmKGN8fHJ8fHV8fCFvLmlzVmlldyh0aGlzKXx8IW8uaXNWaWV3KG4pKXJldHVybiBsLmNvcHkuY2FsbCh0aGlzLG4sZSx0LGkpO3ZhciBhPXR8fG51bGwhPWk/cy5jYWxsKHRoaXMsdCxpKTp0aGlzO3JldHVybiBuLnNldChhLGUpLGEubGVuZ3RofWZ1bmN0aW9uIHMobixlKXt2YXIgdD10aGlzLnNsaWNlfHwhYyYmdGhpcy5zdWJhcnJheTtpZih0KXJldHVybiB0LmNhbGwodGhpcyxuLGUpO3ZhciBsPW8uYWxsb2MuY2FsbCh0aGlzLGUtbik7cmV0dXJuIHUuY2FsbCh0aGlzLGwsMCxuLGUpLGx9fSxmdW5jdGlvbihuLGUsdCl7IWZ1bmN0aW9uKG4pe3ZhciBlLHQ9XCJ1bmRlZmluZWRcIixsPXQhPT10eXBlb2YgQnVmZmVyJiZCdWZmZXIsbz10IT09dHlwZW9mIFVpbnQ4QXJyYXkmJlVpbnQ4QXJyYXksaT10IT09dHlwZW9mIEFycmF5QnVmZmVyJiZBcnJheUJ1ZmZlcixyPVswLDAsMCwwLDAsMCwwLDBdLGM9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24obil7cmV0dXJuISFuJiZcIltvYmplY3QgQXJyYXldXCI9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuKX0sdT00Mjk0OTY3Mjk2LHM9MTY3NzcyMTY7ZnVuY3Rpb24gYShjLGEseCl7dmFyIGs9YT8wOjQsXz1hPzQ6MCxFPWE/MDozLGo9YT8xOjIsQT1hPzI6MSxLPWE/MzowLFM9YT9iOmcsVT1hP3Y6dyxQPUIucHJvdG90eXBlLEk9XCJpc1wiK2MsTz1cIl9cIitJO3JldHVybiBQLmJ1ZmZlcj12b2lkIDAsUC5vZmZzZXQ9MCxQW09dPSEwLFAudG9OdW1iZXI9TSxQLnRvU3RyaW5nPWZ1bmN0aW9uKG4pe3ZhciBlPXRoaXMuYnVmZmVyLHQ9dGhpcy5vZmZzZXQsbD1OKGUsdCtrKSxvPU4oZSx0K18pLGk9XCJcIixyPSF4JiYyMTQ3NDgzNjQ4Jmw7ciYmKGw9fmwsbz11LW8pO249bnx8MTA7Zm9yKDs7KXt2YXIgYz1sJW4qdStvO2lmKGw9TWF0aC5mbG9vcihsL24pLG89TWF0aC5mbG9vcihjL24pLGk9KGMlbikudG9TdHJpbmcobikraSwhbCYmIW8pYnJlYWt9ciYmKGk9XCItXCIraSk7cmV0dXJuIGl9LFAudG9KU09OPU0sUC50b0FycmF5PW0sbCYmKFAudG9CdWZmZXI9ZCksbyYmKFAudG9BcnJheUJ1ZmZlcj1mKSxCW0ldPWZ1bmN0aW9uKG4pe3JldHVybiEoIW58fCFuW09dKX0sbltjXT1CLEI7ZnVuY3Rpb24gQihuLGwsYyxzKXtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIEI/ZnVuY3Rpb24obixsLGMscyxhKXtvJiZpJiYobCBpbnN0YW5jZW9mIGkmJihsPW5ldyBvKGwpKSxzIGluc3RhbmNlb2YgaSYmKHM9bmV3IG8ocykpKTtpZighKGx8fGN8fHN8fGUpKXJldHVybiB2b2lkKG4uYnVmZmVyPWgociwwKSk7aWYoIXAobCxjKSl7dmFyIG09ZXx8QXJyYXk7YT1jLHM9bCxjPTAsbD1uZXcgbSg4KX1pZihuLmJ1ZmZlcj1sLG4ub2Zmc2V0PWN8PTAsdD09PXR5cGVvZiBzKXJldHVybjtcInN0cmluZ1wiPT10eXBlb2Ygcz9mdW5jdGlvbihuLGUsdCxsKXt2YXIgbz0wLGk9dC5sZW5ndGgscj0wLGM9MDtcIi1cIj09PXRbMF0mJm8rKzt2YXIgcz1vO2Zvcig7bzxpOyl7dmFyIGE9cGFyc2VJbnQodFtvKytdLGwpO2lmKCEoYT49MCkpYnJlYWs7Yz1jKmwrYSxyPXIqbCtNYXRoLmZsb29yKGMvdSksYyU9dX1zJiYocj1+cixjP2M9dS1jOnIrKyk7VChuLGUrayxyKSxUKG4sZStfLGMpfShsLGMscyxhfHwxMCk6cChzLGEpP3kobCxjLHMsYSk6XCJudW1iZXJcIj09dHlwZW9mIGE/KFQobCxjK2sscyksVChsLGMrXyxhKSk6cz4wP1MobCxjLHMpOnM8MD9VKGwsYyxzKTp5KGwsYyxyLDApfSh0aGlzLG4sbCxjLHMpOm5ldyBCKG4sbCxjLHMpfWZ1bmN0aW9uIE0oKXt2YXIgbj10aGlzLmJ1ZmZlcixlPXRoaXMub2Zmc2V0LHQ9TihuLGUrayksbD1OKG4sZStfKTtyZXR1cm4geHx8KHR8PTApLHQ/dCp1K2w6bH1mdW5jdGlvbiBUKG4sZSx0KXtuW2UrS109MjU1JnQsdD4+PTgsbltlK0FdPTI1NSZ0LHQ+Pj04LG5bZStqXT0yNTUmdCx0Pj49OCxuW2UrRV09MjU1JnR9ZnVuY3Rpb24gTihuLGUpe3JldHVybiBuW2UrRV0qcysobltlK2pdPDwxNikrKG5bZStBXTw8OCkrbltlK0tdfX1mdW5jdGlvbiBtKG4pe3ZhciB0PXRoaXMuYnVmZmVyLGw9dGhpcy5vZmZzZXQ7cmV0dXJuIGU9bnVsbCwhMSE9PW4mJjA9PT1sJiY4PT09dC5sZW5ndGgmJmModCk/dDpoKHQsbCl9ZnVuY3Rpb24gZChuKXt2YXIgdD10aGlzLmJ1ZmZlcixvPXRoaXMub2Zmc2V0O2lmKGU9bCwhMSE9PW4mJjA9PT1vJiY4PT09dC5sZW5ndGgmJkJ1ZmZlci5pc0J1ZmZlcih0KSlyZXR1cm4gdDt2YXIgaT1uZXcgbCg4KTtyZXR1cm4geShpLDAsdCxvKSxpfWZ1bmN0aW9uIGYobil7dmFyIHQ9dGhpcy5idWZmZXIsbD10aGlzLm9mZnNldCxyPXQuYnVmZmVyO2lmKGU9bywhMSE9PW4mJjA9PT1sJiZyIGluc3RhbmNlb2YgaSYmOD09PXIuYnl0ZUxlbmd0aClyZXR1cm4gcjt2YXIgYz1uZXcgbyg4KTtyZXR1cm4geShjLDAsdCxsKSxjLmJ1ZmZlcn1mdW5jdGlvbiBwKG4sZSl7dmFyIHQ9biYmbi5sZW5ndGg7cmV0dXJuIGV8PTAsdCYmZSs4PD10JiZcInN0cmluZ1wiIT10eXBlb2YgbltlXX1mdW5jdGlvbiB5KG4sZSx0LGwpe2V8PTAsbHw9MDtmb3IodmFyIG89MDtvPDg7bysrKW5bZSsrXT0yNTUmdFtsKytdfWZ1bmN0aW9uIGgobixlKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobixlLGUrOCl9ZnVuY3Rpb24gYihuLGUsdCl7Zm9yKHZhciBsPWUrODtsPmU7KW5bLS1sXT0yNTUmdCx0Lz0yNTZ9ZnVuY3Rpb24gdihuLGUsdCl7dmFyIGw9ZSs4O2Zvcih0Kys7bD5lOyluWy0tbF09MjU1Ji10XjI1NSx0Lz0yNTZ9ZnVuY3Rpb24gZyhuLGUsdCl7Zm9yKHZhciBsPWUrODtlPGw7KW5bZSsrXT0yNTUmdCx0Lz0yNTZ9ZnVuY3Rpb24gdyhuLGUsdCl7dmFyIGw9ZSs4O2Zvcih0Kys7ZTxsOyluW2UrK109MjU1Ji10XjI1NSx0Lz0yNTZ9YShcIlVpbnQ2NEJFXCIsITAsITApLGEoXCJJbnQ2NEJFXCIsITAsITEpLGEoXCJVaW50NjRMRVwiLCExLCEwKSxhKFwiSW50NjRMRVwiLCExLCExKX0oXCJzdHJpbmdcIiE9dHlwZW9mIGUubm9kZU5hbWU/ZTp0aGlzfHx7fSl9LGZ1bmN0aW9uKG4sZSx0KXt2YXIgbD10KDE2KS5FeHRCdWZmZXIsbz10KDUyKSxpPXQoMjgpLnJlYWRVaW50OCxyPXQoNTMpLGM9dCgxMyk7ZnVuY3Rpb24gdSgpe3ZhciBuPXRoaXMub3B0aW9ucztyZXR1cm4gdGhpcy5kZWNvZGU9ZnVuY3Rpb24obil7dmFyIGU9ci5nZXRSZWFkVG9rZW4obik7cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciB0PWkobiksbD1lW3RdO2lmKCFsKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdHlwZTogXCIrKHQ/XCIweFwiK3QudG9TdHJpbmcoMTYpOnQpKTtyZXR1cm4gbChuKX19KG4pLG4mJm4ucHJlc2V0JiZvLnNldEV4dFVucGFja2Vycyh0aGlzKSx0aGlzfWMuaW5zdGFsbCh7YWRkRXh0VW5wYWNrZXI6ZnVuY3Rpb24obixlKXsodGhpcy5leHRVbnBhY2tlcnN8fCh0aGlzLmV4dFVucGFja2Vycz1bXSkpW25dPWMuZmlsdGVyKGUpfSxnZXRFeHRVbnBhY2tlcjpmdW5jdGlvbihuKXtyZXR1cm4odGhpcy5leHRVbnBhY2tlcnN8fCh0aGlzLmV4dFVucGFja2Vycz1bXSkpW25dfHxmdW5jdGlvbihlKXtyZXR1cm4gbmV3IGwoZSxuKX19LGluaXQ6dX0pLGUucHJlc2V0PXUuY2FsbChjLnByZXNldCl9LGZ1bmN0aW9uKG4sZSx0KXtlLmVuY29kZT1mdW5jdGlvbihuLGUpe3ZhciB0PW5ldyBsKGUpO3JldHVybiB0LndyaXRlKG4pLHQucmVhZCgpfTt2YXIgbD10KDIyKS5FbmNvZGVCdWZmZXJ9LGZ1bmN0aW9uKG4sZSx0KXtlLkVuY29kZUJ1ZmZlcj1vO3ZhciBsPXQoMTUpLnByZXNldDtmdW5jdGlvbiBvKG4pe2lmKCEodGhpcyBpbnN0YW5jZW9mIG8pKXJldHVybiBuZXcgbyhuKTtpZihuJiYodGhpcy5vcHRpb25zPW4sbi5jb2RlYykpe3ZhciBlPXRoaXMuY29kZWM9bi5jb2RlYztlLmJ1ZmZlcmlzaCYmKHRoaXMuYnVmZmVyaXNoPWUuYnVmZmVyaXNoKX19dCgyNSkuRmxleEVuY29kZXIubWl4aW4oby5wcm90b3R5cGUpLG8ucHJvdG90eXBlLmNvZGVjPWwsby5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24obil7dGhpcy5jb2RlYy5lbmNvZGUodGhpcyxuKX19LGZ1bmN0aW9uKG4sZSl7ZS5yZWFkPWZ1bmN0aW9uKG4sZSx0LGwsbyl7dmFyIGkscixjPTgqby1sLTEsdT0oMTw8YyktMSxzPXU+PjEsYT0tNyxtPXQ/by0xOjAsZD10Py0xOjEsZj1uW2UrbV07Zm9yKG0rPWQsaT1mJigxPDwtYSktMSxmPj49LWEsYSs9YzthPjA7aT0yNTYqaStuW2UrbV0sbSs9ZCxhLT04KTtmb3Iocj1pJigxPDwtYSktMSxpPj49LWEsYSs9bDthPjA7cj0yNTYqcituW2UrbV0sbSs9ZCxhLT04KTtpZigwPT09aSlpPTEtcztlbHNle2lmKGk9PT11KXJldHVybiByP05hTjoxLzAqKGY/LTE6MSk7cis9TWF0aC5wb3coMixsKSxpLT1zfXJldHVybihmPy0xOjEpKnIqTWF0aC5wb3coMixpLWwpfSxlLndyaXRlPWZ1bmN0aW9uKG4sZSx0LGwsbyxpKXt2YXIgcixjLHUscz04Kmktby0xLGE9KDE8PHMpLTEsbT1hPj4xLGQ9MjM9PT1vP01hdGgucG93KDIsLTI0KS1NYXRoLnBvdygyLC03Nyk6MCxmPWw/MDppLTEscD1sPzE6LTEseT1lPDB8fDA9PT1lJiYxL2U8MD8xOjA7Zm9yKGU9TWF0aC5hYnMoZSksaXNOYU4oZSl8fGU9PT0xLzA/KGM9aXNOYU4oZSk/MTowLHI9YSk6KHI9TWF0aC5mbG9vcihNYXRoLmxvZyhlKS9NYXRoLkxOMiksZSoodT1NYXRoLnBvdygyLC1yKSk8MSYmKHItLSx1Kj0yKSwoZSs9cittPj0xP2QvdTpkKk1hdGgucG93KDIsMS1tKSkqdT49MiYmKHIrKyx1Lz0yKSxyK20+PWE/KGM9MCxyPWEpOnIrbT49MT8oYz0oZSp1LTEpKk1hdGgucG93KDIsbykscis9bSk6KGM9ZSpNYXRoLnBvdygyLG0tMSkqTWF0aC5wb3coMixvKSxyPTApKTtvPj04O25bdCtmXT0yNTUmYyxmKz1wLGMvPTI1NixvLT04KTtmb3Iocj1yPDxvfGMscys9bztzPjA7blt0K2ZdPTI1NSZyLGYrPXAsci89MjU2LHMtPTgpO25bdCtmLXBdfD0xMjgqeX19LGZ1bmN0aW9uKG4sZSl7Zm9yKHZhciB0PWUudWludDg9bmV3IEFycmF5KDI1NiksbD0wO2w8PTI1NTtsKyspdFtsXT1vKGwpO2Z1bmN0aW9uIG8obil7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PWUucmVzZXJ2ZSgxKTtlLmJ1ZmZlclt0XT1ufX19LGZ1bmN0aW9uKG4sZSx0KXtlLkZsZXhEZWNvZGVyPWMsZS5GbGV4RW5jb2Rlcj11O3ZhciBsPXQoMTApLG89MjA0OCxpPTY1NTM2LHI9XCJCVUZGRVJfU0hPUlRBR0VcIjtmdW5jdGlvbiBjKCl7aWYoISh0aGlzIGluc3RhbmNlb2YgYykpcmV0dXJuIG5ldyBjfWZ1bmN0aW9uIHUoKXtpZighKHRoaXMgaW5zdGFuY2VvZiB1KSlyZXR1cm4gbmV3IHV9ZnVuY3Rpb24gcygpe3Rocm93IG5ldyBFcnJvcihcIm1ldGhvZCBub3QgaW1wbGVtZW50ZWQ6IHdyaXRlKClcIil9ZnVuY3Rpb24gYSgpe3Rocm93IG5ldyBFcnJvcihcIm1ldGhvZCBub3QgaW1wbGVtZW50ZWQ6IGZldGNoKClcIil9ZnVuY3Rpb24gbSgpe3JldHVybiB0aGlzLmJ1ZmZlcnMmJnRoaXMuYnVmZmVycy5sZW5ndGg/KHRoaXMuZmx1c2goKSx0aGlzLnB1bGwoKSk6dGhpcy5mZXRjaCgpfWZ1bmN0aW9uIGQobil7KHRoaXMuYnVmZmVyc3x8KHRoaXMuYnVmZmVycz1bXSkpLnB1c2gobil9ZnVuY3Rpb24gZigpe3JldHVybih0aGlzLmJ1ZmZlcnN8fCh0aGlzLmJ1ZmZlcnM9W10pKS5zaGlmdCgpfWZ1bmN0aW9uIHAobil7cmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCBpbiBuKWVbdF09blt0XTtyZXR1cm4gZX19Yy5taXhpbj1wKGZ1bmN0aW9uKCl7cmV0dXJue2J1ZmZlcmlzaDpsLHdyaXRlOmZ1bmN0aW9uKG4pe3ZhciBlPXRoaXMub2Zmc2V0P2wucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5idWZmZXIsdGhpcy5vZmZzZXQpOnRoaXMuYnVmZmVyO3RoaXMuYnVmZmVyPWU/bj90aGlzLmJ1ZmZlcmlzaC5jb25jYXQoW2Usbl0pOmU6bix0aGlzLm9mZnNldD0wfSxmZXRjaDphLGZsdXNoOmZ1bmN0aW9uKCl7Zm9yKDt0aGlzLm9mZnNldDx0aGlzLmJ1ZmZlci5sZW5ndGg7KXt2YXIgbixlPXRoaXMub2Zmc2V0O3RyeXtuPXRoaXMuZmV0Y2goKX1jYXRjaChuKXtpZihuJiZuLm1lc3NhZ2UhPXIpdGhyb3cgbjt0aGlzLm9mZnNldD1lO2JyZWFrfXRoaXMucHVzaChuKX19LHB1c2g6ZCxwdWxsOmYscmVhZDptLHJlc2VydmU6ZnVuY3Rpb24obil7dmFyIGU9dGhpcy5vZmZzZXQsdD1lK247aWYodD50aGlzLmJ1ZmZlci5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKHIpO3JldHVybiB0aGlzLm9mZnNldD10LGV9LG9mZnNldDowfX0oKSksYy5taXhpbihjLnByb3RvdHlwZSksdS5taXhpbj1wKGZ1bmN0aW9uKCl7cmV0dXJue2J1ZmZlcmlzaDpsLHdyaXRlOnMsZmV0Y2g6ZnVuY3Rpb24oKXt2YXIgbj10aGlzLnN0YXJ0O2lmKG48dGhpcy5vZmZzZXQpe3ZhciBlPXRoaXMuc3RhcnQ9dGhpcy5vZmZzZXQ7cmV0dXJuIGwucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5idWZmZXIsbixlKX19LGZsdXNoOmZ1bmN0aW9uKCl7Zm9yKDt0aGlzLnN0YXJ0PHRoaXMub2Zmc2V0Oyl7dmFyIG49dGhpcy5mZXRjaCgpO24mJnRoaXMucHVzaChuKX19LHB1c2g6ZCxwdWxsOmZ1bmN0aW9uKCl7dmFyIG49dGhpcy5idWZmZXJzfHwodGhpcy5idWZmZXJzPVtdKSxlPW4ubGVuZ3RoPjE/dGhpcy5idWZmZXJpc2guY29uY2F0KG4pOm5bMF07cmV0dXJuIG4ubGVuZ3RoPTAsZX0scmVhZDptLHJlc2VydmU6ZnVuY3Rpb24obil7dmFyIGU9MHxuO2lmKHRoaXMuYnVmZmVyKXt2YXIgdD10aGlzLmJ1ZmZlci5sZW5ndGgsbD0wfHRoaXMub2Zmc2V0LG89bCtlO2lmKG88dClyZXR1cm4gdGhpcy5vZmZzZXQ9byxsO3RoaXMuZmx1c2goKSxuPU1hdGgubWF4KG4sTWF0aC5taW4oMip0LHRoaXMubWF4QnVmZmVyU2l6ZSkpfXJldHVybiBuPU1hdGgubWF4KG4sdGhpcy5taW5CdWZmZXJTaXplKSx0aGlzLmJ1ZmZlcj10aGlzLmJ1ZmZlcmlzaC5hbGxvYyhuKSx0aGlzLnN0YXJ0PTAsdGhpcy5vZmZzZXQ9ZSwwfSxzZW5kOmZ1bmN0aW9uKG4pe3ZhciBlPW4ubGVuZ3RoO2lmKGU+dGhpcy5taW5CdWZmZXJTaXplKXRoaXMuZmx1c2goKSx0aGlzLnB1c2gobik7ZWxzZXt2YXIgdD10aGlzLnJlc2VydmUoZSk7bC5wcm90b3R5cGUuY29weS5jYWxsKG4sdGhpcy5idWZmZXIsdCl9fSxtYXhCdWZmZXJTaXplOmksbWluQnVmZmVyU2l6ZTpvLG9mZnNldDowLHN0YXJ0OjB9fSgpKSx1Lm1peGluKHUucHJvdG90eXBlKX0sZnVuY3Rpb24obixlLHQpe2UuZGVjb2RlPWZ1bmN0aW9uKG4sZSl7dmFyIHQ9bmV3IGwoZSk7cmV0dXJuIHQud3JpdGUobiksdC5yZWFkKCl9O3ZhciBsPXQoMjcpLkRlY29kZUJ1ZmZlcn0sZnVuY3Rpb24obixlLHQpe2UuRGVjb2RlQnVmZmVyPW87dmFyIGw9dCgyMCkucHJlc2V0O2Z1bmN0aW9uIG8obil7aWYoISh0aGlzIGluc3RhbmNlb2YgbykpcmV0dXJuIG5ldyBvKG4pO2lmKG4mJih0aGlzLm9wdGlvbnM9bixuLmNvZGVjKSl7dmFyIGU9dGhpcy5jb2RlYz1uLmNvZGVjO2UuYnVmZmVyaXNoJiYodGhpcy5idWZmZXJpc2g9ZS5idWZmZXJpc2gpfX10KDI1KS5GbGV4RGVjb2Rlci5taXhpbihvLnByb3RvdHlwZSksby5wcm90b3R5cGUuY29kZWM9bCxvLnByb3RvdHlwZS5mZXRjaD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvZGVjLmRlY29kZSh0aGlzKX19LGZ1bmN0aW9uKG4sZSx0KXt2YXIgbD10KDIzKSxvPXQoMTkpLGk9by5VaW50NjRCRSxyPW8uSW50NjRCRTtlLmdldFJlYWRGb3JtYXQ9ZnVuY3Rpb24obil7dmFyIGU9Yy5oYXNBcnJheUJ1ZmZlciYmbiYmbi5iaW5hcnJheWJ1ZmZlcix0PW4mJm4uaW50NjQ7cmV0dXJue21hcDpzJiZuJiZuLnVzZW1hcD9kOm0sYXJyYXk6ZixzdHI6cCxiaW46ZT9oOnksZXh0OmIsdWludDg6dix1aW50MTY6dyx1aW50MzI6ayx1aW50NjQ6RSg4LHQ/SzpqKSxpbnQ4OmcsaW50MTY6eCxpbnQzMjpfLGludDY0OkUoOCx0P1M6QSksZmxvYXQzMjpFKDQsVSksZmxvYXQ2NDpFKDgsUCl9fSxlLnJlYWRVaW50OD12O3ZhciBjPXQoMTApLHU9dCgxOCkscz1cInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwLGE9ITA7ZnVuY3Rpb24gbShuLGUpe3ZhciB0LGw9e30sbz1uZXcgQXJyYXkoZSksaT1uZXcgQXJyYXkoZSkscj1uLmNvZGVjLmRlY29kZTtmb3IodD0wO3Q8ZTt0Kyspb1t0XT1yKG4pLGlbdF09cihuKTtmb3IodD0wO3Q8ZTt0KyspbFtvW3RdXT1pW3RdO3JldHVybiBsfWZ1bmN0aW9uIGQobixlKXt2YXIgdCxsPW5ldyBNYXAsbz1uZXcgQXJyYXkoZSksaT1uZXcgQXJyYXkoZSkscj1uLmNvZGVjLmRlY29kZTtmb3IodD0wO3Q8ZTt0Kyspb1t0XT1yKG4pLGlbdF09cihuKTtmb3IodD0wO3Q8ZTt0KyspbC5zZXQob1t0XSxpW3RdKTtyZXR1cm4gbH1mdW5jdGlvbiBmKG4sZSl7Zm9yKHZhciB0PW5ldyBBcnJheShlKSxsPW4uY29kZWMuZGVjb2RlLG89MDtvPGU7bysrKXRbb109bChuKTtyZXR1cm4gdH1mdW5jdGlvbiBwKG4sZSl7dmFyIHQ9bi5yZXNlcnZlKGUpLGw9dCtlO3JldHVybiB1LnRvU3RyaW5nLmNhbGwobi5idWZmZXIsXCJ1dGYtOFwiLHQsbCl9ZnVuY3Rpb24geShuLGUpe3ZhciB0PW4ucmVzZXJ2ZShlKSxsPXQrZSxvPXUuc2xpY2UuY2FsbChuLmJ1ZmZlcix0LGwpO3JldHVybiBjLmZyb20obyl9ZnVuY3Rpb24gaChuLGUpe3ZhciB0PW4ucmVzZXJ2ZShlKSxsPXQrZSxvPXUuc2xpY2UuY2FsbChuLmJ1ZmZlcix0LGwpO3JldHVybiBjLlVpbnQ4QXJyYXkuZnJvbShvKS5idWZmZXJ9ZnVuY3Rpb24gYihuLGUpe3ZhciB0PW4ucmVzZXJ2ZShlKzEpLGw9bi5idWZmZXJbdCsrXSxvPXQrZSxpPW4uY29kZWMuZ2V0RXh0VW5wYWNrZXIobCk7aWYoIWkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBleHQgdHlwZTogXCIrKGw/XCIweFwiK2wudG9TdHJpbmcoMTYpOmwpKTtyZXR1cm4gaSh1LnNsaWNlLmNhbGwobi5idWZmZXIsdCxvKSl9ZnVuY3Rpb24gdihuKXt2YXIgZT1uLnJlc2VydmUoMSk7cmV0dXJuIG4uYnVmZmVyW2VdfWZ1bmN0aW9uIGcobil7dmFyIGU9bi5yZXNlcnZlKDEpLHQ9bi5idWZmZXJbZV07cmV0dXJuIDEyOCZ0P3QtMjU2OnR9ZnVuY3Rpb24gdyhuKXt2YXIgZT1uLnJlc2VydmUoMiksdD1uLmJ1ZmZlcjtyZXR1cm4gdFtlKytdPDw4fHRbZV19ZnVuY3Rpb24geChuKXt2YXIgZT1uLnJlc2VydmUoMiksdD1uLmJ1ZmZlcixsPXRbZSsrXTw8OHx0W2VdO3JldHVybiAzMjc2OCZsP2wtNjU1MzY6bH1mdW5jdGlvbiBrKG4pe3ZhciBlPW4ucmVzZXJ2ZSg0KSx0PW4uYnVmZmVyO3JldHVybiAxNjc3NzIxNip0W2UrK10rKHRbZSsrXTw8MTYpKyh0W2UrK108PDgpK3RbZV19ZnVuY3Rpb24gXyhuKXt2YXIgZT1uLnJlc2VydmUoNCksdD1uLmJ1ZmZlcjtyZXR1cm4gdFtlKytdPDwyNHx0W2UrK108PDE2fHRbZSsrXTw8OHx0W2VdfWZ1bmN0aW9uIEUobixlKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGw9dC5yZXNlcnZlKG4pO3JldHVybiBlLmNhbGwodC5idWZmZXIsbCxhKX19ZnVuY3Rpb24gaihuKXtyZXR1cm4gbmV3IGkodGhpcyxuKS50b051bWJlcigpfWZ1bmN0aW9uIEEobil7cmV0dXJuIG5ldyByKHRoaXMsbikudG9OdW1iZXIoKX1mdW5jdGlvbiBLKG4pe3JldHVybiBuZXcgaSh0aGlzLG4pfWZ1bmN0aW9uIFMobil7cmV0dXJuIG5ldyByKHRoaXMsbil9ZnVuY3Rpb24gVShuKXtyZXR1cm4gbC5yZWFkKHRoaXMsbiwhMSwyMyw0KX1mdW5jdGlvbiBQKG4pe3JldHVybiBsLnJlYWQodGhpcyxuLCExLDUyLDgpfX0sZnVuY3Rpb24obixlLHQpeyFmdW5jdGlvbihlKXtuLmV4cG9ydHM9ZTt2YXIgdD1cImxpc3RlbmVyc1wiLGw9e29uOmZ1bmN0aW9uKG4sZSl7cmV0dXJuIHIodGhpcyxuKS5wdXNoKGUpLHRoaXN9LG9uY2U6ZnVuY3Rpb24obixlKXt2YXIgdD10aGlzO3JldHVybiBsLm9yaWdpbmFsTGlzdGVuZXI9ZSxyKHQsbikucHVzaChsKSx0O2Z1bmN0aW9uIGwoKXtpLmNhbGwodCxuLGwpLGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0sb2ZmOmksZW1pdDpmdW5jdGlvbihuLGUpe3ZhciB0PXRoaXMsbD1yKHQsbiwhMCk7aWYoIWwpcmV0dXJuITE7dmFyIG89YXJndW1lbnRzLmxlbmd0aDtpZigxPT09bylsLmZvckVhY2goZnVuY3Rpb24obil7bi5jYWxsKHQpfSk7ZWxzZSBpZigyPT09bylsLmZvckVhY2goZnVuY3Rpb24obil7bi5jYWxsKHQsZSl9KTtlbHNle3ZhciBpPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtsLmZvckVhY2goZnVuY3Rpb24obil7bi5hcHBseSh0LGkpfSl9cmV0dXJuISFsLmxlbmd0aH19O2Z1bmN0aW9uIG8obil7Zm9yKHZhciBlIGluIGwpbltlXT1sW2VdO3JldHVybiBufWZ1bmN0aW9uIGkobixlKXt2YXIgbDtpZihhcmd1bWVudHMubGVuZ3RoKXtpZihlKXtpZihsPXIodGhpcyxuLCEwKSl7aWYoIShsPWwuZmlsdGVyKGZ1bmN0aW9uKG4pe3JldHVybiBuIT09ZSYmbi5vcmlnaW5hbExpc3RlbmVyIT09ZX0pKS5sZW5ndGgpcmV0dXJuIGkuY2FsbCh0aGlzLG4pO3RoaXNbdF1bbl09bH19ZWxzZSBpZigobD10aGlzW3RdKSYmKGRlbGV0ZSBsW25dLCFPYmplY3Qua2V5cyhsKS5sZW5ndGgpKXJldHVybiBpLmNhbGwodGhpcyl9ZWxzZSBkZWxldGUgdGhpc1t0XTtyZXR1cm4gdGhpc31mdW5jdGlvbiByKG4sZSxsKXtpZighbHx8blt0XSl7dmFyIG89blt0XXx8KG5bdF09e30pO3JldHVybiBvW2VdfHwob1tlXT1bXSl9fW8oZS5wcm90b3R5cGUpLGUubWl4aW49b30oXG4vKipcbiAqIGV2ZW50LWxpdGUuanMgLSBMaWdodC13ZWlnaHQgRXZlbnRFbWl0dGVyIChsZXNzIHRoYW4gMUtCIHdoZW4gZ3ppcHBlZClcbiAqXG4gKiBAY29weXJpZ2h0IFl1c3VrZSBLYXdhc2FraVxuICogQGxpY2Vuc2UgTUlUXG4gKiBAY29uc3RydWN0b3JcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2thd2FuZXQvZXZlbnQtbGl0ZVxuICogQHNlZSBodHRwOi8va2F3YW5ldC5naXRodWIuaW8vZXZlbnQtbGl0ZS9FdmVudExpdGUuaHRtbFxuICogQGV4YW1wbGVcbiAqIHZhciBFdmVudExpdGUgPSByZXF1aXJlKFwiZXZlbnQtbGl0ZVwiKTtcbiAqXG4gKiBmdW5jdGlvbiBNeUNsYXNzKCkgey4uLn0gICAgICAgICAgICAgLy8geW91ciBjbGFzc1xuICpcbiAqIEV2ZW50TGl0ZS5taXhpbihNeUNsYXNzLnByb3RvdHlwZSk7ICAvLyBpbXBvcnQgZXZlbnQgbWV0aG9kc1xuICpcbiAqIHZhciBvYmogPSBuZXcgTXlDbGFzcygpO1xuICogb2JqLm9uKFwiZm9vXCIsIGZ1bmN0aW9uKCkgey4uLn0pOyAgICAgLy8gYWRkIGV2ZW50IGxpc3RlbmVyXG4gKiBvYmoub25jZShcImJhclwiLCBmdW5jdGlvbigpIHsuLi59KTsgICAvLyBhZGQgb25lLXRpbWUgZXZlbnQgbGlzdGVuZXJcbiAqIG9iai5lbWl0KFwiZm9vXCIpOyAgICAgICAgICAgICAgICAgICAgIC8vIGRpc3BhdGNoIGV2ZW50XG4gKiBvYmouZW1pdChcImJhclwiKTsgICAgICAgICAgICAgICAgICAgICAvLyBkaXNwYXRjaCBhbm90aGVyIGV2ZW50XG4gKiBvYmoub2ZmKFwiZm9vXCIpOyAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgZXZlbnQgbGlzdGVuZXJcbiAqL1xuZnVuY3Rpb24gbigpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG4pKXJldHVybiBuZXcgbn0pfSxmdW5jdGlvbihuLGUsdCl7bi5leHBvcnRzPXQoNTgpfSxmdW5jdGlvbihuLGUsdCl7dmFyIGw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc3x8XCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGZ9KCl8fEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSxvPWwucmVnZW5lcmF0b3JSdW50aW1lJiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhsKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpPj0wLGk9byYmbC5yZWdlbmVyYXRvclJ1bnRpbWU7aWYobC5yZWdlbmVyYXRvclJ1bnRpbWU9dm9pZCAwLG4uZXhwb3J0cz10KDMyKSxvKWwucmVnZW5lcmF0b3JSdW50aW1lPWk7ZWxzZSB0cnl7ZGVsZXRlIGwucmVnZW5lcmF0b3JSdW50aW1lfWNhdGNoKG4pe2wucmVnZW5lcmF0b3JSdW50aW1lPXZvaWQgMH19LGZ1bmN0aW9uKG4sZSl7IWZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO3ZhciB0LGw9T2JqZWN0LnByb3RvdHlwZSxvPWwuaGFzT3duUHJvcGVydHksaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LHI9aS5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsYz1pLmFzeW5jSXRlcmF0b3J8fFwiQEBhc3luY0l0ZXJhdG9yXCIsdT1pLnRvU3RyaW5nVGFnfHxcIkBAdG9TdHJpbmdUYWdcIixzPVwib2JqZWN0XCI9PXR5cGVvZiBuLGE9ZS5yZWdlbmVyYXRvclJ1bnRpbWU7aWYoYSlzJiYobi5leHBvcnRzPWEpO2Vsc2V7KGE9ZS5yZWdlbmVyYXRvclJ1bnRpbWU9cz9uLmV4cG9ydHM6e30pLndyYXA9dzt2YXIgbT1cInN1c3BlbmRlZFN0YXJ0XCIsZD1cInN1c3BlbmRlZFlpZWxkXCIsZj1cImV4ZWN1dGluZ1wiLHA9XCJjb21wbGV0ZWRcIix5PXt9LGg9e307aFtyXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTt2YXIgYj1PYmplY3QuZ2V0UHJvdG90eXBlT2Ysdj1iJiZiKGIoSShbXSkpKTt2JiZ2IT09bCYmby5jYWxsKHYscikmJihoPXYpO3ZhciBnPUUucHJvdG90eXBlPWsucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoaCk7Xy5wcm90b3R5cGU9Zy5jb25zdHJ1Y3Rvcj1FLEUuY29uc3RydWN0b3I9XyxFW3VdPV8uZGlzcGxheU5hbWU9XCJHZW5lcmF0b3JGdW5jdGlvblwiLGEuaXNHZW5lcmF0b3JGdW5jdGlvbj1mdW5jdGlvbihuKXt2YXIgZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiZuLmNvbnN0cnVjdG9yO3JldHVybiEhZSYmKGU9PT1ffHxcIkdlbmVyYXRvckZ1bmN0aW9uXCI9PT0oZS5kaXNwbGF5TmFtZXx8ZS5uYW1lKSl9LGEubWFyaz1mdW5jdGlvbihuKXtyZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihuLEUpOihuLl9fcHJvdG9fXz1FLHUgaW4gbnx8KG5bdV09XCJHZW5lcmF0b3JGdW5jdGlvblwiKSksbi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShnKSxufSxhLmF3cmFwPWZ1bmN0aW9uKG4pe3JldHVybntfX2F3YWl0Om59fSxqKEEucHJvdG90eXBlKSxBLnByb3RvdHlwZVtjXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxhLkFzeW5jSXRlcmF0b3I9QSxhLmFzeW5jPWZ1bmN0aW9uKG4sZSx0LGwpe3ZhciBvPW5ldyBBKHcobixlLHQsbCkpO3JldHVybiBhLmlzR2VuZXJhdG9yRnVuY3Rpb24oZSk/bzpvLm5leHQoKS50aGVuKGZ1bmN0aW9uKG4pe3JldHVybiBuLmRvbmU/bi52YWx1ZTpvLm5leHQoKX0pfSxqKGcpLGdbdV09XCJHZW5lcmF0b3JcIixnW3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LGcudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgR2VuZXJhdG9yXVwifSxhLmtleXM9ZnVuY3Rpb24obil7dmFyIGU9W107Zm9yKHZhciB0IGluIG4pZS5wdXNoKHQpO3JldHVybiBlLnJldmVyc2UoKSxmdW5jdGlvbiB0KCl7Zm9yKDtlLmxlbmd0aDspe3ZhciBsPWUucG9wKCk7aWYobCBpbiBuKXJldHVybiB0LnZhbHVlPWwsdC5kb25lPSExLHR9cmV0dXJuIHQuZG9uZT0hMCx0fX0sYS52YWx1ZXM9SSxQLnByb3RvdHlwZT17Y29uc3RydWN0b3I6UCxyZXNldDpmdW5jdGlvbihuKXtpZih0aGlzLnByZXY9MCx0aGlzLm5leHQ9MCx0aGlzLnNlbnQ9dGhpcy5fc2VudD10LHRoaXMuZG9uZT0hMSx0aGlzLmRlbGVnYXRlPW51bGwsdGhpcy5tZXRob2Q9XCJuZXh0XCIsdGhpcy5hcmc9dCx0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChVKSwhbilmb3IodmFyIGUgaW4gdGhpcylcInRcIj09PWUuY2hhckF0KDApJiZvLmNhbGwodGhpcyxlKSYmIWlzTmFOKCtlLnNsaWNlKDEpKSYmKHRoaXNbZV09dCl9LHN0b3A6ZnVuY3Rpb24oKXt0aGlzLmRvbmU9ITA7dmFyIG49dGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247aWYoXCJ0aHJvd1wiPT09bi50eXBlKXRocm93IG4uYXJnO3JldHVybiB0aGlzLnJ2YWx9LGRpc3BhdGNoRXhjZXB0aW9uOmZ1bmN0aW9uKG4pe2lmKHRoaXMuZG9uZSl0aHJvdyBuO3ZhciBlPXRoaXM7ZnVuY3Rpb24gbChsLG8pe3JldHVybiBjLnR5cGU9XCJ0aHJvd1wiLGMuYXJnPW4sZS5uZXh0PWwsbyYmKGUubWV0aG9kPVwibmV4dFwiLGUuYXJnPXQpLCEhb31mb3IodmFyIGk9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO2k+PTA7LS1pKXt2YXIgcj10aGlzLnRyeUVudHJpZXNbaV0sYz1yLmNvbXBsZXRpb247aWYoXCJyb290XCI9PT1yLnRyeUxvYylyZXR1cm4gbChcImVuZFwiKTtpZihyLnRyeUxvYzw9dGhpcy5wcmV2KXt2YXIgdT1vLmNhbGwocixcImNhdGNoTG9jXCIpLHM9by5jYWxsKHIsXCJmaW5hbGx5TG9jXCIpO2lmKHUmJnMpe2lmKHRoaXMucHJldjxyLmNhdGNoTG9jKXJldHVybiBsKHIuY2F0Y2hMb2MsITApO2lmKHRoaXMucHJldjxyLmZpbmFsbHlMb2MpcmV0dXJuIGwoci5maW5hbGx5TG9jKX1lbHNlIGlmKHUpe2lmKHRoaXMucHJldjxyLmNhdGNoTG9jKXJldHVybiBsKHIuY2F0Y2hMb2MsITApfWVsc2V7aWYoIXMpdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7aWYodGhpcy5wcmV2PHIuZmluYWxseUxvYylyZXR1cm4gbChyLmZpbmFsbHlMb2MpfX19fSxhYnJ1cHQ6ZnVuY3Rpb24obixlKXtmb3IodmFyIHQ9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO3Q+PTA7LS10KXt2YXIgbD10aGlzLnRyeUVudHJpZXNbdF07aWYobC50cnlMb2M8PXRoaXMucHJldiYmby5jYWxsKGwsXCJmaW5hbGx5TG9jXCIpJiZ0aGlzLnByZXY8bC5maW5hbGx5TG9jKXt2YXIgaT1sO2JyZWFrfX1pJiYoXCJicmVha1wiPT09bnx8XCJjb250aW51ZVwiPT09bikmJmkudHJ5TG9jPD1lJiZlPD1pLmZpbmFsbHlMb2MmJihpPW51bGwpO3ZhciByPWk/aS5jb21wbGV0aW9uOnt9O3JldHVybiByLnR5cGU9bixyLmFyZz1lLGk/KHRoaXMubWV0aG9kPVwibmV4dFwiLHRoaXMubmV4dD1pLmZpbmFsbHlMb2MseSk6dGhpcy5jb21wbGV0ZShyKX0sY29tcGxldGU6ZnVuY3Rpb24obixlKXtpZihcInRocm93XCI9PT1uLnR5cGUpdGhyb3cgbi5hcmc7cmV0dXJuXCJicmVha1wiPT09bi50eXBlfHxcImNvbnRpbnVlXCI9PT1uLnR5cGU/dGhpcy5uZXh0PW4uYXJnOlwicmV0dXJuXCI9PT1uLnR5cGU/KHRoaXMucnZhbD10aGlzLmFyZz1uLmFyZyx0aGlzLm1ldGhvZD1cInJldHVyblwiLHRoaXMubmV4dD1cImVuZFwiKTpcIm5vcm1hbFwiPT09bi50eXBlJiZlJiYodGhpcy5uZXh0PWUpLHl9LGZpbmlzaDpmdW5jdGlvbihuKXtmb3IodmFyIGU9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO2U+PTA7LS1lKXt2YXIgdD10aGlzLnRyeUVudHJpZXNbZV07aWYodC5maW5hbGx5TG9jPT09bilyZXR1cm4gdGhpcy5jb21wbGV0ZSh0LmNvbXBsZXRpb24sdC5hZnRlckxvYyksVSh0KSx5fX0sY2F0Y2g6ZnVuY3Rpb24obil7Zm9yKHZhciBlPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtlPj0wOy0tZSl7dmFyIHQ9dGhpcy50cnlFbnRyaWVzW2VdO2lmKHQudHJ5TG9jPT09bil7dmFyIGw9dC5jb21wbGV0aW9uO2lmKFwidGhyb3dcIj09PWwudHlwZSl7dmFyIG89bC5hcmc7VSh0KX1yZXR1cm4gb319dGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpfSxkZWxlZ2F0ZVlpZWxkOmZ1bmN0aW9uKG4sZSxsKXtyZXR1cm4gdGhpcy5kZWxlZ2F0ZT17aXRlcmF0b3I6SShuKSxyZXN1bHROYW1lOmUsbmV4dExvYzpsfSxcIm5leHRcIj09PXRoaXMubWV0aG9kJiYodGhpcy5hcmc9dCkseX19fWZ1bmN0aW9uIHcobixlLHQsbCl7dmFyIG89ZSYmZS5wcm90b3R5cGUgaW5zdGFuY2VvZiBrP2U6ayxpPU9iamVjdC5jcmVhdGUoby5wcm90b3R5cGUpLHI9bmV3IFAobHx8W10pO3JldHVybiBpLl9pbnZva2U9ZnVuY3Rpb24obixlLHQpe3ZhciBsPW07cmV0dXJuIGZ1bmN0aW9uKG8saSl7aWYobD09PWYpdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtpZihsPT09cCl7aWYoXCJ0aHJvd1wiPT09byl0aHJvdyBpO3JldHVybiBPKCl9Zm9yKHQubWV0aG9kPW8sdC5hcmc9aTs7KXt2YXIgcj10LmRlbGVnYXRlO2lmKHIpe3ZhciBjPUsocix0KTtpZihjKXtpZihjPT09eSljb250aW51ZTtyZXR1cm4gY319aWYoXCJuZXh0XCI9PT10Lm1ldGhvZCl0LnNlbnQ9dC5fc2VudD10LmFyZztlbHNlIGlmKFwidGhyb3dcIj09PXQubWV0aG9kKXtpZihsPT09bSl0aHJvdyBsPXAsdC5hcmc7dC5kaXNwYXRjaEV4Y2VwdGlvbih0LmFyZyl9ZWxzZVwicmV0dXJuXCI9PT10Lm1ldGhvZCYmdC5hYnJ1cHQoXCJyZXR1cm5cIix0LmFyZyk7bD1mO3ZhciB1PXgobixlLHQpO2lmKFwibm9ybWFsXCI9PT11LnR5cGUpe2lmKGw9dC5kb25lP3A6ZCx1LmFyZz09PXkpY29udGludWU7cmV0dXJue3ZhbHVlOnUuYXJnLGRvbmU6dC5kb25lfX1cInRocm93XCI9PT11LnR5cGUmJihsPXAsdC5tZXRob2Q9XCJ0aHJvd1wiLHQuYXJnPXUuYXJnKX19fShuLHQsciksaX1mdW5jdGlvbiB4KG4sZSx0KXt0cnl7cmV0dXJue3R5cGU6XCJub3JtYWxcIixhcmc6bi5jYWxsKGUsdCl9fWNhdGNoKG4pe3JldHVybnt0eXBlOlwidGhyb3dcIixhcmc6bn19fWZ1bmN0aW9uIGsoKXt9ZnVuY3Rpb24gXygpe31mdW5jdGlvbiBFKCl7fWZ1bmN0aW9uIGoobil7W1wibmV4dFwiLFwidGhyb3dcIixcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe25bZV09ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMuX2ludm9rZShlLG4pfX0pfWZ1bmN0aW9uIEEobil7dmFyIGU7dGhpcy5faW52b2tlPWZ1bmN0aW9uKHQsbCl7ZnVuY3Rpb24gaSgpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlLGkpeyFmdW5jdGlvbiBlKHQsbCxpLHIpe3ZhciBjPXgoblt0XSxuLGwpO2lmKFwidGhyb3dcIiE9PWMudHlwZSl7dmFyIHU9Yy5hcmcscz11LnZhbHVlO3JldHVybiBzJiZcIm9iamVjdFwiPT10eXBlb2YgcyYmby5jYWxsKHMsXCJfX2F3YWl0XCIpP1Byb21pc2UucmVzb2x2ZShzLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24obil7ZShcIm5leHRcIixuLGkscil9LGZ1bmN0aW9uKG4pe2UoXCJ0aHJvd1wiLG4saSxyKX0pOlByb21pc2UucmVzb2x2ZShzKS50aGVuKGZ1bmN0aW9uKG4pe3UudmFsdWU9bixpKHUpfSxmdW5jdGlvbihuKXtyZXR1cm4gZShcInRocm93XCIsbixpLHIpfSl9cihjLmFyZyl9KHQsbCxlLGkpfSl9cmV0dXJuIGU9ZT9lLnRoZW4oaSxpKTppKCl9fWZ1bmN0aW9uIEsobixlKXt2YXIgbD1uLml0ZXJhdG9yW2UubWV0aG9kXTtpZihsPT09dCl7aWYoZS5kZWxlZ2F0ZT1udWxsLFwidGhyb3dcIj09PWUubWV0aG9kKXtpZihuLml0ZXJhdG9yLnJldHVybiYmKGUubWV0aG9kPVwicmV0dXJuXCIsZS5hcmc9dCxLKG4sZSksXCJ0aHJvd1wiPT09ZS5tZXRob2QpKXJldHVybiB5O2UubWV0aG9kPVwidGhyb3dcIixlLmFyZz1uZXcgVHlwZUVycm9yKFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKX1yZXR1cm4geX12YXIgbz14KGwsbi5pdGVyYXRvcixlLmFyZyk7aWYoXCJ0aHJvd1wiPT09by50eXBlKXJldHVybiBlLm1ldGhvZD1cInRocm93XCIsZS5hcmc9by5hcmcsZS5kZWxlZ2F0ZT1udWxsLHk7dmFyIGk9by5hcmc7cmV0dXJuIGk/aS5kb25lPyhlW24ucmVzdWx0TmFtZV09aS52YWx1ZSxlLm5leHQ9bi5uZXh0TG9jLFwicmV0dXJuXCIhPT1lLm1ldGhvZCYmKGUubWV0aG9kPVwibmV4dFwiLGUuYXJnPXQpLGUuZGVsZWdhdGU9bnVsbCx5KTppOihlLm1ldGhvZD1cInRocm93XCIsZS5hcmc9bmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpLGUuZGVsZWdhdGU9bnVsbCx5KX1mdW5jdGlvbiBTKG4pe3ZhciBlPXt0cnlMb2M6blswXX07MSBpbiBuJiYoZS5jYXRjaExvYz1uWzFdKSwyIGluIG4mJihlLmZpbmFsbHlMb2M9blsyXSxlLmFmdGVyTG9jPW5bM10pLHRoaXMudHJ5RW50cmllcy5wdXNoKGUpfWZ1bmN0aW9uIFUobil7dmFyIGU9bi5jb21wbGV0aW9ufHx7fTtlLnR5cGU9XCJub3JtYWxcIixkZWxldGUgZS5hcmcsbi5jb21wbGV0aW9uPWV9ZnVuY3Rpb24gUChuKXt0aGlzLnRyeUVudHJpZXM9W3t0cnlMb2M6XCJyb290XCJ9XSxuLmZvckVhY2goUyx0aGlzKSx0aGlzLnJlc2V0KCEwKX1mdW5jdGlvbiBJKG4pe2lmKG4pe3ZhciBlPW5bcl07aWYoZSlyZXR1cm4gZS5jYWxsKG4pO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4ubmV4dClyZXR1cm4gbjtpZighaXNOYU4obi5sZW5ndGgpKXt2YXIgbD0tMSxpPWZ1bmN0aW9uIGUoKXtmb3IoOysrbDxuLmxlbmd0aDspaWYoby5jYWxsKG4sbCkpcmV0dXJuIGUudmFsdWU9bltsXSxlLmRvbmU9ITEsZTtyZXR1cm4gZS52YWx1ZT10LGUuZG9uZT0hMCxlfTtyZXR1cm4gaS5uZXh0PWl9fXJldHVybntuZXh0Ok99fWZ1bmN0aW9uIE8oKXtyZXR1cm57dmFsdWU6dCxkb25lOiEwfX19KGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN8fFwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmfSgpfHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkpfSxmdW5jdGlvbihuLGUpe3ZhciB0O3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKTt0cnl7dD10fHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl8fCgwLGV2YWwpKFwidGhpc1wiKX1jYXRjaChuKXtcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiYodD13aW5kb3cpfW4uZXhwb3J0cz10fSxmdW5jdGlvbihuLGUpe24uZXhwb3J0cz1mdW5jdGlvbihuKXtyZXR1cm4gbi53ZWJwYWNrUG9seWZpbGx8fChuLmRlcHJlY2F0ZT1mdW5jdGlvbigpe30sbi5wYXRocz1bXSxuLmNoaWxkcmVufHwobi5jaGlsZHJlbj1bXSksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJsb2FkZWRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbi5sfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiaWRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbi5pfX0pLG4ud2VicGFja1BvbHlmaWxsPTEpLG59fSxmdW5jdGlvbihuLGUpe24uZXhwb3J0cz1mdW5jdGlvbihuKXtpZihBcnJheS5pc0FycmF5KG4pKXtmb3IodmFyIGU9MCx0PW5ldyBBcnJheShuLmxlbmd0aCk7ZTxuLmxlbmd0aDtlKyspdFtlXT1uW2VdO3JldHVybiB0fX19LGZ1bmN0aW9uKG4sZSl7bi5leHBvcnRzPWZ1bmN0aW9uKG4pe2lmKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3Qobil8fFwiW29iamVjdCBBcmd1bWVudHNdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobikpcmV0dXJuIEFycmF5LmZyb20obil9fSxmdW5jdGlvbihuLGUpe24uZXhwb3J0cz1mdW5jdGlvbigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKX19LGZ1bmN0aW9uKG4sZSl7ZnVuY3Rpb24gdChuKXtyZXR1cm4odD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24obil7cmV0dXJuIHR5cGVvZiBufTpmdW5jdGlvbihuKXtyZXR1cm4gbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZuLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZuIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBufSkobil9ZnVuY3Rpb24gbChlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PT10KFN5bWJvbC5pdGVyYXRvcik/bi5leHBvcnRzPWw9ZnVuY3Rpb24obil7cmV0dXJuIHQobil9Om4uZXhwb3J0cz1sPWZ1bmN0aW9uKG4pe3JldHVybiBuJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJm4uY29uc3RydWN0b3I9PT1TeW1ib2wmJm4hPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dChuKX0sbChlKX1uLmV4cG9ydHM9bH0sZnVuY3Rpb24obixlKXtuLmV4cG9ydHM9ZnVuY3Rpb24obil7aWYodm9pZCAwPT09bil0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIG59fSxmdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PW4pe3ZhciBsPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnanMtY3J5cHRvLXV0aWxzJ1wiKTt0aHJvdyBsLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbH1lLmV4cG9ydHM9bn0sZnVuY3Rpb24obix0KXtuLmV4cG9ydHM9ZX0sZnVuY3Rpb24obixlKXtuLmV4cG9ydHM9ZnVuY3Rpb24obil7cmV0dXJuLTEhPT1GdW5jdGlvbi50b1N0cmluZy5jYWxsKG4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpfX0sZnVuY3Rpb24obixlLHQpe3ZhciBsPXQoMTQpO2Z1bmN0aW9uIG8oZSx0LGkpe3JldHVybiFmdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSxmdW5jdGlvbigpe30pKSwhMH1jYXRjaChuKXtyZXR1cm4hMX19KCk/bi5leHBvcnRzPW89ZnVuY3Rpb24obixlLHQpe3ZhciBvPVtudWxsXTtvLnB1c2guYXBwbHkobyxlKTt2YXIgaT1uZXcoRnVuY3Rpb24uYmluZC5hcHBseShuLG8pKTtyZXR1cm4gdCYmbChpLHQucHJvdG90eXBlKSxpfTpuLmV4cG9ydHM9bz1SZWZsZWN0LmNvbnN0cnVjdCxvLmFwcGx5KG51bGwsYXJndW1lbnRzKX1uLmV4cG9ydHM9b30sZnVuY3Rpb24obixlKXtmdW5jdGlvbiB0KG4pe3JldHVybiBuJiZuLmlzQnVmZmVyJiZufW4uZXhwb3J0cz10KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBCdWZmZXImJkJ1ZmZlcil8fHQodGhpcy5CdWZmZXIpfHx0KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5CdWZmZXIpfHx0aGlzLkJ1ZmZlcn0sZnVuY3Rpb24obixlLHQpe3ZhciBsPXQoMTApO2Z1bmN0aW9uIG8obil7cmV0dXJuIG5ldyBBcnJheShuKX0oZT1uLmV4cG9ydHM9bygwKSkuYWxsb2M9byxlLmNvbmNhdD1sLmNvbmNhdCxlLmZyb209ZnVuY3Rpb24obil7aWYoIWwuaXNCdWZmZXIobikmJmwuaXNWaWV3KG4pKW49bC5VaW50OEFycmF5LmZyb20obik7ZWxzZSBpZihsLmlzQXJyYXlCdWZmZXIobikpbj1uZXcgVWludDhBcnJheShuKTtlbHNle2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuKXJldHVybiBsLmZyb20uY2FsbChlLG4pO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBuKXRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpfXJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChuKX19LGZ1bmN0aW9uKG4sZSx0KXt2YXIgbD10KDEwKSxvPWwuZ2xvYmFsO2Z1bmN0aW9uIGkobil7cmV0dXJuIG5ldyBvKG4pfShlPW4uZXhwb3J0cz1sLmhhc0J1ZmZlcj9pKDApOltdKS5hbGxvYz1sLmhhc0J1ZmZlciYmby5hbGxvY3x8aSxlLmNvbmNhdD1sLmNvbmNhdCxlLmZyb209ZnVuY3Rpb24obil7aWYoIWwuaXNCdWZmZXIobikmJmwuaXNWaWV3KG4pKW49bC5VaW50OEFycmF5LmZyb20obik7ZWxzZSBpZihsLmlzQXJyYXlCdWZmZXIobikpbj1uZXcgVWludDhBcnJheShuKTtlbHNle2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuKXJldHVybiBsLmZyb20uY2FsbChlLG4pO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBuKXRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpfXJldHVybiBvLmZyb20mJjEhPT1vLmZyb20ubGVuZ3RoP28uZnJvbShuKTpuZXcgbyhuKX19LGZ1bmN0aW9uKG4sZSx0KXt2YXIgbD10KDEwKTtmdW5jdGlvbiBvKG4pe3JldHVybiBuZXcgVWludDhBcnJheShuKX0oZT1uLmV4cG9ydHM9bC5oYXNBcnJheUJ1ZmZlcj9vKDApOltdKS5hbGxvYz1vLGUuY29uY2F0PWwuY29uY2F0LGUuZnJvbT1mdW5jdGlvbihuKXtpZihsLmlzVmlldyhuKSl7dmFyIHQ9bi5ieXRlT2Zmc2V0LG89bi5ieXRlTGVuZ3RoOyhuPW4uYnVmZmVyKS5ieXRlTGVuZ3RoIT09byYmKG4uc2xpY2U/bj1uLnNsaWNlKHQsdCtvKToobj1uZXcgVWludDhBcnJheShuKSkuYnl0ZUxlbmd0aCE9PW8mJihuPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG4sdCx0K28pKSl9ZWxzZXtpZihcInN0cmluZ1wiPT10eXBlb2YgbilyZXR1cm4gbC5mcm9tLmNhbGwoZSxuKTtpZihcIm51bWJlclwiPT10eXBlb2Ygbil0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKX1yZXR1cm4gbmV3IFVpbnQ4QXJyYXkobil9fSxmdW5jdGlvbihuLGUpe2UuY29weT1mdW5jdGlvbihuLGUsdCxsKXt2YXIgbzt0fHwodD0wKTtsfHwwPT09bHx8KGw9dGhpcy5sZW5ndGgpO2V8fChlPTApO3ZhciBpPWwtdDtpZihuPT09dGhpcyYmdDxlJiZlPGwpZm9yKG89aS0xO28+PTA7by0tKW5bbytlXT10aGlzW28rdF07ZWxzZSBmb3Iobz0wO288aTtvKyspbltvK2VdPXRoaXNbbyt0XTtyZXR1cm4gaX0sZS50b1N0cmluZz1mdW5jdGlvbihuLGUsdCl7dmFyIGw9MHxlO3R8fCh0PXRoaXMubGVuZ3RoKTt2YXIgbz1cIlwiLGk9MDtmb3IoO2w8dDspKGk9dGhpc1tsKytdKTwxMjg/bys9U3RyaW5nLmZyb21DaGFyQ29kZShpKTooMTkyPT0oMjI0JmkpP2k9KDMxJmkpPDw2fDYzJnRoaXNbbCsrXToyMjQ9PSgyNDAmaSk/aT0oMTUmaSk8PDEyfCg2MyZ0aGlzW2wrK10pPDw2fDYzJnRoaXNbbCsrXToyNDA9PSgyNDgmaSkmJihpPSg3JmkpPDwxOHwoNjMmdGhpc1tsKytdKTw8MTJ8KDYzJnRoaXNbbCsrXSk8PDZ8NjMmdGhpc1tsKytdKSxpPj02NTUzNj8oaS09NjU1MzYsbys9U3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NisoaT4+PjEwKSw1NjMyMCsoMTAyMyZpKSkpOm8rPVN0cmluZy5mcm9tQ2hhckNvZGUoaSkpO3JldHVybiBvfSxlLndyaXRlPWZ1bmN0aW9uKG4sZSl7dmFyIHQ9ZXx8KGV8PTApLGw9bi5sZW5ndGgsbz0wLGk9MDtmb3IoO2k8bDspKG89bi5jaGFyQ29kZUF0KGkrKykpPDEyOD90aGlzW3QrK109bzpvPDIwNDg/KHRoaXNbdCsrXT0xOTJ8bz4+PjYsdGhpc1t0KytdPTEyOHw2MyZvKTpvPDU1Mjk2fHxvPjU3MzQzPyh0aGlzW3QrK109MjI0fG8+Pj4xMix0aGlzW3QrK109MTI4fG8+Pj42JjYzLHRoaXNbdCsrXT0xMjh8NjMmbyk6KG89NjU1MzYrKG8tNTUyOTY8PDEwfG4uY2hhckNvZGVBdChpKyspLTU2MzIwKSx0aGlzW3QrK109MjQwfG8+Pj4xOCx0aGlzW3QrK109MTI4fG8+Pj4xMiY2Myx0aGlzW3QrK109MTI4fG8+Pj42JjYzLHRoaXNbdCsrXT0xMjh8NjMmbyk7cmV0dXJuIHQtZX19LGZ1bmN0aW9uKG4sZSx0KXtlLnNldEV4dFBhY2tlcnM9ZnVuY3Rpb24obil7bi5hZGRFeHRQYWNrZXIoMTQsRXJyb3IsW20sdV0pLG4uYWRkRXh0UGFja2VyKDEsRXZhbEVycm9yLFttLHVdKSxuLmFkZEV4dFBhY2tlcigyLFJhbmdlRXJyb3IsW20sdV0pLG4uYWRkRXh0UGFja2VyKDMsUmVmZXJlbmNlRXJyb3IsW20sdV0pLG4uYWRkRXh0UGFja2VyKDQsU3ludGF4RXJyb3IsW20sdV0pLG4uYWRkRXh0UGFja2VyKDUsVHlwZUVycm9yLFttLHVdKSxuLmFkZEV4dFBhY2tlcig2LFVSSUVycm9yLFttLHVdKSxuLmFkZEV4dFBhY2tlcigxMCxSZWdFeHAsW2EsdV0pLG4uYWRkRXh0UGFja2VyKDExLEJvb2xlYW4sW3MsdV0pLG4uYWRkRXh0UGFja2VyKDEyLFN0cmluZyxbcyx1XSksbi5hZGRFeHRQYWNrZXIoMTMsRGF0ZSxbTnVtYmVyLHVdKSxuLmFkZEV4dFBhY2tlcigxNSxOdW1iZXIsW3MsdV0pLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5JiYobi5hZGRFeHRQYWNrZXIoMTcsSW50OEFycmF5LHIpLG4uYWRkRXh0UGFja2VyKDE4LFVpbnQ4QXJyYXksciksbi5hZGRFeHRQYWNrZXIoMTksSW50MTZBcnJheSxyKSxuLmFkZEV4dFBhY2tlcigyMCxVaW50MTZBcnJheSxyKSxuLmFkZEV4dFBhY2tlcigyMSxJbnQzMkFycmF5LHIpLG4uYWRkRXh0UGFja2VyKDIyLFVpbnQzMkFycmF5LHIpLG4uYWRkRXh0UGFja2VyKDIzLEZsb2F0MzJBcnJheSxyKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgRmxvYXQ2NEFycmF5JiZuLmFkZEV4dFBhY2tlcigyNCxGbG9hdDY0QXJyYXksciksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5JiZuLmFkZEV4dFBhY2tlcigyNSxVaW50OENsYW1wZWRBcnJheSxyKSxuLmFkZEV4dFBhY2tlcigyNixBcnJheUJ1ZmZlcixyKSxuLmFkZEV4dFBhY2tlcigyOSxEYXRhVmlldyxyKSk7by5oYXNCdWZmZXImJm4uYWRkRXh0UGFja2VyKDI3LGksby5mcm9tKX07dmFyIGwsbz10KDEwKSxpPW8uZ2xvYmFsLHI9by5VaW50OEFycmF5LmZyb20sYz17bmFtZToxLG1lc3NhZ2U6MSxzdGFjazoxLGNvbHVtbk51bWJlcjoxLGZpbGVOYW1lOjEsbGluZU51bWJlcjoxfTtmdW5jdGlvbiB1KG4pe3JldHVybiBsfHwobD10KDIxKS5lbmNvZGUpLGwobil9ZnVuY3Rpb24gcyhuKXtyZXR1cm4gbi52YWx1ZU9mKCl9ZnVuY3Rpb24gYShuKXsobj1SZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobikuc3BsaXQoXCIvXCIpKS5zaGlmdCgpO3ZhciBlPVtuLnBvcCgpXTtyZXR1cm4gZS51bnNoaWZ0KG4uam9pbihcIi9cIikpLGV9ZnVuY3Rpb24gbShuKXt2YXIgZT17fTtmb3IodmFyIHQgaW4gYyllW3RdPW5bdF07cmV0dXJuIGV9fSxmdW5jdGlvbihuLGUsdCl7dmFyIGw9dCgxNyksbz10KDE5KSxpPW8uVWludDY0QkUscj1vLkludDY0QkUsYz10KDEwKSx1PXQoMTgpLHM9dCg1MSksYT10KDI0KS51aW50OCxtPXQoMTYpLkV4dEJ1ZmZlcixkPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5LGY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIE1hcCxwPVtdO3BbMV09MjEyLHBbMl09MjEzLHBbNF09MjE0LHBbOF09MjE1LHBbMTZdPTIxNixlLmdldFdyaXRlVHlwZT1mdW5jdGlvbihuKXt2YXIgZT1zLmdldFdyaXRlVG9rZW4obiksdD1uJiZuLnVzZXJhdyxvPWQmJm4mJm4uYmluYXJyYXlidWZmZXIseT1vP2MuaXNBcnJheUJ1ZmZlcjpjLmlzQnVmZmVyLGg9bz9mdW5jdGlvbihuLGUpe3cobixuZXcgVWludDhBcnJheShlKSl9OncsYj1mJiZuJiZuLnVzZW1hcD9mdW5jdGlvbihuLHQpe2lmKCEodCBpbnN0YW5jZW9mIE1hcCkpcmV0dXJuIHgobix0KTt2YXIgbD10LnNpemU7ZVtsPDE2PzEyOCtsOmw8PTY1NTM1PzIyMjoyMjNdKG4sbCk7dmFyIG89bi5jb2RlYy5lbmNvZGU7dC5mb3JFYWNoKGZ1bmN0aW9uKGUsdCxsKXtvKG4sdCksbyhuLGUpfSl9Ong7cmV0dXJue2Jvb2xlYW46ZnVuY3Rpb24obix0KXtlW3Q/MTk1OjE5NF0obix0KX0sZnVuY3Rpb246ZyxudW1iZXI6ZnVuY3Rpb24obix0KXt2YXIgbCxvPTB8dDtpZih0IT09bylyZXR1cm4gdm9pZCBlW2w9MjAzXShuLHQpO2w9LTMyPD1vJiZvPD0xMjc/MjU1Jm86MDw9bz9vPD0yNTU/MjA0Om88PTY1NTM1PzIwNToyMDY6LTEyODw9bz8yMDg6LTMyNzY4PD1vPzIwOToyMTA7ZVtsXShuLG8pfSxvYmplY3Q6dD9mdW5jdGlvbihuLHQpe2lmKHkodCkpcmV0dXJuIGZ1bmN0aW9uKG4sdCl7dmFyIGw9dC5sZW5ndGg7ZVtsPDMyPzE2MCtsOmw8PTY1NTM1PzIxODoyMTldKG4sbCksbi5zZW5kKHQpfShuLHQpO3Yobix0KX06dixzdHJpbmc6ZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKHQsbCl7dmFyIG89bC5sZW5ndGgsaT01KzMqbzt0Lm9mZnNldD10LnJlc2VydmUoaSk7dmFyIHI9dC5idWZmZXIsYz1uKG8pLHM9dC5vZmZzZXQrYztvPXUud3JpdGUuY2FsbChyLGwscyk7dmFyIGE9bihvKTtpZihjIT09YSl7dmFyIG09cythLWMsZD1zK287dS5jb3B5LmNhbGwocixyLG0scyxkKX1lWzE9PT1hPzE2MCtvOmE8PTM/MjE1K2E6MjE5XSh0LG8pLHQub2Zmc2V0Kz1vfX0odD9mdW5jdGlvbihuKXtyZXR1cm4gbjwzMj8xOm48PTY1NTM1PzM6NX06ZnVuY3Rpb24obil7cmV0dXJuIG48MzI/MTpuPD0yNTU/MjpuPD02NTUzNT8zOjV9KSxzeW1ib2w6Zyx1bmRlZmluZWQ6Z307ZnVuY3Rpb24gdihuLHQpe2lmKG51bGw9PT10KXJldHVybiBnKG4sdCk7aWYoeSh0KSlyZXR1cm4gaChuLHQpO2lmKGwodCkpcmV0dXJuIGZ1bmN0aW9uKG4sdCl7dmFyIGw9dC5sZW5ndGg7ZVtsPDE2PzE0NCtsOmw8PTY1NTM1PzIyMDoyMjFdKG4sbCk7Zm9yKHZhciBvPW4uY29kZWMuZW5jb2RlLGk9MDtpPGw7aSsrKW8obix0W2ldKX0obix0KTtpZihpLmlzVWludDY0QkUodCkpcmV0dXJuIGZ1bmN0aW9uKG4sdCl7ZVsyMDddKG4sdC50b0FycmF5KCkpfShuLHQpO2lmKHIuaXNJbnQ2NEJFKHQpKXJldHVybiBmdW5jdGlvbihuLHQpe2VbMjExXShuLHQudG9BcnJheSgpKX0obix0KTt2YXIgbz1uLmNvZGVjLmdldEV4dFBhY2tlcih0KTtpZihvJiYodD1vKHQpKSx0IGluc3RhbmNlb2YgbSlyZXR1cm4gZnVuY3Rpb24obix0KXt2YXIgbD10LmJ1ZmZlcixvPWwubGVuZ3RoLGk9cFtvXXx8KG88MjU1PzE5OTpvPD02NTUzNT8yMDA6MjAxKTtlW2ldKG4sbyksYVt0LnR5cGVdKG4pLG4uc2VuZChsKX0obix0KTtiKG4sdCl9ZnVuY3Rpb24gZyhuLHQpe2VbMTkyXShuLHQpfWZ1bmN0aW9uIHcobix0KXt2YXIgbD10Lmxlbmd0aCxvPWw8MjU1PzE5NjpsPD02NTUzNT8xOTc6MTk4O2Vbb10obixsKSxuLnNlbmQodCl9ZnVuY3Rpb24geChuLHQpe3ZhciBsPU9iamVjdC5rZXlzKHQpLG89bC5sZW5ndGgsaT1vPDE2PzEyOCtvOm88PTY1NTM1PzIyMjoyMjM7ZVtpXShuLG8pO3ZhciByPW4uY29kZWMuZW5jb2RlO2wuZm9yRWFjaChmdW5jdGlvbihlKXtyKG4sZSkscihuLHRbZV0pfSl9fX0sZnVuY3Rpb24obixlLHQpe3ZhciBsPXQoMjMpLG89dCgxOSksaT1vLlVpbnQ2NEJFLHI9by5JbnQ2NEJFLGM9dCgyNCkudWludDgsdT10KDEwKSxzPXUuZ2xvYmFsLGE9dS5oYXNCdWZmZXImJlwiVFlQRURfQVJSQVlfU1VQUE9SVFwiaW4gcyYmIXMuVFlQRURfQVJSQVlfU1VQUE9SVCxtPXUuaGFzQnVmZmVyJiZzLnByb3RvdHlwZXx8e307ZnVuY3Rpb24gZCgpe3ZhciBuPWMuc2xpY2UoKTtyZXR1cm4gblsxOTZdPWYoMTk2KSxuWzE5N109cCgxOTcpLG5bMTk4XT15KDE5OCksblsxOTldPWYoMTk5KSxuWzIwMF09cCgyMDApLG5bMjAxXT15KDIwMSksblsyMDJdPWgoMjAyLDQsbS53cml0ZUZsb2F0QkV8fGcsITApLG5bMjAzXT1oKDIwMyw4LG0ud3JpdGVEb3VibGVCRXx8dywhMCksblsyMDRdPWYoMjA0KSxuWzIwNV09cCgyMDUpLG5bMjA2XT15KDIwNiksblsyMDddPWgoMjA3LDgsYiksblsyMDhdPWYoMjA4KSxuWzIwOV09cCgyMDkpLG5bMjEwXT15KDIxMCksblsyMTFdPWgoMjExLDgsdiksblsyMTddPWYoMjE3KSxuWzIxOF09cCgyMTgpLG5bMjE5XT15KDIxOSksblsyMjBdPXAoMjIwKSxuWzIyMV09eSgyMjEpLG5bMjIyXT1wKDIyMiksblsyMjNdPXkoMjIzKSxufWZ1bmN0aW9uIGYobil7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIGw9ZS5yZXNlcnZlKDIpLG89ZS5idWZmZXI7b1tsKytdPW4sb1tsXT10fX1mdW5jdGlvbiBwKG4pe3JldHVybiBmdW5jdGlvbihlLHQpe3ZhciBsPWUucmVzZXJ2ZSgzKSxvPWUuYnVmZmVyO29bbCsrXT1uLG9bbCsrXT10Pj4+OCxvW2xdPXR9fWZ1bmN0aW9uIHkobil7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIGw9ZS5yZXNlcnZlKDUpLG89ZS5idWZmZXI7b1tsKytdPW4sb1tsKytdPXQ+Pj4yNCxvW2wrK109dD4+PjE2LG9bbCsrXT10Pj4+OCxvW2xdPXR9fWZ1bmN0aW9uIGgobixlLHQsbCl7cmV0dXJuIGZ1bmN0aW9uKG8saSl7dmFyIHI9by5yZXNlcnZlKGUrMSk7by5idWZmZXJbcisrXT1uLHQuY2FsbChvLmJ1ZmZlcixpLHIsbCl9fWZ1bmN0aW9uIGIobixlKXtuZXcgaSh0aGlzLGUsbil9ZnVuY3Rpb24gdihuLGUpe25ldyByKHRoaXMsZSxuKX1mdW5jdGlvbiBnKG4sZSl7bC53cml0ZSh0aGlzLG4sZSwhMSwyMyw0KX1mdW5jdGlvbiB3KG4sZSl7bC53cml0ZSh0aGlzLG4sZSwhMSw1Miw4KX1lLmdldFdyaXRlVG9rZW49ZnVuY3Rpb24obil7cmV0dXJuIG4mJm4udWludDhhcnJheT9mdW5jdGlvbigpe3ZhciBuPWQoKTtyZXR1cm4gblsyMDJdPWgoMjAyLDQsZyksblsyMDNdPWgoMjAzLDgsdyksbn0oKTphfHx1Lmhhc0J1ZmZlciYmbiYmbi5zYWZlP2Z1bmN0aW9uKCl7dmFyIG49Yy5zbGljZSgpO3JldHVybiBuWzE5Nl09aCgxOTYsMSxzLnByb3RvdHlwZS53cml0ZVVJbnQ4KSxuWzE5N109aCgxOTcsMixzLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFKSxuWzE5OF09aCgxOTgsNCxzLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFKSxuWzE5OV09aCgxOTksMSxzLnByb3RvdHlwZS53cml0ZVVJbnQ4KSxuWzIwMF09aCgyMDAsMixzLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFKSxuWzIwMV09aCgyMDEsNCxzLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFKSxuWzIwMl09aCgyMDIsNCxzLnByb3RvdHlwZS53cml0ZUZsb2F0QkUpLG5bMjAzXT1oKDIwMyw4LHMucHJvdG90eXBlLndyaXRlRG91YmxlQkUpLG5bMjA0XT1oKDIwNCwxLHMucHJvdG90eXBlLndyaXRlVUludDgpLG5bMjA1XT1oKDIwNSwyLHMucHJvdG90eXBlLndyaXRlVUludDE2QkUpLG5bMjA2XT1oKDIwNiw0LHMucHJvdG90eXBlLndyaXRlVUludDMyQkUpLG5bMjA3XT1oKDIwNyw4LGIpLG5bMjA4XT1oKDIwOCwxLHMucHJvdG90eXBlLndyaXRlSW50OCksblsyMDldPWgoMjA5LDIscy5wcm90b3R5cGUud3JpdGVJbnQxNkJFKSxuWzIxMF09aCgyMTAsNCxzLnByb3RvdHlwZS53cml0ZUludDMyQkUpLG5bMjExXT1oKDIxMSw4LHYpLG5bMjE3XT1oKDIxNywxLHMucHJvdG90eXBlLndyaXRlVUludDgpLG5bMjE4XT1oKDIxOCwyLHMucHJvdG90eXBlLndyaXRlVUludDE2QkUpLG5bMjE5XT1oKDIxOSw0LHMucHJvdG90eXBlLndyaXRlVUludDMyQkUpLG5bMjIwXT1oKDIyMCwyLHMucHJvdG90eXBlLndyaXRlVUludDE2QkUpLG5bMjIxXT1oKDIyMSw0LHMucHJvdG90eXBlLndyaXRlVUludDMyQkUpLG5bMjIyXT1oKDIyMiwyLHMucHJvdG90eXBlLndyaXRlVUludDE2QkUpLG5bMjIzXT1oKDIyMyw0LHMucHJvdG90eXBlLndyaXRlVUludDMyQkUpLG59KCk6ZCgpfX0sZnVuY3Rpb24obixlLHQpe2Uuc2V0RXh0VW5wYWNrZXJzPWZ1bmN0aW9uKG4pe24uYWRkRXh0VW5wYWNrZXIoMTQsW2MscyhFcnJvcildKSxuLmFkZEV4dFVucGFja2VyKDEsW2MscyhFdmFsRXJyb3IpXSksbi5hZGRFeHRVbnBhY2tlcigyLFtjLHMoUmFuZ2VFcnJvcildKSxuLmFkZEV4dFVucGFja2VyKDMsW2MscyhSZWZlcmVuY2VFcnJvcildKSxuLmFkZEV4dFVucGFja2VyKDQsW2MscyhTeW50YXhFcnJvcildKSxuLmFkZEV4dFVucGFja2VyKDUsW2MscyhUeXBlRXJyb3IpXSksbi5hZGRFeHRVbnBhY2tlcig2LFtjLHMoVVJJRXJyb3IpXSksbi5hZGRFeHRVbnBhY2tlcigxMCxbYyx1XSksbi5hZGRFeHRVbnBhY2tlcigxMSxbYyxhKEJvb2xlYW4pXSksbi5hZGRFeHRVbnBhY2tlcigxMixbYyxhKFN0cmluZyldKSxuLmFkZEV4dFVucGFja2VyKDEzLFtjLGEoRGF0ZSldKSxuLmFkZEV4dFVucGFja2VyKDE1LFtjLGEoTnVtYmVyKV0pLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5JiYobi5hZGRFeHRVbnBhY2tlcigxNyxhKEludDhBcnJheSkpLG4uYWRkRXh0VW5wYWNrZXIoMTgsYShVaW50OEFycmF5KSksbi5hZGRFeHRVbnBhY2tlcigxOSxbbSxhKEludDE2QXJyYXkpXSksbi5hZGRFeHRVbnBhY2tlcigyMCxbbSxhKFVpbnQxNkFycmF5KV0pLG4uYWRkRXh0VW5wYWNrZXIoMjEsW20sYShJbnQzMkFycmF5KV0pLG4uYWRkRXh0VW5wYWNrZXIoMjIsW20sYShVaW50MzJBcnJheSldKSxuLmFkZEV4dFVucGFja2VyKDIzLFttLGEoRmxvYXQzMkFycmF5KV0pLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBGbG9hdDY0QXJyYXkmJm4uYWRkRXh0VW5wYWNrZXIoMjQsW20sYShGbG9hdDY0QXJyYXkpXSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5JiZuLmFkZEV4dFVucGFja2VyKDI1LGEoVWludDhDbGFtcGVkQXJyYXkpKSxuLmFkZEV4dFVucGFja2VyKDI2LG0pLG4uYWRkRXh0VW5wYWNrZXIoMjksW20sYShEYXRhVmlldyldKSk7by5oYXNCdWZmZXImJm4uYWRkRXh0VW5wYWNrZXIoMjcsYShpKSl9O3ZhciBsLG89dCgxMCksaT1vLmdsb2JhbCxyPXtuYW1lOjEsbWVzc2FnZToxLHN0YWNrOjEsY29sdW1uTnVtYmVyOjEsZmlsZU5hbWU6MSxsaW5lTnVtYmVyOjF9O2Z1bmN0aW9uIGMobil7cmV0dXJuIGx8fChsPXQoMjYpLmRlY29kZSksbChuKX1mdW5jdGlvbiB1KG4pe3JldHVybiBSZWdFeHAuYXBwbHkobnVsbCxuKX1mdW5jdGlvbiBzKG4pe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1uZXcgbjtmb3IodmFyIGwgaW4gcil0W2xdPWVbbF07cmV0dXJuIHR9fWZ1bmN0aW9uIGEobil7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBuZXcgbihlKX19ZnVuY3Rpb24gbShuKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkobikuYnVmZmVyfX0sZnVuY3Rpb24obixlLHQpe3ZhciBsPXQoMjgpO2Z1bmN0aW9uIG8obil7dmFyIGUsdD1uZXcgQXJyYXkoMjU2KTtmb3IoZT0wO2U8PTEyNztlKyspdFtlXT1pKGUpO2ZvcihlPTEyODtlPD0xNDM7ZSsrKXRbZV09YyhlLTEyOCxuLm1hcCk7Zm9yKGU9MTQ0O2U8PTE1OTtlKyspdFtlXT1jKGUtMTQ0LG4uYXJyYXkpO2ZvcihlPTE2MDtlPD0xOTE7ZSsrKXRbZV09YyhlLTE2MCxuLnN0cik7Zm9yKHRbMTkyXT1pKG51bGwpLHRbMTkzXT1udWxsLHRbMTk0XT1pKCExKSx0WzE5NV09aSghMCksdFsxOTZdPXIobi51aW50OCxuLmJpbiksdFsxOTddPXIobi51aW50MTYsbi5iaW4pLHRbMTk4XT1yKG4udWludDMyLG4uYmluKSx0WzE5OV09cihuLnVpbnQ4LG4uZXh0KSx0WzIwMF09cihuLnVpbnQxNixuLmV4dCksdFsyMDFdPXIobi51aW50MzIsbi5leHQpLHRbMjAyXT1uLmZsb2F0MzIsdFsyMDNdPW4uZmxvYXQ2NCx0WzIwNF09bi51aW50OCx0WzIwNV09bi51aW50MTYsdFsyMDZdPW4udWludDMyLHRbMjA3XT1uLnVpbnQ2NCx0WzIwOF09bi5pbnQ4LHRbMjA5XT1uLmludDE2LHRbMjEwXT1uLmludDMyLHRbMjExXT1uLmludDY0LHRbMjEyXT1jKDEsbi5leHQpLHRbMjEzXT1jKDIsbi5leHQpLHRbMjE0XT1jKDQsbi5leHQpLHRbMjE1XT1jKDgsbi5leHQpLHRbMjE2XT1jKDE2LG4uZXh0KSx0WzIxN109cihuLnVpbnQ4LG4uc3RyKSx0WzIxOF09cihuLnVpbnQxNixuLnN0ciksdFsyMTldPXIobi51aW50MzIsbi5zdHIpLHRbMjIwXT1yKG4udWludDE2LG4uYXJyYXkpLHRbMjIxXT1yKG4udWludDMyLG4uYXJyYXkpLHRbMjIyXT1yKG4udWludDE2LG4ubWFwKSx0WzIyM109cihuLnVpbnQzMixuLm1hcCksZT0yMjQ7ZTw9MjU1O2UrKyl0W2VdPWkoZS0yNTYpO3JldHVybiB0fWZ1bmN0aW9uIGkobil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG59fWZ1bmN0aW9uIHIobixlKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGw9bih0KTtyZXR1cm4gZSh0LGwpfX1mdW5jdGlvbiBjKG4sZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlKHQsbil9fWUuZ2V0UmVhZFRva2VuPWZ1bmN0aW9uKG4pe3ZhciBlPWwuZ2V0UmVhZEZvcm1hdChuKTtyZXR1cm4gbiYmbi51c2VyYXc/ZnVuY3Rpb24obil7dmFyIGUsdD1vKG4pLnNsaWNlKCk7Zm9yKHRbMjE3XT10WzE5Nl0sdFsyMThdPXRbMTk3XSx0WzIxOV09dFsxOThdLGU9MTYwO2U8PTE5MTtlKyspdFtlXT1jKGUtMTYwLG4uYmluKTtyZXR1cm4gdH0oZSk6byhlKX19LGZ1bmN0aW9uKG4sZSx0KXt2YXIgbD10KDI5KSxvPXQoMjIpLkVuY29kZUJ1ZmZlcjtmdW5jdGlvbiBpKG4pe2lmKCEodGhpcyBpbnN0YW5jZW9mIGkpKXJldHVybiBuZXcgaShuKTtvLmNhbGwodGhpcyxuKX1pLnByb3RvdHlwZT1uZXcgbyxsLm1peGluKGkucHJvdG90eXBlKSxpLnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24obil7dGhpcy53cml0ZShuKSx0aGlzLmVtaXQoXCJkYXRhXCIsdGhpcy5yZWFkKCkpfSxpLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24obil7YXJndW1lbnRzLmxlbmd0aCYmdGhpcy5lbmNvZGUobiksdGhpcy5mbHVzaCgpLHRoaXMuZW1pdChcImVuZFwiKX19LGZ1bmN0aW9uKG4sZSx0KXt2YXIgbD10KDI5KSxvPXQoMjcpLkRlY29kZUJ1ZmZlcjtmdW5jdGlvbiBpKG4pe2lmKCEodGhpcyBpbnN0YW5jZW9mIGkpKXJldHVybiBuZXcgaShuKTtvLmNhbGwodGhpcyxuKX1pLnByb3RvdHlwZT1uZXcgbyxsLm1peGluKGkucHJvdG90eXBlKSxpLnByb3RvdHlwZS5kZWNvZGU9ZnVuY3Rpb24obil7YXJndW1lbnRzLmxlbmd0aCYmdGhpcy53cml0ZShuKSx0aGlzLmZsdXNoKCl9LGkucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24obil7dGhpcy5lbWl0KFwiZGF0YVwiLG4pfSxpLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24obil7dGhpcy5kZWNvZGUobiksdGhpcy5lbWl0KFwiZW5kXCIpfX0sZnVuY3Rpb24obixlLHQpe3QoMjApLHQoMTUpLHQoMTMpLmNyZWF0ZUNvZGVjfSxmdW5jdGlvbihuLGUsdCl7dCgyMCksdCgxNSksdCgxMykucHJlc2V0fSxmdW5jdGlvbihuLGUsdCl7XCJ1c2Ugc3RyaWN0XCI7dC5yKGUpO3ZhciBsPXQoMCksbz10Lm4obCksaT10KDEpLHI9dC5uKGkpLGM9dCgyKSx1PXQubihjKSxzPXQoMyksYT10Lm4ocyksbT10KDQpLGQ9dC5uKG0pLGY9dCg4KSxwPXQubihmKSx5PXQoNiksaD10Lm4oeSksYj10KDUpLHY9dC5uKGIpLGc9dCg3KSx3PXQubihnKSx4PWZ1bmN0aW9uKCl7dmFyIG49XCIvVXNlcnMvanVuL1Byb2plY3RKYXZhU2NyaXB0L2Nhc2NhZGUvc3JjL3N1aXRlLmpzXCIsZT1cIjk3OTA3MWUwY2JlZWJmMWJiODg4ZWQ1MjUyMzhjMWZiYmY5ZTZhZmVcIix0PW5ldygwLGZ1bmN0aW9uKCl7fS5jb25zdHJ1Y3RvcikoXCJyZXR1cm4gdGhpc1wiKSgpLGw9XCJfX2NvdmVyYWdlX19cIixvPXtwYXRoOlwiL1VzZXJzL2p1bi9Qcm9qZWN0SmF2YVNjcmlwdC9jYXNjYWRlL3NyYy9zdWl0ZS5qc1wiLHN0YXRlbWVudE1hcDp7MDp7c3RhcnQ6e2xpbmU6Nyxjb2x1bW46NH0sZW5kOntsaW5lOjksY29sdW1uOjV9fSwxOntzdGFydDp7bGluZTo4LGNvbHVtbjo2fSxlbmQ6e2xpbmU6OCxjb2x1bW46Njh9fSwyOntzdGFydDp7bGluZToxMCxjb2x1bW46NH0sZW5kOntsaW5lOjE5LGNvbHVtbjo1fX0sMzp7c3RhcnQ6e2xpbmU6MTgsY29sdW1uOjZ9LGVuZDp7bGluZToxOCxjb2x1bW46NTJ9fX0sZm5NYXA6ezA6e25hbWU6XCIoYW5vbnltb3VzXzApXCIsZGVjbDp7c3RhcnQ6e2xpbmU6Nixjb2x1bW46Mn0sZW5kOntsaW5lOjYsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjYsY29sdW1uOjE2fSxlbmQ6e2xpbmU6MjAsY29sdW1uOjN9fSxsaW5lOjZ9fSxicmFuY2hNYXA6ezA6e2xvYzp7c3RhcnQ6e2xpbmU6Nyxjb2x1bW46NH0sZW5kOntsaW5lOjksY29sdW1uOjV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6OSxjb2x1bW46NX19LHtzdGFydDp7bGluZTo3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6OSxjb2x1bW46NX19XSxsaW5lOjd9LDE6e2xvYzp7c3RhcnQ6e2xpbmU6MTAsY29sdW1uOjR9LGVuZDp7bGluZToxOSxjb2x1bW46NX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjEwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTksY29sdW1uOjV9fSx7c3RhcnQ6e2xpbmU6MTAsY29sdW1uOjR9LGVuZDp7bGluZToxOSxjb2x1bW46NX19XSxsaW5lOjEwfSwyOntsb2M6e3N0YXJ0OntsaW5lOjExLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTYsY29sdW1uOjQ2fX0sdHlwZTpcImJpbmFyeS1leHByXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTEsY29sdW1uOjZ9LGVuZDp7bGluZToxMSxjb2x1bW46NDh9fSx7c3RhcnQ6e2xpbmU6MTIsY29sdW1uOjZ9LGVuZDp7bGluZToxMixjb2x1bW46NDR9fSx7c3RhcnQ6e2xpbmU6MTMsY29sdW1uOjZ9LGVuZDp7bGluZToxMyxjb2x1bW46NDR9fSx7c3RhcnQ6e2xpbmU6MTQsY29sdW1uOjZ9LGVuZDp7bGluZToxNCxjb2x1bW46NDF9fSx7c3RhcnQ6e2xpbmU6MTUsY29sdW1uOjZ9LGVuZDp7bGluZToxNSxjb2x1bW46NDN9fSx7c3RhcnQ6e2xpbmU6MTYsY29sdW1uOjZ9LGVuZDp7bGluZToxNixjb2x1bW46NDZ9fV0sbGluZToxMX19LHM6ezA6MCwxOjAsMjowLDM6MH0sZjp7MDowfSxiOnswOlswLDBdLDE6WzAsMF0sMjpbMCwwLDAsMCwwLDBdfSxfY292ZXJhZ2VTY2hlbWE6XCI0M2UyN2UxMzhlYmY5Y2ZjNTk2NmIwODJjZjlhMDI4MzAyZWQ0MTg0XCJ9LGk9dFtsXXx8KHRbbF09e30pO3JldHVybiBpW25dJiZpW25dLmhhc2g9PT1lP2lbbl06KG8uaGFzaD1lLGlbbl09byl9KCksaz1mdW5jdGlvbiBuKCl7aWYodSgpKHRoaXMsbikseC5mWzBdKysseC5zWzBdKyssKHRoaXMgaW5zdGFuY2VvZiBuP3RoaXMuY29uc3RydWN0b3I6dm9pZCAwKT09PW4pdGhyb3cgeC5iWzBdWzBdKysseC5zWzFdKyssbmV3IFR5cGVFcnJvcihcIlN1aXRlQ2xhc3NDYW5ub3RCZUluc3RhbnRpYXRlZERpcmVjdGx5XCIpO2lmKHguYlswXVsxXSsrLHguc1syXSsrLHguYlsyXVswXSsrLHZvaWQgMD09PXRoaXMuY29uc3RydWN0b3IuZ2VuZXJhdGVLZXl8fCh4LmJbMl1bMV0rKyx2b2lkIDA9PT10aGlzLmNvbnN0cnVjdG9yLmVuY3J5cHQpfHwoeC5iWzJdWzJdKyssdm9pZCAwPT09dGhpcy5jb25zdHJ1Y3Rvci5kZWNyeXB0KXx8KHguYlsyXVszXSsrLHZvaWQgMD09PXRoaXMuY29uc3RydWN0b3Iuc2lnbil8fCh4LmJbMl1bNF0rKyx2b2lkIDA9PT10aGlzLmNvbnN0cnVjdG9yLnZlcmlmeSl8fCh4LmJbMl1bNV0rKyx2b2lkIDA9PT10aGlzLmNvbnN0cnVjdG9yLmltcG9ydEtleSkpdGhyb3cgeC5iWzFdWzBdKysseC5zWzNdKyssbmV3IFR5cGVFcnJvcihcIk11c3RPdmVycmlkZUFsbE1ldGhvZHNcIik7eC5iWzFdWzFdKyt9LF89KGZ1bmN0aW9uKCl7dmFyIG49XCIvVXNlcnMvanVuL1Byb2plY3RKYXZhU2NyaXB0L2Nhc2NhZGUvc3JjL3BhcmFtcy5qc1wiLGU9XCJjNTI1Mjc2MGM3NDBjZTY3MWI1ZDg4ZGMyZThjMTk5ZDRkNmMyZDYwXCIsdD1uZXcoMCxmdW5jdGlvbigpe30uY29uc3RydWN0b3IpKFwicmV0dXJuIHRoaXNcIikoKSxsPVwiX19jb3ZlcmFnZV9fXCIsbz17cGF0aDpcIi9Vc2Vycy9qdW4vUHJvamVjdEphdmFTY3JpcHQvY2FzY2FkZS9zcmMvcGFyYW1zLmpzXCIsc3RhdGVtZW50TWFwOnt9LGZuTWFwOnt9LGJyYW5jaE1hcDp7fSxzOnt9LGY6e30sYjp7fSxfY292ZXJhZ2VTY2hlbWE6XCI0M2UyN2UxMzhlYmY5Y2ZjNTk2NmIwODJjZjlhMDI4MzAyZWQ0MTg0XCJ9LGk9dFtsXXx8KHRbbF09e30pO2lbbl0mJmlbbl0uaGFzaD09PWU/aVtuXTooby5oYXNoPWUsaVtuXT1vKX0oKSx7cHVibGljS2V5SWRMRU46MzIscHVibGljS2V5SWRIYXNoOlwiU0hBLTI1NlwiLHNlc3Npb25LZXlJZExlbmd0aDozMixzZXNzaW9uS2V5SWRIYXNoOlwiU0hBLTI1NlwiLGpzY3U6e2l2TGVuZ3RoQWVzR2NtOjEyfSxvcGVucGdwOntkZWZhdWx0VXNlcjpcIjxleGFtcGxlQGV4YW1wbGUuY29tPlwiLHdvcmtlclBhdGhXZWI6XCIuL29wZW5wZ3Aud29ya2VyLm1pbi5qc1wiLHdvcmtlclBhdGhOb2RlOlwiLi4vbm9kZV9tb2R1bGVzL29wZW5wZ3AvZGlzdC9vcGVucGdwLndvcmtlci5taW4uanNcIixjdXJ2ZUxpc3Q6e1wiUC0yNTZcIjp7bmFtZTpcInAyNTZcIn0sXCJQLTM4NFwiOntuYW1lOlwicDM4NFwifSxcIlAtNTIxXCI6e25hbWU6XCJwNTIxXCJ9fX19KSxFPWZ1bmN0aW9uKCl7dmFyIG49XCIvVXNlcnMvanVuL1Byb2plY3RKYXZhU2NyaXB0L2Nhc2NhZGUvc3JjL3V0aWwuanNcIixlPVwiYmM1ZDhjMzZhYzU5MWYwNTBlYTAzMTU0OWU2ZTg3ZGFkNDc1ZmNmM1wiLHQ9bmV3KDAsZnVuY3Rpb24oKXt9LmNvbnN0cnVjdG9yKShcInJldHVybiB0aGlzXCIpKCksbD1cIl9fY292ZXJhZ2VfX1wiLG89e3BhdGg6XCIvVXNlcnMvanVuL1Byb2plY3RKYXZhU2NyaXB0L2Nhc2NhZGUvc3JjL3V0aWwuanNcIixzdGF0ZW1lbnRNYXA6ezA6e3N0YXJ0OntsaW5lOjksY29sdW1uOjJ9LGVuZDp7bGluZToxOCxjb2x1bW46M319LDE6e3N0YXJ0OntsaW5lOjEwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTAsY29sdW1uOjIzfX0sMjp7c3RhcnQ6e2xpbmU6MTMsY29sdW1uOjR9LGVuZDp7bGluZToxNyxjb2x1bW46NX19LDM6e3N0YXJ0OntsaW5lOjE0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTQsY29sdW1uOjQwfX0sNDp7c3RhcnQ6e2xpbmU6MTYsY29sdW1uOjZ9LGVuZDp7bGluZToxNixjb2x1bW46NTZ9fSw1OntzdGFydDp7bGluZToxOSxjb2x1bW46Mn0sZW5kOntsaW5lOjE5LGNvbHVtbjoxNH19LDY6e3N0YXJ0OntsaW5lOjI2LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzUsY29sdW1uOjN9fSw3OntzdGFydDp7bGluZToyNyxjb2x1bW46NH0sZW5kOntsaW5lOjI3LGNvbHVtbjoyOX19LDg6e3N0YXJ0OntsaW5lOjI4LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjgsY29sdW1uOjQ2fX0sOTp7c3RhcnQ6e2xpbmU6MzEsY29sdW1uOjR9LGVuZDp7bGluZTozMSxjb2x1bW46MzN9fSwxMDp7c3RhcnQ6e2xpbmU6MzIsY29sdW1uOjR9LGVuZDp7bGluZTozMixjb2x1bW46NDd9fSwxMTp7c3RhcnQ6e2xpbmU6MzgsY29sdW1uOjJ9LGVuZDp7bGluZTo0Mixjb2x1bW46M319LDEyOntzdGFydDp7bGluZTozOSxjb2x1bW46NH0sZW5kOntsaW5lOjM5LGNvbHVtbjo0M319LDEzOntzdGFydDp7bGluZTo0MSxjb2x1bW46NH0sZW5kOntsaW5lOjQxLGNvbHVtbjoyOX19LDE0OntzdGFydDp7bGluZTo0Myxjb2x1bW46Mn0sZW5kOntsaW5lOjQzLGNvbHVtbjozN319LDE1OntzdGFydDp7bGluZTo0NCxjb2x1bW46Mn0sZW5kOntsaW5lOjQ0LGNvbHVtbjo1Mn19LDE2OntzdGFydDp7bGluZTo0NSxjb2x1bW46Mn0sZW5kOntsaW5lOjQ1LGNvbHVtbjo2N319LDE3OntzdGFydDp7bGluZTo0Nixjb2x1bW46Mn0sZW5kOntsaW5lOjQ2LGNvbHVtbjo2OH19LDE4OntzdGFydDp7bGluZTo0Nyxjb2x1bW46Mn0sZW5kOntsaW5lOjQ3LGNvbHVtbjo2Mn19LDE5OntzdGFydDp7bGluZTo0OCxjb2x1bW46Mn0sZW5kOntsaW5lOjQ4LGNvbHVtbjo0Mn19LDIwOntzdGFydDp7bGluZTo0OSxjb2x1bW46Mn0sZW5kOntsaW5lOjQ5LGNvbHVtbjozN319LDIxOntzdGFydDp7bGluZTo1MCxjb2x1bW46Mn0sZW5kOntsaW5lOjUwLGNvbHVtbjozOH19LDIyOntzdGFydDp7bGluZTo1MSxjb2x1bW46Mn0sZW5kOntsaW5lOjUxLGNvbHVtbjozOH19LDIzOntzdGFydDp7bGluZTo1Myxjb2x1bW46Mn0sZW5kOntsaW5lOjUzLGNvbHVtbjoxN319fSxmbk1hcDp7MDp7bmFtZTpcImdldEpzY3VcIixkZWNsOntzdGFydDp7bGluZTo3LGNvbHVtbjoxNn0sZW5kOntsaW5lOjcsY29sdW1uOjIzfX0sbG9jOntzdGFydDp7bGluZTo3LGNvbHVtbjoyNn0sZW5kOntsaW5lOjIwLGNvbHVtbjoxfX0sbGluZTo3fSwxOntuYW1lOlwiZ2V0T3BlblBncFwiLGRlY2w6e3N0YXJ0OntsaW5lOjIyLGNvbHVtbjoxNn0sZW5kOntsaW5lOjIyLGNvbHVtbjoyNn19LGxvYzp7c3RhcnQ6e2xpbmU6MjIsY29sdW1uOjI4fSxlbmQ6e2xpbmU6NTQsY29sdW1uOjF9fSxsaW5lOjIyfX0sYnJhbmNoTWFwOnswOntsb2M6e3N0YXJ0OntsaW5lOjksY29sdW1uOjJ9LGVuZDp7bGluZToxOCxjb2x1bW46M319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjksY29sdW1uOjJ9LGVuZDp7bGluZToxOCxjb2x1bW46M319LHtzdGFydDp7bGluZTo5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTgsY29sdW1uOjN9fV0sbGluZTo5fSwxOntsb2M6e3N0YXJ0OntsaW5lOjksY29sdW1uOjZ9LGVuZDp7bGluZTo5LGNvbHVtbjo3M319LHR5cGU6XCJiaW5hcnktZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjksY29sdW1uOjZ9LGVuZDp7bGluZTo5LGNvbHVtbjozNX19LHtzdGFydDp7bGluZTo5LGNvbHVtbjozOX0sZW5kOntsaW5lOjksY29sdW1uOjczfX1dLGxpbmU6OX0sMjp7bG9jOntzdGFydDp7bGluZToyNixjb2x1bW46Mn0sZW5kOntsaW5lOjM1LGNvbHVtbjozfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjYsY29sdW1uOjJ9LGVuZDp7bGluZTozNSxjb2x1bW46M319LHtzdGFydDp7bGluZToyNixjb2x1bW46Mn0sZW5kOntsaW5lOjM1LGNvbHVtbjozfX1dLGxpbmU6MjZ9LDM6e2xvYzp7c3RhcnQ6e2xpbmU6MjYsY29sdW1uOjV9LGVuZDp7bGluZToyNixjb2x1bW46NzV9fSx0eXBlOlwiYmluYXJ5LWV4cHJcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyNixjb2x1bW46NX0sZW5kOntsaW5lOjI2LGNvbHVtbjozNH19LHtzdGFydDp7bGluZToyNixjb2x1bW46Mzh9LGVuZDp7bGluZToyNixjb2x1bW46NzV9fV0sbGluZToyNn19LHM6ezA6MCwxOjAsMjowLDM6MCw0OjAsNTowLDY6MCw3OjAsODowLDk6MCwxMDowLDExOjAsMTI6MCwxMzowLDE0OjAsMTU6MCwxNjowLDE3OjAsMTg6MCwxOTowLDIwOjAsMjE6MCwyMjowLDIzOjB9LGY6ezA6MCwxOjB9LGI6ezA6WzAsMF0sMTpbMCwwXSwyOlswLDBdLDM6WzAsMF19LF9jb3ZlcmFnZVNjaGVtYTpcIjQzZTI3ZTEzOGViZjljZmM1OTY2YjA4MmNmOWEwMjgzMDJlZDQxODRcIn0saT10W2xdfHwodFtsXT17fSk7cmV0dXJuIGlbbl0mJmlbbl0uaGFzaD09PWU/aVtuXTooby5oYXNoPWUsaVtuXT1vKX0oKTtmdW5jdGlvbiBqKCl7dmFyIG47aWYoRS5mWzBdKyssRS5zWzBdKyssRS5iWzFdWzBdKyssXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKEUuYlsxXVsxXSsrLHZvaWQgMCE9PXdpbmRvdy5qc2N1KSlFLmJbMF1bMF0rKyxFLnNbMV0rKyxuPXdpbmRvdy5qc2N1O2Vsc2V7RS5iWzBdWzFdKyssRS5zWzJdKys7dHJ5e0Uuc1szXSsrLG49dCg0MCl9Y2F0Y2gobil7dGhyb3cgRS5zWzRdKyssbmV3IEVycm9yKFwiRmFpbGVkVG9Mb2FkSlNDVTogXCIuY29uY2F0KG4ubWVzc2FnZSkpfX1yZXR1cm4gRS5zWzVdKyssbn1mdW5jdGlvbiBBKCl7dmFyIG4sZTtFLmZbMV0rKyxFLnNbNl0rKyxFLmJbM11bMF0rKyxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYoRS5iWzNdWzFdKyssdm9pZCAwIT09d2luZG93Lm9wZW5wZ3ApPyhFLmJbMl1bMF0rKyxFLnNbN10rKyxuPXdpbmRvdy5vcGVucGdwLEUuc1s4XSsrLGU9Xy5vcGVucGdwLndvcmtlclBhdGhXZWIpOihFLmJbMl1bMV0rKyxFLnNbOV0rKyxuPXQoNDEpLEUuc1sxMF0rKyxlPV8ub3BlbnBncC53b3JrZXJQYXRoTm9kZSksRS5zWzExXSsrO3RyeXtFLnNbMTJdKyssbi5pbml0V29ya2VyKHtwYXRoOmV9KX1jYXRjaChuKXtFLnNbMTNdKyssY29uc29sZS5lcnJvcihuLm1lc3NhZ2UpfXJldHVybiBFLnNbMTRdKyssbi5jb25maWcuYWVhZF9wcm90ZWN0PSEwLEUuc1sxNV0rKyxuLmNvbmZpZy5hZWFkX21vZGU9bi5lbnVtcy5hZWFkLmVheCxFLnNbMTZdKyssbi5jb25maWcucHJlZmVyX2hhc2hfYWxnb3JpdGhtPW4uZW51bXMuaGFzaC5zaGE1MTIsRS5zWzE3XSsrLG4uY29uZmlnLmVuY3J5cHRpb25fY2lwaGVyPW4uZW51bXMuc3ltbWV0cmljLmFlczI1NixFLnNbMThdKyssbi5jb25maWcuY29tcHJlc3Npb249bi5lbnVtcy5jb21wcmVzc2lvbi56bGliLEUuc1sxOV0rKyxuLmNvbmZpZy5pbnRlZ3JpdHlfcHJvdGVjdD0hMCxFLnNbMjBdKyssbi5jb25maWcucnNhX2JsaW5kaW5nPSEwLEUuc1syMV0rKyxuLmNvbmZpZy5zaG93X3ZlcnNpb249ITEsRS5zWzIyXSsrLG4uY29uZmlnLnNob3dfY29tbWVudD0hMSxFLnNbMjNdKyssbn12YXIgSz10KDkpLFM9dC5uKEspLFU9dCgxMSksUD10Lm4oVSksST1mdW5jdGlvbigpe3ZhciBuPVwiL1VzZXJzL2p1bi9Qcm9qZWN0SmF2YVNjcmlwdC9jYXNjYWRlL3NyYy9rZXlpZC5qc1wiLGU9XCIyMDdlZWM1MzdiOTQ3ZDU5MmJmMTNkYWJjNTU3NzdkNmJmZTM5ZWRiXCIsdD1uZXcoMCxmdW5jdGlvbigpe30uY29uc3RydWN0b3IpKFwicmV0dXJuIHRoaXNcIikoKSxsPVwiX19jb3ZlcmFnZV9fXCIsbz17cGF0aDpcIi9Vc2Vycy9qdW4vUHJvamVjdEphdmFTY3JpcHQvY2FzY2FkZS9zcmMva2V5aWQuanNcIixzdGF0ZW1lbnRNYXA6ezA6e3N0YXJ0OntsaW5lOjE3LGNvbHVtbjoxM30sZW5kOntsaW5lOjE3LGNvbHVtbjozOX19LDE6e3N0YXJ0OntsaW5lOjE4LGNvbHVtbjoxNH0sZW5kOntsaW5lOjE4LGNvbHVtbjo1M319LDI6e3N0YXJ0OntsaW5lOjE5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTksY29sdW1uOjQwfX0sMzp7c3RhcnQ6e2xpbmU6MzEsY29sdW1uOjI0fSxlbmQ6e2xpbmU6MzEsY29sdW1uOjkwfX0sNDp7c3RhcnQ6e2xpbmU6MzIsY29sdW1uOjJ9LGVuZDp7bGluZTozMixjb2x1bW46NTB9fSw1OntzdGFydDp7bGluZTo0Mixjb2x1bW46MTV9LGVuZDp7bGluZTo0Mixjb2x1bW46MjR9fSw2OntzdGFydDp7bGluZTo0Myxjb2x1bW46MTd9LGVuZDp7bGluZTo0Myxjb2x1bW46NzB9fSw3OntzdGFydDp7bGluZTo0NCxjb2x1bW46Mn0sZW5kOntsaW5lOjQ0LGNvbHVtbjo0M319LDg6e3N0YXJ0OntsaW5lOjQ5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NDksY29sdW1uOjc1fX0sOTp7c3RhcnQ6e2xpbmU6NDksY29sdW1uOjM3fSxlbmQ6e2xpbmU6NDksY29sdW1uOjc1fX0sMTA6e3N0YXJ0OntsaW5lOjUwLGNvbHVtbjoyMX0sZW5kOntsaW5lOjUwLGNvbHVtbjozN319LDExOntzdGFydDp7bGluZTo1MSxjb2x1bW46Mn0sZW5kOntsaW5lOjUxLGNvbHVtbjozMX19LDEyOntzdGFydDp7bGluZTo1Nyxjb2x1bW46NH0sZW5kOntsaW5lOjU3LGNvbHVtbjoxN319LDEzOntzdGFydDp7bGluZTo2MCxjb2x1bW46MTJ9LGVuZDp7bGluZTo2MCxjb2x1bW46NjF9fSwxNDp7c3RhcnQ6e2xpbmU6NjIsY29sdW1uOjE2fSxlbmQ6e2xpbmU6NjIsY29sdW1uOjM2fX0sMTU6e3N0YXJ0OntsaW5lOjYzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NjMsY29sdW1uOjI2fX0sMTY6e3N0YXJ0OntsaW5lOjcwLGNvbHVtbjoxNH0sZW5kOntsaW5lOjcwLGNvbHVtbjoyOX19LDE3OntzdGFydDp7bGluZTo3MSxjb2x1bW46Mn0sZW5kOntsaW5lOjcxLGNvbHVtbjoyMH19LDE4OntzdGFydDp7bGluZTo3Mixjb2x1bW46Mn0sZW5kOntsaW5lOjcyLGNvbHVtbjoxM319LDE5OntzdGFydDp7bGluZTo3Nyxjb2x1bW46NH0sZW5kOntsaW5lOjc3LGNvbHVtbjo3Mn19LDIwOntzdGFydDp7bGluZTo3Nyxjb2x1bW46MzZ9LGVuZDp7bGluZTo3Nyxjb2x1bW46NzJ9fSwyMTp7c3RhcnQ6e2xpbmU6NzgsY29sdW1uOjI1fSxlbmQ6e2xpbmU6ODEsY29sdW1uOjZ9fSwyMjp7c3RhcnQ6e2xpbmU6NzksY29sdW1uOjZ9LGVuZDp7bGluZTo3OSxjb2x1bW46NjB9fSwyMzp7c3RhcnQ6e2xpbmU6NzksY29sdW1uOjMyfSxlbmQ6e2xpbmU6NzksY29sdW1uOjYwfX0sMjQ6e3N0YXJ0OntsaW5lOjgwLGNvbHVtbjo2fSxlbmQ6e2xpbmU6ODAsY29sdW1uOjE1fX0sMjU6e3N0YXJ0OntsaW5lOjgyLGNvbHVtbjo0fSxlbmQ6e2xpbmU6ODIsY29sdW1uOjMxfX0sMjY6e3N0YXJ0OntsaW5lOjg0LGNvbHVtbjoxNX0sZW5kOntsaW5lOjg0LGNvbHVtbjo1N319LDI3OntzdGFydDp7bGluZTo4NCxjb2x1bW46NDF9LGVuZDp7bGluZTo4NCxjb2x1bW46NTV9fSwyODp7c3RhcnQ6e2xpbmU6ODUsY29sdW1uOjE0fSxlbmQ6e2xpbmU6ODUsY29sdW1uOjM4fX0sMjk6e3N0YXJ0OntsaW5lOjg3LGNvbHVtbjoxOH0sZW5kOntsaW5lOjg3LGNvbHVtbjo1NH19fSxmbk1hcDp7MDp7bmFtZTpcImZyb21PcGVuUGdwS2V5XCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTYsY29sdW1uOjE2fSxlbmQ6e2xpbmU6MTYsY29sdW1uOjMwfX0sbG9jOntzdGFydDp7bGluZToxNixjb2x1bW46Njh9LGVuZDp7bGluZToyMCxjb2x1bW46MX19LGxpbmU6MTZ9LDE6e25hbWU6XCJmcm9tSnNjdUtleVwiLGRlY2w6e3N0YXJ0OntsaW5lOjMwLGNvbHVtbjoyMn0sZW5kOntsaW5lOjMwLGNvbHVtbjozM319LGxvYzp7c3RhcnQ6e2xpbmU6MzAsY29sdW1uOjcyfSxlbmQ6e2xpbmU6MzMsY29sdW1uOjF9fSxsaW5lOjMwfSwyOntuYW1lOlwiZnJvbVJhd0tleVwiLGRlY2w6e3N0YXJ0OntsaW5lOjQxLGNvbHVtbjoyMn0sZW5kOntsaW5lOjQxLGNvbHVtbjozMn19LGxvYzp7c3RhcnQ6e2xpbmU6NDEsY29sdW1uOjcxfSxlbmQ6e2xpbmU6NDUsY29sdW1uOjF9fSxsaW5lOjQxfSwzOntuYW1lOlwiY3JlYXRlS2V5SWRcIixkZWNsOntzdGFydDp7bGluZTo0OCxjb2x1bW46MTZ9LGVuZDp7bGluZTo0OCxjb2x1bW46Mjd9fSxsb2M6e3N0YXJ0OntsaW5lOjQ4LGNvbHVtbjozNH0sZW5kOntsaW5lOjUyLGNvbHVtbjoxfX0sbGluZTo0OH0sNDp7bmFtZTpcIihhbm9ueW1vdXNfNClcIixkZWNsOntzdGFydDp7bGluZTo1Nixjb2x1bW46Mn0sZW5kOntsaW5lOjU2LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo1Nixjb2x1bW46MjB9LGVuZDp7bGluZTo1OCxjb2x1bW46M319LGxpbmU6NTZ9LDU6e25hbWU6XCIoYW5vbnltb3VzXzUpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NjAsY29sdW1uOjJ9LGVuZDp7bGluZTo2MCxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6NjAsY29sdW1uOjEwfSxlbmQ6e2xpbmU6NjAsY29sdW1uOjYzfX0sbGluZTo2MH0sNjp7bmFtZTpcIihhbm9ueW1vdXNfNilcIixkZWNsOntzdGFydDp7bGluZTo2MSxjb2x1bW46Mn0sZW5kOntsaW5lOjYxLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo2MSxjb2x1bW46MTN9LGVuZDp7bGluZTo2NCxjb2x1bW46M319LGxpbmU6NjF9LDc6e25hbWU6XCJjcmVhdGVLZXlJZExpc3RcIixkZWNsOntzdGFydDp7bGluZTo2OSxjb2x1bW46MTZ9LGVuZDp7bGluZTo2OSxjb2x1bW46MzF9fSxsb2M6e3N0YXJ0OntsaW5lOjY5LGNvbHVtbjo0MX0sZW5kOntsaW5lOjczLGNvbHVtbjoxfX0sbGluZTo2OX0sODp7bmFtZTpcIihhbm9ueW1vdXNfOClcIixkZWNsOntzdGFydDp7bGluZTo3Nixjb2x1bW46Mn0sZW5kOntsaW5lOjc2LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo3Nixjb2x1bW46MTV9LGVuZDp7bGluZTo4Myxjb2x1bW46M319LGxpbmU6NzZ9LDk6e25hbWU6XCIoYW5vbnltb3VzXzkpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NzgsY29sdW1uOjM3fSxlbmQ6e2xpbmU6NzgsY29sdW1uOjM4fX0sbG9jOntzdGFydDp7bGluZTo3OCxjb2x1bW46NDR9LGVuZDp7bGluZTo4MSxjb2x1bW46NX19LGxpbmU6Nzh9LDEwOntuYW1lOlwiKGFub255bW91c18xMClcIixkZWNsOntzdGFydDp7bGluZTo4NCxjb2x1bW46Mn0sZW5kOntsaW5lOjg0LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo4NCxjb2x1bW46MTN9LGVuZDp7bGluZTo4NCxjb2x1bW46NTl9fSxsaW5lOjg0fSwxMTp7bmFtZTpcIihhbm9ueW1vdXNfMTEpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6ODQsY29sdW1uOjMyfSxlbmQ6e2xpbmU6ODQsY29sdW1uOjMzfX0sbG9jOntzdGFydDp7bGluZTo4NCxjb2x1bW46NDF9LGVuZDp7bGluZTo4NCxjb2x1bW46NTV9fSxsaW5lOjg0fSwxMjp7bmFtZTpcIihhbm9ueW1vdXNfMTIpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6ODUsY29sdW1uOjJ9LGVuZDp7bGluZTo4NSxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6ODUsY29sdW1uOjEyfSxlbmQ6e2xpbmU6ODUsY29sdW1uOjQwfX0sbGluZTo4NX0sMTM6e25hbWU6XCIoYW5vbnltb3VzXzEzKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjg3LGNvbHVtbjoyfSxlbmQ6e2xpbmU6ODcsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjg3LGNvbHVtbjoxNn0sZW5kOntsaW5lOjg3LGNvbHVtbjo1Nn19LGxpbmU6ODd9fSxicmFuY2hNYXA6ezA6e2xvYzp7c3RhcnQ6e2xpbmU6MTYsY29sdW1uOjQyfSxlbmQ6e2xpbmU6MTYsY29sdW1uOjY3fX0sdHlwZTpcImRlZmF1bHQtYXJnXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTYsY29sdW1uOjQ2fSxlbmQ6e2xpbmU6MTYsY29sdW1uOjY3fX1dLGxpbmU6MTZ9LDE6e2xvYzp7c3RhcnQ6e2xpbmU6MzAsY29sdW1uOjQ1fSxlbmQ6e2xpbmU6MzAsY29sdW1uOjcwfX0sdHlwZTpcImRlZmF1bHQtYXJnXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MzAsY29sdW1uOjQ5fSxlbmQ6e2xpbmU6MzAsY29sdW1uOjcwfX1dLGxpbmU6MzB9LDI6e2xvYzp7c3RhcnQ6e2xpbmU6NDEsY29sdW1uOjM4fSxlbmQ6e2xpbmU6NDEsY29sdW1uOjY5fX0sdHlwZTpcImRlZmF1bHQtYXJnXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NDEsY29sdW1uOjQ0fSxlbmQ6e2xpbmU6NDEsY29sdW1uOjY5fX1dLGxpbmU6NDF9LDM6e2xvYzp7c3RhcnQ6e2xpbmU6NDksY29sdW1uOjJ9LGVuZDp7bGluZTo0OSxjb2x1bW46NzV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo0OSxjb2x1bW46Mn0sZW5kOntsaW5lOjQ5LGNvbHVtbjo3NX19LHtzdGFydDp7bGluZTo0OSxjb2x1bW46Mn0sZW5kOntsaW5lOjQ5LGNvbHVtbjo3NX19XSxsaW5lOjQ5fSw0Ontsb2M6e3N0YXJ0OntsaW5lOjc3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NzcsY29sdW1uOjcyfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NzcsY29sdW1uOjR9LGVuZDp7bGluZTo3Nyxjb2x1bW46NzJ9fSx7c3RhcnQ6e2xpbmU6NzcsY29sdW1uOjR9LGVuZDp7bGluZTo3Nyxjb2x1bW46NzJ9fV0sbGluZTo3N30sNTp7bG9jOntzdGFydDp7bGluZTo3OSxjb2x1bW46Nn0sZW5kOntsaW5lOjc5LGNvbHVtbjo2MH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjc5LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NzksY29sdW1uOjYwfX0se3N0YXJ0OntsaW5lOjc5LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NzksY29sdW1uOjYwfX1dLGxpbmU6Nzl9fSxzOnswOjAsMTowLDI6MCwzOjAsNDowLDU6MCw2OjAsNzowLDg6MCw5OjAsMTA6MCwxMTowLDEyOjAsMTM6MCwxNDowLDE1OjAsMTY6MCwxNzowLDE4OjAsMTk6MCwyMDowLDIxOjAsMjI6MCwyMzowLDI0OjAsMjU6MCwyNjowLDI3OjAsMjg6MCwyOTowfSxmOnswOjAsMTowLDI6MCwzOjAsNDowLDU6MCw2OjAsNzowLDg6MCw5OjAsMTA6MCwxMTowLDEyOjAsMTM6MH0sYjp7MDpbMF0sMTpbMF0sMjpbMF0sMzpbMCwwXSw0OlswLDBdLDU6WzAsMF19LF9jb3ZlcmFnZVNjaGVtYTpcIjQzZTI3ZTEzOGViZjljZmM1OTY2YjA4MmNmOWEwMjgzMDJlZDQxODRcIn0saT10W2xdfHwodFtsXT17fSk7cmV0dXJuIGlbbl0mJmlbbl0uaGFzaD09PWU/aVtuXTooby5oYXNoPWUsaVtuXT1vKX0oKTtmdW5jdGlvbiBPKG4pe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTooSS5iWzBdWzBdKyssXy5wdWJsaWNLZXlJZExFTik7SS5mWzBdKys7dmFyIHQ9KEkuc1swXSsrLG4uZ2V0RmluZ2VycHJpbnQoKSksbD0oSS5zWzFdKyssUC5hLmVuY29kZXIuaGV4U3RyaW5nVG9BcnJheUJ1ZmZlcih0KSk7cmV0dXJuIEkuc1syXSsrLFIobC5zbGljZSgwLGUpKX1mdW5jdGlvbiBCKG4pe3JldHVybiBNLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBNKCl7cmV0dXJuKE09cigpKG8uYS5tYXJrKGZ1bmN0aW9uIG4oZSl7dmFyIHQsbCxpPWFyZ3VtZW50cztyZXR1cm4gby5hLndyYXAoZnVuY3Rpb24obil7Zm9yKDs7KXN3aXRjaChuLnByZXY9bi5uZXh0KXtjYXNlIDA6cmV0dXJuIHQ9aS5sZW5ndGg+MSYmdm9pZCAwIT09aVsxXT9pWzFdOihJLmJbMV1bMF0rKyxfLnB1YmxpY0tleUlkTEVOKSxJLmZbMV0rKyxJLnNbM10rKyxuLm5leHQ9NSxlLmdldEp3a1RodW1icHJpbnQoXy5wdWJsaWNLZXlJZEhhc2gsXCJiaW5hcnlcIik7Y2FzZSA1OnJldHVybiBsPW4uc2VudCxJLnNbNF0rKyxuLmFicnVwdChcInJldHVyblwiLFIobC5zbGljZSgwLHQpKSk7Y2FzZSA4OmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBUKG4pe3JldHVybiBOLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBOKCl7cmV0dXJuKE49cigpKG8uYS5tYXJrKGZ1bmN0aW9uIG4oZSl7dmFyIHQsbCxpLHI9YXJndW1lbnRzO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDpyZXR1cm4gdD1yLmxlbmd0aD4xJiZ2b2lkIDAhPT1yWzFdP3JbMV06KEkuYlsyXVswXSsrLF8uc2Vzc2lvbktleUlkTGVuZ3RoKSxJLmZbMl0rKyxJLnNbNV0rKyxsPWooKSxJLnNbNl0rKyxuLm5leHQ9NixsLmhhc2guY29tcHV0ZShlLF8uc2Vzc2lvbktleUlkSGFzaCk7Y2FzZSA2OnJldHVybiBpPW4uc2VudCxJLnNbN10rKyxuLmFicnVwdChcInJldHVyblwiLFIoaS5zbGljZSgwLHQpKSk7Y2FzZSA5OmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBSKG4pe2lmKEkuZlszXSsrLEkuc1s4XSsrLCEobiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKXRocm93IEkuYlszXVswXSsrLEkuc1s5XSsrLG5ldyBFcnJvcihcIk5vdFVpbnQ4QXJyYXlLZXlJZFwiKTtJLmJbM11bMV0rKzt2YXIgZT0oSS5zWzEwXSsrLGQoKShuKSk7cmV0dXJuIEkuc1sxMV0rKyxuZXcgTChlKX12YXIgTD1mdW5jdGlvbihuKXtmdW5jdGlvbiBlKG4pe3JldHVybiB1KCkodGhpcyxlKSxJLmZbNF0rKyxJLnNbMTJdKyssaCgpKHRoaXMsdigpKGUpLmNhbGwodGhpcyxuKSl9cmV0dXJuIHcoKShlLG4pLGEoKShlLFt7a2V5OlwidG9IZXhcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBJLmZbNV0rKyxJLnNbMTNdKyssUC5hLmVuY29kZXIuYXJyYXlCdWZmZXJUb0hleFN0cmluZyh0aGlzKX19LHtrZXk6XCJ0b0J1ZmZlclwiLHZhbHVlOmZ1bmN0aW9uKCl7SS5mWzZdKys7dmFyIG49KEkuc1sxNF0rKyxuZXcgVWludDhBcnJheSh0aGlzKSk7cmV0dXJuIEkuc1sxNV0rKyxkKCkobil9fV0pLGV9KFMoKShVaW50OEFycmF5KSk7ZnVuY3Rpb24gRihuKXtJLmZbN10rKzt2YXIgZT0oSS5zWzE2XSsrLG5ldyBDKTtyZXR1cm4gSS5zWzE3XSsrLGUuX2luaXQobiksSS5zWzE4XSsrLGV9dmFyIEM9ZnVuY3Rpb24obil7ZnVuY3Rpb24gZSgpe3JldHVybiB1KCkodGhpcyxlKSxoKCkodGhpcyx2KCkoZSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gdygpKGUsbiksYSgpKGUsW3trZXk6XCJfaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKG4pe2lmKEkuZls4XSsrLEkuc1sxOV0rKywhKG4gaW5zdGFuY2VvZiBBcnJheSkpdGhyb3cgSS5iWzRdWzBdKyssSS5zWzIwXSsrLG5ldyBFcnJvcihcIkludmFsaWRLZXlJZExpc3RcIik7SS5iWzRdWzFdKys7dmFyIGU9KEkuc1syMV0rKyxuLm1hcChmdW5jdGlvbihuKXtpZihJLmZbOV0rKyxJLnNbMjJdKyssIShuIGluc3RhbmNlb2YgTCkpdGhyb3cgSS5iWzVdWzBdKyssSS5zWzIzXSsrLG5ldyBFcnJvcihcIk5vdEtleUlkXCIpO3JldHVybiBJLmJbNV1bMV0rKyxJLnNbMjRdKyssbn0pKTtJLnNbMjVdKyssdGhpcy5wdXNoLmFwcGx5KHRoaXMscCgpKGUpKX19LHtrZXk6XCJ0b0J1ZmZlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIEkuZlsxMF0rKyxJLnNbMjZdKyssdGhpcy5tYXAoZnVuY3Rpb24obil7cmV0dXJuIEkuZlsxMV0rKyxJLnNbMjddKyssbi50b0J1ZmZlcigpfSl9fSx7a2V5OlwidG9BcnJheVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIEkuZlsxMl0rKyxJLnNbMjhdKyssQXJyYXkuZnJvbSh0aGlzKX19LHtrZXk6XCJtYXBcIix2YWx1ZTpmdW5jdGlvbihuKXtyZXR1cm4gSS5mWzEzXSsrLEkuc1syOV0rKyx0aGlzLnRvQXJyYXkoKS5tYXAobil9fV0pLGV9KFMoKShBcnJheSkpLEQ9dCgxMiksSj10Lm4oRCksRz1mdW5jdGlvbigpe3ZhciBuPVwiL1VzZXJzL2p1bi9Qcm9qZWN0SmF2YVNjcmlwdC9jYXNjYWRlL3NyYy9lbmNyeXB0ZWRfbWVzc2FnZS5qc1wiLGU9XCIzYWVmYTEwYmI2MGUwZmE4N2UwOGZiMzE0NzZmYmQzMDhhZWRiMmU2XCIsdD1uZXcoMCxmdW5jdGlvbigpe30uY29uc3RydWN0b3IpKFwicmV0dXJuIHRoaXNcIikoKSxsPVwiX19jb3ZlcmFnZV9fXCIsbz17cGF0aDpcIi9Vc2Vycy9qdW4vUHJvamVjdEphdmFTY3JpcHQvY2FzY2FkZS9zcmMvZW5jcnlwdGVkX21lc3NhZ2UuanNcIixzdGF0ZW1lbnRNYXA6ezA6e3N0YXJ0OntsaW5lOjEwLGNvbHVtbjoxNX0sZW5kOntsaW5lOjEwLGNvbHVtbjozNH19LDE6e3N0YXJ0OntsaW5lOjExLGNvbHVtbjoxN30sZW5kOntsaW5lOjExLGNvbHVtbjo2Mn19LDI6e3N0YXJ0OntsaW5lOjE1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTUsY29sdW1uOjkwfX0sMzp7c3RhcnQ6e2xpbmU6MTUsY29sdW1uOjQzfSxlbmQ6e2xpbmU6MTUsY29sdW1uOjkwfX0sNDp7c3RhcnQ6e2xpbmU6MTcsY29sdW1uOjJ9LGVuZDp7bGluZToxOSxjb2x1bW46ODd9fSw1OntzdGFydDp7bGluZToxOCxjb2x1bW46NH0sZW5kOntsaW5lOjE4LGNvbHVtbjozN319LDY6e3N0YXJ0OntsaW5lOjE5LGNvbHVtbjoxNn0sZW5kOntsaW5lOjE5LGNvbHVtbjo4NX19LDc6e3N0YXJ0OntsaW5lOjIxLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MjEsY29sdW1uOjExNX19LDg6e3N0YXJ0OntsaW5lOjIxLGNvbHVtbjo2Nn0sZW5kOntsaW5lOjIxLGNvbHVtbjoxMTV9fSw5OntzdGFydDp7bGluZToyMyxjb2x1bW46MjJ9LGVuZDp7bGluZToyOCxjb2x1bW46NH19LDEwOntzdGFydDp7bGluZToyNSxjb2x1bW46NH0sZW5kOntsaW5lOjI2LGNvbHVtbjo1N319LDExOntzdGFydDp7bGluZToyNSxjb2x1bW46MzZ9LGVuZDp7bGluZToyNSxjb2x1bW46MTE2fX0sMTI6e3N0YXJ0OntsaW5lOjI1LGNvbHVtbjo4M30sZW5kOntsaW5lOjI1LGNvbHVtbjoxMTN9fSwxMzp7c3RhcnQ6e2xpbmU6MjYsY29sdW1uOjl9LGVuZDp7bGluZToyNixjb2x1bW46NTd9fSwxNDp7c3RhcnQ6e2xpbmU6MjcsY29sdW1uOjR9LGVuZDp7bGluZToyNyxjb2x1bW46Njh9fSwxNTp7c3RhcnQ6e2xpbmU6MzAsY29sdW1uOjJ9LGVuZDp7bGluZTozMCxjb2x1bW46ODR9fSwxNjp7c3RhcnQ6e2xpbmU6MzQsY29sdW1uOjJ9LGVuZDp7bGluZTozNCxjb2x1bW46Nzd9fSwxNzp7c3RhcnQ6e2xpbmU6MzQsY29sdW1uOjMzfSxlbmQ6e2xpbmU6MzQsY29sdW1uOjc3fX0sMTg6e3N0YXJ0OntsaW5lOjM1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzcsY29sdW1uOjV9fSwxOTp7c3RhcnQ6e2xpbmU6MzYsY29sdW1uOjR9LGVuZDp7bGluZTozNixjb2x1bW46ODR9fSwyMDp7c3RhcnQ6e2xpbmU6MzYsY29sdW1uOjM3fSxlbmQ6e2xpbmU6MzYsY29sdW1uOjg0fX0sMjE6e3N0YXJ0OntsaW5lOjM5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NDcsY29sdW1uOjg0fX0sMjI6e3N0YXJ0OntsaW5lOjQwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NDYsY29sdW1uOjd9fSwyMzp7c3RhcnQ6e2xpbmU6NDEsY29sdW1uOjIyfSxlbmQ6e2xpbmU6NDEsY29sdW1uOjQxfX0sMjQ6e3N0YXJ0OntsaW5lOjQzLGNvbHVtbjo2fSxlbmQ6e2xpbmU6NDQsY29sdW1uOjYyfX0sMjU6e3N0YXJ0OntsaW5lOjQzLGNvbHVtbjo0MX0sZW5kOntsaW5lOjQzLGNvbHVtbjoxMjR9fSwyNjp7c3RhcnQ6e2xpbmU6NDMsY29sdW1uOjkxfSxlbmQ6e2xpbmU6NDMsY29sdW1uOjEyMX19LDI3OntzdGFydDp7bGluZTo0NCxjb2x1bW46MTF9LGVuZDp7bGluZTo0NCxjb2x1bW46NjJ9fSwyODp7c3RhcnQ6e2xpbmU6NDUsY29sdW1uOjZ9LGVuZDp7bGluZTo0NSxjb2x1bW46NzZ9fSwyOTp7c3RhcnQ6e2xpbmU6NDcsY29sdW1uOjE2fSxlbmQ6e2xpbmU6NDcsY29sdW1uOjgyfX0sMzA6e3N0YXJ0OntsaW5lOjQ5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NDksY29sdW1uOjI3fX0sMzE6e3N0YXJ0OntsaW5lOjU1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NTUsY29sdW1uOjY5fX0sMzI6e3N0YXJ0OntsaW5lOjU1LGNvbHVtbjozM30sZW5kOntsaW5lOjU1LGNvbHVtbjo2OX19LDMzOntzdGFydDp7bGluZTo1Nixjb2x1bW46Mn0sZW5kOntsaW5lOjU2LGNvbHVtbjo3NX19LDM0OntzdGFydDp7bGluZTo1Nixjb2x1bW46Mzd9LGVuZDp7bGluZTo1Nixjb2x1bW46NzV9fSwzNTp7c3RhcnQ6e2xpbmU6NTgsY29sdW1uOjJ9LGVuZDp7bGluZTo1OCxjb2x1bW46NjR9fSwzNjp7c3RhcnQ6e2xpbmU6NjIsY29sdW1uOjJ9LGVuZDp7bGluZTo2Mixjb2x1bW46NzR9fSwzNzp7c3RhcnQ6e2xpbmU6NjIsY29sdW1uOjM3fSxlbmQ6e2xpbmU6NjIsY29sdW1uOjc0fX0sMzg6e3N0YXJ0OntsaW5lOjYzLGNvbHVtbjoyfSxlbmQ6e2xpbmU6NjMsY29sdW1uOjExMX19LDM5OntzdGFydDp7bGluZTo2Myxjb2x1bW46NjZ9LGVuZDp7bGluZTo2Myxjb2x1bW46MTExfX0sNDA6e3N0YXJ0OntsaW5lOjY1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NjUsY29sdW1uOjU0fX0sNDE6e3N0YXJ0OntsaW5lOjcwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NzAsY29sdW1uOjI0fX0sNDI6e3N0YXJ0OntsaW5lOjcxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NzEsY29sdW1uOjI4fX0sNDM6e3N0YXJ0OntsaW5lOjcyLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NzIsY29sdW1uOjMwfX0sNDQ6e3N0YXJ0OntsaW5lOjczLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NzMsY29sdW1uOjI4fX0sNDU6e3N0YXJ0OntsaW5lOjc3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NzcsY29sdW1uOjUwfX0sNDY6e3N0YXJ0OntsaW5lOjc4LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NzgsY29sdW1uOjMyfX0sNDc6e3N0YXJ0OntsaW5lOjgyLGNvbHVtbjoyNH0sZW5kOntsaW5lOjgyLGNvbHVtbjo0OH19LDQ4OntzdGFydDp7bGluZTo4Myxjb2x1bW46NH0sZW5kOntsaW5lOjgzLGNvbHVtbjo1MH19LDQ5OntzdGFydDp7bGluZTo4NCxjb2x1bW46NH0sZW5kOntsaW5lOjg0LGNvbHVtbjoyN319LDUwOntzdGFydDp7bGluZTo4NSxjb2x1bW46NH0sZW5kOntsaW5lOjg1LGNvbHVtbjozM319LDUxOntzdGFydDp7bGluZTo4OSxjb2x1bW46NH0sZW5kOntsaW5lOjg5LGNvbHVtbjo1MH19LDUyOntzdGFydDp7bGluZTo5MCxjb2x1bW46NH0sZW5kOntsaW5lOjkwLGNvbHVtbjozN319LDUzOntzdGFydDp7bGluZTo5Myxjb2x1bW46MTZ9LGVuZDp7bGluZTo5Myxjb2x1bW46MzV9fSw1NDp7c3RhcnQ6e2xpbmU6OTQsY29sdW1uOjE4fSxlbmQ6e2xpbmU6OTQsY29sdW1uOjM5fX0sNTU6e3N0YXJ0OntsaW5lOjk1LGNvbHVtbjoxOH0sZW5kOntsaW5lOjk1LGNvbHVtbjozOX19LDU2OntzdGFydDp7bGluZTo5Nixjb2x1bW46MTh9LGVuZDp7bGluZTo5Nixjb2x1bW46Mzl9fSw1Nzp7c3RhcnQ6e2xpbmU6OTksY29sdW1uOjR9LGVuZDp7bGluZToxMDQsY29sdW1uOjd9fSw1ODp7c3RhcnQ6e2xpbmU6MTEwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTEwLGNvbHVtbjoxNn19LDU5OntzdGFydDp7bGluZToxMTEsY29sdW1uOjR9LGVuZDp7bGluZToxMTEsY29sdW1uOjI0fX0sNjA6e3N0YXJ0OntsaW5lOjExMixjb2x1bW46NH0sZW5kOntsaW5lOjExMixjb2x1bW46MjZ9fSw2MTp7c3RhcnQ6e2xpbmU6MTE1LGNvbHVtbjoxNX0sZW5kOntsaW5lOjExNSxjb2x1bW46NTR9fSw2Mjp7c3RhcnQ6e2xpbmU6MTE4LGNvbHVtbjoxNn0sZW5kOntsaW5lOjExOCxjb2x1bW46MzZ9fSw2Mzp7c3RhcnQ6e2xpbmU6MTE5LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTE5LGNvbHVtbjoyNn19LDY0OntzdGFydDp7bGluZToxMjMsY29sdW1uOjR9LGVuZDp7bGluZToxMjcsY29sdW1uOjZ9fSw2NTp7c3RhcnQ6e2xpbmU6MTMxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTMxLGNvbHVtbjo0NX19LDY2OntzdGFydDp7bGluZToxMzQsY29sdW1uOjE2fSxlbmQ6e2xpbmU6MTM0LGNvbHVtbjozNX19LDY3OntzdGFydDp7bGluZToxMzUsY29sdW1uOjE3fSxlbmQ6e2xpbmU6MTM1LGNvbHVtbjozN319LDY4OntzdGFydDp7bGluZToxNDAsY29sdW1uOjR9LGVuZDp7bGluZToxNDAsY29sdW1uOjg0fX0sNjk6e3N0YXJ0OntsaW5lOjE0MCxjb2x1bW46Mzd9LGVuZDp7bGluZToxNDAsY29sdW1uOjg0fX0sNzA6e3N0YXJ0OntsaW5lOjE0MSxjb2x1bW46MjZ9LGVuZDp7bGluZToxNDQsY29sdW1uOjZ9fSw3MTp7c3RhcnQ6e2xpbmU6MTQyLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTQyLGNvbHVtbjo4Nn19LDcyOntzdGFydDp7bGluZToxNDIsY29sdW1uOjQ3fSxlbmQ6e2xpbmU6MTQyLGNvbHVtbjo4Nn19LDczOntzdGFydDp7bGluZToxNDMsY29sdW1uOjZ9LGVuZDp7bGluZToxNDMsY29sdW1uOjE1fX0sNzQ6e3N0YXJ0OntsaW5lOjE0NSxjb2x1bW46NH0sZW5kOntsaW5lOjE0NSxjb2x1bW46MzJ9fSw3NTp7c3RhcnQ6e2xpbmU6MTQ4LGNvbHVtbjoxN30sZW5kOntsaW5lOjE0OCxjb2x1bW46NjB9fSw3Njp7c3RhcnQ6e2xpbmU6MTQ4LGNvbHVtbjo0Mn0sZW5kOntsaW5lOjE0OCxjb2x1bW46NTh9fSw3Nzp7c3RhcnQ6e2xpbmU6MTQ5LGNvbHVtbjoxNH0sZW5kOntsaW5lOjE0OSxjb2x1bW46Mzh9fSw3ODp7c3RhcnQ6e2xpbmU6MTUxLGNvbHVtbjoxOH0sZW5kOntsaW5lOjE1MSxjb2x1bW46NTR9fSw3OTp7c3RhcnQ6e2xpbmU6MTUyLGNvbHVtbjoyMX0sZW5kOntsaW5lOjE1Mixjb2x1bW46NjB9fX0sZm5NYXA6ezA6e25hbWU6XCJpbXBvcnRFbmNyeXB0ZWRCdWZmZXJcIixkZWNsOntzdGFydDp7bGluZToxNCxjb2x1bW46MTZ9LGVuZDp7bGluZToxNCxjb2x1bW46Mzd9fSxsb2M6e3N0YXJ0OntsaW5lOjE0LGNvbHVtbjo0OX0sZW5kOntsaW5lOjMxLGNvbHVtbjoxfX0sbGluZToxNH0sMTp7bmFtZTpcIihhbm9ueW1vdXNfMSlcIixkZWNsOntzdGFydDp7bGluZToyMyxjb2x1bW46Mzl9LGVuZDp7bGluZToyMyxjb2x1bW46NDB9fSxsb2M6e3N0YXJ0OntsaW5lOjIzLGNvbHVtbjo0OX0sZW5kOntsaW5lOjI4LGNvbHVtbjozfX0sbGluZToyM30sMjp7bmFtZTpcIihhbm9ueW1vdXNfMilcIixkZWNsOntzdGFydDp7bGluZToyNSxjb2x1bW46NzZ9LGVuZDp7bGluZToyNSxjb2x1bW46Nzd9fSxsb2M6e3N0YXJ0OntsaW5lOjI1LGNvbHVtbjo4M30sZW5kOntsaW5lOjI1LGNvbHVtbjoxMTN9fSxsaW5lOjI1fSwzOntuYW1lOlwiaW1wb3J0UmF3RW5jcnlwdGVkQnVmZmVyTGlzdFwiLGRlY2w6e3N0YXJ0OntsaW5lOjMzLGNvbHVtbjoxNn0sZW5kOntsaW5lOjMzLGNvbHVtbjo0NH19LGxvYzp7c3RhcnQ6e2xpbmU6MzMsY29sdW1uOjUxfSxlbmQ6e2xpbmU6NTAsY29sdW1uOjF9fSxsaW5lOjMzfSw0OntuYW1lOlwiKGFub255bW91c180KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjM1LGNvbHVtbjoxN30sZW5kOntsaW5lOjM1LGNvbHVtbjoxOH19LGxvYzp7c3RhcnQ6e2xpbmU6MzUsY29sdW1uOjI2fSxlbmQ6e2xpbmU6MzcsY29sdW1uOjN9fSxsaW5lOjM1fSw1OntuYW1lOlwiKGFub255bW91c181KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjQwLGNvbHVtbjozNX0sZW5kOntsaW5lOjQwLGNvbHVtbjozNn19LGxvYzp7c3RhcnQ6e2xpbmU6NDAsY29sdW1uOjQ0fSxlbmQ6e2xpbmU6NDYsY29sdW1uOjV9fSxsaW5lOjQwfSw2OntuYW1lOlwiKGFub255bW91c182KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjQzLGNvbHVtbjo4NH0sZW5kOntsaW5lOjQzLGNvbHVtbjo4NX19LGxvYzp7c3RhcnQ6e2xpbmU6NDMsY29sdW1uOjkxfSxlbmQ6e2xpbmU6NDMsY29sdW1uOjEyMX19LGxpbmU6NDN9LDc6e25hbWU6XCJjcmVhdGVFbmNyeXB0ZWRNZXNzYWdlXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NTMsY29sdW1uOjE2fSxlbmQ6e2xpbmU6NTMsY29sdW1uOjM4fX0sbG9jOntzdGFydDp7bGluZTo1Myxjb2x1bW46Nzh9LGVuZDp7bGluZTo1OSxjb2x1bW46MX19LGxpbmU6NTN9LDg6e25hbWU6XCJjcmVhdGVSYXdFbmNyeXB0ZWRNZXNzYWdlXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NjEsY29sdW1uOjE2fSxlbmQ6e2xpbmU6NjEsY29sdW1uOjQxfX0sbG9jOntzdGFydDp7bGluZTo2MSxjb2x1bW46NjN9LGVuZDp7bGluZTo2Nixjb2x1bW46MX19LGxpbmU6NjF9LDk6e25hbWU6XCIoYW5vbnltb3VzXzkpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NjksY29sdW1uOjJ9LGVuZDp7bGluZTo2OSxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6NjksY29sdW1uOjUzfSxlbmQ6e2xpbmU6NzQsY29sdW1uOjN9fSxsaW5lOjY5fSwxMDp7bmFtZTpcIihhbm9ueW1vdXNfMTApXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NzYsY29sdW1uOjJ9LGVuZDp7bGluZTo3Nixjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6NzYsY29sdW1uOjIzfSxlbmQ6e2xpbmU6NzksY29sdW1uOjN9fSxsaW5lOjc2fSwxMTp7bmFtZTpcIihhbm9ueW1vdXNfMTEpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6ODEsY29sdW1uOjJ9LGVuZDp7bGluZTo4MSxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6ODEsY29sdW1uOjEyfSxlbmQ6e2xpbmU6ODYsY29sdW1uOjN9fSxsaW5lOjgxfSwxMjp7bmFtZTpcIihhbm9ueW1vdXNfMTIpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6ODgsY29sdW1uOjJ9LGVuZDp7bGluZTo4OCxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6ODgsY29sdW1uOjIzfSxlbmQ6e2xpbmU6OTEsY29sdW1uOjN9fSxsaW5lOjg4fSwxMzp7bmFtZTpcIihhbm9ueW1vdXNfMTMpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6OTMsY29sdW1uOjJ9LGVuZDp7bGluZTo5Myxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6OTMsY29sdW1uOjE0fSxlbmQ6e2xpbmU6OTMsY29sdW1uOjM3fX0sbGluZTo5M30sMTQ6e25hbWU6XCIoYW5vbnltb3VzXzE0KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjk0LGNvbHVtbjoyfSxlbmQ6e2xpbmU6OTQsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjk0LGNvbHVtbjoxNn0sZW5kOntsaW5lOjk0LGNvbHVtbjo0MX19LGxpbmU6OTR9LDE1OntuYW1lOlwiKGFub255bW91c18xNSlcIixkZWNsOntzdGFydDp7bGluZTo5NSxjb2x1bW46Mn0sZW5kOntsaW5lOjk1LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo5NSxjb2x1bW46MTZ9LGVuZDp7bGluZTo5NSxjb2x1bW46NDF9fSxsaW5lOjk1fSwxNjp7bmFtZTpcIihhbm9ueW1vdXNfMTYpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6OTYsY29sdW1uOjJ9LGVuZDp7bGluZTo5Nixjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6OTYsY29sdW1uOjE2fSxlbmQ6e2xpbmU6OTYsY29sdW1uOjQxfX0sbGluZTo5Nn0sMTc6e25hbWU6XCIoYW5vbnltb3VzXzE3KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjk4LGNvbHVtbjoyfSxlbmQ6e2xpbmU6OTgsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjk4LGNvbHVtbjoxNH0sZW5kOntsaW5lOjEwNSxjb2x1bW46M319LGxpbmU6OTh9LDE4OntuYW1lOlwiKGFub255bW91c18xOClcIixkZWNsOntzdGFydDp7bGluZToxMDksY29sdW1uOjJ9LGVuZDp7bGluZToxMDksY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjEwOSxjb2x1bW46NDB9LGVuZDp7bGluZToxMTMsY29sdW1uOjN9fSxsaW5lOjEwOX0sMTk6e25hbWU6XCIoYW5vbnltb3VzXzE5KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjExNSxjb2x1bW46Mn0sZW5kOntsaW5lOjExNSxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MTE1LGNvbHVtbjoxM30sZW5kOntsaW5lOjExNSxjb2x1bW46NTZ9fSxsaW5lOjExNX0sMjA6e25hbWU6XCIoYW5vbnltb3VzXzIwKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjExNyxjb2x1bW46Mn0sZW5kOntsaW5lOjExNyxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MTE3LGNvbHVtbjoxM30sZW5kOntsaW5lOjEyMCxjb2x1bW46M319LGxpbmU6MTE3fSwyMTp7bmFtZTpcIihhbm9ueW1vdXNfMjEpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTIyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTIyLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToxMjIsY29sdW1uOjE1fSxlbmQ6e2xpbmU6MTI4LGNvbHVtbjozfX0sbGluZToxMjJ9LDIyOntuYW1lOlwiKGFub255bW91c18yMilcIixkZWNsOntzdGFydDp7bGluZToxMzAsY29sdW1uOjJ9LGVuZDp7bGluZToxMzAsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjEzMCxjb2x1bW46MTR9LGVuZDp7bGluZToxMzIsY29sdW1uOjN9fSxsaW5lOjEzMH0sMjM6e25hbWU6XCIoYW5vbnltb3VzXzIzKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjEzNCxjb2x1bW46Mn0sZW5kOntsaW5lOjEzNCxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MTM0LGNvbHVtbjoxNH0sZW5kOntsaW5lOjEzNCxjb2x1bW46Mzd9fSxsaW5lOjEzNH0sMjQ6e25hbWU6XCIoYW5vbnltb3VzXzI0KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjEzNSxjb2x1bW46Mn0sZW5kOntsaW5lOjEzNSxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MTM1LGNvbHVtbjoxNX0sZW5kOntsaW5lOjEzNSxjb2x1bW46Mzl9fSxsaW5lOjEzNX0sMjU6e25hbWU6XCIoYW5vbnltb3VzXzI1KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjEzOSxjb2x1bW46Mn0sZW5kOntsaW5lOjEzOSxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MTM5LGNvbHVtbjoxNn0sZW5kOntsaW5lOjE0Nixjb2x1bW46M319LGxpbmU6MTM5fSwyNjp7bmFtZTpcIihhbm9ueW1vdXNfMjYpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTQxLGNvbHVtbjozOH0sZW5kOntsaW5lOjE0MSxjb2x1bW46Mzl9fSxsb2M6e3N0YXJ0OntsaW5lOjE0MSxjb2x1bW46NDV9LGVuZDp7bGluZToxNDQsY29sdW1uOjV9fSxsaW5lOjE0MX0sMjc6e25hbWU6XCIoYW5vbnltb3VzXzI3KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjE0OCxjb2x1bW46Mn0sZW5kOntsaW5lOjE0OCxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MTQ4LGNvbHVtbjoxNX0sZW5kOntsaW5lOjE0OCxjb2x1bW46NjJ9fSxsaW5lOjE0OH0sMjg6e25hbWU6XCIoYW5vbnltb3VzXzI4KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjE0OCxjb2x1bW46MzN9LGVuZDp7bGluZToxNDgsY29sdW1uOjM0fX0sbG9jOntzdGFydDp7bGluZToxNDgsY29sdW1uOjQyfSxlbmQ6e2xpbmU6MTQ4LGNvbHVtbjo1OH19LGxpbmU6MTQ4fSwyOTp7bmFtZTpcIihhbm9ueW1vdXNfMjkpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTQ5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTQ5LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToxNDksY29sdW1uOjEyfSxlbmQ6e2xpbmU6MTQ5LGNvbHVtbjo0MH19LGxpbmU6MTQ5fSwzMDp7bmFtZTpcIihhbm9ueW1vdXNfMzApXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTUxLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTUxLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToxNTEsY29sdW1uOjE2fSxlbmQ6e2xpbmU6MTUxLGNvbHVtbjo1Nn19LGxpbmU6MTUxfSwzMTp7bmFtZTpcIihhbm9ueW1vdXNfMzEpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTUyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTUyLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToxNTIsY29sdW1uOjE5fSxlbmQ6e2xpbmU6MTUyLGNvbHVtbjo2Mn19LGxpbmU6MTUyfX0sYnJhbmNoTWFwOnswOntsb2M6e3N0YXJ0OntsaW5lOjE1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTUsY29sdW1uOjkwfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTUsY29sdW1uOjJ9LGVuZDp7bGluZToxNSxjb2x1bW46OTB9fSx7c3RhcnQ6e2xpbmU6MTUsY29sdW1uOjJ9LGVuZDp7bGluZToxNSxjb2x1bW46OTB9fV0sbGluZToxNX0sMTp7bG9jOntzdGFydDp7bGluZToyMSxjb2x1bW46Mn0sZW5kOntsaW5lOjIxLGNvbHVtbjoxMTV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyMSxjb2x1bW46Mn0sZW5kOntsaW5lOjIxLGNvbHVtbjoxMTV9fSx7c3RhcnQ6e2xpbmU6MjEsY29sdW1uOjJ9LGVuZDp7bGluZToyMSxjb2x1bW46MTE1fX1dLGxpbmU6MjF9LDI6e2xvYzp7c3RhcnQ6e2xpbmU6MjEsY29sdW1uOjZ9LGVuZDp7bGluZToyMSxjb2x1bW46NjR9fSx0eXBlOlwiYmluYXJ5LWV4cHJcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyMSxjb2x1bW46Nn0sZW5kOntsaW5lOjIxLGNvbHVtbjoxNn19LHtzdGFydDp7bGluZToyMSxjb2x1bW46MjB9LGVuZDp7bGluZToyMSxjb2x1bW46MzJ9fSx7c3RhcnQ6e2xpbmU6MjEsY29sdW1uOjM2fSxlbmQ6e2xpbmU6MjEsY29sdW1uOjQ4fX0se3N0YXJ0OntsaW5lOjIxLGNvbHVtbjo1Mn0sZW5kOntsaW5lOjIxLGNvbHVtbjo2NH19XSxsaW5lOjIxfSwzOntsb2M6e3N0YXJ0OntsaW5lOjI1LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjYsY29sdW1uOjU3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjUsY29sdW1uOjR9LGVuZDp7bGluZToyNixjb2x1bW46NTd9fSx7c3RhcnQ6e2xpbmU6MjUsY29sdW1uOjR9LGVuZDp7bGluZToyNixjb2x1bW46NTd9fV0sbGluZToyNX0sNDp7bG9jOntzdGFydDp7bGluZTozNCxjb2x1bW46Mn0sZW5kOntsaW5lOjM0LGNvbHVtbjo3N319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjM0LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzQsY29sdW1uOjc3fX0se3N0YXJ0OntsaW5lOjM0LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzQsY29sdW1uOjc3fX1dLGxpbmU6MzR9LDU6e2xvYzp7c3RhcnQ6e2xpbmU6MzYsY29sdW1uOjR9LGVuZDp7bGluZTozNixjb2x1bW46ODR9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozNixjb2x1bW46NH0sZW5kOntsaW5lOjM2LGNvbHVtbjo4NH19LHtzdGFydDp7bGluZTozNixjb2x1bW46NH0sZW5kOntsaW5lOjM2LGNvbHVtbjo4NH19XSxsaW5lOjM2fSw2Ontsb2M6e3N0YXJ0OntsaW5lOjQzLGNvbHVtbjo2fSxlbmQ6e2xpbmU6NDQsY29sdW1uOjYyfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NDMsY29sdW1uOjZ9LGVuZDp7bGluZTo0NCxjb2x1bW46NjJ9fSx7c3RhcnQ6e2xpbmU6NDMsY29sdW1uOjZ9LGVuZDp7bGluZTo0NCxjb2x1bW46NjJ9fV0sbGluZTo0M30sNzp7bG9jOntzdGFydDp7bGluZTo1Myxjb2x1bW46NjR9LGVuZDp7bGluZTo1Myxjb2x1bW46NzZ9fSx0eXBlOlwiZGVmYXVsdC1hcmdcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo1Myxjb2x1bW46NzR9LGVuZDp7bGluZTo1Myxjb2x1bW46NzZ9fV0sbGluZTo1M30sODp7bG9jOntzdGFydDp7bGluZTo1NSxjb2x1bW46Mn0sZW5kOntsaW5lOjU1LGNvbHVtbjo2OX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjU1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NTUsY29sdW1uOjY5fX0se3N0YXJ0OntsaW5lOjU1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NTUsY29sdW1uOjY5fX1dLGxpbmU6NTV9LDk6e2xvYzp7c3RhcnQ6e2xpbmU6NTYsY29sdW1uOjJ9LGVuZDp7bGluZTo1Nixjb2x1bW46NzV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo1Nixjb2x1bW46Mn0sZW5kOntsaW5lOjU2LGNvbHVtbjo3NX19LHtzdGFydDp7bGluZTo1Nixjb2x1bW46Mn0sZW5kOntsaW5lOjU2LGNvbHVtbjo3NX19XSxsaW5lOjU2fSwxMDp7bG9jOntzdGFydDp7bGluZTo2Mixjb2x1bW46Mn0sZW5kOntsaW5lOjYyLGNvbHVtbjo3NH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjYyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6NjIsY29sdW1uOjc0fX0se3N0YXJ0OntsaW5lOjYyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6NjIsY29sdW1uOjc0fX1dLGxpbmU6NjJ9LDExOntsb2M6e3N0YXJ0OntsaW5lOjYzLGNvbHVtbjoyfSxlbmQ6e2xpbmU6NjMsY29sdW1uOjExMX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjYzLGNvbHVtbjoyfSxlbmQ6e2xpbmU6NjMsY29sdW1uOjExMX19LHtzdGFydDp7bGluZTo2Myxjb2x1bW46Mn0sZW5kOntsaW5lOjYzLGNvbHVtbjoxMTF9fV0sbGluZTo2M30sMTI6e2xvYzp7c3RhcnQ6e2xpbmU6NjMsY29sdW1uOjZ9LGVuZDp7bGluZTo2Myxjb2x1bW46NjR9fSx0eXBlOlwiYmluYXJ5LWV4cHJcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo2Myxjb2x1bW46Nn0sZW5kOntsaW5lOjYzLGNvbHVtbjozMX19LHtzdGFydDp7bGluZTo2Myxjb2x1bW46MzV9LGVuZDp7bGluZTo2Myxjb2x1bW46NjR9fV0sbGluZTo2M30sMTM6e2xvYzp7c3RhcnQ6e2xpbmU6NjksY29sdW1uOjM5fSxlbmQ6e2xpbmU6NjksY29sdW1uOjUxfX0sdHlwZTpcImRlZmF1bHQtYXJnXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NjksY29sdW1uOjQ5fSxlbmQ6e2xpbmU6NjksY29sdW1uOjUxfX1dLGxpbmU6Njl9LDE0Ontsb2M6e3N0YXJ0OntsaW5lOjEwOSxjb2x1bW46Mjd9LGVuZDp7bGluZToxMDksY29sdW1uOjM4fX0sdHlwZTpcImRlZmF1bHQtYXJnXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTA5LGNvbHVtbjozNn0sZW5kOntsaW5lOjEwOSxjb2x1bW46Mzh9fV0sbGluZToxMDl9LDE1Ontsb2M6e3N0YXJ0OntsaW5lOjE0MCxjb2x1bW46NH0sZW5kOntsaW5lOjE0MCxjb2x1bW46ODR9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxNDAsY29sdW1uOjR9LGVuZDp7bGluZToxNDAsY29sdW1uOjg0fX0se3N0YXJ0OntsaW5lOjE0MCxjb2x1bW46NH0sZW5kOntsaW5lOjE0MCxjb2x1bW46ODR9fV0sbGluZToxNDB9LDE2Ontsb2M6e3N0YXJ0OntsaW5lOjE0Mixjb2x1bW46Nn0sZW5kOntsaW5lOjE0Mixjb2x1bW46ODZ9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxNDIsY29sdW1uOjZ9LGVuZDp7bGluZToxNDIsY29sdW1uOjg2fX0se3N0YXJ0OntsaW5lOjE0Mixjb2x1bW46Nn0sZW5kOntsaW5lOjE0Mixjb2x1bW46ODZ9fV0sbGluZToxNDJ9fSxzOnswOjAsMTowLDI6MCwzOjAsNDowLDU6MCw2OjAsNzowLDg6MCw5OjAsMTA6MCwxMTowLDEyOjAsMTM6MCwxNDowLDE1OjAsMTY6MCwxNzowLDE4OjAsMTk6MCwyMDowLDIxOjAsMjI6MCwyMzowLDI0OjAsMjU6MCwyNjowLDI3OjAsMjg6MCwyOTowLDMwOjAsMzE6MCwzMjowLDMzOjAsMzQ6MCwzNTowLDM2OjAsMzc6MCwzODowLDM5OjAsNDA6MCw0MTowLDQyOjAsNDM6MCw0NDowLDQ1OjAsNDY6MCw0NzowLDQ4OjAsNDk6MCw1MDowLDUxOjAsNTI6MCw1MzowLDU0OjAsNTU6MCw1NjowLDU3OjAsNTg6MCw1OTowLDYwOjAsNjE6MCw2MjowLDYzOjAsNjQ6MCw2NTowLDY2OjAsNjc6MCw2ODowLDY5OjAsNzA6MCw3MTowLDcyOjAsNzM6MCw3NDowLDc1OjAsNzY6MCw3NzowLDc4OjAsNzk6MH0sZjp7MDowLDE6MCwyOjAsMzowLDQ6MCw1OjAsNjowLDc6MCw4OjAsOTowLDEwOjAsMTE6MCwxMjowLDEzOjAsMTQ6MCwxNTowLDE2OjAsMTc6MCwxODowLDE5OjAsMjA6MCwyMTowLDIyOjAsMjM6MCwyNDowLDI1OjAsMjY6MCwyNzowLDI4OjAsMjk6MCwzMDowLDMxOjB9LGI6ezA6WzAsMF0sMTpbMCwwXSwyOlswLDAsMCwwXSwzOlswLDBdLDQ6WzAsMF0sNTpbMCwwXSw2OlswLDBdLDc6WzBdLDg6WzAsMF0sOTpbMCwwXSwxMDpbMCwwXSwxMTpbMCwwXSwxMjpbMCwwXSwxMzpbMF0sMTQ6WzBdLDE1OlswLDBdLDE2OlswLDBdfSxfY292ZXJhZ2VTY2hlbWE6XCI0M2UyN2UxMzhlYmY5Y2ZjNTk2NmIwODJjZjlhMDI4MzAyZWQ0MTg0XCJ9LGk9dFtsXXx8KHRbbF09e30pO3JldHVybiBpW25dJiZpW25dLmhhc2g9PT1lP2lbbl06KG8uaGFzaD1lLGlbbl09byl9KCksSD0oRy5zWzBdKyssW1wianNjdVwiLFwib3BlbnBncFwiXSksVj0oRy5zWzFdKyssW1wicHVibGljX2tleV9lbmNyeXB0XCIsXCJzZXNzaW9uX2tleV9lbmNyeXB0XCJdKTtmdW5jdGlvbiB6KG4pe2lmKEcuZlswXSsrLEcuc1syXSsrLCEobiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKXRocm93IEcuYlswXVswXSsrLEcuc1szXSsrLG5ldyBFcnJvcihcIk5vblVpbnQ4QXJyYXlTZXJpYWxpemVkRGF0YVwiKTt2YXIgZTtHLmJbMF1bMV0rKyxHLnNbNF0rKzt0cnl7Ry5zWzVdKyssZT1KLmEuZGVjb2RlKG4pfWNhdGNoKG4pe3Rocm93IEcuc1s2XSsrLG5ldyBFcnJvcihcIkZhaWxlZFRvUGFyc2VFbmNyeXB0ZWRNZXNzYWdlQnVmZmVyOiBcIi5jb25jYXQobi5tZXNzYWdlKSl9aWYoRy5zWzddKyssRy5iWzJdWzBdKyssIShlLnN1aXRlJiYoRy5iWzJdWzFdKyssZS5rZXlUeXBlKSYmKEcuYlsyXVsyXSsrLGUubWVzc2FnZSkmJihHLmJbMl1bM10rKyxlLm9wdGlvbnMpKSl0aHJvdyBHLmJbMV1bMF0rKyxHLnNbOF0rKyxuZXcgRXJyb3IoXCJJbnZhbGlkRW5jcnlwdGVkTWVzc2FnZUZvcm1hdFwiKTtHLmJbMV1bMV0rKzt2YXIgdD0oRy5zWzldKyssZS5tZXNzYWdlLm1hcChmdW5jdGlvbihuKXt2YXIgZTtyZXR1cm4gRy5mWzFdKyssRy5zWzEwXSsrLG4ua2V5SWQgaW5zdGFuY2VvZiBBcnJheT8oRy5iWzNdWzBdKyssRy5zWzExXSsrLGU9RihuLmtleUlkLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gRy5mWzJdKyssRy5zWzEyXSsrLFIobmV3IFVpbnQ4QXJyYXkobikpfSkpKTooRy5iWzNdWzFdKyssRy5zWzEzXSsrLGU9UihuZXcgVWludDhBcnJheShuLmtleUlkKSkpLEcuc1sxNF0rKyxxKG4uZGF0YSxlLG4ucGFyYW1zKX0pKTtyZXR1cm4gRy5zWzE1XSsrLFcoZS5zdWl0ZSxlLmtleVR5cGUsdCxlLm9wdGlvbnMpfWZ1bmN0aW9uIFkobil7aWYoRy5mWzNdKyssRy5zWzE2XSsrLCEobiBpbnN0YW5jZW9mIEFycmF5KSl0aHJvdyBHLmJbNF1bMF0rKyxHLnNbMTddKyssbmV3IEVycm9yKFwiTm90QXJyYXlPZlNlcmlhbGl6ZWREYXRhXCIpO3ZhciBlO0cuYls0XVsxXSsrLEcuc1sxOF0rKyxuLmZvckVhY2goZnVuY3Rpb24obil7aWYoRy5mWzRdKyssRy5zWzE5XSsrLCEobiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKXRocm93IEcuYls1XVswXSsrLEcuc1syMF0rKyxuZXcgRXJyb3IoXCJOb3RVaW50OEFycmF5U2VyaWFsaXplZERhdGFcIik7Ry5iWzVdWzFdKyt9KSxHLnNbMjFdKys7dHJ5e0cuc1syMl0rKyxlPW4ubWFwKGZ1bmN0aW9uKG4pe0cuZls1XSsrO3ZhciBlLHQ9KEcuc1syM10rKyxKLmEuZGVjb2RlKG4pKTtyZXR1cm4gRy5zWzI0XSsrLHQua2V5SWQgaW5zdGFuY2VvZiBBcnJheT8oRy5iWzZdWzBdKyssRy5zWzI1XSsrLGU9Rih0LmtleUlkLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gRy5mWzZdKyssRy5zWzI2XSsrLFIobmV3IFVpbnQ4QXJyYXkobikpfSkpKTooRy5iWzZdWzFdKyssRy5zWzI3XSsrLGU9UihuZXcgVWludDhBcnJheSh0LmtleUlkKSkpLEcuc1syOF0rKyxxKHQuZGF0YSxlLHQucGFyYW1zKX0pfWNhdGNoKG4pe3Rocm93IEcuc1syOV0rKyxuZXcgRXJyb3IoXCJGYWlsZWRUb1BhcnNlUmF3RW5jcnlwdGVkTWVzc2FnZTogXCIuY29uY2F0KG4ubWVzc2FnZSkpfXJldHVybiBHLnNbMzBdKyssZX1mdW5jdGlvbiBXKG4sZSx0KXt2YXIgbD1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106KEcuYls3XVswXSsrLHt9KTtpZihHLmZbN10rKyxHLnNbMzFdKyssSC5pbmRleE9mKG4pPDApdGhyb3cgRy5iWzhdWzBdKyssRy5zWzMyXSsrLG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkU3VpdGVcIik7aWYoRy5iWzhdWzFdKyssRy5zWzMzXSsrLFYuaW5kZXhPZihlKTwwKXRocm93IEcuYls5XVswXSsrLEcuc1szNF0rKyxuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZEtleVR5cGVcIik7cmV0dXJuIEcuYls5XVsxXSsrLEcuc1szNV0rKyxuZXcgJChuLGUsdCxsKX1mdW5jdGlvbiBxKG4sZSx0KXtpZihHLmZbOF0rKyxHLnNbMzZdKyssIShuIGluc3RhbmNlb2YgVWludDhBcnJheSkpdGhyb3cgRy5iWzEwXVswXSsrLEcuc1szN10rKyxuZXcgRXJyb3IoXCJOb25VaW50OEFycmF5RGF0YVwiKTtpZihHLmJbMTBdWzFdKyssRy5zWzM4XSsrLEcuYlsxMl1bMF0rKywhKGUgaW5zdGFuY2VvZiBMfHwoRy5iWzEyXVsxXSsrLGUgaW5zdGFuY2VvZiBDKSkpdGhyb3cgRy5iWzExXVswXSsrLEcuc1szOV0rKyxuZXcgRXJyb3IoXCJOb25LZXlJZE9yS2V5SWRMaXN0T2JqZWN0XCIpO3JldHVybiBHLmJbMTFdWzFdKyssRy5zWzQwXSsrLG5ldyBRKG4sZSx0KX12YXIgJD1mdW5jdGlvbigpe2Z1bmN0aW9uIG4oZSx0LGwpe3ZhciBvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTooRy5iWzEzXVswXSsrLHt9KTt1KCkodGhpcyxuKSxHLmZbOV0rKyxHLnNbNDFdKyssdGhpcy5fc3VpdGU9ZSxHLnNbNDJdKyssdGhpcy5fa2V5VHlwZT10LEcuc1s0M10rKyx0aGlzLl9zZXRNZXNzYWdlKGwpLEcuc1s0NF0rKyx0aGlzLl9vcHRpb25zPW99cmV0dXJuIGEoKShuLFt7a2V5OlwiX3NldE1lc3NhZ2VcIix2YWx1ZTpmdW5jdGlvbihuKXtHLmZbMTBdKyssRy5zWzQ1XSsrLHRoaXMuX21lc3NhZ2U9bmV3IFgsRy5zWzQ2XSsrLHRoaXMuX21lc3NhZ2UuX3NldChuKX19LHtrZXk6XCJleHRyYWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXtHLmZbMTFdKys7dmFyIG49KEcuc1s0N10rKyxkKCkodGhpcy5fbWVzc2FnZSkpO3JldHVybiBHLnNbNDhdKyssdGhpcy5fbWVzc2FnZT1uZXcgWCxHLnNbNDldKyssdGhpcy5fbWVzc2FnZS5fc2V0KFtdKSxHLnNbNTBdKyssbi50b0FycmF5KCl9fSx7a2V5OlwiaW5zZXJ0XCIsdmFsdWU6ZnVuY3Rpb24obil7Ry5mWzEyXSsrLEcuc1s1MV0rKyx0aGlzLl9tZXNzYWdlPW5ldyBYLEcuc1s1Ml0rKyx0aGlzLl9tZXNzYWdlLl9zZXQobil9fSx7a2V5Olwic2VyaWFsaXplXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gRy5mWzE3XSsrLEcuc1s1N10rKyxKLmEuZW5jb2RlKHtzdWl0ZTp0aGlzLl9zdWl0ZSxrZXlUeXBlOnRoaXMuX2tleVR5cGUsbWVzc2FnZTp0aGlzLl9tZXNzYWdlLnRvSnNPYmplY3QoKSxvcHRpb25zOnRoaXMuX29wdGlvbnN9KX19LHtrZXk6XCJzdWl0ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBHLmZbMTNdKyssRy5zWzUzXSsrLHRoaXMuX3N1aXRlfX0se2tleTpcImtleVR5cGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRy5mWzE0XSsrLEcuc1s1NF0rKyx0aGlzLl9rZXlUeXBlfX0se2tleTpcIm1lc3NhZ2VcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRy5mWzE1XSsrLEcuc1s1NV0rKyx0aGlzLl9tZXNzYWdlfX0se2tleTpcIm9wdGlvbnNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRy5mWzE2XSsrLEcuc1s1Nl0rKyx0aGlzLl9vcHRpb25zfX1dKSxufSgpLFE9ZnVuY3Rpb24obil7ZnVuY3Rpb24gZShuLHQpe3ZhciBsLG89YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOihHLmJbMTRdWzBdKysse30pO3JldHVybiB1KCkodGhpcyxlKSxHLmZbMThdKyssRy5zWzU4XSsrLGw9aCgpKHRoaXMsdigpKGUpLmNhbGwodGhpcyxuKSksRy5zWzU5XSsrLGwuX2tleUlkPXQsRy5zWzYwXSsrLGwuX3BhcmFtcz1vLGx9cmV0dXJuIHcoKShlLG4pLGEoKShlLFt7a2V5OlwidG9CYXNlNjRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBHLmZbMTldKyssRy5zWzYxXSsrLFAuYS5lbmNvZGVyLmVuY29kZUJhc2U2NCh0aGlzKX19LHtrZXk6XCJ0b0J1ZmZlclwiLHZhbHVlOmZ1bmN0aW9uKCl7Ry5mWzIwXSsrO3ZhciBuPShHLnNbNjJdKyssbmV3IFVpbnQ4QXJyYXkodGhpcykpO3JldHVybiBHLnNbNjNdKyssZCgpKG4pfX0se2tleTpcInRvSnNPYmplY3RcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBHLmZbMjFdKyssRy5zWzY0XSsrLHtkYXRhOnRoaXMudG9CdWZmZXIoKSxrZXlJZDp0aGlzLl9rZXlJZC50b0J1ZmZlcigpLHBhcmFtczp0aGlzLl9wYXJhbXN9fX0se2tleTpcInNlcmlhbGl6ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIEcuZlsyMl0rKyxHLnNbNjVdKyssSi5hLmVuY29kZSh0aGlzLnRvSnNPYmplY3QoKSl9fSx7a2V5Olwia2V5SWRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRy5mWzIzXSsrLEcuc1s2Nl0rKyx0aGlzLl9rZXlJZH19LHtrZXk6XCJwYXJhbXNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRy5mWzI0XSsrLEcuc1s2N10rKyx0aGlzLl9wYXJhbXN9fV0pLGV9KFMoKShVaW50OEFycmF5KSksWD1mdW5jdGlvbihuKXtmdW5jdGlvbiBlKCl7cmV0dXJuIHUoKSh0aGlzLGUpLGgoKSh0aGlzLHYoKShlKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiB3KCkoZSxuKSxhKCkoZSxbe2tleTpcIl9zZXRcIix2YWx1ZTpmdW5jdGlvbihuKXtpZihHLmZbMjVdKyssRy5zWzY4XSsrLCEobiBpbnN0YW5jZW9mIEFycmF5KSl0aHJvdyBHLmJbMTVdWzBdKyssRy5zWzY5XSsrLG5ldyBFcnJvcihcIkludmFsaWRFbmNyeXB0ZWRNZXNzYWdlTGlzdFwiKTtHLmJbMTVdWzFdKys7dmFyIGU9KEcuc1s3MF0rKyxuLm1hcChmdW5jdGlvbihuKXtpZihHLmZbMjZdKyssRy5zWzcxXSsrLCEobiBpbnN0YW5jZW9mIFEpKXRocm93IEcuYlsxNl1bMF0rKyxHLnNbNzJdKyssbmV3IEVycm9yKFwiTm90RW5jcnlwdGVkTWVzc2FnZVwiKTtyZXR1cm4gRy5iWzE2XVsxXSsrLEcuc1s3M10rKyxufSkpO0cuc1s3NF0rKyx0aGlzLnB1c2guYXBwbHkodGhpcyxwKCkoZSkpfX0se2tleTpcInRvSnNPYmplY3RcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBHLmZbMjddKyssRy5zWzc1XSsrLHRoaXMubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBHLmZbMjhdKyssRy5zWzc2XSsrLG4udG9Kc09iamVjdCgpfSl9fSx7a2V5OlwidG9BcnJheVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIEcuZlsyOV0rKyxHLnNbNzddKyssQXJyYXkuZnJvbSh0aGlzKX19LHtrZXk6XCJtYXBcIix2YWx1ZTpmdW5jdGlvbihuKXtyZXR1cm4gRy5mWzMwXSsrLEcuc1s3OF0rKyx0aGlzLnRvQXJyYXkoKS5tYXAobil9fSx7a2V5OlwiZmlsdGVyXCIsdmFsdWU6ZnVuY3Rpb24obil7cmV0dXJuIEcuZlszMV0rKyxHLnNbNzldKyssdGhpcy50b0FycmF5KCkuZmlsdGVyKG4pfX1dKSxlfShTKCkoQXJyYXkpKSxaPWZ1bmN0aW9uKCl7dmFyIG49XCIvVXNlcnMvanVuL1Byb2plY3RKYXZhU2NyaXB0L2Nhc2NhZGUvc3JjL3NpZ25hdHVyZS5qc1wiLGU9XCI4YzVmYmFhODY0YTEzZWIzMjIyZDYyN2Y0NmQwMjA5YTlmMGQ2ZWIzXCIsdD1uZXcoMCxmdW5jdGlvbigpe30uY29uc3RydWN0b3IpKFwicmV0dXJuIHRoaXNcIikoKSxsPVwiX19jb3ZlcmFnZV9fXCIsbz17cGF0aDpcIi9Vc2Vycy9qdW4vUHJvamVjdEphdmFTY3JpcHQvY2FzY2FkZS9zcmMvc2lnbmF0dXJlLmpzXCIsc3RhdGVtZW50TWFwOnswOntzdGFydDp7bGluZTo5LGNvbHVtbjoxNX0sZW5kOntsaW5lOjksY29sdW1uOjM0fX0sMTp7c3RhcnQ6e2xpbmU6MTAsY29sdW1uOjE3fSxlbmQ6e2xpbmU6MTAsY29sdW1uOjM2fX0sMjp7c3RhcnQ6e2xpbmU6MTMsY29sdW1uOjJ9LGVuZDp7bGluZToxMyxjb2x1bW46OTB9fSwzOntzdGFydDp7bGluZToxMyxjb2x1bW46NDN9LGVuZDp7bGluZToxMyxjb2x1bW46OTB9fSw0OntzdGFydDp7bGluZToxNSxjb2x1bW46Mn0sZW5kOntsaW5lOjE3LGNvbHVtbjo4MH19LDU6e3N0YXJ0OntsaW5lOjE2LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTYsY29sdW1uOjM3fX0sNjp7c3RhcnQ6e2xpbmU6MTcsY29sdW1uOjE2fSxlbmQ6e2xpbmU6MTcsY29sdW1uOjc4fX0sNzp7c3RhcnQ6e2xpbmU6MTksY29sdW1uOjJ9LGVuZDp7bGluZToxOSxjb2x1bW46MTExfX0sODp7c3RhcnQ6e2xpbmU6MTksY29sdW1uOjY5fSxlbmQ6e2xpbmU6MTksY29sdW1uOjExMX19LDk6e3N0YXJ0OntsaW5lOjIxLGNvbHVtbjoyNH0sZW5kOntsaW5lOjIxLGNvbHVtbjoxMTB9fSwxMDp7c3RhcnQ6e2xpbmU6MjEsY29sdW1uOjU0fSxlbmQ6e2xpbmU6MjEsY29sdW1uOjEwOH19LDExOntzdGFydDp7bGluZToyMyxjb2x1bW46Mn0sZW5kOntsaW5lOjIzLGNvbHVtbjo3OH19LDEyOntzdGFydDp7bGluZToyOCxjb2x1bW46Mn0sZW5kOntsaW5lOjI4LGNvbHVtbjo2OH19LDEzOntzdGFydDp7bGluZToyOCxjb2x1bW46MzJ9LGVuZDp7bGluZToyOCxjb2x1bW46Njh9fSwxNDp7c3RhcnQ6e2xpbmU6MjksY29sdW1uOjJ9LGVuZDp7bGluZToyOSxjb2x1bW46NzR9fSwxNTp7c3RhcnQ6e2xpbmU6MjksY29sdW1uOjM2fSxlbmQ6e2xpbmU6MjksY29sdW1uOjc0fX0sMTY6e3N0YXJ0OntsaW5lOjMwLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzAsY29sdW1uOjEwMX19LDE3OntzdGFydDp7bGluZTozMCxjb2x1bW46NjJ9LGVuZDp7bGluZTozMCxjb2x1bW46MTAxfX0sMTg6e3N0YXJ0OntsaW5lOjMxLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzEsY29sdW1uOjc4fX0sMTk6e3N0YXJ0OntsaW5lOjMxLGNvbHVtbjozOH0sZW5kOntsaW5lOjMxLGNvbHVtbjo3OH19LDIwOntzdGFydDp7bGluZTozMyxjb2x1bW46Mn0sZW5kOntsaW5lOjMzLGNvbHVtbjo2MH19LDIxOntzdGFydDp7bGluZTozOCxjb2x1bW46NH0sZW5kOntsaW5lOjM4LGNvbHVtbjoyNH19LDIyOntzdGFydDp7bGluZTozOSxjb2x1bW46NH0sZW5kOntsaW5lOjM5LGNvbHVtbjoyOH19LDIzOntzdGFydDp7bGluZTo0MCxjb2x1bW46NH0sZW5kOntsaW5lOjQwLGNvbHVtbjo1M319LDI0OntzdGFydDp7bGluZTo0MSxjb2x1bW46NH0sZW5kOntsaW5lOjQxLGNvbHVtbjoyOH19LDI1OntzdGFydDp7bGluZTo0NCxjb2x1bW46MTd9LGVuZDp7bGluZTo0NCxjb2x1bW46MzZ9fSwyNjp7c3RhcnQ6e2xpbmU6NDUsY29sdW1uOjE5fSxlbmQ6e2xpbmU6NDUsY29sdW1uOjQwfX0sMjc6e3N0YXJ0OntsaW5lOjQ2LGNvbHVtbjoyMn0sZW5kOntsaW5lOjQ2LGNvbHVtbjo0Nn19LDI4OntzdGFydDp7bGluZTo0Nyxjb2x1bW46MTl9LGVuZDp7bGluZTo0Nyxjb2x1bW46NDB9fSwyOTp7c3RhcnQ6e2xpbmU6NTAsY29sdW1uOjR9LGVuZDp7bGluZTo1NSxjb2x1bW46N319LDMwOntzdGFydDp7bGluZTo2MSxjb2x1bW46NH0sZW5kOntsaW5lOjYxLGNvbHVtbjoxMn19LDMxOntzdGFydDp7bGluZTo2Mixjb2x1bW46Mjl9LGVuZDp7bGluZTo2NSxjb2x1bW46Nn19LDMyOntzdGFydDp7bGluZTo2Myxjb2x1bW46Nn0sZW5kOntsaW5lOjYzLGNvbHVtbjo4Mn19LDMzOntzdGFydDp7bGluZTo2Myxjb2x1bW46NDF9LGVuZDp7bGluZTo2Myxjb2x1bW46ODJ9fSwzNDp7c3RhcnQ6e2xpbmU6NjQsY29sdW1uOjZ9LGVuZDp7bGluZTo2NCxjb2x1bW46MTd9fSwzNTp7c3RhcnQ6e2xpbmU6NjYsY29sdW1uOjR9LGVuZDp7bGluZTo2Nixjb2x1bW46MzV9fSwzNjp7c3RhcnQ6e2xpbmU6NjksY29sdW1uOjE3fSxlbmQ6e2xpbmU6NjksY29sdW1uOjU4fX0sMzc6e3N0YXJ0OntsaW5lOjY5LGNvbHVtbjo0MX0sZW5kOntsaW5lOjY5LGNvbHVtbjo1NX19LDM4OntzdGFydDp7bGluZTo3MCxjb2x1bW46MTR9LGVuZDp7bGluZTo3MCxjb2x1bW46Mzh9fSwzOTp7c3RhcnQ6e2xpbmU6NzIsY29sdW1uOjE4fSxlbmQ6e2xpbmU6NzIsY29sdW1uOjU0fX0sNDA6e3N0YXJ0OntsaW5lOjczLGNvbHVtbjoyMX0sZW5kOntsaW5lOjczLGNvbHVtbjo2MH19LDQxOntzdGFydDp7bGluZTo3OCxjb2x1bW46Mn0sZW5kOntsaW5lOjc4LGNvbHVtbjo3N319LDQyOntzdGFydDp7bGluZTo3OCxjb2x1bW46MzV9LGVuZDp7bGluZTo3OCxjb2x1bW46Nzd9fSw0Mzp7c3RhcnQ6e2xpbmU6NzksY29sdW1uOjJ9LGVuZDp7bGluZTo3OSxjb2x1bW46NjZ9fSw0NDp7c3RhcnQ6e2xpbmU6NzksY29sdW1uOjMyfSxlbmQ6e2xpbmU6NzksY29sdW1uOjY2fX0sNDU6e3N0YXJ0OntsaW5lOjgxLGNvbHVtbjoyfSxlbmQ6e2xpbmU6ODEsY29sdW1uOjM4fX0sNDY6e3N0YXJ0OntsaW5lOjg2LGNvbHVtbjo0fSxlbmQ6e2xpbmU6ODYsY29sdW1uOjE1fX0sNDc6e3N0YXJ0OntsaW5lOjg3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6ODcsY29sdW1uOjI0fX0sNDg6e3N0YXJ0OntsaW5lOjkwLGNvbHVtbjoxNn0sZW5kOntsaW5lOjkwLGNvbHVtbjo1NX19LDQ5OntzdGFydDp7bGluZTo5MSxjb2x1bW46Mjh9LGVuZDp7bGluZTo5MSxjb2x1bW46NDh9fSw1MDp7c3RhcnQ6e2xpbmU6OTIsY29sdW1uOjR9LGVuZDp7bGluZTo5Mixjb2x1bW46MjZ9fSw1MTp7c3RhcnQ6e2xpbmU6OTUsY29sdW1uOjR9LGVuZDp7bGluZTo5OCxjb2x1bW46Nn19LDUyOntzdGFydDp7bGluZToxMDEsY29sdW1uOjE3fSxlbmQ6e2xpbmU6MTAxLGNvbHVtbjozNn19fSxmbk1hcDp7MDp7bmFtZTpcImltcG9ydFNpZ25hdHVyZUJ1ZmZlclwiLGRlY2w6e3N0YXJ0OntsaW5lOjEyLGNvbHVtbjoxNn0sZW5kOntsaW5lOjEyLGNvbHVtbjozN319LGxvYzp7c3RhcnQ6e2xpbmU6MTIsY29sdW1uOjQ5fSxlbmQ6e2xpbmU6MjQsY29sdW1uOjF9fSxsaW5lOjEyfSwxOntuYW1lOlwiKGFub255bW91c18xKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjIxLGNvbHVtbjo0NH0sZW5kOntsaW5lOjIxLGNvbHVtbjo0NX19LGxvYzp7c3RhcnQ6e2xpbmU6MjEsY29sdW1uOjU0fSxlbmQ6e2xpbmU6MjEsY29sdW1uOjEwOH19LGxpbmU6MjF9LDI6e25hbWU6XCJjcmVhdGVTaWduYXR1cmVcIixkZWNsOntzdGFydDp7bGluZToyNixjb2x1bW46MTZ9LGVuZDp7bGluZToyNixjb2x1bW46MzF9fSxsb2M6e3N0YXJ0OntsaW5lOjI2LGNvbHVtbjo3M30sZW5kOntsaW5lOjM0LGNvbHVtbjoxfX0sbGluZToyNn0sMzp7bmFtZTpcIihhbm9ueW1vdXNfMylcIixkZWNsOntzdGFydDp7bGluZTozNyxjb2x1bW46Mn0sZW5kOntsaW5lOjM3LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTozNyxjb2x1bW46NTV9LGVuZDp7bGluZTo0Mixjb2x1bW46M319LGxpbmU6Mzd9LDQ6e25hbWU6XCIoYW5vbnltb3VzXzQpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NDQsY29sdW1uOjJ9LGVuZDp7bGluZTo0NCxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6NDQsY29sdW1uOjE1fSxlbmQ6e2xpbmU6NDQsY29sdW1uOjM4fX0sbGluZTo0NH0sNTp7bmFtZTpcIihhbm9ueW1vdXNfNSlcIixkZWNsOntzdGFydDp7bGluZTo0NSxjb2x1bW46Mn0sZW5kOntsaW5lOjQ1LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo0NSxjb2x1bW46MTd9LGVuZDp7bGluZTo0NSxjb2x1bW46NDJ9fSxsaW5lOjQ1fSw2OntuYW1lOlwiKGFub255bW91c182KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjQ2LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NDYsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjQ2LGNvbHVtbjoyMH0sZW5kOntsaW5lOjQ2LGNvbHVtbjo0OH19LGxpbmU6NDZ9LDc6e25hbWU6XCIoYW5vbnltb3VzXzcpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NDcsY29sdW1uOjJ9LGVuZDp7bGluZTo0Nyxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6NDcsY29sdW1uOjE3fSxlbmQ6e2xpbmU6NDcsY29sdW1uOjQyfX0sbGluZTo0N30sODp7bmFtZTpcIihhbm9ueW1vdXNfOClcIixkZWNsOntzdGFydDp7bGluZTo0OSxjb2x1bW46Mn0sZW5kOntsaW5lOjQ5LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo0OSxjb2x1bW46MTV9LGVuZDp7bGluZTo1Nixjb2x1bW46M319LGxpbmU6NDl9LDk6e25hbWU6XCIoYW5vbnltb3VzXzkpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NjAsY29sdW1uOjJ9LGVuZDp7bGluZTo2MCxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6NjAsY29sdW1uOjI1fSxlbmQ6e2xpbmU6NjcsY29sdW1uOjN9fSxsaW5lOjYwfSwxMDp7bmFtZTpcIihhbm9ueW1vdXNfMTApXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NjIsY29sdW1uOjQ1fSxlbmQ6e2xpbmU6NjIsY29sdW1uOjQ2fX0sbG9jOntzdGFydDp7bGluZTo2Mixjb2x1bW46NTR9LGVuZDp7bGluZTo2NSxjb2x1bW46NX19LGxpbmU6NjJ9LDExOntuYW1lOlwiKGFub255bW91c18xMSlcIixkZWNsOntzdGFydDp7bGluZTo2OSxjb2x1bW46Mn0sZW5kOntsaW5lOjY5LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo2OSxjb2x1bW46MTV9LGVuZDp7bGluZTo2OSxjb2x1bW46NjB9fSxsaW5lOjY5fSwxMjp7bmFtZTpcIihhbm9ueW1vdXNfMTIpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NjksY29sdW1uOjM0fSxlbmQ6e2xpbmU6NjksY29sdW1uOjM1fX0sbG9jOntzdGFydDp7bGluZTo2OSxjb2x1bW46NDF9LGVuZDp7bGluZTo2OSxjb2x1bW46NTV9fSxsaW5lOjY5fSwxMzp7bmFtZTpcIihhbm9ueW1vdXNfMTMpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NzAsY29sdW1uOjJ9LGVuZDp7bGluZTo3MCxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6NzAsY29sdW1uOjEyfSxlbmQ6e2xpbmU6NzAsY29sdW1uOjQwfX0sbGluZTo3MH0sMTQ6e25hbWU6XCIoYW5vbnltb3VzXzE0KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjcyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6NzIsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjcyLGNvbHVtbjoxNn0sZW5kOntsaW5lOjcyLGNvbHVtbjo1Nn19LGxpbmU6NzJ9LDE1OntuYW1lOlwiKGFub255bW91c18xNSlcIixkZWNsOntzdGFydDp7bGluZTo3Myxjb2x1bW46Mn0sZW5kOntsaW5lOjczLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo3Myxjb2x1bW46MTl9LGVuZDp7bGluZTo3Myxjb2x1bW46NjJ9fSxsaW5lOjczfSwxNjp7bmFtZTpcImNyZWF0ZVJhd1NpZ25hdHVyZVwiLGRlY2w6e3N0YXJ0OntsaW5lOjc2LGNvbHVtbjoxNn0sZW5kOntsaW5lOjc2LGNvbHVtbjozNH19LGxvYzp7c3RhcnQ6e2xpbmU6NzYsY29sdW1uOjQ2fSxlbmQ6e2xpbmU6ODIsY29sdW1uOjF9fSxsaW5lOjc2fSwxNzp7bmFtZTpcIihhbm9ueW1vdXNfMTcpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6ODUsY29sdW1uOjJ9LGVuZDp7bGluZTo4NSxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6ODUsY29sdW1uOjI1fSxlbmQ6e2xpbmU6ODgsY29sdW1uOjN9fSxsaW5lOjg1fSwxODp7bmFtZTpcIihhbm9ueW1vdXNfMTgpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6OTAsY29sdW1uOjJ9LGVuZDp7bGluZTo5MCxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6OTAsY29sdW1uOjE0fSxlbmQ6e2xpbmU6OTAsY29sdW1uOjU3fX0sbGluZTo5MH0sMTk6e25hbWU6XCIoYW5vbnltb3VzXzE5KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjkxLGNvbHVtbjoyfSxlbmQ6e2xpbmU6OTEsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjkxLGNvbHVtbjoxNH0sZW5kOntsaW5lOjkzLGNvbHVtbjozfX0sbGluZTo5MX0sMjA6e25hbWU6XCIoYW5vbnltb3VzXzIwKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjk0LGNvbHVtbjoyfSxlbmQ6e2xpbmU6OTQsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjk0LGNvbHVtbjoxNn0sZW5kOntsaW5lOjk5LGNvbHVtbjozfX0sbGluZTo5NH0sMjE6e25hbWU6XCIoYW5vbnltb3VzXzIxKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjEwMSxjb2x1bW46Mn0sZW5kOntsaW5lOjEwMSxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MTAxLGNvbHVtbjoxNX0sZW5kOntsaW5lOjEwMSxjb2x1bW46Mzh9fSxsaW5lOjEwMX19LGJyYW5jaE1hcDp7MDp7bG9jOntzdGFydDp7bGluZToxMyxjb2x1bW46Mn0sZW5kOntsaW5lOjEzLGNvbHVtbjo5MH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjEzLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTMsY29sdW1uOjkwfX0se3N0YXJ0OntsaW5lOjEzLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTMsY29sdW1uOjkwfX1dLGxpbmU6MTN9LDE6e2xvYzp7c3RhcnQ6e2xpbmU6MTksY29sdW1uOjJ9LGVuZDp7bGluZToxOSxjb2x1bW46MTExfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTksY29sdW1uOjJ9LGVuZDp7bGluZToxOSxjb2x1bW46MTExfX0se3N0YXJ0OntsaW5lOjE5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTksY29sdW1uOjExMX19XSxsaW5lOjE5fSwyOntsb2M6e3N0YXJ0OntsaW5lOjE5LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTksY29sdW1uOjY3fX0sdHlwZTpcImJpbmFyeS1leHByXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTksY29sdW1uOjZ9LGVuZDp7bGluZToxOSxjb2x1bW46MTZ9fSx7c3RhcnQ6e2xpbmU6MTksY29sdW1uOjIwfSxlbmQ6e2xpbmU6MTksY29sdW1uOjMyfX0se3N0YXJ0OntsaW5lOjE5LGNvbHVtbjozNn0sZW5kOntsaW5lOjE5LGNvbHVtbjo1MX19LHtzdGFydDp7bGluZToxOSxjb2x1bW46NTV9LGVuZDp7bGluZToxOSxjb2x1bW46Njd9fV0sbGluZToxOX0sMzp7bG9jOntzdGFydDp7bGluZToyNixjb2x1bW46NjB9LGVuZDp7bGluZToyNixjb2x1bW46NzJ9fSx0eXBlOlwiZGVmYXVsdC1hcmdcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyNixjb2x1bW46NzB9LGVuZDp7bGluZToyNixjb2x1bW46NzJ9fV0sbGluZToyNn0sNDp7bG9jOntzdGFydDp7bGluZToyOCxjb2x1bW46Mn0sZW5kOntsaW5lOjI4LGNvbHVtbjo2OH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjI4LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MjgsY29sdW1uOjY4fX0se3N0YXJ0OntsaW5lOjI4LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MjgsY29sdW1uOjY4fX1dLGxpbmU6Mjh9LDU6e2xvYzp7c3RhcnQ6e2xpbmU6MjksY29sdW1uOjJ9LGVuZDp7bGluZToyOSxjb2x1bW46NzR9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyOSxjb2x1bW46Mn0sZW5kOntsaW5lOjI5LGNvbHVtbjo3NH19LHtzdGFydDp7bGluZToyOSxjb2x1bW46Mn0sZW5kOntsaW5lOjI5LGNvbHVtbjo3NH19XSxsaW5lOjI5fSw2Ontsb2M6e3N0YXJ0OntsaW5lOjMwLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzAsY29sdW1uOjEwMX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjMwLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzAsY29sdW1uOjEwMX19LHtzdGFydDp7bGluZTozMCxjb2x1bW46Mn0sZW5kOntsaW5lOjMwLGNvbHVtbjoxMDF9fV0sbGluZTozMH0sNzp7bG9jOntzdGFydDp7bGluZTozMCxjb2x1bW46NX0sZW5kOntsaW5lOjMwLGNvbHVtbjo2MH19LHR5cGU6XCJiaW5hcnktZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjMwLGNvbHVtbjo1fSxlbmQ6e2xpbmU6MzAsY29sdW1uOjIxfX0se3N0YXJ0OntsaW5lOjMwLGNvbHVtbjoyNX0sZW5kOntsaW5lOjMwLGNvbHVtbjo2MH19XSxsaW5lOjMwfSw4Ontsb2M6e3N0YXJ0OntsaW5lOjMxLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzEsY29sdW1uOjc4fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MzEsY29sdW1uOjJ9LGVuZDp7bGluZTozMSxjb2x1bW46Nzh9fSx7c3RhcnQ6e2xpbmU6MzEsY29sdW1uOjJ9LGVuZDp7bGluZTozMSxjb2x1bW46Nzh9fV0sbGluZTozMX0sOTp7bG9jOntzdGFydDp7bGluZTozNyxjb2x1bW46NDJ9LGVuZDp7bGluZTozNyxjb2x1bW46NTR9fSx0eXBlOlwiZGVmYXVsdC1hcmdcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozNyxjb2x1bW46NTJ9LGVuZDp7bGluZTozNyxjb2x1bW46NTR9fV0sbGluZTozN30sMTA6e2xvYzp7c3RhcnQ6e2xpbmU6NjMsY29sdW1uOjZ9LGVuZDp7bGluZTo2Myxjb2x1bW46ODJ9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo2Myxjb2x1bW46Nn0sZW5kOntsaW5lOjYzLGNvbHVtbjo4Mn19LHtzdGFydDp7bGluZTo2Myxjb2x1bW46Nn0sZW5kOntsaW5lOjYzLGNvbHVtbjo4Mn19XSxsaW5lOjYzfSwxMTp7bG9jOntzdGFydDp7bGluZTo3OCxjb2x1bW46Mn0sZW5kOntsaW5lOjc4LGNvbHVtbjo3N319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjc4LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NzgsY29sdW1uOjc3fX0se3N0YXJ0OntsaW5lOjc4LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NzgsY29sdW1uOjc3fX1dLGxpbmU6Nzh9LDEyOntsb2M6e3N0YXJ0OntsaW5lOjc5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NzksY29sdW1uOjY2fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NzksY29sdW1uOjJ9LGVuZDp7bGluZTo3OSxjb2x1bW46NjZ9fSx7c3RhcnQ6e2xpbmU6NzksY29sdW1uOjJ9LGVuZDp7bGluZTo3OSxjb2x1bW46NjZ9fV0sbGluZTo3OX19LHM6ezA6MCwxOjAsMjowLDM6MCw0OjAsNTowLDY6MCw3OjAsODowLDk6MCwxMDowLDExOjAsMTI6MCwxMzowLDE0OjAsMTU6MCwxNjowLDE3OjAsMTg6MCwxOTowLDIwOjAsMjE6MCwyMjowLDIzOjAsMjQ6MCwyNTowLDI2OjAsMjc6MCwyODowLDI5OjAsMzA6MCwzMTowLDMyOjAsMzM6MCwzNDowLDM1OjAsMzY6MCwzNzowLDM4OjAsMzk6MCw0MDowLDQxOjAsNDI6MCw0MzowLDQ0OjAsNDU6MCw0NjowLDQ3OjAsNDg6MCw0OTowLDUwOjAsNTE6MCw1MjowfSxmOnswOjAsMTowLDI6MCwzOjAsNDowLDU6MCw2OjAsNzowLDg6MCw5OjAsMTA6MCwxMTowLDEyOjAsMTM6MCwxNDowLDE1OjAsMTY6MCwxNzowLDE4OjAsMTk6MCwyMDowLDIxOjB9LGI6ezA6WzAsMF0sMTpbMCwwXSwyOlswLDAsMCwwXSwzOlswXSw0OlswLDBdLDU6WzAsMF0sNjpbMCwwXSw3OlswLDBdLDg6WzAsMF0sOTpbMF0sMTA6WzAsMF0sMTE6WzAsMF0sMTI6WzAsMF19LF9jb3ZlcmFnZVNjaGVtYTpcIjQzZTI3ZTEzOGViZjljZmM1OTY2YjA4MmNmOWEwMjgzMDJlZDQxODRcIn0saT10W2xdfHwodFtsXT17fSk7cmV0dXJuIGlbbl0mJmlbbl0uaGFzaD09PWU/aVtuXTooby5oYXNoPWUsaVtuXT1vKX0oKSxubj0oWi5zWzBdKyssW1wianNjdVwiLFwib3BlbnBncFwiXSksZW49KFouc1sxXSsrLFtcInB1YmxpY19rZXlfc2lnblwiXSk7ZnVuY3Rpb24gdG4obil7aWYoWi5mWzBdKyssWi5zWzJdKyssIShuIGluc3RhbmNlb2YgVWludDhBcnJheSkpdGhyb3cgWi5iWzBdWzBdKyssWi5zWzNdKyssbmV3IEVycm9yKFwiTm9uVWludDhBcnJheVNlcmlhbGl6ZWREYXRhXCIpO3ZhciBlO1ouYlswXVsxXSsrLFouc1s0XSsrO3RyeXtaLnNbNV0rKyxlPUouYS5kZWNvZGUobil9Y2F0Y2gobil7dGhyb3cgWi5zWzZdKyssbmV3IEVycm9yKFwiRmFpbGVkVG9QYXJzZVNpZ25hdHVyZUJ1ZmZlcjogXCIuY29uY2F0KG4ubWVzc2FnZSkpfWlmKFouc1s3XSsrLFouYlsyXVswXSsrLCEoZS5zdWl0ZSYmKFouYlsyXVsxXSsrLGUua2V5VHlwZSkmJihaLmJbMl1bMl0rKyxlLnNpZ25hdHVyZXMpJiYoWi5iWzJdWzNdKyssZS5vcHRpb25zKSkpdGhyb3cgWi5iWzFdWzBdKyssWi5zWzhdKyssbmV3IEVycm9yKFwiSW52YWxpZFNpZ25hdHVyZUZvcm1hdFwiKTtaLmJbMV1bMV0rKzt2YXIgdD0oWi5zWzldKyssZS5zaWduYXR1cmVzLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gWi5mWzFdKyssWi5zWzEwXSsrLGNuKG4uZGF0YSxSKG4ua2V5SWQpKX0pKTtyZXR1cm4gWi5zWzExXSsrLGxuKGUuc3VpdGUsZS5rZXlUeXBlLHQsZS5vcHRpb25zKX1mdW5jdGlvbiBsbihuLGUsdCl7dmFyIGw9YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOihaLmJbM11bMF0rKyx7fSk7aWYoWi5mWzJdKyssWi5zWzEyXSsrLG5uLmluZGV4T2Yobik8MCl0aHJvdyBaLmJbNF1bMF0rKyxaLnNbMTNdKyssbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWRTdWl0ZVwiKTtpZihaLmJbNF1bMV0rKyxaLnNbMTRdKyssZW4uaW5kZXhPZihlKTwwKXRocm93IFouYls1XVswXSsrLFouc1sxNV0rKyxuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZEtleVR5cGVcIik7aWYoWi5iWzVdWzFdKyssWi5zWzE2XSsrLFouYls3XVswXSsrLFwianNjdVwiPT09biYmKFouYls3XVsxXSsrLHZvaWQgMD09PWwuaGFzaCkpdGhyb3cgWi5iWzZdWzBdKyssWi5zWzE3XSsrLG5ldyBFcnJvcihcIkhhc2hNdXN0QmVTcGVjaWZpZWRcIik7aWYoWi5iWzZdWzFdKyssWi5zWzE4XSsrLCEodCBpbnN0YW5jZW9mIEFycmF5KSl0aHJvdyBaLmJbOF1bMF0rKyxaLnNbMTldKyssbmV3IEVycm9yKFwiSW52YWxpZFNpZ25hdHVyZUxpc3RcIik7cmV0dXJuIFouYls4XVsxXSsrLFouc1syMF0rKyxuZXcgb24obixlLHQsbCl9dmFyIG9uPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihlLHQsbCl7dmFyIG89YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOihaLmJbOV1bMF0rKyx7fSk7dSgpKHRoaXMsbiksWi5mWzNdKyssWi5zWzIxXSsrLHRoaXMuX3N1aXRlPWUsWi5zWzIyXSsrLHRoaXMuX2tleVR5cGU9dCxaLnNbMjNdKyssdGhpcy5fc2lnbmF0dXJlcz1uZXcgcm4obCksWi5zWzI0XSsrLHRoaXMuX29wdGlvbnM9b31yZXR1cm4gYSgpKG4sW3trZXk6XCJzZXJpYWxpemVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBaLmZbOF0rKyxaLnNbMjldKyssSi5hLmVuY29kZSh7c3VpdGU6dGhpcy5fc3VpdGUsa2V5VHlwZTp0aGlzLl9rZXlUeXBlLHNpZ25hdHVyZXM6dGhpcy5fc2lnbmF0dXJlcy50b0pzT2JqZWN0KCksb3B0aW9uczp0aGlzLl9vcHRpb25zfSl9fSx7a2V5Olwic3VpdGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gWi5mWzRdKyssWi5zWzI1XSsrLHRoaXMuX3N1aXRlfX0se2tleTpcImtleVR5cGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gWi5mWzVdKyssWi5zWzI2XSsrLHRoaXMuX2tleVR5cGV9fSx7a2V5Olwic2lnbmF0dXJlc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiBaLmZbNl0rKyxaLnNbMjddKyssdGhpcy5fc2lnbmF0dXJlc319LHtrZXk6XCJvcHRpb25zXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFouZls3XSsrLFouc1syOF0rKyx0aGlzLl9vcHRpb25zfX1dKSxufSgpLHJuPWZ1bmN0aW9uKG4pe2Z1bmN0aW9uIGUobil7dmFyIHQsbDt1KCkodGhpcyxlKSxaLmZbOV0rKyxaLnNbMzBdKyssbD1oKCkodGhpcyx2KCkoZSkuY2FsbCh0aGlzKSk7dmFyIG89KFouc1szMV0rKyxuLm1hcChmdW5jdGlvbihuKXtpZihaLmZbMTBdKyssWi5zWzMyXSsrLCEobiBpbnN0YW5jZW9mIHVuKSl0aHJvdyBaLmJbMTBdWzBdKyssWi5zWzMzXSsrLG5ldyBFcnJvcihcIk5vdFJhd1NpZ25hdHVyZU9iamVjdFwiKTtyZXR1cm4gWi5iWzEwXVsxXSsrLFouc1szNF0rKyxufSkpO3JldHVybiBaLnNbMzVdKyssKHQ9bCkucHVzaC5hcHBseSh0LHAoKShvKSksbH1yZXR1cm4gdygpKGUsbiksYSgpKGUsW3trZXk6XCJ0b0pzT2JqZWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gWi5mWzExXSsrLFouc1szNl0rKyx0aGlzLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gWi5mWzEyXSsrLFouc1szN10rKyxuLnRvSnNPYmplY3QoKX0pfX0se2tleTpcInRvQXJyYXlcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBaLmZbMTNdKyssWi5zWzM4XSsrLEFycmF5LmZyb20odGhpcyl9fSx7a2V5OlwibWFwXCIsdmFsdWU6ZnVuY3Rpb24obil7cmV0dXJuIFouZlsxNF0rKyxaLnNbMzldKyssdGhpcy50b0FycmF5KCkubWFwKG4pfX0se2tleTpcImZpbHRlclwiLHZhbHVlOmZ1bmN0aW9uKG4pe3JldHVybiBaLmZbMTVdKyssWi5zWzQwXSsrLHRoaXMudG9BcnJheSgpLmZpbHRlcihuKX19XSksZX0oUygpKEFycmF5KSk7ZnVuY3Rpb24gY24obixlKXtpZihaLmZbMTZdKyssWi5zWzQxXSsrLCEobiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKXRocm93IFouYlsxMV1bMF0rKyxaLnNbNDJdKyssbmV3IEVycm9yKFwiTm9uVWludDhBcnJheVNpZ25hdHVyZVwiKTtpZihaLmJbMTFdWzFdKyssWi5zWzQzXSsrLCEoZSBpbnN0YW5jZW9mIEwpKXRocm93IFouYlsxMl1bMF0rKyxaLnNbNDRdKyssbmV3IEVycm9yKFwiTm9uS2V5SWRPYmplY3RcIik7cmV0dXJuIFouYlsxMl1bMV0rKyxaLnNbNDVdKyssbmV3IHVuKG4sZSl9dmFyIHVuPWZ1bmN0aW9uKG4pe2Z1bmN0aW9uIGUobix0KXt2YXIgbDtyZXR1cm4gdSgpKHRoaXMsZSksWi5mWzE3XSsrLFouc1s0Nl0rKyxsPWgoKSh0aGlzLHYoKShlKS5jYWxsKHRoaXMsbikpLFouc1s0N10rKyxsLl9rZXlJZD10LGx9cmV0dXJuIHcoKShlLG4pLGEoKShlLFt7a2V5OlwidG9CYXNlNjRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBaLmZbMThdKyssWi5zWzQ4XSsrLFAuYS5lbmNvZGVyLmVuY29kZUJhc2U2NCh0aGlzKX19LHtrZXk6XCJ0b0J1ZmZlclwiLHZhbHVlOmZ1bmN0aW9uKCl7Wi5mWzE5XSsrO3ZhciBuPShaLnNbNDldKyssbmV3IFVpbnQ4QXJyYXkodGhpcykpO3JldHVybiBaLnNbNTBdKyssZCgpKG4pfX0se2tleTpcInRvSnNPYmplY3RcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBaLmZbMjBdKyssWi5zWzUxXSsrLHtkYXRhOnRoaXMudG9CdWZmZXIoKSxrZXlJZDp0aGlzLl9rZXlJZC50b0J1ZmZlcigpfX19LHtrZXk6XCJrZXlJZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBaLmZbMjFdKyssWi5zWzUyXSsrLHRoaXMuX2tleUlkfX1dKSxlfShTKCkoVWludDhBcnJheSkpLHNuPWZ1bmN0aW9uKCl7dmFyIG49XCIvVXNlcnMvanVuL1Byb2plY3RKYXZhU2NyaXB0L2Nhc2NhZGUvc3JjL3N1aXRlX2pzY3UuanNcIixlPVwiOWY3OGU0MTU1YWIwNjJiMjBmNDI4NWIxNjAwMWEyZjk1ZTUzNTA3Y1wiLHQ9bmV3KDAsZnVuY3Rpb24oKXt9LmNvbnN0cnVjdG9yKShcInJldHVybiB0aGlzXCIpKCksbD1cIl9fY292ZXJhZ2VfX1wiLG89e3BhdGg6XCIvVXNlcnMvanVuL1Byb2plY3RKYXZhU2NyaXB0L2Nhc2NhZGUvc3JjL3N1aXRlX2pzY3UuanNcIixzdGF0ZW1lbnRNYXA6ezA6e3N0YXJ0OntsaW5lOjIxLGNvbHVtbjoxN30sZW5kOntsaW5lOjIxLGNvbHVtbjoyNn19LDE6e3N0YXJ0OntsaW5lOjIzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NTQsY29sdW1uOjUxfX0sMjp7c3RhcnQ6e2xpbmU6MjQsY29sdW1uOjZ9LGVuZDp7bGluZToyNCxjb2x1bW46Nzd9fSwzOntzdGFydDp7bGluZToyNCxjb2x1bW46MjZ9LGVuZDp7bGluZToyNCxjb2x1bW46Nzd9fSw0OntzdGFydDp7bGluZToyNSxjb2x1bW46MjF9LGVuZDp7bGluZToyNSxjb2x1bW46Njh9fSw1OntzdGFydDp7bGluZToyNixjb2x1bW46MjB9LGVuZDp7bGluZToyNixjb2x1bW46NTR9fSw2OntzdGFydDp7bGluZToyNyxjb2x1bW46Nn0sZW5kOntsaW5lOjMwLGNvbHVtbjo4fX0sNzp7c3RhcnQ6e2xpbmU6MzIsY29sdW1uOjl9LGVuZDp7bGluZTo1NCxjb2x1bW46NTF9fSw4OntzdGFydDp7bGluZTozMyxjb2x1bW46MjJ9LGVuZDp7bGluZTozMyxjb2x1bW46NTl9fSw5OntzdGFydDp7bGluZTozNCxjb2x1bW46MjJ9LGVuZDp7bGluZTozNCxjb2x1bW46MTEzfX0sMTA6e3N0YXJ0OntsaW5lOjM2LGNvbHVtbjoyMX0sZW5kOntsaW5lOjM2LGNvbHVtbjo2NX19LDExOntzdGFydDp7bGluZTozNyxjb2x1bW46MjB9LGVuZDp7bGluZTozNyxjb2x1bW46ODZ9fSwxMjp7c3RhcnQ6e2xpbmU6MzksY29sdW1uOjI3fSxlbmQ6e2xpbmU6MzksY29sdW1uOjY0fX0sMTM6e3N0YXJ0OntsaW5lOjQwLGNvbHVtbjoyNn0sZW5kOntsaW5lOjQwLGNvbHVtbjo2NH19LDE0OntzdGFydDp7bGluZTo0Myxjb2x1bW46Nn0sZW5kOntsaW5lOjQ2LGNvbHVtbjo3fX0sMTU6e3N0YXJ0OntsaW5lOjQ0LGNvbHVtbjoyOX0sZW5kOntsaW5lOjQ0LGNvbHVtbjoxMjR9fSwxNjp7c3RhcnQ6e2xpbmU6NDUsY29sdW1uOjh9LGVuZDp7bGluZTo0NSxjb2x1bW46NTh9fSwxNzp7c3RhcnQ6e2xpbmU6NDgsY29sdW1uOjZ9LGVuZDp7bGluZTo1Mixjb2x1bW46OH19LDE4OntzdGFydDp7bGluZTo1NCxjb2x1bW46OX0sZW5kOntsaW5lOjU0LGNvbHVtbjo1MX19LDE5OntzdGFydDp7bGluZTo2NSxjb2x1bW46MTd9LGVuZDp7bGluZTo2NSxjb2x1bW46MjZ9fSwyMDp7c3RhcnQ6e2xpbmU6NjcsY29sdW1uOjE5fSxlbmQ6e2xpbmU6NjcsY29sdW1uOjQyfX0sMjE6e3N0YXJ0OntsaW5lOjY5LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NzQsY29sdW1uOjV9fSwyMjp7c3RhcnQ6e2xpbmU6NzAsY29sdW1uOjZ9LGVuZDp7bGluZTo3MCxjb2x1bW46NjB9fSwyMzp7c3RhcnQ6e2xpbmU6NzAsY29sdW1uOjIyfSxlbmQ6e2xpbmU6NzAsY29sdW1uOjYwfX0sMjQ6e3N0YXJ0OntsaW5lOjcxLGNvbHVtbjo2fSxlbmQ6e2xpbmU6NzMsY29sdW1uOjl9fSwyNTp7c3RhcnQ6e2xpbmU6NzIsY29sdW1uOjh9LGVuZDp7bGluZTo3Mixjb2x1bW46Njd9fSwyNjp7c3RhcnQ6e2xpbmU6NzYsY29sdW1uOjR9LGVuZDp7bGluZTo3Nixjb2x1bW46MTh9fSwyNzp7c3RhcnQ6e2xpbmU6ODcsY29sdW1uOjE3fSxlbmQ6e2xpbmU6ODcsY29sdW1uOjI2fX0sMjg6e3N0YXJ0OntsaW5lOjkwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6OTAsY29sdW1uOjUyfX0sMjk6e3N0YXJ0OntsaW5lOjkwLGNvbHVtbjozOX0sZW5kOntsaW5lOjkwLGNvbHVtbjo1Mn19LDMwOntzdGFydDp7bGluZTo5NSxjb2x1bW46NH0sZW5kOntsaW5lOjE0MCxjb2x1bW46NTN9fSwzMTp7c3RhcnQ6e2xpbmU6OTcsY29sdW1uOjZ9LGVuZDp7bGluZToxMDEsY29sdW1uOjd9fSwzMjp7c3RhcnQ6e2xpbmU6OTgsY29sdW1uOjh9LGVuZDp7bGluZTo5OCxjb2x1bW46MTI3fX0sMzM6e3N0YXJ0OntsaW5lOjk5LGNvbHVtbjo4fSxlbmQ6e2xpbmU6OTksY29sdW1uOjY4fX0sMzQ6e3N0YXJ0OntsaW5lOjEwMCxjb2x1bW46OH0sZW5kOntsaW5lOjEwMCxjb2x1bW46Mzh9fSwzNTp7c3RhcnQ6e2xpbmU6MTA0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTEwLGNvbHVtbjo3fX0sMzY6e3N0YXJ0OntsaW5lOjEwNSxjb2x1bW46MjB9LGVuZDp7bGluZToxMDUsY29sdW1uOjU4fX0sMzc6e3N0YXJ0OntsaW5lOjEwNixjb2x1bW46OH0sZW5kOntsaW5lOjEwOSxjb2x1bW46OX19LDM4OntzdGFydDp7bGluZToxMDcsY29sdW1uOjI4fSxlbmQ6e2xpbmU6MTA3LGNvbHVtbjo4M319LDM5OntzdGFydDp7bGluZToxMDgsY29sdW1uOjEwfSxlbmQ6e2xpbmU6MTA4LGNvbHVtbjo1Mn19LDQwOntzdGFydDp7bGluZToxMTIsY29sdW1uOjZ9LGVuZDp7bGluZToxMTgsY29sdW1uOjEwfX0sNDE6e3N0YXJ0OntsaW5lOjExMyxjb2x1bW46MjZ9LGVuZDp7bGluZToxMTMsY29sdW1uOjU4fX0sNDI6e3N0YXJ0OntsaW5lOjExNCxjb2x1bW46MjF9LGVuZDp7bGluZToxMTQsY29sdW1uOjc5fX0sNDM6e3N0YXJ0OntsaW5lOjExNSxjb2x1bW46MjB9LGVuZDp7bGluZToxMTUsY29sdW1uOjQ1fX0sNDQ6e3N0YXJ0OntsaW5lOjExNixjb2x1bW46OH0sZW5kOntsaW5lOjExNixjb2x1bW46MjV9fSw0NTp7c3RhcnQ6e2xpbmU6MTE3LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTE3LGNvbHVtbjo5NX19LDQ2OntzdGFydDp7bGluZToxMjEsY29sdW1uOjZ9LGVuZDp7bGluZToxMjUsY29sdW1uOjd9fSw0Nzp7c3RhcnQ6e2xpbmU6MTIyLGNvbHVtbjoyNn0sZW5kOntsaW5lOjEyMixjb2x1bW46NjV9fSw0ODp7c3RhcnQ6e2xpbmU6MTIzLGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTIzLGNvbHVtbjo4MH19LDQ5OntzdGFydDp7bGluZToxMjQsY29sdW1uOjh9LGVuZDp7bGluZToxMjQsY29sdW1uOjM0fX0sNTA6e3N0YXJ0OntsaW5lOjEyNyxjb2x1bW46Nn0sZW5kOntsaW5lOjEyNyxjb2x1bW46MTA4fX0sNTE6e3N0YXJ0OntsaW5lOjEyOSxjb2x1bW46OX0sZW5kOntsaW5lOjE0MCxjb2x1bW46NTN9fSw1Mjp7c3RhcnQ6e2xpbmU6MTMwLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTM3LGNvbHVtbjo2MX19LDUzOntzdGFydDp7bGluZToxMzEsY29sdW1uOjE5fSxlbmQ6e2xpbmU6MTMxLGNvbHVtbjo3OX19LDU0OntzdGFydDp7bGluZToxMzIsY29sdW1uOjIxfSxlbmQ6e2xpbmU6MTMyLGNvbHVtbjoxMDJ9fSw1NTp7c3RhcnQ6e2xpbmU6MTMzLGNvbHVtbjoyMn0sZW5kOntsaW5lOjEzMyxjb2x1bW46NjV9fSw1Njp7c3RhcnQ6e2xpbmU6MTM0LGNvbHVtbjoyMH0sZW5kOntsaW5lOjEzNCxjb2x1bW46NjR9fSw1Nzp7c3RhcnQ6e2xpbmU6MTM1LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTM1LGNvbHVtbjoyNn19LDU4OntzdGFydDp7bGluZToxMzcsY29sdW1uOjExfSxlbmQ6e2xpbmU6MTM3LGNvbHVtbjo2MX19LDU5OntzdGFydDp7bGluZToxMzgsY29sdW1uOjZ9LGVuZDp7bGluZToxMzgsY29sdW1uOjEwOX19LDYwOntzdGFydDp7bGluZToxNDAsY29sdW1uOjl9LGVuZDp7bGluZToxNDAsY29sdW1uOjUzfX0sNjE6e3N0YXJ0OntsaW5lOjE0Mixjb2x1bW46NH0sZW5kOntsaW5lOjE0Mixjb2x1bW46Mjd9fSw2Mjp7c3RhcnQ6e2xpbmU6MTUzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTUzLGNvbHVtbjo5M319LDYzOntzdGFydDp7bGluZToxNTMsY29sdW1uOjUwfSxlbmQ6e2xpbmU6MTUzLGNvbHVtbjo5M319LDY0OntzdGFydDp7bGluZToxNTQsY29sdW1uOjR9LGVuZDp7bGluZToxNTQsY29sdW1uOjkwfX0sNjU6e3N0YXJ0OntsaW5lOjE1NCxjb2x1bW46NTV9LGVuZDp7bGluZToxNTQsY29sdW1uOjkwfX0sNjY6e3N0YXJ0OntsaW5lOjE1NSxjb2x1bW46MTd9LGVuZDp7bGluZToxNTUsY29sdW1uOjI2fX0sNjc6e3N0YXJ0OntsaW5lOjE1Nyxjb2x1bW46MjB9LGVuZDp7bGluZToxNTcsY29sdW1uOjQ1fX0sNjg6e3N0YXJ0OntsaW5lOjE2MSxjb2x1bW46NH0sZW5kOntsaW5lOjIxOCxjb2x1bW46NjF9fSw2OTp7c3RhcnQ6e2xpbmU6MTYzLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTYzLGNvbHVtbjo3MX19LDcwOntzdGFydDp7bGluZToxNjMsY29sdW1uOjI5fSxlbmQ6e2xpbmU6MTYzLGNvbHVtbjo3MX19LDcxOntzdGFydDp7bGluZToxNjQsY29sdW1uOjZ9LGVuZDp7bGluZToxNjcsY29sdW1uOjd9fSw3Mjp7c3RhcnQ6e2xpbmU6MTY1LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTY1LGNvbHVtbjo3NX19LDczOntzdGFydDp7bGluZToxNjYsY29sdW1uOjh9LGVuZDp7bGluZToxNjYsY29sdW1uOjY2fX0sNzQ6e3N0YXJ0OntsaW5lOjE3MCxjb2x1bW46MzV9LGVuZDp7bGluZToxNzcsY29sdW1uOjd9fSw3NTp7c3RhcnQ6e2xpbmU6MTcxLGNvbHVtbjoyMX0sZW5kOntsaW5lOjE3MSxjb2x1bW46NDF9fSw3Njp7c3RhcnQ6e2xpbmU6MTcyLGNvbHVtbjoyMX0sZW5kOntsaW5lOjE3Mixjb2x1bW46MTAzfX0sNzc6e3N0YXJ0OntsaW5lOjE3Myxjb2x1bW46MTl9LGVuZDp7bGluZToxNzMsY29sdW1uOjk3fX0sNzg6e3N0YXJ0OntsaW5lOjE3NCxjb2x1bW46Mjd9LGVuZDp7bGluZToxNzQsY29sdW1uOjYzfX0sNzk6e3N0YXJ0OntsaW5lOjE3NSxjb2x1bW46Mjd9LGVuZDp7bGluZToxNzUsY29sdW1uOjYzfX0sODA6e3N0YXJ0OntsaW5lOjE3Nixjb2x1bW46OH0sZW5kOntsaW5lOjE3Nixjb2x1bW46Njh9fSw4MTp7c3RhcnQ6e2xpbmU6MTgwLGNvbHVtbjoyNH0sZW5kOntsaW5lOjE4MCxjb2x1bW46MjZ9fSw4Mjp7c3RhcnQ6e2xpbmU6MTgxLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTg1LGNvbHVtbjoxMH19LDgzOntzdGFydDp7bGluZToxODIsY29sdW1uOjIyfSxlbmQ6e2xpbmU6MTgyLGNvbHVtbjo1M319LDg0OntzdGFydDp7bGluZToxODMsY29sdW1uOjI1fSxlbmQ6e2xpbmU6MTgzLGNvbHVtbjoxMDJ9fSw4NTp7c3RhcnQ6e2xpbmU6MTgzLGNvbHVtbjo2N30sZW5kOntsaW5lOjE4Myxjb2x1bW46MTAwfX0sODY6e3N0YXJ0OntsaW5lOjE4NCxjb2x1bW46OH0sZW5kOntsaW5lOjE4NCxjb2x1bW46ODB9fSw4Nzp7c3RhcnQ6e2xpbmU6MTg0LGNvbHVtbjo0N30sZW5kOntsaW5lOjE4NCxjb2x1bW46NzV9fSw4ODp7c3RhcnQ6e2xpbmU6MTg2LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTg2LGNvbHVtbjo4OH19LDg5OntzdGFydDp7bGluZToxODYsY29sdW1uOjM0fSxlbmQ6e2xpbmU6MTg2LGNvbHVtbjo4OH19LDkwOntzdGFydDp7bGluZToxODgsY29sdW1uOjE5fSxlbmQ6e2xpbmU6MTg4LGNvbHVtbjoyMX19LDkxOntzdGFydDp7bGluZToxODksY29sdW1uOjI5fSxlbmQ6e2xpbmU6MTkzLGNvbHVtbjo5fX0sOTI6e3N0YXJ0OntsaW5lOjE5MCxjb2x1bW46MTh9LGVuZDp7bGluZToxOTAsY29sdW1uOjExMn19LDkzOntzdGFydDp7bGluZToxOTAsY29sdW1uOjkwfSxlbmQ6e2xpbmU6MTkwLGNvbHVtbjoxMDl9fSw5NDp7c3RhcnQ6e2xpbmU6MTkxLGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTkyLGNvbHVtbjoyNX19LDk1OntzdGFydDp7bGluZToxOTEsY29sdW1uOjE0fSxlbmQ6e2xpbmU6MTkxLGNvbHVtbjoyM319LDk2OntzdGFydDp7bGluZToxOTIsY29sdW1uOjEzfSxlbmQ6e2xpbmU6MTkyLGNvbHVtbjoyNX19LDk3OntzdGFydDp7bGluZToxOTQsY29sdW1uOjI2fSxlbmQ6e2xpbmU6MTk0LGNvbHVtbjo2OX19LDk4OntzdGFydDp7bGluZToxOTQsY29sdW1uOjU3fSxlbmQ6e2xpbmU6MTk0LGNvbHVtbjo2N319LDk5OntzdGFydDp7bGluZToxOTYsY29sdW1uOjZ9LGVuZDp7bGluZToxOTcsY29sdW1uOjM1fX0sMTAwOntzdGFydDp7bGluZToxOTYsY29sdW1uOjMzfSxlbmQ6e2xpbmU6MTk2LGNvbHVtbjo2MH19LDEwMTp7c3RhcnQ6e2xpbmU6MTk3LGNvbHVtbjoxMX0sZW5kOntsaW5lOjE5Nyxjb2x1bW46MzV9fSwxMDI6e3N0YXJ0OntsaW5lOjIwMSxjb2x1bW46OX0sZW5kOntsaW5lOjIxOCxjb2x1bW46NjF9fSwxMDM6e3N0YXJ0OntsaW5lOjIwMyxjb2x1bW46Nn0sZW5kOntsaW5lOjIwMyxjb2x1bW46NzB9fSwxMDQ6e3N0YXJ0OntsaW5lOjIwMyxjb2x1bW46Mjh9LGVuZDp7bGluZToyMDMsY29sdW1uOjcwfX0sMTA1OntzdGFydDp7bGluZToyMDQsY29sdW1uOjZ9LGVuZDp7bGluZToyMDQsY29sdW1uOjkyfX0sMTA2OntzdGFydDp7bGluZToyMDQsY29sdW1uOjU3fSxlbmQ6e2xpbmU6MjA0LGNvbHVtbjo5Mn19LDEwNzp7c3RhcnQ6e2xpbmU6MjA2LGNvbHVtbjoyMn0sZW5kOntsaW5lOjIwNixjb2x1bW46NTB9fSwxMDg6e3N0YXJ0OntsaW5lOjIwNyxjb2x1bW46MTd9LGVuZDp7bGluZToyMDcsY29sdW1uOjg2fX0sMTA5OntzdGFydDp7bGluZToyMDksY29sdW1uOjZ9LGVuZDp7bGluZToyMTYsY29sdW1uOjYxfX0sMTEwOntzdGFydDp7bGluZToyMTAsY29sdW1uOjh9LGVuZDp7bGluZToyMTQsY29sdW1uOjEwfX0sMTExOntzdGFydDp7bGluZToyMTYsY29sdW1uOjExfSxlbmQ6e2xpbmU6MjE2LGNvbHVtbjo2MX19LDExMjp7c3RhcnQ6e2xpbmU6MjE4LGNvbHVtbjo5fSxlbmQ6e2xpbmU6MjE4LGNvbHVtbjo2MX19LDExMzp7c3RhcnQ6e2xpbmU6MjIwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjIwLGNvbHVtbjoyOX19LDExNDp7c3RhcnQ6e2xpbmU6MjMxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjMxLGNvbHVtbjo2OH19LDExNTp7c3RhcnQ6e2xpbmU6MjMxLGNvbHVtbjoyNn0sZW5kOntsaW5lOjIzMSxjb2x1bW46Njh9fSwxMTY6e3N0YXJ0OntsaW5lOjIzMyxjb2x1bW46MTd9LGVuZDp7bGluZToyMzMsY29sdW1uOjI2fX0sMTE3OntzdGFydDp7bGluZToyMzUsY29sdW1uOjIzfSxlbmQ6e2xpbmU6MjQxLGNvbHVtbjo3fX0sMTE4OntzdGFydDp7bGluZToyMzYsY29sdW1uOjI1fSxlbmQ6e2xpbmU6MjM2LGNvbHVtbjo1Mn19LDExOTp7c3RhcnQ6e2xpbmU6MjM3LGNvbHVtbjoyNH0sZW5kOntsaW5lOjIzNyxjb2x1bW46MTI2fX0sMTIwOntzdGFydDp7bGluZToyMzgsY29sdW1uOjIwfSxlbmQ6e2xpbmU6MjM4LGNvbHVtbjo1Nn19LDEyMTp7c3RhcnQ6e2xpbmU6MjQwLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MjQwLGNvbHVtbjo1MH19LDEyMjp7c3RhcnQ6e2xpbmU6MjQzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjQzLGNvbHVtbjo4OX19LDEyMzp7c3RhcnQ6e2xpbmU6MjU1LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjU1LGNvbHVtbjo3Mn19LDEyNDp7c3RhcnQ6e2xpbmU6MjU1LGNvbHVtbjoyNX0sZW5kOntsaW5lOjI1NSxjb2x1bW46NzJ9fSwxMjU6e3N0YXJ0OntsaW5lOjI1Nyxjb2x1bW46MTd9LGVuZDp7bGluZToyNTcsY29sdW1uOjI2fX0sMTI2OntzdGFydDp7bGluZToyNTksY29sdW1uOjI4fSxlbmQ6e2xpbmU6MjU5LGNvbHVtbjozMH19LDEyNzp7c3RhcnQ6e2xpbmU6MjYwLGNvbHVtbjoyM30sZW5kOntsaW5lOjI2MCxjb2x1bW46MjV9fSwxMjg6e3N0YXJ0OntsaW5lOjI2MSxjb2x1bW46NH0sZW5kOntsaW5lOjI3MSxjb2x1bW46OH19LDEyOTp7c3RhcnQ6e2xpbmU6MjYyLGNvbHVtbjoyMH0sZW5kOntsaW5lOjI2Mixjb2x1bW46NTF9fSwxMzA6e3N0YXJ0OntsaW5lOjI2Myxjb2x1bW46MjN9LGVuZDp7bGluZToyNjksY29sdW1uOjh9fSwxMzE6e3N0YXJ0OntsaW5lOjI2NCxjb2x1bW46OH0sZW5kOntsaW5lOjI2OCxjb2x1bW46OX19LDEzMjp7c3RhcnQ6e2xpbmU6MjY0LGNvbHVtbjo0Nn0sZW5kOntsaW5lOjI2NCxjb2x1bW46NTh9fSwxMzM6e3N0YXJ0OntsaW5lOjI2Nixjb2x1bW46MTB9LGVuZDp7bGluZToyNjYsY29sdW1uOjYyfX0sMTM0OntzdGFydDp7bGluZToyNjcsY29sdW1uOjEwfSxlbmQ6e2xpbmU6MjY3LGNvbHVtbjoyM319LDEzNTp7c3RhcnQ6e2xpbmU6MjcwLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MjcwLGNvbHVtbjo4NX19LDEzNjp7c3RhcnQ6e2xpbmU6MjcwLGNvbHVtbjo1MX0sZW5kOntsaW5lOjI3MCxjb2x1bW46ODB9fSwxMzc6e3N0YXJ0OntsaW5lOjI3Myxjb2x1bW46MjF9LGVuZDp7bGluZToyODIsY29sdW1uOjd9fSwxMzg6e3N0YXJ0OntsaW5lOjI3NCxjb2x1bW46MjB9LGVuZDp7bGluZToyODAsY29sdW1uOjd9fSwxMzk6e3N0YXJ0OntsaW5lOjI4MSxjb2x1bW46Nn0sZW5kOntsaW5lOjI4MSxjb2x1bW46NTJ9fSwxNDA6e3N0YXJ0OntsaW5lOjI4NCxjb2x1bW46NH0sZW5kOntsaW5lOjI4NCxjb2x1bW46Mzl9fX0sZm5NYXA6ezA6e25hbWU6XCIoYW5vbnltb3VzXzApXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MjAsY29sdW1uOjJ9LGVuZDp7bGluZToyMCxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MjAsY29sdW1uOjczfSxlbmQ6e2xpbmU6NTUsY29sdW1uOjN9fSxsaW5lOjIwfSwxOntuYW1lOlwiKGFub255bW91c18xKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjY0LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NjQsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjY0LGNvbHVtbjo0N30sZW5kOntsaW5lOjc3LGNvbHVtbjozfX0sbGluZTo2NH0sMjp7bmFtZTpcIihhbm9ueW1vdXNfMilcIixkZWNsOntzdGFydDp7bGluZTo3MSxjb2x1bW46NDZ9LGVuZDp7bGluZTo3MSxjb2x1bW46NDd9fSxsb2M6e3N0YXJ0OntsaW5lOjcxLGNvbHVtbjo1M30sZW5kOntsaW5lOjczLGNvbHVtbjo3fX0sbGluZTo3MX0sMzp7bmFtZTpcIihhbm9ueW1vdXNfMylcIixkZWNsOntzdGFydDp7bGluZTo4Nixjb2x1bW46Mn0sZW5kOntsaW5lOjg2LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo4Nixjb2x1bW46NDl9LGVuZDp7bGluZToxNDMsY29sdW1uOjN9fSxsaW5lOjg2fSw0OntuYW1lOlwiKGFub255bW91c180KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjExMixjb2x1bW46NTd9LGVuZDp7bGluZToxMTIsY29sdW1uOjU4fX0sbG9jOntzdGFydDp7bGluZToxMTIsY29sdW1uOjgxfSxlbmQ6e2xpbmU6MTE4LGNvbHVtbjo3fX0sbGluZToxMTJ9LDU6e25hbWU6XCIoYW5vbnltb3VzXzUpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTUyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTUyLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToxNTIsY29sdW1uOjUyfSxlbmQ6e2xpbmU6MjIxLGNvbHVtbjozfX0sbGluZToxNTJ9LDY6e25hbWU6XCIoYW5vbnltb3VzXzYpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTcwLGNvbHVtbjozNX0sZW5kOntsaW5lOjE3MCxjb2x1bW46MzZ9fSxsb2M6e3N0YXJ0OntsaW5lOjE3MCxjb2x1bW46NzR9LGVuZDp7bGluZToxNzcsY29sdW1uOjd9fSxsaW5lOjE3MH0sNzp7bmFtZTpcIihhbm9ueW1vdXNfNylcIixkZWNsOntzdGFydDp7bGluZToxODEsY29sdW1uOjQ2fSxlbmQ6e2xpbmU6MTgxLGNvbHVtbjo0N319LGxvYzp7c3RhcnQ6e2xpbmU6MTgxLGNvbHVtbjo2MH0sZW5kOntsaW5lOjE4NSxjb2x1bW46N319LGxpbmU6MTgxfSw4OntuYW1lOlwiKGFub255bW91c184KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjE4Myxjb2x1bW46NTl9LGVuZDp7bGluZToxODMsY29sdW1uOjYwfX0sbG9jOntzdGFydDp7bGluZToxODMsY29sdW1uOjY3fSxlbmQ6e2xpbmU6MTgzLGNvbHVtbjoxMDB9fSxsaW5lOjE4M30sOTp7bmFtZTpcIihhbm9ueW1vdXNfOSlcIixkZWNsOntzdGFydDp7bGluZToxODQsY29sdW1uOjM5fSxlbmQ6e2xpbmU6MTg0LGNvbHVtbjo0MH19LGxvYzp7c3RhcnQ6e2xpbmU6MTg0LGNvbHVtbjo0N30sZW5kOntsaW5lOjE4NCxjb2x1bW46NzV9fSxsaW5lOjE4NH0sMTA6e25hbWU6XCIoYW5vbnltb3VzXzEwKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjE4OSxjb2x1bW46NjJ9LGVuZDp7bGluZToxODksY29sdW1uOjYzfX0sbG9jOntzdGFydDp7bGluZToxODksY29sdW1uOjc3fSxlbmQ6e2xpbmU6MTkzLGNvbHVtbjo3fX0sbGluZToxODl9LDExOntuYW1lOlwiKGFub255bW91c18xMSlcIixkZWNsOntzdGFydDp7bGluZToxOTAsY29sdW1uOjgxfSxlbmQ6e2xpbmU6MTkwLGNvbHVtbjo4Mn19LGxvYzp7c3RhcnQ6e2xpbmU6MTkwLGNvbHVtbjo4OH0sZW5kOntsaW5lOjE5MCxjb2x1bW46MTExfX0sbGluZToxOTB9LDEyOntuYW1lOlwiKGFub255bW91c18xMilcIixkZWNsOntzdGFydDp7bGluZToxOTQsY29sdW1uOjQ5fSxlbmQ6e2xpbmU6MTk0LGNvbHVtbjo1MH19LGxvYzp7c3RhcnQ6e2xpbmU6MTk0LGNvbHVtbjo1N30sZW5kOntsaW5lOjE5NCxjb2x1bW46Njd9fSxsaW5lOjE5NH0sMTM6e25hbWU6XCIoYW5vbnltb3VzXzEzKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjIzMCxjb2x1bW46Mn0sZW5kOntsaW5lOjIzMCxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MjMwLGNvbHVtbjo0NX0sZW5kOntsaW5lOjI0NCxjb2x1bW46M319LGxpbmU6MjMwfSwxNDp7bmFtZTpcIihhbm9ueW1vdXNfMTQpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MjM1LGNvbHVtbjo2M30sZW5kOntsaW5lOjIzNSxjb2x1bW46NjR9fSxsb2M6e3N0YXJ0OntsaW5lOjIzNSxjb2x1bW46ODJ9LGVuZDp7bGluZToyNDEsY29sdW1uOjV9fSxsaW5lOjIzNX0sMTU6e25hbWU6XCIoYW5vbnltb3VzXzE1KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjI1NCxjb2x1bW46Mn0sZW5kOntsaW5lOjI1NCxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MjU0LGNvbHVtbjo1OH0sZW5kOntsaW5lOjI4NSxjb2x1bW46M319LGxpbmU6MjU0fSwxNjp7bmFtZTpcIihhbm9ueW1vdXNfMTYpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MjYxLGNvbHVtbjo0M30sZW5kOntsaW5lOjI2MSxjb2x1bW46NDR9fSxsb2M6e3N0YXJ0OntsaW5lOjI2MSxjb2x1bW46NTd9LGVuZDp7bGluZToyNzEsY29sdW1uOjV9fSxsaW5lOjI2MX0sMTc6e25hbWU6XCIoYW5vbnltb3VzXzE3KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjI2Myxjb2x1bW46NTJ9LGVuZDp7bGluZToyNjMsY29sdW1uOjUzfX0sbG9jOntzdGFydDp7bGluZToyNjMsY29sdW1uOjU5fSxlbmQ6e2xpbmU6MjY5LGNvbHVtbjo3fX0sbGluZToyNjN9LDE4OntuYW1lOlwiKGFub255bW91c18xOClcIixkZWNsOntzdGFydDp7bGluZToyNzAsY29sdW1uOjQzfSxlbmQ6e2xpbmU6MjcwLGNvbHVtbjo0NH19LGxvYzp7c3RhcnQ6e2xpbmU6MjcwLGNvbHVtbjo1MX0sZW5kOntsaW5lOjI3MCxjb2x1bW46ODB9fSxsaW5lOjI3MH0sMTk6e25hbWU6XCIoYW5vbnltb3VzXzE5KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjI3Myxjb2x1bW46NjB9LGVuZDp7bGluZToyNzMsY29sdW1uOjYxfX0sbG9jOntzdGFydDp7bGluZToyNzMsY29sdW1uOjc4fSxlbmQ6e2xpbmU6MjgyLGNvbHVtbjo1fX0sbGluZToyNzN9fSxicmFuY2hNYXA6ezA6e2xvYzp7c3RhcnQ6e2xpbmU6MjAsY29sdW1uOjM2fSxlbmQ6e2xpbmU6MjAsY29sdW1uOjUxfX0sdHlwZTpcImRlZmF1bHQtYXJnXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjAsY29sdW1uOjQ3fSxlbmQ6e2xpbmU6MjAsY29sdW1uOjUxfX1dLGxpbmU6MjB9LDE6e2xvYzp7c3RhcnQ6e2xpbmU6MjAsY29sdW1uOjUzfSxlbmQ6e2xpbmU6MjAsY29sdW1uOjcwfX0sdHlwZTpcImRlZmF1bHQtYXJnXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjAsY29sdW1uOjY4fSxlbmQ6e2xpbmU6MjAsY29sdW1uOjcwfX1dLGxpbmU6MjB9LDI6e2xvYzp7c3RhcnQ6e2xpbmU6MjMsY29sdW1uOjR9LGVuZDp7bGluZTo1NCxjb2x1bW46NTF9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyMyxjb2x1bW46NH0sZW5kOntsaW5lOjU0LGNvbHVtbjo1MX19LHtzdGFydDp7bGluZToyMyxjb2x1bW46NH0sZW5kOntsaW5lOjU0LGNvbHVtbjo1MX19XSxsaW5lOjIzfSwzOntsb2M6e3N0YXJ0OntsaW5lOjI0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MjQsY29sdW1uOjc3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjQsY29sdW1uOjZ9LGVuZDp7bGluZToyNCxjb2x1bW46Nzd9fSx7c3RhcnQ6e2xpbmU6MjQsY29sdW1uOjZ9LGVuZDp7bGluZToyNCxjb2x1bW46Nzd9fV0sbGluZToyNH0sNDp7bG9jOntzdGFydDp7bGluZTozMixjb2x1bW46OX0sZW5kOntsaW5lOjU0LGNvbHVtbjo1MX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjMyLGNvbHVtbjo5fSxlbmQ6e2xpbmU6NTQsY29sdW1uOjUxfX0se3N0YXJ0OntsaW5lOjMyLGNvbHVtbjo5fSxlbmQ6e2xpbmU6NTQsY29sdW1uOjUxfX1dLGxpbmU6MzJ9LDU6e2xvYzp7c3RhcnQ6e2xpbmU6MzIsY29sdW1uOjEzfSxlbmQ6e2xpbmU6MzIsY29sdW1uOjU4fX0sdHlwZTpcImJpbmFyeS1leHByXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MzIsY29sdW1uOjEzfSxlbmQ6e2xpbmU6MzIsY29sdW1uOjMzfX0se3N0YXJ0OntsaW5lOjMyLGNvbHVtbjozN30sZW5kOntsaW5lOjMyLGNvbHVtbjo1OH19XSxsaW5lOjMyfSw2Ontsb2M6e3N0YXJ0OntsaW5lOjMzLGNvbHVtbjoyMn0sZW5kOntsaW5lOjMzLGNvbHVtbjo1OX19LHR5cGU6XCJjb25kLWV4cHJcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozMyxjb2x1bW46NDd9LGVuZDp7bGluZTozMyxjb2x1bW46NTF9fSx7c3RhcnQ6e2xpbmU6MzMsY29sdW1uOjU0fSxlbmQ6e2xpbmU6MzMsY29sdW1uOjU5fX1dLGxpbmU6MzN9LDc6e2xvYzp7c3RhcnQ6e2xpbmU6MzQsY29sdW1uOjIyfSxlbmQ6e2xpbmU6MzQsY29sdW1uOjExM319LHR5cGU6XCJjb25kLWV4cHJcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozNCxjb2x1bW46NDd9LGVuZDp7bGluZTozNCxjb2x1bW46NzN9fSx7c3RhcnQ6e2xpbmU6MzQsY29sdW1uOjc2fSxlbmQ6e2xpbmU6MzQsY29sdW1uOjExM319XSxsaW5lOjM0fSw4Ontsb2M6e3N0YXJ0OntsaW5lOjQzLGNvbHVtbjo2fSxlbmQ6e2xpbmU6NDYsY29sdW1uOjd9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo0Myxjb2x1bW46Nn0sZW5kOntsaW5lOjQ2LGNvbHVtbjo3fX0se3N0YXJ0OntsaW5lOjQzLGNvbHVtbjo2fSxlbmQ6e2xpbmU6NDYsY29sdW1uOjd9fV0sbGluZTo0M30sOTp7bG9jOntzdGFydDp7bGluZTo2OSxjb2x1bW46NH0sZW5kOntsaW5lOjc0LGNvbHVtbjo1fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NjksY29sdW1uOjR9LGVuZDp7bGluZTo3NCxjb2x1bW46NX19LHtzdGFydDp7bGluZTo2OSxjb2x1bW46NH0sZW5kOntsaW5lOjc0LGNvbHVtbjo1fX1dLGxpbmU6Njl9LDEwOntsb2M6e3N0YXJ0OntsaW5lOjY5LGNvbHVtbjo3fSxlbmQ6e2xpbmU6NjksY29sdW1uOjQ1fX0sdHlwZTpcImJpbmFyeS1leHByXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NjksY29sdW1uOjd9LGVuZDp7bGluZTo2OSxjb2x1bW46MjN9fSx7c3RhcnQ6e2xpbmU6NjksY29sdW1uOjI3fSxlbmQ6e2xpbmU6NjksY29sdW1uOjQ1fX1dLGxpbmU6Njl9LDExOntsb2M6e3N0YXJ0OntsaW5lOjcwLGNvbHVtbjo2fSxlbmQ6e2xpbmU6NzAsY29sdW1uOjYwfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NzAsY29sdW1uOjZ9LGVuZDp7bGluZTo3MCxjb2x1bW46NjB9fSx7c3RhcnQ6e2xpbmU6NzAsY29sdW1uOjZ9LGVuZDp7bGluZTo3MCxjb2x1bW46NjB9fV0sbGluZTo3MH0sMTI6e2xvYzp7c3RhcnQ6e2xpbmU6OTAsY29sdW1uOjR9LGVuZDp7bGluZTo5MCxjb2x1bW46NTJ9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo5MCxjb2x1bW46NH0sZW5kOntsaW5lOjkwLGNvbHVtbjo1Mn19LHtzdGFydDp7bGluZTo5MCxjb2x1bW46NH0sZW5kOntsaW5lOjkwLGNvbHVtbjo1Mn19XSxsaW5lOjkwfSwxMzp7bG9jOntzdGFydDp7bGluZTo5NSxjb2x1bW46NH0sZW5kOntsaW5lOjE0MCxjb2x1bW46NTN9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo5NSxjb2x1bW46NH0sZW5kOntsaW5lOjE0MCxjb2x1bW46NTN9fSx7c3RhcnQ6e2xpbmU6OTUsY29sdW1uOjR9LGVuZDp7bGluZToxNDAsY29sdW1uOjUzfX1dLGxpbmU6OTV9LDE0Ontsb2M6e3N0YXJ0OntsaW5lOjk3LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTAxLGNvbHVtbjo3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6OTcsY29sdW1uOjZ9LGVuZDp7bGluZToxMDEsY29sdW1uOjd9fSx7c3RhcnQ6e2xpbmU6OTcsY29sdW1uOjZ9LGVuZDp7bGluZToxMDEsY29sdW1uOjd9fV0sbGluZTo5N30sMTU6e2xvYzp7c3RhcnQ6e2xpbmU6MTA0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTEwLGNvbHVtbjo3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTA0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTEwLGNvbHVtbjo3fX0se3N0YXJ0OntsaW5lOjEwNCxjb2x1bW46Nn0sZW5kOntsaW5lOjExMCxjb2x1bW46N319XSxsaW5lOjEwNH0sMTY6e2xvYzp7c3RhcnQ6e2xpbmU6MTA2LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTA5LGNvbHVtbjo5fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTA2LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTA5LGNvbHVtbjo5fX0se3N0YXJ0OntsaW5lOjEwNixjb2x1bW46OH0sZW5kOntsaW5lOjEwOSxjb2x1bW46OX19XSxsaW5lOjEwNn0sMTc6e2xvYzp7c3RhcnQ6e2xpbmU6MTIxLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTI1LGNvbHVtbjo3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTIxLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTI1LGNvbHVtbjo3fX0se3N0YXJ0OntsaW5lOjEyMSxjb2x1bW46Nn0sZW5kOntsaW5lOjEyNSxjb2x1bW46N319XSxsaW5lOjEyMX0sMTg6e2xvYzp7c3RhcnQ6e2xpbmU6MTI5LGNvbHVtbjo5fSxlbmQ6e2xpbmU6MTQwLGNvbHVtbjo1M319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjEyOSxjb2x1bW46OX0sZW5kOntsaW5lOjE0MCxjb2x1bW46NTN9fSx7c3RhcnQ6e2xpbmU6MTI5LGNvbHVtbjo5fSxlbmQ6e2xpbmU6MTQwLGNvbHVtbjo1M319XSxsaW5lOjEyOX0sMTk6e2xvYzp7c3RhcnQ6e2xpbmU6MTMwLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTM3LGNvbHVtbjo2MX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjEzMCxjb2x1bW46Nn0sZW5kOntsaW5lOjEzNyxjb2x1bW46NjF9fSx7c3RhcnQ6e2xpbmU6MTMwLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTM3LGNvbHVtbjo2MX19XSxsaW5lOjEzMH0sMjA6e2xvYzp7c3RhcnQ6e2xpbmU6MTUzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTUzLGNvbHVtbjo5M319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE1Myxjb2x1bW46NH0sZW5kOntsaW5lOjE1Myxjb2x1bW46OTN9fSx7c3RhcnQ6e2xpbmU6MTUzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTUzLGNvbHVtbjo5M319XSxsaW5lOjE1M30sMjE6e2xvYzp7c3RhcnQ6e2xpbmU6MTU0LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTU0LGNvbHVtbjo5MH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE1NCxjb2x1bW46NH0sZW5kOntsaW5lOjE1NCxjb2x1bW46OTB9fSx7c3RhcnQ6e2xpbmU6MTU0LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTU0LGNvbHVtbjo5MH19XSxsaW5lOjE1NH0sMjI6e2xvYzp7c3RhcnQ6e2xpbmU6MTYxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjE4LGNvbHVtbjo2MX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE2MSxjb2x1bW46NH0sZW5kOntsaW5lOjIxOCxjb2x1bW46NjF9fSx7c3RhcnQ6e2xpbmU6MTYxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjE4LGNvbHVtbjo2MX19XSxsaW5lOjE2MX0sMjM6e2xvYzp7c3RhcnQ6e2xpbmU6MTYzLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTYzLGNvbHVtbjo3MX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE2Myxjb2x1bW46Nn0sZW5kOntsaW5lOjE2Myxjb2x1bW46NzF9fSx7c3RhcnQ6e2xpbmU6MTYzLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTYzLGNvbHVtbjo3MX19XSxsaW5lOjE2M30sMjQ6e2xvYzp7c3RhcnQ6e2xpbmU6MTY0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTY3LGNvbHVtbjo3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTY0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTY3LGNvbHVtbjo3fX0se3N0YXJ0OntsaW5lOjE2NCxjb2x1bW46Nn0sZW5kOntsaW5lOjE2Nyxjb2x1bW46N319XSxsaW5lOjE2NH0sMjU6e2xvYzp7c3RhcnQ6e2xpbmU6MTcyLGNvbHVtbjoyMX0sZW5kOntsaW5lOjE3Mixjb2x1bW46MTAzfX0sdHlwZTpcImNvbmQtZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE3Mixjb2x1bW46NzB9LGVuZDp7bGluZToxNzIsY29sdW1uOjkxfX0se3N0YXJ0OntsaW5lOjE3Mixjb2x1bW46OTR9LGVuZDp7bGluZToxNzIsY29sdW1uOjEwM319XSxsaW5lOjE3Mn0sMjY6e2xvYzp7c3RhcnQ6e2xpbmU6MTczLGNvbHVtbjoxOX0sZW5kOntsaW5lOjE3Myxjb2x1bW46OTd9fSx0eXBlOlwiY29uZC1leHByXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTczLGNvbHVtbjo2Nn0sZW5kOntsaW5lOjE3Myxjb2x1bW46ODV9fSx7c3RhcnQ6e2xpbmU6MTczLGNvbHVtbjo4OH0sZW5kOntsaW5lOjE3Myxjb2x1bW46OTd9fV0sbGluZToxNzN9LDI3Ontsb2M6e3N0YXJ0OntsaW5lOjE4Nixjb2x1bW46Nn0sZW5kOntsaW5lOjE4Nixjb2x1bW46ODh9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxODYsY29sdW1uOjZ9LGVuZDp7bGluZToxODYsY29sdW1uOjg4fX0se3N0YXJ0OntsaW5lOjE4Nixjb2x1bW46Nn0sZW5kOntsaW5lOjE4Nixjb2x1bW46ODh9fV0sbGluZToxODZ9LDI4Ontsb2M6e3N0YXJ0OntsaW5lOjE5MSxjb2x1bW46OH0sZW5kOntsaW5lOjE5Mixjb2x1bW46MjV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxOTEsY29sdW1uOjh9LGVuZDp7bGluZToxOTIsY29sdW1uOjI1fX0se3N0YXJ0OntsaW5lOjE5MSxjb2x1bW46OH0sZW5kOntsaW5lOjE5Mixjb2x1bW46MjV9fV0sbGluZToxOTF9LDI5Ontsb2M6e3N0YXJ0OntsaW5lOjE5Nixjb2x1bW46Nn0sZW5kOntsaW5lOjE5Nyxjb2x1bW46MzV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxOTYsY29sdW1uOjZ9LGVuZDp7bGluZToxOTcsY29sdW1uOjM1fX0se3N0YXJ0OntsaW5lOjE5Nixjb2x1bW46Nn0sZW5kOntsaW5lOjE5Nyxjb2x1bW46MzV9fV0sbGluZToxOTZ9LDMwOntsb2M6e3N0YXJ0OntsaW5lOjIwMSxjb2x1bW46OX0sZW5kOntsaW5lOjIxOCxjb2x1bW46NjF9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyMDEsY29sdW1uOjl9LGVuZDp7bGluZToyMTgsY29sdW1uOjYxfX0se3N0YXJ0OntsaW5lOjIwMSxjb2x1bW46OX0sZW5kOntsaW5lOjIxOCxjb2x1bW46NjF9fV0sbGluZToyMDF9LDMxOntsb2M6e3N0YXJ0OntsaW5lOjIwMyxjb2x1bW46Nn0sZW5kOntsaW5lOjIwMyxjb2x1bW46NzB9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyMDMsY29sdW1uOjZ9LGVuZDp7bGluZToyMDMsY29sdW1uOjcwfX0se3N0YXJ0OntsaW5lOjIwMyxjb2x1bW46Nn0sZW5kOntsaW5lOjIwMyxjb2x1bW46NzB9fV0sbGluZToyMDN9LDMyOntsb2M6e3N0YXJ0OntsaW5lOjIwNCxjb2x1bW46Nn0sZW5kOntsaW5lOjIwNCxjb2x1bW46OTJ9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyMDQsY29sdW1uOjZ9LGVuZDp7bGluZToyMDQsY29sdW1uOjkyfX0se3N0YXJ0OntsaW5lOjIwNCxjb2x1bW46Nn0sZW5kOntsaW5lOjIwNCxjb2x1bW46OTJ9fV0sbGluZToyMDR9LDMzOntsb2M6e3N0YXJ0OntsaW5lOjIwNyxjb2x1bW46MTd9LGVuZDp7bGluZToyMDcsY29sdW1uOjg2fX0sdHlwZTpcImNvbmQtZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjIwNyxjb2x1bW46NjJ9LGVuZDp7bGluZToyMDcsY29sdW1uOjc5fX0se3N0YXJ0OntsaW5lOjIwNyxjb2x1bW46ODJ9LGVuZDp7bGluZToyMDcsY29sdW1uOjg2fX1dLGxpbmU6MjA3fSwzNDp7bG9jOntzdGFydDp7bGluZToyMDksY29sdW1uOjZ9LGVuZDp7bGluZToyMTYsY29sdW1uOjYxfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjA5LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MjE2LGNvbHVtbjo2MX19LHtzdGFydDp7bGluZToyMDksY29sdW1uOjZ9LGVuZDp7bGluZToyMTYsY29sdW1uOjYxfX1dLGxpbmU6MjA5fSwzNTp7bG9jOntzdGFydDp7bGluZToyMzEsY29sdW1uOjR9LGVuZDp7bGluZToyMzEsY29sdW1uOjY4fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjMxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjMxLGNvbHVtbjo2OH19LHtzdGFydDp7bGluZToyMzEsY29sdW1uOjR9LGVuZDp7bGluZToyMzEsY29sdW1uOjY4fX1dLGxpbmU6MjMxfSwzNjp7bG9jOntzdGFydDp7bGluZToyNTUsY29sdW1uOjR9LGVuZDp7bGluZToyNTUsY29sdW1uOjcyfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjU1LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjU1LGNvbHVtbjo3Mn19LHtzdGFydDp7bGluZToyNTUsY29sdW1uOjR9LGVuZDp7bGluZToyNTUsY29sdW1uOjcyfX1dLGxpbmU6MjU1fSwzNzp7bG9jOntzdGFydDp7bGluZToyNjQsY29sdW1uOjh9LGVuZDp7bGluZToyNjgsY29sdW1uOjl9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyNjQsY29sdW1uOjh9LGVuZDp7bGluZToyNjgsY29sdW1uOjl9fSx7c3RhcnQ6e2xpbmU6MjY0LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MjY4LGNvbHVtbjo5fX1dLGxpbmU6MjY0fX0sczp7MDowLDE6MCwyOjAsMzowLDQ6MCw1OjAsNjowLDc6MCw4OjAsOTowLDEwOjAsMTE6MCwxMjowLDEzOjAsMTQ6MCwxNTowLDE2OjAsMTc6MCwxODowLDE5OjAsMjA6MCwyMTowLDIyOjAsMjM6MCwyNDowLDI1OjAsMjY6MCwyNzowLDI4OjAsMjk6MCwzMDowLDMxOjAsMzI6MCwzMzowLDM0OjAsMzU6MCwzNjowLDM3OjAsMzg6MCwzOTowLDQwOjAsNDE6MCw0MjowLDQzOjAsNDQ6MCw0NTowLDQ2OjAsNDc6MCw0ODowLDQ5OjAsNTA6MCw1MTowLDUyOjAsNTM6MCw1NDowLDU1OjAsNTY6MCw1NzowLDU4OjAsNTk6MCw2MDowLDYxOjAsNjI6MCw2MzowLDY0OjAsNjU6MCw2NjowLDY3OjAsNjg6MCw2OTowLDcwOjAsNzE6MCw3MjowLDczOjAsNzQ6MCw3NTowLDc2OjAsNzc6MCw3ODowLDc5OjAsODA6MCw4MTowLDgyOjAsODM6MCw4NDowLDg1OjAsODY6MCw4NzowLDg4OjAsODk6MCw5MDowLDkxOjAsOTI6MCw5MzowLDk0OjAsOTU6MCw5NjowLDk3OjAsOTg6MCw5OTowLDEwMDowLDEwMTowLDEwMjowLDEwMzowLDEwNDowLDEwNTowLDEwNjowLDEwNzowLDEwODowLDEwOTowLDExMDowLDExMTowLDExMjowLDExMzowLDExNDowLDExNTowLDExNjowLDExNzowLDExODowLDExOTowLDEyMDowLDEyMTowLDEyMjowLDEyMzowLDEyNDowLDEyNTowLDEyNjowLDEyNzowLDEyODowLDEyOTowLDEzMDowLDEzMTowLDEzMjowLDEzMzowLDEzNDowLDEzNTowLDEzNjowLDEzNzowLDEzODowLDEzOTowLDE0MDowfSxmOnswOjAsMTowLDI6MCwzOjAsNDowLDU6MCw2OjAsNzowLDg6MCw5OjAsMTA6MCwxMTowLDEyOjAsMTM6MCwxNDowLDE1OjAsMTY6MCwxNzowLDE4OjAsMTk6MH0sYjp7MDpbMF0sMTpbMF0sMjpbMCwwXSwzOlswLDBdLDQ6WzAsMF0sNTpbMCwwXSw2OlswLDBdLDc6WzAsMF0sODpbMCwwXSw5OlswLDBdLDEwOlswLDBdLDExOlswLDBdLDEyOlswLDBdLDEzOlswLDBdLDE0OlswLDBdLDE1OlswLDBdLDE2OlswLDBdLDE3OlswLDBdLDE4OlswLDBdLDE5OlswLDBdLDIwOlswLDBdLDIxOlswLDBdLDIyOlswLDBdLDIzOlswLDBdLDI0OlswLDBdLDI1OlswLDBdLDI2OlswLDBdLDI3OlswLDBdLDI4OlswLDBdLDI5OlswLDBdLDMwOlswLDBdLDMxOlswLDBdLDMyOlswLDBdLDMzOlswLDBdLDM0OlswLDBdLDM1OlswLDBdLDM2OlswLDBdLDM3OlswLDBdfSxfY292ZXJhZ2VTY2hlbWE6XCI0M2UyN2UxMzhlYmY5Y2ZjNTk2NmIwODJjZjlhMDI4MzAyZWQ0MTg0XCJ9LGk9dFtsXXx8KHRbbF09e30pO3JldHVybiBpW25dJiZpW25dLmhhc2g9PT1lP2lbbl06KG8uaGFzaD1lLGlbbl09byl9KCksYW49ZnVuY3Rpb24obil7ZnVuY3Rpb24gZSgpe3JldHVybiB1KCkodGhpcyxlKSxoKCkodGhpcyx2KCkoZSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gdygpKGUsbiksYSgpKGUsbnVsbCxbe2tleTpcImdlbmVyYXRlS2V5XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlKXt2YXIgdCxsLGkscixjLHUscyxhLG0sZCxmLHAseSxoLGI7cmV0dXJuIG8uYS53cmFwKGZ1bmN0aW9uKG4pe2Zvcig7Oylzd2l0Y2gobi5wcmV2PW4ubmV4dCl7Y2FzZSAwOmlmKHQ9ZS5wYXJhbXMsbD1lLnBhc3NwaHJhc2UsaT12b2lkIDA9PT1sPyhzbi5iWzBdWzBdKyssbnVsbCk6bCxyPWUuZW5jcnlwdE9wdGlvbnMsYz12b2lkIDA9PT1yPyhzbi5iWzFdWzBdKysse30pOnIsc24uZlswXSsrLHNuLnNbMF0rKyx1PWooKSxzbi5zWzFdKyssXCJzZXNzaW9uXCIhPT10LnR5cGUpe24ubmV4dD0yNjticmVha31pZihzbi5iWzJdWzBdKyssc24uc1syXSsrLHQubGVuZ3RoKXtuLm5leHQ9MTM7YnJlYWt9dGhyb3cgc24uYlszXVswXSsrLHNuLnNbM10rKyxuZXcgRXJyb3IoXCJwYXJhbXMubGVuZ3RoIG11c3QgYmUgc3BlY2lmaWVkXCIpO2Nhc2UgMTM6c24uYlszXVsxXSsrO2Nhc2UgMTQ6cmV0dXJuIHNuLnNbNF0rKyxuLm5leHQ9MTcsdS5yYW5kb20uZ2V0UmFuZG9tQnl0ZXModC5sZW5ndGgpO2Nhc2UgMTc6cmV0dXJuIHM9bi5zZW50LHNuLnNbNV0rKyxuLm5leHQ9MjEsVChzKTtjYXNlIDIxOnJldHVybiBhPW4uc2VudCxzbi5zWzZdKyssbi5hYnJ1cHQoXCJyZXR1cm5cIix7a2V5OnMsa2V5SWQ6YX0pO2Nhc2UgMjY6aWYoc24uYlsyXVsxXSsrLHNuLnNbN10rKyxzbi5iWzVdWzBdKyssXCJlY1wiIT09dC50eXBlJiYoc24uYls1XVsxXSsrLFwicnNhXCIhPT10LnR5cGUpKXtuLm5leHQ9NTg7YnJlYWt9cmV0dXJuIHNuLmJbNF1bMF0rKyxzbi5zWzhdKyssbT1cImVjXCI9PT10LnR5cGU/KHNuLmJbNl1bMF0rKyxcIkVDXCIpOihzbi5iWzZdWzFdKyssXCJSU0FcIiksc24uc1s5XSsrLGQ9XCJlY1wiPT09dC50eXBlPyhzbi5iWzddWzBdKysse25hbWVkQ3VydmU6dC5jdXJ2ZX0pOihzbi5iWzddWzFdKysse21vZHVsdXNMZW5ndGg6dC5tb2R1bHVzTGVuZ3RofSksc24uc1sxMF0rKyxuLm5leHQ9MzUsdS5wa2MuZ2VuZXJhdGVLZXkobSxkKTtjYXNlIDM1OnJldHVybiBmPW4uc2VudCxzbi5zWzExXSsrLG4ubmV4dD0zOSxCKG5ldyB1LktleShcImp3a1wiLGYucHVibGljS2V5KSk7Y2FzZSAzOTppZihwPW4uc2VudCxzbi5zWzEyXSsrLHk9bmV3IHUuS2V5KFwiandrXCIsZi5wdWJsaWNLZXkpLHNuLnNbMTNdKyssaD1uZXcgdS5LZXkoXCJqd2tcIixmLnByaXZhdGVLZXkpLHNuLnNbMTRdKyssIWkpe24ubmV4dD01MzticmVha31yZXR1cm4gc24uYls4XVswXSsrLHNuLnNbMTVdKyssbi5uZXh0PTQ4LGguZXhwb3J0KFwiZGVyXCIse2VuY3J5cHRQYXJhbXM6T2JqZWN0LmFzc2lnbih7cGFzc3BocmFzZTppfSxjKX0pO2Nhc2UgNDg6Yj1uLnNlbnQsc24uc1sxNl0rKyxoPW5ldyB1LktleShcImRlclwiLGIpLG4ubmV4dD01NDticmVhaztjYXNlIDUzOnNuLmJbOF1bMV0rKztjYXNlIDU0OnJldHVybiBzbi5zWzE3XSsrLG4uYWJydXB0KFwicmV0dXJuXCIse3B1YmxpY0tleTp5LHByaXZhdGVLZXk6aCxrZXlJZDpwfSk7Y2FzZSA1ODp0aHJvdyBzbi5iWzRdWzFdKyssc24uc1sxOF0rKyxuZXcgRXJyb3IoXCJKc2N1VW5zdXBwb3J0ZWRLZXlUeXBlXCIpO2Nhc2UgNjE6Y2FzZVwiZW5kXCI6cmV0dXJuIG4uc3RvcCgpfX0sbix0aGlzKX0pKTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKX0se2tleTpcImltcG9ydEtleVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIG49cigpKG8uYS5tYXJrKGZ1bmN0aW9uIG4oZSx0LGwpe3ZhciBpLHI7cmV0dXJuIG8uYS53cmFwKGZ1bmN0aW9uKG4pe2Zvcig7Oylzd2l0Y2gobi5wcmV2PW4ubmV4dCl7Y2FzZSAwOmlmKHNuLmZbMV0rKyxzbi5zWzE5XSsrLGk9aigpLHNuLnNbMjBdKysscj1uZXcgaS5LZXkoZSx0KSxzbi5zWzIxXSsrLHNuLmJbMTBdWzBdKyssIXIuaXNQcml2YXRlfHwoc24uYlsxMF1bMV0rKywhci5pc0VuY3J5cHRlZCkpe24ubmV4dD0xOTticmVha31pZihzbi5iWzldWzBdKyssc24uc1syMl0rKyxsKXtuLm5leHQ9MTM7YnJlYWt9dGhyb3cgc24uYlsxMV1bMF0rKyxzbi5zWzIzXSsrLG5ldyBFcnJvcihcIlBhc3NwaHJhc2VSZXF1aXJlZFwiKTtjYXNlIDEzOnNuLmJbMTFdWzFdKys7Y2FzZSAxNDpyZXR1cm4gc24uc1syNF0rKyxuLm5leHQ9MTcsci5kZWNyeXB0KGwpLmNhdGNoKGZ1bmN0aW9uKG4pe3Rocm93IHNuLmZbMl0rKyxzbi5zWzI1XSsrLG5ldyBFcnJvcihcIkZhaWxlZFRvRGVjcnlwdFByaXZhdGVLZXk6IFwiLmNvbmNhdChuLm1lc3NhZ2UpKX0pO2Nhc2UgMTc6bi5uZXh0PTIwO2JyZWFrO2Nhc2UgMTk6c24uYls5XVsxXSsrO2Nhc2UgMjA6cmV0dXJuIHNuLnNbMjZdKyssbi5hYnJ1cHQoXCJyZXR1cm5cIixyKTtjYXNlIDIyOmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKGUsdCxsKXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSgpfSx7a2V5OlwiZW5jcnlwdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIG49cigpKG8uYS5tYXJrKGZ1bmN0aW9uIG4odCl7dmFyIGwsaSxjLHUscyxhLG0sZCxmLHAseSxoLGI7cmV0dXJuIG8uYS53cmFwKGZ1bmN0aW9uKG4pe2Zvcig7Oylzd2l0Y2gobi5wcmV2PW4ubmV4dCl7Y2FzZSAwOmlmKGw9dC5tZXNzYWdlLGk9dC5rZXlzLGM9dC5vcHRpb25zLHNuLmZbM10rKyxzbi5zWzI3XSsrLHU9aigpLHNuLnNbMjhdKyssdm9pZCAwPT09Yz8oc24uYlsxMl1bMF0rKyxzbi5zWzI5XSsrLGM9e30pOnNuLmJbMTJdWzFdKyssc24uc1szMF0rKywhaS5wdWJsaWNLZXlzKXtuLm5leHQ9Njc7YnJlYWt9aWYoc24uYlsxM11bMF0rKyxzbi5zWzMxXSsrLCFjLnByaXZhdGVLZXlQYXNzKXtuLm5leHQ9MjM7YnJlYWt9cmV0dXJuIHNuLmJbMTRdWzBdKyssc24uc1szMl0rKyxuLm5leHQ9MTQsZS5pbXBvcnRLZXkoXCJwZW1cIixjLnByaXZhdGVLZXlQYXNzLnByaXZhdGVLZXksYy5wcml2YXRlS2V5UGFzcy5wYXNzcGhyYXNlKTtjYXNlIDE0OnJldHVybiBjLnByaXZhdGVLZXk9bi5zZW50LHNuLnNbMzNdKyssbi5uZXh0PTE4LGMucHJpdmF0ZUtleS5leHBvcnQoXCJqd2tcIik7Y2FzZSAxODpjLnByaXZhdGVLZXk9bi5zZW50LHNuLnNbMzRdKyssZGVsZXRlIGMucHJpdmF0ZUtleVBhc3Msbi5uZXh0PTI0O2JyZWFrO2Nhc2UgMjM6c24uYlsxNF1bMV0rKztjYXNlIDI0OmlmKHNuLnNbMzVdKyssYy5wcml2YXRlS2V5KXtuLm5leHQ9NDU7YnJlYWt9cmV0dXJuIHNuLmJbMTVdWzBdKyssc24uc1szNl0rKyxuLm5leHQ9MzAsaS5wdWJsaWNLZXlzWzBdLmV4cG9ydChcImp3a1wiKTtjYXNlIDMwOmlmKG09bi5zZW50LHNuLnNbMzddKyssXCJFQ1wiIT09bS5rdHkpe24ubmV4dD00MjticmVha31yZXR1cm4gc24uYlsxNl1bMF0rKyxzbi5zWzM4XSsrLG4ubmV4dD0zNyx1LnBrYy5nZW5lcmF0ZUtleShcIkVDXCIse25hbWVkQ3VydmU6bS5jcnZ9KTtjYXNlIDM3OmQ9bi5zZW50LHNuLnNbMzldKyssYy5wcml2YXRlS2V5PWQucHJpdmF0ZUtleSxuLm5leHQ9NDM7YnJlYWs7Y2FzZSA0Mjpzbi5iWzE2XVsxXSsrO2Nhc2UgNDM6bi5uZXh0PTQ2O2JyZWFrO2Nhc2UgNDU6c24uYlsxNV1bMV0rKztjYXNlIDQ2OnJldHVybiBzbi5zWzQwXSsrLG4ubmV4dD00OSxQcm9taXNlLmFsbChpLnB1YmxpY0tleXMubWFwKGZ1bmN0aW9uKCl7dmFyIG49cigpKG8uYS5tYXJrKGZ1bmN0aW9uIG4oZSl7dmFyIHQsaSxyO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDpyZXR1cm4gc24uZls0XSsrLHNuLnNbNDFdKyssbi5uZXh0PTQsZS5leHBvcnQoXCJqd2tcIik7Y2FzZSA0OnJldHVybiB0PW4uc2VudCxzbi5zWzQyXSsrLG4ubmV4dD04LHUucGtjLmVuY3J5cHQobC5iaW5hcnksdCxjKTtjYXNlIDg6cmV0dXJuIGk9bi5zZW50LHNuLnNbNDNdKysscj1uZXcgVWludDhBcnJheShpLmRhdGEpLHNuLnNbNDRdKyssZGVsZXRlIGkuZGF0YSxzbi5zWzQ1XSsrLG4udDA9cSxuLnQxPXIsbi5uZXh0PTE3LEIoZSk7Y2FzZSAxNzpyZXR1cm4gbi50Mj1uLnNlbnQsbi50Mz1pLG4uYWJydXB0KFwicmV0dXJuXCIsKDAsbi50MCkobi50MSxuLnQyLG4udDMpKTtjYXNlIDIwOmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCkpKTtjYXNlIDQ5OmlmKHM9bi5zZW50LHNuLnNbNDZdKyssdm9pZCAwPT09Yy5wcml2YXRlS2V5KXtuLm5leHQ9NjI7YnJlYWt9cmV0dXJuIHNuLmJbMTddWzBdKyssc24uc1s0N10rKyxmPW5ldyB1LktleShcImp3a1wiLGMucHJpdmF0ZUtleSksc24uc1s0OF0rKyxuLm5leHQ9NTcsZi5leHBvcnQoXCJkZXJcIix7b3V0cHV0UHVibGljOiEwfSk7Y2FzZSA1NzpjLnB1YmxpY0tleT1uLnNlbnQsc24uc1s0OV0rKyxkZWxldGUgYy5wcml2YXRlS2V5LG4ubmV4dD02MzticmVhaztjYXNlIDYyOnNuLmJbMTddWzFdKys7Y2FzZSA2Mzpzbi5zWzUwXSsrLGE9e21lc3NhZ2U6VyhcImpzY3VcIixcInB1YmxpY19rZXlfZW5jcnlwdFwiLHMsYyl9LG4ubmV4dD0xMDE7YnJlYWs7Y2FzZSA2NzppZihzbi5iWzEzXVsxXSsrLHNuLnNbNTFdKyssIWkuc2Vzc2lvbktleSl7bi5uZXh0PTk4O2JyZWFrfWlmKHNuLmJbMThdWzBdKyssc24uc1s1Ml0rKyxcIkFFUy1HQ01cIiE9PWMubmFtZSl7bi5uZXh0PTkxO2JyZWFrfXJldHVybiBzbi5iWzE5XVswXSsrLHNuLnNbNTNdKyssbi5uZXh0PTc3LHUucmFuZG9tLmdldFJhbmRvbUJ5dGVzKF8uanNjdS5pdkxlbmd0aEFlc0djbSk7Y2FzZSA3NzpyZXR1cm4gcD1uLnNlbnQsc24uc1s1NF0rKyxuLm5leHQ9ODEsdS5hZXMuZW5jcnlwdChsLmJpbmFyeSxpLnNlc3Npb25LZXkse25hbWU6Yy5uYW1lLGl2OnB9KTtjYXNlIDgxOnJldHVybiB5PW4uc2VudCxzbi5zWzU1XSsrLG4ubmV4dD04NSxUKGkuc2Vzc2lvbktleSk7Y2FzZSA4NTpoPW4uc2VudCxzbi5zWzU2XSsrLGI9cSh5LGgse2l2OnB9KSxzbi5zWzU3XSsrLHM9W2JdLG4ubmV4dD05NDticmVhaztjYXNlIDkxOnRocm93IHNuLmJbMTldWzFdKyssc24uc1s1OF0rKyxuZXcgRXJyb3IoXCJKc2N1SW52YWxpZEVuY3J5cHRpb25BbGdvcml0aG1cIik7Y2FzZSA5NDpzbi5zWzU5XSsrLGE9e21lc3NhZ2U6VyhcImpzY3VcIixcInNlc3Npb25fa2V5X2VuY3J5cHRcIixzLGMpfSxuLm5leHQ9MTAxO2JyZWFrO2Nhc2UgOTg6dGhyb3cgc24uYlsxOF1bMV0rKyxzbi5zWzYwXSsrLG5ldyBFcnJvcihcIkpzY3VJbnZhbGlkRW5jcnlwdGlvbktleVwiKTtjYXNlIDEwMTpyZXR1cm4gc24uc1s2MV0rKyxuLmFicnVwdChcInJldHVyblwiLGEpO2Nhc2UgMTAzOmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCl9LHtrZXk6XCJkZWNyeXB0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbih0KXt2YXIgbCxpLGMsdSxzLGEsbSxkLGYseSxoLGIsdjtyZXR1cm4gby5hLndyYXAoZnVuY3Rpb24obil7Zm9yKDs7KXN3aXRjaChuLnByZXY9bi5uZXh0KXtjYXNlIDA6aWYobD10LmVuY3J5cHRlZCxpPXQua2V5cyxjPXQub3B0aW9ucyxzbi5mWzVdKyssc24uc1s2Ml0rKyx2b2lkIDAhPT1sLm1lc3NhZ2Upe24ubmV4dD05O2JyZWFrfXRocm93IHNuLmJbMjBdWzBdKyssc24uc1s2M10rKyxuZXcgRXJyb3IoXCJJbnZhbGlkRW5jcnlwdGVkTWVzc2FnZVwiKTtjYXNlIDk6c24uYlsyMF1bMV0rKztjYXNlIDEwOmlmKHNuLnNbNjRdKyssbC5tZXNzYWdlLm1lc3NhZ2UgaW5zdGFuY2VvZiBBcnJheSl7bi5uZXh0PTE3O2JyZWFrfXRocm93IHNuLmJbMjFdWzBdKyssc24uc1s2NV0rKyxuZXcgRXJyb3IoXCJOb25BcnJheU1lc3NhZ2VcIik7Y2FzZSAxNzpzbi5iWzIxXVsxXSsrO2Nhc2UgMTg6aWYoc24uc1s2Nl0rKyx1PWooKSxzbi5zWzY3XSsrLHM9bC5tZXNzYWdlLmtleVR5cGUsc24uc1s2OF0rKyxcInB1YmxpY19rZXlfZW5jcnlwdFwiIT09cyl7bi5uZXh0PTc3O2JyZWFrfWlmKHNuLmJbMjJdWzBdKyssc24uc1s2OV0rKyxpLnByaXZhdGVLZXlzKXtuLm5leHQ9MzA7YnJlYWt9dGhyb3cgc24uYlsyM11bMF0rKyxzbi5zWzcwXSsrLG5ldyBFcnJvcihcIkpzY3VQcml2YXRlS2V5UmVxdWlyZWRcIik7Y2FzZSAzMDpzbi5iWzIzXVsxXSsrO2Nhc2UgMzE6aWYoc24uc1s3MV0rKywhYy5wdWJsaWNLZXkpe24ubmV4dD00NDticmVha31yZXR1cm4gc24uYlsyNF1bMF0rKyxzbi5zWzcyXSsrLG4ubmV4dD0zNyxlLmltcG9ydEtleShcImRlclwiLGMucHVibGljS2V5KTtjYXNlIDM3OnJldHVybiBjLnB1YmxpY0tleT1uLnNlbnQsc24uc1s3M10rKyxuLm5leHQ9NDEsYy5wdWJsaWNLZXkuZXhwb3J0KFwiandrXCIpO2Nhc2UgNDE6Yy5wdWJsaWNLZXk9bi5zZW50LG4ubmV4dD00NTticmVhaztjYXNlIDQ0OnNuLmJbMjRdWzFdKys7Y2FzZSA0NTpyZXR1cm4gc24uc1s3NF0rKyxtPWZ1bmN0aW9uKCl7dmFyIG49cigpKG8uYS5tYXJrKGZ1bmN0aW9uIG4oZSx0KXt2YXIgbCxpLHIscyxhO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDpyZXR1cm4gc24uZls2XSsrLHNuLnNbNzVdKyssbD1lLnRvQnVmZmVyKCksc24uc1s3Nl0rKyxpPXZvaWQgMCE9PWUucGFyYW1zLnNhbHQ/KHNuLmJbMjVdWzBdKyssZS5wYXJhbXMuc2FsdCk6dm9pZCBzbi5iWzI1XVsxXSsrLHNuLnNbNzddKysscj12b2lkIDAhPT1lLnBhcmFtcy5pdj8oc24uYlsyNl1bMF0rKyxlLnBhcmFtcy5pdik6dm9pZCBzbi5iWzI2XVsxXSsrLHNuLnNbNzhdKyssbi5uZXh0PTcsdC5leHBvcnQoXCJqd2tcIik7Y2FzZSA3OnJldHVybiBzPW4uc2VudCxzbi5zWzc5XSsrLGE9T2JqZWN0LmFzc2lnbih7c2FsdDppLGl2OnJ9LGMpLHNuLnNbODBdKyssbi5uZXh0PTEyLHUucGtjLmRlY3J5cHQobCxzLGEpO2Nhc2UgMTI6cmV0dXJuIG4uYWJydXB0KFwicmV0dXJuXCIsbi5zZW50KTtjYXNlIDEzOmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKSxzbi5zWzgxXSsrLGQ9W10sc24uc1s4Ml0rKyxuLm5leHQ9NTEsUHJvbWlzZS5hbGwoaS5wcml2YXRlS2V5cy5tYXAoZnVuY3Rpb24oKXt2YXIgbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlKXt2YXIgdCxpO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDpyZXR1cm4gc24uZls3XSsrLHNuLnNbODNdKyssbi5uZXh0PTQsQihlKTtjYXNlIDQ6dD1uLnNlbnQsc24uc1s4NF0rKyxpPWwubWVzc2FnZS5tZXNzYWdlLmZpbHRlcihmdW5jdGlvbihuKXtyZXR1cm4gc24uZls4XSsrLHNuLnNbODVdKyssbi5rZXlJZC50b0hleCgpPT09dC50b0hleCgpfSksc24uc1s4Nl0rKyxkLnB1c2guYXBwbHkoZCxwKCkoaS5tYXAoZnVuY3Rpb24obil7cmV0dXJuIHNuLmZbOV0rKyxzbi5zWzg3XSsrLHttZXNzYWdlOm4scHJpdmF0ZUtleTplfX0pKSk7Y2FzZSA4OmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCkpKTtjYXNlIDUxOmlmKHNuLnNbODhdKyssMCE9PWQubGVuZ3RoKXtuLm5leHQ9NTg7YnJlYWt9dGhyb3cgc24uYlsyN11bMF0rKyxzbi5zWzg5XSsrLG5ldyBFcnJvcihcIlVuYWJsZVRvRGVjcnlwdFdpdGhHaXZlblByaXZhdGVLZXlcIik7Y2FzZSA1ODpzbi5iWzI3XVsxXSsrO2Nhc2UgNTk6cmV0dXJuIHNuLnNbOTBdKyssZj1cIlwiLHNuLnNbOTFdKyssbi5uZXh0PTYzLFByb21pc2UuYWxsKGQubWFwKGZ1bmN0aW9uKCl7dmFyIG49cigpKG8uYS5tYXJrKGZ1bmN0aW9uIG4oZSl7dmFyIHQ7cmV0dXJuIG8uYS53cmFwKGZ1bmN0aW9uKG4pe2Zvcig7Oylzd2l0Y2gobi5wcmV2PW4ubmV4dCl7Y2FzZSAwOnJldHVybiBzbi5mWzEwXSsrLHNuLnNbOTJdKyssbi5uZXh0PTQsbShlLm1lc3NhZ2UsZS5wcml2YXRlS2V5KS5jYXRjaChmdW5jdGlvbihuKXtzbi5mWzExXSsrLHNuLnNbOTNdKyssZj1uLm1lc3NhZ2V9KTtjYXNlIDQ6aWYodD1uLnNlbnQsc24uc1s5NF0rKywhdCl7bi5uZXh0PTEyO2JyZWFrfXJldHVybiBzbi5iWzI4XVswXSsrLHNuLnNbOTVdKyssbi5hYnJ1cHQoXCJyZXR1cm5cIix0KTtjYXNlIDEyOnJldHVybiBzbi5iWzI4XVsxXSsrLHNuLnNbOTZdKyssbi5hYnJ1cHQoXCJyZXR1cm5cIixudWxsKTtjYXNlIDE1OmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCkpKTtjYXNlIDYzOmlmKHk9bi5zZW50LHNuLnNbOTddKyssaD15LmZpbHRlcihmdW5jdGlvbihuKXtyZXR1cm4gc24uZlsxMl0rKyxzbi5zWzk4XSsrLG51bGwhPT1ufSksc24uc1s5OV0rKywhKGgubGVuZ3RoPjApKXtuLm5leHQ9NzI7YnJlYWt9c24uYlsyOV1bMF0rKyxzbi5zWzEwMF0rKyxhPWhbMF0sbi5uZXh0PTc1O2JyZWFrO2Nhc2UgNzI6dGhyb3cgc24uYlsyOV1bMV0rKyxzbi5zWzEwMV0rKyxuZXcgRXJyb3IoZik7Y2FzZSA3NTpuLm5leHQ9MTE2O2JyZWFrO2Nhc2UgNzc6aWYoc24uYlsyMl1bMV0rKyxzbi5zWzEwMl0rKyxcInNlc3Npb25fa2V5X2VuY3J5cHRcIiE9PXMpe24ubmV4dD0xMTM7YnJlYWt9aWYoc24uYlszMF1bMF0rKyxzbi5zWzEwM10rKyxpLnNlc3Npb25LZXkpe24ubmV4dD04ODticmVha310aHJvdyBzbi5iWzMxXVswXSsrLHNuLnNbMTA0XSsrLG5ldyBFcnJvcihcIkpzY3VTZXNzaW9uS2V5UmVxdWlyZWRcIik7Y2FzZSA4ODpzbi5iWzMxXVsxXSsrO2Nhc2UgODk6aWYoc24uc1sxMDVdKyssbC5tZXNzYWdlLm1lc3NhZ2UgaW5zdGFuY2VvZiBBcnJheSl7bi5uZXh0PTk2O2JyZWFrfXRocm93IHNuLmJbMzJdWzBdKyssc24uc1sxMDZdKyssbmV3IEVycm9yKFwiTm9uQXJyYXlNZXNzYWdlXCIpO2Nhc2UgOTY6c24uYlszMl1bMV0rKztjYXNlIDk3OmlmKHNuLnNbMTA3XSsrLGI9bC5tZXNzYWdlLm1lc3NhZ2VbMF0sc24uc1sxMDhdKyssdj12b2lkIDAhPT1iLnBhcmFtcy5pdj8oc24uYlszM11bMF0rKyxiLnBhcmFtcy5pdik6KHNuLmJbMzNdWzFdKyssbnVsbCksc24uc1sxMDldKyssXCJBRVMtR0NNXCIhPT1jLm5hbWUpe24ubmV4dD0xMDg7YnJlYWt9cmV0dXJuIHNuLmJbMzRdWzBdKyssc24uc1sxMTBdKyssbi5uZXh0PTEwNSx1LmFlcy5kZWNyeXB0KGIudG9CdWZmZXIoKSxpLnNlc3Npb25LZXkse25hbWU6aS5zZXNzaW9uS2V5LmFsZ29yaXRobSxpdjp2fSk7Y2FzZSAxMDU6YT1uLnNlbnQsbi5uZXh0PTExMTticmVhaztjYXNlIDEwODp0aHJvdyBzbi5iWzM0XVsxXSsrLHNuLnNbMTExXSsrLG5ldyBFcnJvcihcIkpzY3VJbnZhbGlkRW5jcnlwdGlvbkFsZ29yaXRobVwiKTtjYXNlIDExMTpuLm5leHQ9MTE2O2JyZWFrO2Nhc2UgMTEzOnRocm93IHNuLmJbMzBdWzFdKyssc24uc1sxMTJdKyssbmV3IEVycm9yKFwiSnNjdUludmFsaWRLZXlUeXBlX05vdFNlc3Npb25LZXlcIik7Y2FzZSAxMTY6cmV0dXJuIHNuLnNbMTEzXSsrLG4uYWJydXB0KFwicmV0dXJuXCIse2RhdGE6YX0pO2Nhc2UgMTE4OmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCl9LHtrZXk6XCJzaWduXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlKXt2YXIgdCxsLGksYyx1O3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDppZih0PWUubWVzc2FnZSxsPWUua2V5cyxpPWUub3B0aW9ucyxzbi5mWzEzXSsrLHNuLnNbMTE0XSsrLGwucHJpdmF0ZUtleXMpe24ubmV4dD05O2JyZWFrfXRocm93IHNuLmJbMzVdWzBdKyssc24uc1sxMTVdKyssbmV3IEVycm9yKFwiSnNjdUludmFsaWRTaWduaW5nS2V5c1wiKTtjYXNlIDk6c24uYlszNV1bMV0rKztjYXNlIDEwOnJldHVybiBzbi5zWzExNl0rKyxjPWooKSxzbi5zWzExN10rKyxuLm5leHQ9MTQsUHJvbWlzZS5hbGwobC5wcml2YXRlS2V5cy5tYXAoZnVuY3Rpb24oKXt2YXIgbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlKXt2YXIgbCxyLHU7cmV0dXJuIG8uYS53cmFwKGZ1bmN0aW9uKG4pe2Zvcig7Oylzd2l0Y2gobi5wcmV2PW4ubmV4dCl7Y2FzZSAwOnJldHVybiBzbi5mWzE0XSsrLHNuLnNbMTE4XSsrLG4ubmV4dD00LGUuZXhwb3J0KFwiandrXCIpO2Nhc2UgNDpyZXR1cm4gbD1uLnNlbnQsc24uc1sxMTldKyssbi5uZXh0PTgsYy5wa2Muc2lnbih0LmJpbmFyeSxsLGkuaGFzaCxPYmplY3QuYXNzaWduKHtmb3JtYXQ6XCJyYXdcIn0saSkpO2Nhc2UgODpyZXR1cm4gcj1uLnNlbnQsc24uc1sxMjBdKyssbi5uZXh0PTEyLEIoZSk7Y2FzZSAxMjpyZXR1cm4gdT1uLnNlbnQsc24uc1sxMjFdKyssbi5hYnJ1cHQoXCJyZXR1cm5cIixjbihyLHUpKTtjYXNlIDE1OmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCkpKTtjYXNlIDE0OnJldHVybiB1PW4uc2VudCxzbi5zWzEyMl0rKyxuLmFicnVwdChcInJldHVyblwiLHtzaWduYXR1cmU6bG4oXCJqc2N1XCIsXCJwdWJsaWNfa2V5X3NpZ25cIix1LGkpfSk7Y2FzZSAxNzpjYXNlXCJlbmRcIjpyZXR1cm4gbi5zdG9wKCl9fSxuLHRoaXMpfSkpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSgpfSx7a2V5OlwidmVyaWZ5XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlKXt2YXIgdCxsLGksYyx1LHMsYSxtO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDppZih0PWUubWVzc2FnZSxsPWUuc2lnbmF0dXJlLGk9ZS5rZXlzLGM9ZS5vcHRpb25zLHNuLmZbMTVdKyssc24uc1sxMjNdKyssaS5wdWJsaWNLZXlzKXtuLm5leHQ9OTticmVha310aHJvdyBzbi5iWzM2XVswXSsrLHNuLnNbMTI0XSsrLG5ldyBFcnJvcihcIkpzY3VJbnZhbGlkVmVyaWZpY2F0aW9uS2V5c1wiKTtjYXNlIDk6c24uYlszNl1bMV0rKztjYXNlIDEwOnJldHVybiBzbi5zWzEyNV0rKyx1PWooKSxzbi5zWzEyNl0rKyxzPVtdLHNuLnNbMTI3XSsrLGE9W10sc24uc1sxMjhdKyssbi5uZXh0PTE2LFByb21pc2UuYWxsKGkucHVibGljS2V5cy5tYXAoZnVuY3Rpb24oKXt2YXIgbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlKXt2YXIgdCxpO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDpyZXR1cm4gc24uZlsxNl0rKyxzbi5zWzEyOV0rKyxuLm5leHQ9NCxCKGUpO2Nhc2UgNDp0PW4uc2VudCxzbi5zWzEzMF0rKyxpPWwuc2lnbmF0dXJlcy5maWx0ZXIoZnVuY3Rpb24obil7cmV0dXJuIHNuLmZbMTddKyssc24uc1sxMzFdKyssbi5rZXlJZC50b0hleCgpPT09dC50b0hleCgpPyhzbi5iWzM3XVswXSsrLHNuLnNbMTMyXSsrLCEwKTooc24uYlszN11bMV0rKyxzbi5zWzEzM10rKyxhLnB1c2goe2tleUlkOm4ua2V5SWQsdmFsaWQ6dm9pZCAwfSksc24uc1sxMzRdKyssITEpfSksc24uc1sxMzVdKysscy5wdXNoLmFwcGx5KHMscCgpKGkubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBzbi5mWzE4XSsrLHNuLnNbMTM2XSsrLHtzaWduYXR1cmU6bixwdWJsaWNLZXk6ZX19KSkpO2Nhc2UgODpjYXNlXCJlbmRcIjpyZXR1cm4gbi5zdG9wKCl9fSxuLHRoaXMpfSkpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSgpKSk7Y2FzZSAxNjpyZXR1cm4gc24uc1sxMzddKyssbi5uZXh0PTE5LFByb21pc2UuYWxsKHMubWFwKGZ1bmN0aW9uKCl7dmFyIG49cigpKG8uYS5tYXJrKGZ1bmN0aW9uIG4oZSl7dmFyIGw7cmV0dXJuIG8uYS53cmFwKGZ1bmN0aW9uKG4pe2Zvcig7Oylzd2l0Y2gobi5wcmV2PW4ubmV4dCl7Y2FzZSAwOnJldHVybiBzbi5mWzE5XSsrLHNuLnNbMTM4XSsrLG4udDA9dS5wa2Msbi50MT10LmJpbmFyeSxuLnQyPWUuc2lnbmF0dXJlLnRvQnVmZmVyKCksbi5uZXh0PTcsZS5wdWJsaWNLZXkuZXhwb3J0KFwiandrXCIpO2Nhc2UgNzpyZXR1cm4gbi50Mz1uLnNlbnQsbi50ND1jLmhhc2gsbi50NT1PYmplY3QuYXNzaWduKHtmb3JtYXQ6XCJyYXdcIn0sYyksbi5uZXh0PTEyLG4udDAudmVyaWZ5LmNhbGwobi50MCxuLnQxLG4udDIsbi50MyxuLnQ0LG4udDUpO2Nhc2UgMTI6cmV0dXJuIGw9bi5zZW50LHNuLnNbMTM5XSsrLG4uYWJydXB0KFwicmV0dXJuXCIse2tleUlkOmUuc2lnbmF0dXJlLmtleUlkLHZhbGlkOmx9KTtjYXNlIDE1OmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCkpKTtjYXNlIDE5OnJldHVybiBtPW4uc2VudCxzbi5zWzE0MF0rKyxuLmFicnVwdChcInJldHVyblwiLG0uY29uY2F0KGEpKTtjYXNlIDIyOmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCl9XSksZX0oayksbW49ZnVuY3Rpb24oKXt2YXIgbj1cIi9Vc2Vycy9qdW4vUHJvamVjdEphdmFTY3JpcHQvY2FzY2FkZS9zcmMvc3VpdGVfb3BlbnBncC5qc1wiLGU9XCIxOTcyNmM5ZDQ4MjI3N2M3OGY3Mjg4MGEyNDg5ZjYxOTRhYmVlZmI1XCIsdD1uZXcoMCxmdW5jdGlvbigpe30uY29uc3RydWN0b3IpKFwicmV0dXJuIHRoaXNcIikoKSxsPVwiX19jb3ZlcmFnZV9fXCIsbz17cGF0aDpcIi9Vc2Vycy9qdW4vUHJvamVjdEphdmFTY3JpcHQvY2FzY2FkZS9zcmMvc3VpdGVfb3BlbnBncC5qc1wiLHN0YXRlbWVudE1hcDp7MDp7c3RhcnQ6e2xpbmU6MjIsY29sdW1uOjIwfSxlbmQ6e2xpbmU6MjIsY29sdW1uOjMyfX0sMTp7c3RhcnQ6e2xpbmU6MjUsY29sdW1uOjR9LGVuZDp7bGluZTo0OSxjb2x1bW46NX19LDI6e3N0YXJ0OntsaW5lOjI3LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MzIsY29sdW1uOjh9fSwzOntzdGFydDp7bGluZTozMyxjb2x1bW46Nn0sZW5kOntsaW5lOjMzLGNvbHVtbjoxMn19LDQ6e3N0YXJ0OntsaW5lOjM1LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NDAsY29sdW1uOjh9fSw1OntzdGFydDp7bGluZTo0MSxjb2x1bW46Nn0sZW5kOntsaW5lOjQxLGNvbHVtbjoxMn19LDY6e3N0YXJ0OntsaW5lOjQzLGNvbHVtbjo2fSxlbmQ6e2xpbmU6NDUsY29sdW1uOjh9fSw3OntzdGFydDp7bGluZTo0Nixjb2x1bW46Nn0sZW5kOntsaW5lOjQ2LGNvbHVtbjoxMn19LDg6e3N0YXJ0OntsaW5lOjQ4LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NDgsY29sdW1uOjQ5fX0sOTp7c3RhcnQ6e2xpbmU6NTEsY29sdW1uOjR9LGVuZDp7bGluZTo2Nixjb2x1bW46NX19LDEwOntzdGFydDp7bGluZTo1Mixjb2x1bW46MTd9LGVuZDp7bGluZTo1Mixjb2x1bW46NTF9fSwxMTp7c3RhcnQ6e2xpbmU6NTMsY29sdW1uOjE4fSxlbmQ6e2xpbmU6NTMsY29sdW1uOjc0fX0sMTI6e3N0YXJ0OntsaW5lOjUzLGNvbHVtbjo0Nn0sZW5kOntsaW5lOjUzLGNvbHVtbjo3M319LDEzOntzdGFydDp7bGluZTo1NCxjb2x1bW46Nn0sZW5kOntsaW5lOjU0LGNvbHVtbjo0N319LDE0OntzdGFydDp7bGluZTo1NCxjb2x1bW46MzB9LGVuZDp7bGluZTo1NCxjb2x1bW46NDd9fSwxNTp7c3RhcnQ6e2xpbmU6NTYsY29sdW1uOjZ9LGVuZDp7bGluZTo2MCxjb2x1bW46OH19LDE2OntzdGFydDp7bGluZTo2Mixjb2x1bW46OX0sZW5kOntsaW5lOjY2LGNvbHVtbjo1fX0sMTc6e3N0YXJ0OntsaW5lOjYzLGNvbHVtbjoyMX0sZW5kOntsaW5lOjYzLGNvbHVtbjo3OX19LDE4OntzdGFydDp7bGluZTo2NCxjb2x1bW46MjB9LGVuZDp7bGluZTo2NCxjb2x1bW46NTR9fSwxOTp7c3RhcnQ6e2xpbmU6NjUsY29sdW1uOjZ9LGVuZDp7bGluZTo2NSxjb2x1bW46MzR9fSwyMDp7c3RhcnQ6e2xpbmU6NzAsY29sdW1uOjIwfSxlbmQ6e2xpbmU6NzAsY29sdW1uOjMyfX0sMjE6e3N0YXJ0OntsaW5lOjcyLGNvbHVtbjoxN30sZW5kOntsaW5lOjc0LGNvbHVtbjozNX19LDIyOntzdGFydDp7bGluZTo3Nixjb2x1bW46NH0sZW5kOntsaW5lOjc2LGNvbHVtbjo3M319LDIzOntzdGFydDp7bGluZTo3Nixjb2x1bW46MTd9LGVuZDp7bGluZTo3Nixjb2x1bW46NzN9fSwyNDp7c3RhcnQ6e2xpbmU6NzgsY29sdW1uOjIxfSxlbmQ6e2xpbmU6ODMsY29sdW1uOjd9fSwyNTp7c3RhcnQ6e2xpbmU6NzksY29sdW1uOjZ9LGVuZDp7bGluZTo4MSxjb2x1bW46N319LDI2OntzdGFydDp7bGluZTo4MCxjb2x1bW46OH0sZW5kOntsaW5lOjgwLGNvbHVtbjo0NH19LDI3OntzdGFydDp7bGluZTo4Mixjb2x1bW46Nn0sZW5kOntsaW5lOjgyLGNvbHVtbjoyM319LDI4OntzdGFydDp7bGluZTo4NSxjb2x1bW46NH0sZW5kOntsaW5lOjg1LGNvbHVtbjo1OH19LDI5OntzdGFydDp7bGluZTo5OCxjb2x1bW46MjB9LGVuZDp7bGluZTo5OCxjb2x1bW46MzJ9fSwzMDp7c3RhcnQ6e2xpbmU6MTAxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTAxLGNvbHVtbjo5N319LDMxOntzdGFydDp7bGluZToxMDEsY29sdW1uOjI4fSxlbmQ6e2xpbmU6MTAxLGNvbHVtbjo5N319LDMyOntzdGFydDp7bGluZToxMDIsY29sdW1uOjR9LGVuZDp7bGluZToxMDIsY29sdW1uOjI2fX0sMzM6e3N0YXJ0OntsaW5lOjEwNSxjb2x1bW46MTl9LGVuZDp7bGluZToxMDUsY29sdW1uOjYxfX0sMzQ6e3N0YXJ0OntsaW5lOjEwOSxjb2x1bW46NH0sZW5kOntsaW5lOjExMSxjb2x1bW46ODh9fSwzNTp7c3RhcnQ6e2xpbmU6MTExLGNvbHVtbjo1N30sZW5kOntsaW5lOjExMSxjb2x1bW46ODh9fSwzNjp7c3RhcnQ6e2xpbmU6MTE2LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTUyLGNvbHVtbjo0OX19LDM3OntzdGFydDp7bGluZToxMTcsY29sdW1uOjE4fSxlbmQ6e2xpbmU6MTIyLGNvbHVtbjo3fX0sMzg6e3N0YXJ0OntsaW5lOjEyMyxjb2x1bW46Nn0sZW5kOntsaW5lOjEyMyxjb2x1bW46Njl9fSwzOTp7c3RhcnQ6e2xpbmU6MTI2LGNvbHVtbjozMn0sZW5kOntsaW5lOjEyNixjb2x1bW46OTZ9fSw0MDp7c3RhcnQ6e2xpbmU6MTI2LGNvbHVtbjo4NX0sZW5kOntsaW5lOjEyNixjb2x1bW46OTV9fSw0MTp7c3RhcnQ6e2xpbmU6MTI3LGNvbHVtbjoyOX0sZW5kOntsaW5lOjEyNyxjb2x1bW46MzF9fSw0Mjp7c3RhcnQ6e2xpbmU6MTI4LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTI4LGNvbHVtbjoxMTV9fSw0Mzp7c3RhcnQ6e2xpbmU6MTI4LGNvbHVtbjozNH0sZW5kOntsaW5lOjEyOCxjb2x1bW46MTEyfX0sNDQ6e3N0YXJ0OntsaW5lOjEyOCxjb2x1bW46NjB9LGVuZDp7bGluZToxMjgsY29sdW1uOjEwOX19LDQ1OntzdGFydDp7bGluZToxMjksY29sdW1uOjMwfSxlbmQ6e2xpbmU6MTI5LGNvbHVtbjoxMTd9fSw0Njp7c3RhcnQ6e2xpbmU6MTI5LGNvbHVtbjo2MX0sZW5kOntsaW5lOjEyOSxjb2x1bW46MTE2fX0sNDc6e3N0YXJ0OntsaW5lOjEzMCxjb2x1bW46MzF9LGVuZDp7bGluZToxMzIsY29sdW1uOjd9fSw0ODp7c3RhcnQ6e2xpbmU6MTMzLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTMzLGNvbHVtbjoxMTN9fSw0OTp7c3RhcnQ6e2xpbmU6MTM1LGNvbHVtbjo5fSxlbmQ6e2xpbmU6MTUyLGNvbHVtbjo0OX19LDUwOntzdGFydDp7bGluZToxMzYsY29sdW1uOjE4fSxlbmQ6e2xpbmU6MTQxLGNvbHVtbjo3fX0sNTE6e3N0YXJ0OntsaW5lOjE0Mixjb2x1bW46Nn0sZW5kOntsaW5lOjE0Mixjb2x1bW46Njl9fSw1Mjp7c3RhcnQ6e2xpbmU6MTQ1LGNvbHVtbjozMX0sZW5kOntsaW5lOjE0Nyxjb2x1bW46N319LDUzOntzdGFydDp7bGluZToxNDgsY29sdW1uOjZ9LGVuZDp7bGluZToxNTAsY29sdW1uOjl9fSw1NDp7c3RhcnQ6e2xpbmU6MTUyLGNvbHVtbjo5fSxlbmQ6e2xpbmU6MTUyLGNvbHVtbjo0OX19LDU1OntzdGFydDp7bGluZToxNTQsY29sdW1uOjIzfSxlbmQ6e2xpbmU6MTU0LGNvbHVtbjoyNX19LDU2OntzdGFydDp7bGluZToxNTUsY29sdW1uOjR9LGVuZDp7bGluZToxNTgsY29sdW1uOjV9fSw1Nzp7c3RhcnQ6e2xpbmU6MTU2LGNvbHVtbjozNH0sZW5kOntsaW5lOjE1Nixjb2x1bW46MTAzfX0sNTg6e3N0YXJ0OntsaW5lOjE1Nyxjb2x1bW46Nn0sZW5kOntsaW5lOjE1Nyxjb2x1bW46MTA1fX0sNTk6e3N0YXJ0OntsaW5lOjE2MCxjb2x1bW46NH0sZW5kOntsaW5lOjE2MCxjb2x1bW46NTZ9fSw2MDp7c3RhcnQ6e2xpbmU6MTcyLGNvbHVtbjoyMH0sZW5kOntsaW5lOjE3Mixjb2x1bW46MzJ9fSw2MTp7c3RhcnQ6e2xpbmU6MTc0LGNvbHVtbjoyMH0sZW5kOntsaW5lOjE3NCxjb2x1bW46OTR9fSw2Mjp7c3RhcnQ6e2xpbmU6MTc3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTkyLGNvbHVtbjo1fX0sNjM6e3N0YXJ0OntsaW5lOjE3OCxjb2x1bW46Nn0sZW5kOntsaW5lOjE4Myxjb2x1bW46MTl9fSw2NDp7c3RhcnQ6e2xpbmU6MTg1LGNvbHVtbjo5fSxlbmQ6e2xpbmU6MTkyLGNvbHVtbjo1fX0sNjU6e3N0YXJ0OntsaW5lOjE4Nixjb2x1bW46Nn0sZW5kOntsaW5lOjE5MSxjb2x1bW46MTl9fSw2Njp7c3RhcnQ6e2xpbmU6MTk0LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTk0LGNvbHVtbjo1Mn19LDY3OntzdGFydDp7bGluZToxOTYsY29sdW1uOjR9LGVuZDp7bGluZToyMDQsY29sdW1uOjV9fSw2ODp7c3RhcnQ6e2xpbmU6MTk3LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MjAzLGNvbHVtbjo5fX0sNjk6e3N0YXJ0OntsaW5lOjE5OCxjb2x1bW46MjJ9LGVuZDp7bGluZToxOTgsY29sdW1uOjM5fX0sNzA6e3N0YXJ0OntsaW5lOjE5OSxjb2x1bW46MjF9LGVuZDp7bGluZToxOTksY29sdW1uOjkxfX0sNzE6e3N0YXJ0OntsaW5lOjE5OSxjb2x1bW46NTV9LGVuZDp7bGluZToxOTksY29sdW1uOjkwfX0sNzI6e3N0YXJ0OntsaW5lOjIwMCxjb2x1bW46MjV9LGVuZDp7bGluZToyMDAsY29sdW1uOjEwN319LDczOntzdGFydDp7bGluZToyMDAsY29sdW1uOjQ0fSxlbmQ6e2xpbmU6MjAwLGNvbHVtbjoxMDV9fSw3NDp7c3RhcnQ6e2xpbmU6MjAxLGNvbHVtbjo4fSxlbmQ6e2xpbmU6MjAxLGNvbHVtbjo4N319LDc1OntzdGFydDp7bGluZToyMDEsY29sdW1uOjM1fSxlbmQ6e2xpbmU6MjAxLGNvbHVtbjo4N319LDc2OntzdGFydDp7bGluZToyMDIsY29sdW1uOjh9LGVuZDp7bGluZToyMDIsY29sdW1uOjc3fX0sNzc6e3N0YXJ0OntsaW5lOjIwNixjb2x1bW46NH0sZW5kOntsaW5lOjIwNixjb2x1bW46MjF9fSw3ODp7c3RhcnQ6e2xpbmU6MjE4LGNvbHVtbjoyMH0sZW5kOntsaW5lOjIxOCxjb2x1bW46MzJ9fSw3OTp7c3RhcnQ6e2xpbmU6MjIxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjIxLGNvbHVtbjoyOH19LDgwOntzdGFydDp7bGluZToyMjIsY29sdW1uOjR9LGVuZDp7bGluZToyMjIsY29sdW1uOjI2fX0sODE6e3N0YXJ0OntsaW5lOjIyNCxjb2x1bW46MTl9LGVuZDp7bGluZToyMjQsY29sdW1uOjYxfX0sODI6e3N0YXJ0OntsaW5lOjIyNixjb2x1bW46NH0sZW5kOntsaW5lOjIyNixjb2x1bW46NjR9fSw4Mzp7c3RhcnQ6e2xpbmU6MjI2LGNvbHVtbjoyNn0sZW5kOntsaW5lOjIyNixjb2x1bW46NjR9fSw4NDp7c3RhcnQ6e2xpbmU6MjI3LGNvbHVtbjoxNn0sZW5kOntsaW5lOjIzMCxjb2x1bW46NX19LDg1OntzdGFydDp7bGluZToyMzEsY29sdW1uOjIyfSxlbmQ6e2xpbmU6MjMxLGNvbHVtbjo2OX19LDg2OntzdGFydDp7bGluZToyMzIsY29sdW1uOjMyfSxlbmQ6e2xpbmU6MjMyLGNvbHVtbjoxMDZ9fSw4Nzp7c3RhcnQ6e2xpbmU6MjMzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjMzLGNvbHVtbjo5NX19LDg4OntzdGFydDp7bGluZToyNDUsY29sdW1uOjIwfSxlbmQ6e2xpbmU6MjQ1LGNvbHVtbjozMn19LDg5OntzdGFydDp7bGluZToyNDcsY29sdW1uOjR9LGVuZDp7bGluZToyNDcsY29sdW1uOjY4fX0sOTA6e3N0YXJ0OntsaW5lOjI0Nyxjb2x1bW46MjV9LGVuZDp7bGluZToyNDcsY29sdW1uOjY4fX0sOTE6e3N0YXJ0OntsaW5lOjI0OCxjb2x1bW46MTd9LGVuZDp7bGluZToyNDgsY29sdW1uOjgxfX0sOTI6e3N0YXJ0OntsaW5lOjI0OSxjb2x1bW46MTl9LGVuZDp7bGluZToyNDksY29sdW1uOjYxfX0sOTM6e3N0YXJ0OntsaW5lOjI1MSxjb2x1bW46MjF9LGVuZDp7bGluZToyNTcsY29sdW1uOjd9fSw5NDp7c3RhcnQ6e2xpbmU6MjUyLGNvbHVtbjoxOH0sZW5kOntsaW5lOjI1Mixjb2x1bW46NDN9fSw5NTp7c3RhcnQ6e2xpbmU6MjUzLGNvbHVtbjozMH0sZW5kOntsaW5lOjI1Myxjb2x1bW46ODN9fSw5Njp7c3RhcnQ6e2xpbmU6MjU0LGNvbHVtbjoyOH0sZW5kOntsaW5lOjI1NCxjb2x1bW46NTN9fSw5Nzp7c3RhcnQ6e2xpbmU6MjU1LGNvbHVtbjoyMH0sZW5kOntsaW5lOjI1NSxjb2x1bW46MTMxfX0sOTg6e3N0YXJ0OntsaW5lOjI1Nixjb2x1bW46Nn0sZW5kOntsaW5lOjI1Nixjb2x1bW46Nzd9fSw5OTp7c3RhcnQ6e2xpbmU6MjU5LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjU5LGNvbHVtbjo0NH19LDEwMDp7c3RhcnQ6e2xpbmU6MjYzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjYzLGNvbHVtbjo4MH19LDEwMTp7c3RhcnQ6e2xpbmU6MjYzLGNvbHVtbjo0MH0sZW5kOntsaW5lOjI2Myxjb2x1bW46ODB9fSwxMDI6e3N0YXJ0OntsaW5lOjI2NSxjb2x1bW46Mjd9LGVuZDp7bGluZToyNjUsY29sdW1uOjI5fX0sMTAzOntzdGFydDp7bGluZToyNjYsY29sdW1uOjR9LGVuZDp7bGluZToyNjYsY29sdW1uOjEwMn19LDEwNDp7c3RhcnQ6e2xpbmU6MjY2LGNvbHVtbjoyMX0sZW5kOntsaW5lOjI2Nixjb2x1bW46OTl9fSwxMDU6e3N0YXJ0OntsaW5lOjI2Nixjb2x1bW46NDd9LGVuZDp7bGluZToyNjYsY29sdW1uOjk2fX0sMTA2OntzdGFydDp7bGluZToyNjgsY29sdW1uOjI5fSxlbmQ6e2xpbmU6MjY4LGNvbHVtbjozMX19LDEwNzp7c3RhcnQ6e2xpbmU6MjY5LGNvbHVtbjo0fSxlbmQ6e2xpbmU6Mjc0LGNvbHVtbjo3fX0sMTA4OntzdGFydDp7bGluZToyNzAsY29sdW1uOjMxfSxlbmQ6e2xpbmU6MjcwLGNvbHVtbjoxMTB9fSwxMDk6e3N0YXJ0OntsaW5lOjI3MCxjb2x1bW46NTl9LGVuZDp7bGluZToyNzAsY29sdW1uOjEwOX19LDExMDp7c3RhcnQ6e2xpbmU6MjcxLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MjczLGNvbHVtbjo5fX0sMTExOntzdGFydDp7bGluZToyNzIsY29sdW1uOjh9LGVuZDp7bGluZToyNzIsY29sdW1uOjY3fX0sMTEyOntzdGFydDp7bGluZToyNzYsY29sdW1uOjR9LGVuZDp7bGluZToyNzYsY29sdW1uOjI4fX0sMTEzOntzdGFydDp7bGluZToyODAsY29sdW1uOjR9LGVuZDp7bGluZToyODAsY29sdW1uOjgwfX0sMTE0OntzdGFydDp7bGluZToyODAsY29sdW1uOjQwfSxlbmQ6e2xpbmU6MjgwLGNvbHVtbjo4MH19LDExNTp7c3RhcnQ6e2xpbmU6MjgyLGNvbHVtbjoyMH0sZW5kOntsaW5lOjI4Mixjb2x1bW46MzJ9fSwxMTY6e3N0YXJ0OntsaW5lOjI4NCxjb2x1bW46Mjd9LGVuZDp7bGluZToyODksY29sdW1uOjZ9fSwxMTc6e3N0YXJ0OntsaW5lOjI4NSxjb2x1bW46Nn0sZW5kOntsaW5lOjI4NSxjb2x1bW46ODN9fSwxMTg6e3N0YXJ0OntsaW5lOjI4NSxjb2x1bW46NDJ9LGVuZDp7bGluZToyODUsY29sdW1uOjgzfX0sMTE5OntzdGFydDp7bGluZToyODYsY29sdW1uOjE4fSxlbmQ6e2xpbmU6Mjg2LGNvbHVtbjo0OH19LDEyMDp7c3RhcnQ6e2xpbmU6Mjg3LGNvbHVtbjo2fSxlbmQ6e2xpbmU6Mjg3LGNvbHVtbjozOH19LDEyMTp7c3RhcnQ6e2xpbmU6Mjg4LGNvbHVtbjo2fSxlbmQ6e2xpbmU6Mjg4LGNvbHVtbjo1M319LDEyMjp7c3RhcnQ6e2xpbmU6MjkxLGNvbHVtbjoyNH0sZW5kOntsaW5lOjI5MSxjb2x1bW46MjZ9fSwxMjM6e3N0YXJ0OntsaW5lOjI5Mixjb2x1bW46NH0sZW5kOntsaW5lOjI5Mixjb2x1bW46MTIyfX0sMTI0OntzdGFydDp7bGluZToyOTIsY29sdW1uOjIxfSxlbmQ6e2xpbmU6MjkyLGNvbHVtbjoxMTl9fSwxMjU6e3N0YXJ0OntsaW5lOjI5Mixjb2x1bW46NDd9LGVuZDp7bGluZToyOTIsY29sdW1uOjExNn19LDEyNjp7c3RhcnQ6e2xpbmU6Mjk0LGNvbHVtbjoyOX0sZW5kOntsaW5lOjI5NCxjb2x1bW46MzF9fSwxMjc6e3N0YXJ0OntsaW5lOjI5NSxjb2x1bW46NH0sZW5kOntsaW5lOjMwMCxjb2x1bW46N319LDEyODp7c3RhcnQ6e2xpbmU6Mjk2LGNvbHVtbjozMX0sZW5kOntsaW5lOjI5Nixjb2x1bW46MTM3fX0sMTI5OntzdGFydDp7bGluZToyOTYsY29sdW1uOjYzfSxlbmQ6e2xpbmU6Mjk2LGNvbHVtbjoxMzZ9fSwxMzA6e3N0YXJ0OntsaW5lOjI5Nyxjb2x1bW46Nn0sZW5kOntsaW5lOjI5OSxjb2x1bW46OX19LDEzMTp7c3RhcnQ6e2xpbmU6Mjk4LGNvbHVtbjo4fSxlbmQ6e2xpbmU6Mjk4LGNvbHVtbjo3N319LDEzMjp7c3RhcnQ6e2xpbmU6MzAxLGNvbHVtbjoyM30sZW5kOntsaW5lOjMwMSxjb2x1bW46MjV9fSwxMzM6e3N0YXJ0OntsaW5lOjMwMixjb2x1bW46MjB9LGVuZDp7bGluZTozMDIsY29sdW1uOjg4fX0sMTM0OntzdGFydDp7bGluZTozMDIsY29sdW1uOjQ5fSxlbmQ6e2xpbmU6MzAyLGNvbHVtbjo4N319LDEzNTp7c3RhcnQ6e2xpbmU6MzAzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MzA3LGNvbHVtbjo3fX0sMTM2OntzdGFydDp7bGluZTozMDQsY29sdW1uOjZ9LGVuZDp7bGluZTozMDYsY29sdW1uOjd9fSwxMzc6e3N0YXJ0OntsaW5lOjMwNSxjb2x1bW46OH0sZW5kOntsaW5lOjMwNSxjb2x1bW46MTE0fX0sMTM4OntzdGFydDp7bGluZTozMDksY29sdW1uOjR9LGVuZDp7bGluZTozMDksY29sdW1uOjQyfX19LGZuTWFwOnswOntuYW1lOlwiKGFub255bW91c18wKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjIxLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MjEsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjIxLGNvbHVtbjo5Nn0sZW5kOntsaW5lOjY3LGNvbHVtbjozfX0sbGluZToyMX0sMTp7bmFtZTpcIihhbm9ueW1vdXNfMSlcIixkZWNsOntzdGFydDp7bGluZTo1Myxjb2x1bW46Mzl9LGVuZDp7bGluZTo1Myxjb2x1bW46NDB9fSxsb2M6e3N0YXJ0OntsaW5lOjUzLGNvbHVtbjo0Nn0sZW5kOntsaW5lOjUzLGNvbHVtbjo3M319LGxpbmU6NTN9LDI6e25hbWU6XCIoYW5vbnltb3VzXzIpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NjksY29sdW1uOjJ9LGVuZDp7bGluZTo2OSxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6NjksY29sdW1uOjQ3fSxlbmQ6e2xpbmU6ODYsY29sdW1uOjN9fSxsaW5lOjY5fSwzOntuYW1lOlwiKGFub255bW91c18zKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjc4LGNvbHVtbjo1M30sZW5kOntsaW5lOjc4LGNvbHVtbjo1NH19LGxvYzp7c3RhcnQ6e2xpbmU6NzgsY29sdW1uOjc0fSxlbmQ6e2xpbmU6ODMsY29sdW1uOjV9fSxsaW5lOjc4fSw0OntuYW1lOlwiKGFub255bW91c180KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjk3LGNvbHVtbjoyfSxlbmQ6e2xpbmU6OTcsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjk3LGNvbHVtbjo1MX0sZW5kOntsaW5lOjE2MSxjb2x1bW46M319LGxpbmU6OTd9LDU6e25hbWU6XCIoYW5vbnltb3VzXzUpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTI2LGNvbHVtbjo3N30sZW5kOntsaW5lOjEyNixjb2x1bW46Nzh9fSxsb2M6e3N0YXJ0OntsaW5lOjEyNixjb2x1bW46ODV9LGVuZDp7bGluZToxMjYsY29sdW1uOjk1fX0sbGluZToxMjZ9LDY6e25hbWU6XCIoYW5vbnltb3VzXzYpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTI4LGNvbHVtbjoyN30sZW5kOntsaW5lOjEyOCxjb2x1bW46Mjh9fSxsb2M6e3N0YXJ0OntsaW5lOjEyOCxjb2x1bW46MzR9LGVuZDp7bGluZToxMjgsY29sdW1uOjExMn19LGxpbmU6MTI4fSw3OntuYW1lOlwiKGFub255bW91c183KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjEyOCxjb2x1bW46NTF9LGVuZDp7bGluZToxMjgsY29sdW1uOjUyfX0sbG9jOntzdGFydDp7bGluZToxMjgsY29sdW1uOjU4fSxlbmQ6e2xpbmU6MTI4LGNvbHVtbjoxMTB9fSxsaW5lOjEyOH0sODp7bmFtZTpcIihhbm9ueW1vdXNfOClcIixkZWNsOntzdGFydDp7bGluZToxMjksY29sdW1uOjUzfSxlbmQ6e2xpbmU6MTI5LGNvbHVtbjo1NH19LGxvYzp7c3RhcnQ6e2xpbmU6MTI5LGNvbHVtbjo2MX0sZW5kOntsaW5lOjEyOSxjb2x1bW46MTE2fX0sbGluZToxMjl9LDk6e25hbWU6XCIoYW5vbnltb3VzXzkpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTcxLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTcxLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToxNzEsY29sdW1uOjU3fSxlbmQ6e2xpbmU6MjA3LGNvbHVtbjozfX0sbGluZToxNzF9LDEwOntuYW1lOlwiKGFub255bW91c18xMClcIixkZWNsOntzdGFydDp7bGluZToxOTcsY29sdW1uOjU1fSxlbmQ6e2xpbmU6MTk3LGNvbHVtbjo1Nn19LGxvYzp7c3RhcnQ6e2xpbmU6MTk3LGNvbHVtbjo2NH0sZW5kOntsaW5lOjIwMyxjb2x1bW46N319LGxpbmU6MTk3fSwxMTp7bmFtZTpcIihhbm9ueW1vdXNfMTEpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTk5LGNvbHVtbjo0OH0sZW5kOntsaW5lOjE5OSxjb2x1bW46NDl9fSxsb2M6e3N0YXJ0OntsaW5lOjE5OSxjb2x1bW46NTV9LGVuZDp7bGluZToxOTksY29sdW1uOjkwfX0sbGluZToxOTl9LDEyOntuYW1lOlwiKGFub255bW91c18xMilcIixkZWNsOntzdGFydDp7bGluZToyMDAsY29sdW1uOjM3fSxlbmQ6e2xpbmU6MjAwLGNvbHVtbjozOH19LGxvYzp7c3RhcnQ6e2xpbmU6MjAwLGNvbHVtbjo0NH0sZW5kOntsaW5lOjIwMCxjb2x1bW46MTA1fX0sbGluZToyMDB9LDEzOntuYW1lOlwiKGFub255bW91c18xMylcIixkZWNsOntzdGFydDp7bGluZToyMTcsY29sdW1uOjJ9LGVuZDp7bGluZToyMTcsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjIxNyxjb2x1bW46NDh9LGVuZDp7bGluZToyMzQsY29sdW1uOjN9fSxsaW5lOjIxN30sMTQ6e25hbWU6XCIoYW5vbnltb3VzXzE0KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjI0NCxjb2x1bW46Mn0sZW5kOntsaW5lOjI0NCxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MjQ0LGNvbHVtbjo1OH0sZW5kOntsaW5lOjI2MCxjb2x1bW46M319LGxpbmU6MjQ0fSwxNTp7bmFtZTpcIihhbm9ueW1vdXNfMTUpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MjUxLGNvbHVtbjo2Nn0sZW5kOntsaW5lOjI1MSxjb2x1bW46Njd9fSxsb2M6e3N0YXJ0OntsaW5lOjI1MSxjb2x1bW46ODR9LGVuZDp7bGluZToyNTcsY29sdW1uOjV9fSxsaW5lOjI1MX0sMTY6e25hbWU6XCIoYW5vbnltb3VzXzE2KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjI2Mixjb2x1bW46Mn0sZW5kOntsaW5lOjI2Mixjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MjYyLGNvbHVtbjo0OH0sZW5kOntsaW5lOjI3Nyxjb2x1bW46M319LGxpbmU6MjYyfSwxNzp7bmFtZTpcIihhbm9ueW1vdXNfMTcpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MjY2LGNvbHVtbjoxNH0sZW5kOntsaW5lOjI2Nixjb2x1bW46MTV9fSxsb2M6e3N0YXJ0OntsaW5lOjI2Nixjb2x1bW46MjF9LGVuZDp7bGluZToyNjYsY29sdW1uOjk5fX0sbGluZToyNjZ9LDE4OntuYW1lOlwiKGFub255bW91c18xOClcIixkZWNsOntzdGFydDp7bGluZToyNjYsY29sdW1uOjM4fSxlbmQ6e2xpbmU6MjY2LGNvbHVtbjozOX19LGxvYzp7c3RhcnQ6e2xpbmU6MjY2LGNvbHVtbjo0NX0sZW5kOntsaW5lOjI2Nixjb2x1bW46OTd9fSxsaW5lOjI2Nn0sMTk6e25hbWU6XCIoYW5vbnltb3VzXzE5KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjI2OSxjb2x1bW46MjR9LGVuZDp7bGluZToyNjksY29sdW1uOjI1fX0sbG9jOntzdGFydDp7bGluZToyNjksY29sdW1uOjMyfSxlbmQ6e2xpbmU6Mjc0LGNvbHVtbjo1fX0sbGluZToyNjl9LDIwOntuYW1lOlwiKGFub255bW91c18yMClcIixkZWNsOntzdGFydDp7bGluZToyNzAsY29sdW1uOjUwfSxlbmQ6e2xpbmU6MjcwLGNvbHVtbjo1MX19LGxvYzp7c3RhcnQ6e2xpbmU6MjcwLGNvbHVtbjo1OX0sZW5kOntsaW5lOjI3MCxjb2x1bW46MTA5fX0sbGluZToyNzB9LDIxOntuYW1lOlwiKGFub255bW91c18yMSlcIixkZWNsOntzdGFydDp7bGluZToyNzEsY29sdW1uOjI3fSxlbmQ6e2xpbmU6MjcxLGNvbHVtbjoyOH19LGxvYzp7c3RhcnQ6e2xpbmU6MjcxLGNvbHVtbjozNn0sZW5kOntsaW5lOjI3Myxjb2x1bW46N319LGxpbmU6MjcxfSwyMjp7bmFtZTpcIihhbm9ueW1vdXNfMjIpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6Mjc5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6Mjc5LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToyNzksY29sdW1uOjQ2fSxlbmQ6e2xpbmU6MzEwLGNvbHVtbjozfX0sbGluZToyNzl9LDIzOntuYW1lOlwiKGFub255bW91c18yMylcIixkZWNsOntzdGFydDp7bGluZToyODQsY29sdW1uOjQyfSxlbmQ6e2xpbmU6Mjg0LGNvbHVtbjo0M319LGxvYzp7c3RhcnQ6e2xpbmU6Mjg0LGNvbHVtbjo1MX0sZW5kOntsaW5lOjI4OSxjb2x1bW46NX19LGxpbmU6Mjg0fSwyNDp7bmFtZTpcIihhbm9ueW1vdXNfMjQpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MjkyLGNvbHVtbjoxNH0sZW5kOntsaW5lOjI5Mixjb2x1bW46MTV9fSxsb2M6e3N0YXJ0OntsaW5lOjI5Mixjb2x1bW46MjF9LGVuZDp7bGluZToyOTIsY29sdW1uOjExOX19LGxpbmU6MjkyfSwyNTp7bmFtZTpcIihhbm9ueW1vdXNfMjUpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MjkyLGNvbHVtbjozOH0sZW5kOntsaW5lOjI5Mixjb2x1bW46Mzl9fSxsb2M6e3N0YXJ0OntsaW5lOjI5Mixjb2x1bW46NDV9LGVuZDp7bGluZToyOTIsY29sdW1uOjExN319LGxpbmU6MjkyfSwyNjp7bmFtZTpcIihhbm9ueW1vdXNfMjYpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6Mjk1LGNvbHVtbjoyMX0sZW5kOntsaW5lOjI5NSxjb2x1bW46MjJ9fSxsb2M6e3N0YXJ0OntsaW5lOjI5NSxjb2x1bW46Mjl9LGVuZDp7bGluZTozMDAsY29sdW1uOjV9fSxsaW5lOjI5NX0sMjc6e25hbWU6XCIoYW5vbnltb3VzXzI3KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjI5Nixjb2x1bW46NTR9LGVuZDp7bGluZToyOTYsY29sdW1uOjU1fX0sbG9jOntzdGFydDp7bGluZToyOTYsY29sdW1uOjYzfSxlbmQ6e2xpbmU6Mjk2LGNvbHVtbjoxMzZ9fSxsaW5lOjI5Nn0sMjg6e25hbWU6XCIoYW5vbnltb3VzXzI4KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjI5Nyxjb2x1bW46Mjd9LGVuZDp7bGluZToyOTcsY29sdW1uOjI4fX0sbG9jOntzdGFydDp7bGluZToyOTcsY29sdW1uOjM2fSxlbmQ6e2xpbmU6Mjk5LGNvbHVtbjo3fX0sbGluZToyOTd9LDI5OntuYW1lOlwiKGFub255bW91c18yOSlcIixkZWNsOntzdGFydDp7bGluZTozMDIsY29sdW1uOjQyfSxlbmQ6e2xpbmU6MzAyLGNvbHVtbjo0M319LGxvYzp7c3RhcnQ6e2xpbmU6MzAyLGNvbHVtbjo0OX0sZW5kOntsaW5lOjMwMixjb2x1bW46ODd9fSxsaW5lOjMwMn0sMzA6e25hbWU6XCIoYW5vbnltb3VzXzMwKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjMwMyxjb2x1bW46MjR9LGVuZDp7bGluZTozMDMsY29sdW1uOjI1fX0sbG9jOntzdGFydDp7bGluZTozMDMsY29sdW1uOjMzfSxlbmQ6e2xpbmU6MzA3LGNvbHVtbjo1fX0sbGluZTozMDN9fSxicmFuY2hNYXA6ezA6e2xvYzp7c3RhcnQ6e2xpbmU6MjEsY29sdW1uOjI4fSxlbmQ6e2xpbmU6MjEsY29sdW1uOjY4fX0sdHlwZTpcImRlZmF1bHQtYXJnXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjEsY29sdW1uOjM2fSxlbmQ6e2xpbmU6MjEsY29sdW1uOjY4fX1dLGxpbmU6MjF9LDE6e2xvYzp7c3RhcnQ6e2xpbmU6MjEsY29sdW1uOjcwfSxlbmQ6e2xpbmU6MjEsY29sdW1uOjg1fX0sdHlwZTpcImRlZmF1bHQtYXJnXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjEsY29sdW1uOjgxfSxlbmQ6e2xpbmU6MjEsY29sdW1uOjg1fX1dLGxpbmU6MjF9LDI6e2xvYzp7c3RhcnQ6e2xpbmU6MjUsY29sdW1uOjR9LGVuZDp7bGluZTo0OSxjb2x1bW46NX19LHR5cGU6XCJzd2l0Y2hcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyNixjb2x1bW46NH0sZW5kOntsaW5lOjMzLGNvbHVtbjoxMn19LHtzdGFydDp7bGluZTozNCxjb2x1bW46NH0sZW5kOntsaW5lOjQxLGNvbHVtbjoxMn19LHtzdGFydDp7bGluZTo0Mixjb2x1bW46NH0sZW5kOntsaW5lOjQ2LGNvbHVtbjoxMn19LHtzdGFydDp7bGluZTo0Nyxjb2x1bW46NH0sZW5kOntsaW5lOjQ4LGNvbHVtbjo0OX19XSxsaW5lOjI1fSwzOntsb2M6e3N0YXJ0OntsaW5lOjUxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NjYsY29sdW1uOjV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo1MSxjb2x1bW46NH0sZW5kOntsaW5lOjY2LGNvbHVtbjo1fX0se3N0YXJ0OntsaW5lOjUxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NjYsY29sdW1uOjV9fV0sbGluZTo1MX0sNDp7bG9jOntzdGFydDp7bGluZTo1MSxjb2x1bW46OH0sZW5kOntsaW5lOjUxLGNvbHVtbjo1M319LHR5cGU6XCJiaW5hcnktZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjUxLGNvbHVtbjo4fSxlbmQ6e2xpbmU6NTEsY29sdW1uOjI5fX0se3N0YXJ0OntsaW5lOjUxLGNvbHVtbjozM30sZW5kOntsaW5lOjUxLGNvbHVtbjo1M319XSxsaW5lOjUxfSw1Ontsb2M6e3N0YXJ0OntsaW5lOjU0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NTQsY29sdW1uOjQ3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NTQsY29sdW1uOjZ9LGVuZDp7bGluZTo1NCxjb2x1bW46NDd9fSx7c3RhcnQ6e2xpbmU6NTQsY29sdW1uOjZ9LGVuZDp7bGluZTo1NCxjb2x1bW46NDd9fV0sbGluZTo1NH0sNjp7bG9jOntzdGFydDp7bGluZTo2Mixjb2x1bW46OX0sZW5kOntsaW5lOjY2LGNvbHVtbjo1fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NjIsY29sdW1uOjl9LGVuZDp7bGluZTo2Nixjb2x1bW46NX19LHtzdGFydDp7bGluZTo2Mixjb2x1bW46OX0sZW5kOntsaW5lOjY2LGNvbHVtbjo1fX1dLGxpbmU6NjJ9LDc6e2xvYzp7c3RhcnQ6e2xpbmU6NzIsY29sdW1uOjE3fSxlbmQ6e2xpbmU6NzQsY29sdW1uOjM1fX0sdHlwZTpcImNvbmQtZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjczLGNvbHVtbjo4fSxlbmQ6e2xpbmU6NzMsY29sdW1uOjQyfX0se3N0YXJ0OntsaW5lOjc0LGNvbHVtbjo4fSxlbmQ6e2xpbmU6NzQsY29sdW1uOjM1fX1dLGxpbmU6NzJ9LDg6e2xvYzp7c3RhcnQ6e2xpbmU6NzYsY29sdW1uOjR9LGVuZDp7bGluZTo3Nixjb2x1bW46NzN9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo3Nixjb2x1bW46NH0sZW5kOntsaW5lOjc2LGNvbHVtbjo3M319LHtzdGFydDp7bGluZTo3Nixjb2x1bW46NH0sZW5kOntsaW5lOjc2LGNvbHVtbjo3M319XSxsaW5lOjc2fSw5Ontsb2M6e3N0YXJ0OntsaW5lOjc5LGNvbHVtbjo2fSxlbmQ6e2xpbmU6ODEsY29sdW1uOjd9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo3OSxjb2x1bW46Nn0sZW5kOntsaW5lOjgxLGNvbHVtbjo3fX0se3N0YXJ0OntsaW5lOjc5LGNvbHVtbjo2fSxlbmQ6e2xpbmU6ODEsY29sdW1uOjd9fV0sbGluZTo3OX0sMTA6e2xvYzp7c3RhcnQ6e2xpbmU6NzksY29sdW1uOjEwfSxlbmQ6e2xpbmU6NzksY29sdW1uOjY3fX0sdHlwZTpcImJpbmFyeS1leHByXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NzksY29sdW1uOjEwfSxlbmQ6e2xpbmU6NzksY29sdW1uOjMxfX0se3N0YXJ0OntsaW5lOjc5LGNvbHVtbjozNX0sZW5kOntsaW5lOjc5LGNvbHVtbjo2N319XSxsaW5lOjc5fSwxMTp7bG9jOntzdGFydDp7bGluZTo4NSxjb2x1bW46MTF9LGVuZDp7bGluZTo4NSxjb2x1bW46NTd9fSx0eXBlOlwiY29uZC1leHByXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6ODUsY29sdW1uOjM1fSxlbmQ6e2xpbmU6ODUsY29sdW1uOjQzfX0se3N0YXJ0OntsaW5lOjg1LGNvbHVtbjo0Nn0sZW5kOntsaW5lOjg1LGNvbHVtbjo1N319XSxsaW5lOjg1fSwxMjp7bG9jOntzdGFydDp7bGluZTo5Nyxjb2x1bW46Mzl9LGVuZDp7bGluZTo5Nyxjb2x1bW46NDl9fSx0eXBlOlwiZGVmYXVsdC1hcmdcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo5Nyxjb2x1bW46NDd9LGVuZDp7bGluZTo5Nyxjb2x1bW46NDl9fV0sbGluZTo5N30sMTM6e2xvYzp7c3RhcnQ6e2xpbmU6MTAxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTAxLGNvbHVtbjo5N319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjEwMSxjb2x1bW46NH0sZW5kOntsaW5lOjEwMSxjb2x1bW46OTd9fSx7c3RhcnQ6e2xpbmU6MTAxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTAxLGNvbHVtbjo5N319XSxsaW5lOjEwMX0sMTQ6e2xvYzp7c3RhcnQ6e2xpbmU6MTA5LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTExLGNvbHVtbjo4OH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjEwOSxjb2x1bW46NH0sZW5kOntsaW5lOjExMSxjb2x1bW46ODh9fSx7c3RhcnQ6e2xpbmU6MTA5LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTExLGNvbHVtbjo4OH19XSxsaW5lOjEwOX0sMTU6e2xvYzp7c3RhcnQ6e2xpbmU6MTA5LGNvbHVtbjo3fSxlbmQ6e2xpbmU6MTExLGNvbHVtbjo1NX19LHR5cGU6XCJiaW5hcnktZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjEwOSxjb2x1bW46N30sZW5kOntsaW5lOjEwOSxjb2x1bW46NDZ9fSx7c3RhcnQ6e2xpbmU6MTEwLGNvbHVtbjo5fSxlbmQ6e2xpbmU6MTEwLGNvbHVtbjo0Mn19LHtzdGFydDp7bGluZToxMTEsY29sdW1uOjl9LGVuZDp7bGluZToxMTEsY29sdW1uOjU1fX1dLGxpbmU6MTA5fSwxNjp7bG9jOntzdGFydDp7bGluZToxMTYsY29sdW1uOjR9LGVuZDp7bGluZToxNTIsY29sdW1uOjQ5fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTE2LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTUyLGNvbHVtbjo0OX19LHtzdGFydDp7bGluZToxMTYsY29sdW1uOjR9LGVuZDp7bGluZToxNTIsY29sdW1uOjQ5fX1dLGxpbmU6MTE2fSwxNzp7bG9jOntzdGFydDp7bGluZToxMzUsY29sdW1uOjl9LGVuZDp7bGluZToxNTIsY29sdW1uOjQ5fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTM1LGNvbHVtbjo5fSxlbmQ6e2xpbmU6MTUyLGNvbHVtbjo0OX19LHtzdGFydDp7bGluZToxMzUsY29sdW1uOjl9LGVuZDp7bGluZToxNTIsY29sdW1uOjQ5fX1dLGxpbmU6MTM1fSwxODp7bG9jOntzdGFydDp7bGluZToxNTUsY29sdW1uOjR9LGVuZDp7bGluZToxNTgsY29sdW1uOjV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxNTUsY29sdW1uOjR9LGVuZDp7bGluZToxNTgsY29sdW1uOjV9fSx7c3RhcnQ6e2xpbmU6MTU1LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTU4LGNvbHVtbjo1fX1dLGxpbmU6MTU1fSwxOTp7bG9jOntzdGFydDp7bGluZToxNTUsY29sdW1uOjh9LGVuZDp7bGluZToxNTUsY29sdW1uOjQ3fX0sdHlwZTpcImJpbmFyeS1leHByXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTU1LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTU1LGNvbHVtbjoyNH19LHtzdGFydDp7bGluZToxNTUsY29sdW1uOjI4fSxlbmQ6e2xpbmU6MTU1LGNvbHVtbjo0N319XSxsaW5lOjE1NX0sMjA6e2xvYzp7c3RhcnQ6e2xpbmU6MTcxLGNvbHVtbjo0Mn0sZW5kOntsaW5lOjE3MSxjb2x1bW46NTR9fSx0eXBlOlwiZGVmYXVsdC1hcmdcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxNzEsY29sdW1uOjUyfSxlbmQ6e2xpbmU6MTcxLGNvbHVtbjo1NH19XSxsaW5lOjE3MX0sMjE6e2xvYzp7c3RhcnQ6e2xpbmU6MTc3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTkyLGNvbHVtbjo1fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTc3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTkyLGNvbHVtbjo1fX0se3N0YXJ0OntsaW5lOjE3Nyxjb2x1bW46NH0sZW5kOntsaW5lOjE5Mixjb2x1bW46NX19XSxsaW5lOjE3N30sMjI6e2xvYzp7c3RhcnQ6e2xpbmU6MTg1LGNvbHVtbjo5fSxlbmQ6e2xpbmU6MTkyLGNvbHVtbjo1fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTg1LGNvbHVtbjo5fSxlbmQ6e2xpbmU6MTkyLGNvbHVtbjo1fX0se3N0YXJ0OntsaW5lOjE4NSxjb2x1bW46OX0sZW5kOntsaW5lOjE5Mixjb2x1bW46NX19XSxsaW5lOjE4NX0sMjM6e2xvYzp7c3RhcnQ6e2xpbmU6MTk2LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjA0LGNvbHVtbjo1fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTk2LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjA0LGNvbHVtbjo1fX0se3N0YXJ0OntsaW5lOjE5Nixjb2x1bW46NH0sZW5kOntsaW5lOjIwNCxjb2x1bW46NX19XSxsaW5lOjE5Nn0sMjQ6e2xvYzp7c3RhcnQ6e2xpbmU6MjAxLGNvbHVtbjo4fSxlbmQ6e2xpbmU6MjAxLGNvbHVtbjo4N319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjIwMSxjb2x1bW46OH0sZW5kOntsaW5lOjIwMSxjb2x1bW46ODd9fSx7c3RhcnQ6e2xpbmU6MjAxLGNvbHVtbjo4fSxlbmQ6e2xpbmU6MjAxLGNvbHVtbjo4N319XSxsaW5lOjIwMX0sMjU6e2xvYzp7c3RhcnQ6e2xpbmU6MjE3LGNvbHVtbjozNn0sZW5kOntsaW5lOjIxNyxjb2x1bW46NDZ9fSx0eXBlOlwiZGVmYXVsdC1hcmdcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyMTcsY29sdW1uOjQ0fSxlbmQ6e2xpbmU6MjE3LGNvbHVtbjo0Nn19XSxsaW5lOjIxN30sMjY6e2xvYzp7c3RhcnQ6e2xpbmU6MjI2LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjI2LGNvbHVtbjo2NH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjIyNixjb2x1bW46NH0sZW5kOntsaW5lOjIyNixjb2x1bW46NjR9fSx7c3RhcnQ6e2xpbmU6MjI2LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjI2LGNvbHVtbjo2NH19XSxsaW5lOjIyNn0sMjc6e2xvYzp7c3RhcnQ6e2xpbmU6MjQ3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjQ3LGNvbHVtbjo2OH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjI0Nyxjb2x1bW46NH0sZW5kOntsaW5lOjI0Nyxjb2x1bW46Njh9fSx7c3RhcnQ6e2xpbmU6MjQ3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjQ3LGNvbHVtbjo2OH19XSxsaW5lOjI0N30sMjg6e2xvYzp7c3RhcnQ6e2xpbmU6MjYzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjYzLGNvbHVtbjo4MH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjI2Myxjb2x1bW46NH0sZW5kOntsaW5lOjI2Myxjb2x1bW46ODB9fSx7c3RhcnQ6e2xpbmU6MjYzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjYzLGNvbHVtbjo4MH19XSxsaW5lOjI2M30sMjk6e2xvYzp7c3RhcnQ6e2xpbmU6MjgwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjgwLGNvbHVtbjo4MH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjI4MCxjb2x1bW46NH0sZW5kOntsaW5lOjI4MCxjb2x1bW46ODB9fSx7c3RhcnQ6e2xpbmU6MjgwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjgwLGNvbHVtbjo4MH19XSxsaW5lOjI4MH0sMzA6e2xvYzp7c3RhcnQ6e2xpbmU6Mjg1LGNvbHVtbjo2fSxlbmQ6e2xpbmU6Mjg1LGNvbHVtbjo4M319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjI4NSxjb2x1bW46Nn0sZW5kOntsaW5lOjI4NSxjb2x1bW46ODN9fSx7c3RhcnQ6e2xpbmU6Mjg1LGNvbHVtbjo2fSxlbmQ6e2xpbmU6Mjg1LGNvbHVtbjo4M319XSxsaW5lOjI4NX0sMzE6e2xvYzp7c3RhcnQ6e2xpbmU6MzA0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MzA2LGNvbHVtbjo3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MzA0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MzA2LGNvbHVtbjo3fX0se3N0YXJ0OntsaW5lOjMwNCxjb2x1bW46Nn0sZW5kOntsaW5lOjMwNixjb2x1bW46N319XSxsaW5lOjMwNH19LHM6ezA6MCwxOjAsMjowLDM6MCw0OjAsNTowLDY6MCw3OjAsODowLDk6MCwxMDowLDExOjAsMTI6MCwxMzowLDE0OjAsMTU6MCwxNjowLDE3OjAsMTg6MCwxOTowLDIwOjAsMjE6MCwyMjowLDIzOjAsMjQ6MCwyNTowLDI2OjAsMjc6MCwyODowLDI5OjAsMzA6MCwzMTowLDMyOjAsMzM6MCwzNDowLDM1OjAsMzY6MCwzNzowLDM4OjAsMzk6MCw0MDowLDQxOjAsNDI6MCw0MzowLDQ0OjAsNDU6MCw0NjowLDQ3OjAsNDg6MCw0OTowLDUwOjAsNTE6MCw1MjowLDUzOjAsNTQ6MCw1NTowLDU2OjAsNTc6MCw1ODowLDU5OjAsNjA6MCw2MTowLDYyOjAsNjM6MCw2NDowLDY1OjAsNjY6MCw2NzowLDY4OjAsNjk6MCw3MDowLDcxOjAsNzI6MCw3MzowLDc0OjAsNzU6MCw3NjowLDc3OjAsNzg6MCw3OTowLDgwOjAsODE6MCw4MjowLDgzOjAsODQ6MCw4NTowLDg2OjAsODc6MCw4ODowLDg5OjAsOTA6MCw5MTowLDkyOjAsOTM6MCw5NDowLDk1OjAsOTY6MCw5NzowLDk4OjAsOTk6MCwxMDA6MCwxMDE6MCwxMDI6MCwxMDM6MCwxMDQ6MCwxMDU6MCwxMDY6MCwxMDc6MCwxMDg6MCwxMDk6MCwxMTA6MCwxMTE6MCwxMTI6MCwxMTM6MCwxMTQ6MCwxMTU6MCwxMTY6MCwxMTc6MCwxMTg6MCwxMTk6MCwxMjA6MCwxMjE6MCwxMjI6MCwxMjM6MCwxMjQ6MCwxMjU6MCwxMjY6MCwxMjc6MCwxMjg6MCwxMjk6MCwxMzA6MCwxMzE6MCwxMzI6MCwxMzM6MCwxMzQ6MCwxMzU6MCwxMzY6MCwxMzc6MCwxMzg6MH0sZjp7MDowLDE6MCwyOjAsMzowLDQ6MCw1OjAsNjowLDc6MCw4OjAsOTowLDEwOjAsMTE6MCwxMjowLDEzOjAsMTQ6MCwxNTowLDE2OjAsMTc6MCwxODowLDE5OjAsMjA6MCwyMTowLDIyOjAsMjM6MCwyNDowLDI1OjAsMjY6MCwyNzowLDI4OjAsMjk6MCwzMDowfSxiOnswOlswXSwxOlswXSwyOlswLDAsMCwwXSwzOlswLDBdLDQ6WzAsMF0sNTpbMCwwXSw2OlswLDBdLDc6WzAsMF0sODpbMCwwXSw5OlswLDBdLDEwOlswLDBdLDExOlswLDBdLDEyOlswXSwxMzpbMCwwXSwxNDpbMCwwXSwxNTpbMCwwLDBdLDE2OlswLDBdLDE3OlswLDBdLDE4OlswLDBdLDE5OlswLDBdLDIwOlswXSwyMTpbMCwwXSwyMjpbMCwwXSwyMzpbMCwwXSwyNDpbMCwwXSwyNTpbMF0sMjY6WzAsMF0sMjc6WzAsMF0sMjg6WzAsMF0sMjk6WzAsMF0sMzA6WzAsMF0sMzE6WzAsMF19LF9jb3ZlcmFnZVNjaGVtYTpcIjQzZTI3ZTEzOGViZjljZmM1OTY2YjA4MmNmOWEwMjgzMDJlZDQxODRcIn0saT10W2xdfHwodFtsXT17fSk7cmV0dXJuIGlbbl0mJmlbbl0uaGFzaD09PWU/aVtuXTooby5oYXNoPWUsaVtuXT1vKX0oKSxkbj1mdW5jdGlvbihuKXtmdW5jdGlvbiBlKCl7cmV0dXJuIHUoKSh0aGlzLGUpLGgoKSh0aGlzLHYoKShlKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiB3KCkoZSxuKSxhKCkoZSxudWxsLFt7a2V5OlwiZ2VuZXJhdGVLZXlcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKGUpe3ZhciB0LGwsaSxyLGMsdSxzLGEsbSxkLGY7cmV0dXJuIG8uYS53cmFwKGZ1bmN0aW9uKG4pe2Zvcig7Oylzd2l0Y2gobi5wcmV2PW4ubmV4dCl7Y2FzZSAwOnQ9ZS51c2VySWRzLGw9dm9pZCAwPT09dD8obW4uYlswXVswXSsrLF8ub3BlbnBncC5kZWZhdWx0VXNlcik6dCxpPWUucGFzc3BocmFzZSxyPXZvaWQgMD09PWk/KG1uLmJbMV1bMF0rKyxudWxsKTppLGM9ZS5wYXJhbXMsbW4uZlswXSsrLG1uLnNbMF0rKyx1PUEoKSxtbi5zWzFdKyssbi50MD1jLnR5cGUsbi5uZXh0PVwicnNhXCI9PT1uLnQwPzc6XCJlY1wiPT09bi50MD8xMjpcInNlc3Npb25cIj09PW4udDA/MTc6MjI7YnJlYWs7Y2FzZSA3OnJldHVybiBtbi5iWzJdWzBdKyssbW4uc1syXSsrLHM9e3VzZXJJZHM6bCxudW1CaXRzOmMubW9kdWx1c0xlbmd0aCxwYXNzcGhyYXNlOnIsa2V5RXhwaXJhdGlvblRpbWU6Yy5rZXlFeHBpcmF0aW9uVGltZX0sbW4uc1szXSsrLG4uYWJydXB0KFwiYnJlYWtcIiwyNSk7Y2FzZSAxMjpyZXR1cm4gbW4uYlsyXVsxXSsrLG1uLnNbNF0rKyxzPXt1c2VySWRzOmwsY3VydmU6Xy5vcGVucGdwLmN1cnZlTGlzdFtjLmN1cnZlXS5uYW1lLHBhc3NwaHJhc2U6cixrZXlFeHBpcmF0aW9uVGltZTpjLmtleUV4cGlyYXRpb25UaW1lfSxtbi5zWzVdKyssbi5hYnJ1cHQoXCJicmVha1wiLDI1KTtjYXNlIDE3OnJldHVybiBtbi5iWzJdWzJdKyssbW4uc1s2XSsrLHM9e2xlbmd0aDpjLmxlbmd0aH0sbW4uc1s3XSsrLG4uYWJydXB0KFwiYnJlYWtcIiwyNSk7Y2FzZSAyMjp0aHJvdyBtbi5iWzJdWzNdKyssbW4uc1s4XSsrLG5ldyBFcnJvcihcIkdQR1Vuc3VwcG9ydGVkQWxnb3JpdGhtXCIpO2Nhc2UgMjU6aWYobW4uc1s5XSsrLG1uLmJbNF1bMF0rKyxcInJzYVwiIT09Yy50eXBlJiYobW4uYls0XVsxXSsrLFwiZWNcIiE9PWMudHlwZSkpe24ubmV4dD0zOTticmVha31yZXR1cm4gbW4uYlszXVswXSsrLG1uLnNbMTBdKyssbi5uZXh0PTMxLHUuZ2VuZXJhdGVLZXkocyk7Y2FzZSAzMTpyZXR1cm4gYT1uLnNlbnQsbW4uc1sxMV0rKyxtPWEua2V5LmdldEtleXMoKS5tYXAoZnVuY3Rpb24obil7cmV0dXJuIG1uLmZbMV0rKyxtbi5zWzEyXSsrLE8obil9KSxtbi5zWzEzXSsrLDE9PT1tLmxlbmd0aD8obW4uYls1XVswXSsrLG1uLnNbMTRdKyssbT1tWzBdKTptbi5iWzVdWzFdKyssbW4uc1sxNV0rKyxuLmFicnVwdChcInJldHVyblwiLHtwdWJsaWNLZXk6YS5rZXkudG9QdWJsaWMoKSxwcml2YXRlS2V5OmEua2V5LGtleUlkOm19KTtjYXNlIDM5OmlmKG1uLmJbM11bMV0rKyxtbi5zWzE2XSsrLFwic2Vzc2lvblwiIT09Yy50eXBlKXtuLm5leHQ9NTU7YnJlYWt9cmV0dXJuIG1uLmJbNl1bMF0rKyxtbi5zWzE3XSsrLG4ubmV4dD00Nix1LmNyeXB0by5yYW5kb20uZ2V0UmFuZG9tQnl0ZXMocy5sZW5ndGgpO2Nhc2UgNDY6cmV0dXJuIGQ9bi5zZW50LG1uLnNbMThdKyssbi5uZXh0PTUwLFQoZCk7Y2FzZSA1MDpyZXR1cm4gZj1uLnNlbnQsbW4uc1sxOV0rKyxuLmFicnVwdChcInJldHVyblwiLHtrZXk6ZCxrZXlJZDpmfSk7Y2FzZSA1NTptbi5iWzZdWzFdKys7Y2FzZSA1NjpjYXNlXCJlbmRcIjpyZXR1cm4gbi5zdG9wKCl9fSxuLHRoaXMpfSkpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSgpfSx7a2V5OlwiaW1wb3J0S2V5XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlLHQsbCl7dmFyIGksYyx1O3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDppZihtbi5mWzJdKyssbW4uc1syMF0rKyxpPUEoKSxtbi5zWzIxXSsrLFwicGVtXCIhPT1lKXtuLm5leHQ9MTA7YnJlYWt9cmV0dXJuIG1uLmJbN11bMF0rKyxuLm5leHQ9NyxpLmtleS5yZWFkQXJtb3JlZCh0KTtjYXNlIDc6bi50MD1uLnNlbnQsbi5uZXh0PTE0O2JyZWFrO2Nhc2UgMTA6cmV0dXJuIG1uLmJbN11bMV0rKyxuLm5leHQ9MTMsaS5rZXkucmVhZCh0KTtjYXNlIDEzOm4udDA9bi5zZW50O2Nhc2UgMTQ6aWYoYz1uLnQwLG1uLnNbMjJdKyssIWMuZXJyKXtuLm5leHQ9MjI7YnJlYWt9dGhyb3cgbW4uYls4XVswXSsrLG1uLnNbMjNdKyssbmV3IEVycm9yKFwiSW52YWxpZE9wZW5QR1BLZXlGb3JtYXQ6IFwiLmNvbmNhdChjLmVycikpO2Nhc2UgMjI6bW4uYls4XVsxXSsrO2Nhc2UgMjM6cmV0dXJuIG1uLnNbMjRdKyssbi5uZXh0PTI2LFByb21pc2UuYWxsKGMua2V5cy5tYXAoZnVuY3Rpb24oKXt2YXIgbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlKXtyZXR1cm4gby5hLndyYXAoZnVuY3Rpb24obil7Zm9yKDs7KXN3aXRjaChuLnByZXY9bi5uZXh0KXtjYXNlIDA6aWYobW4uZlszXSsrLG1uLnNbMjVdKyssbW4uYlsxMF1bMF0rKywhZS5pc1ByaXZhdGUoKXx8KG1uLmJbMTBdWzFdKyssIWUucHJpbWFyeUtleS5pc0VuY3J5cHRlZCkpe24ubmV4dD05O2JyZWFrfXJldHVybiBtbi5iWzldWzBdKyssbW4uc1syNl0rKyxuLm5leHQ9NyxlLmRlY3J5cHQobCk7Y2FzZSA3Om4ubmV4dD0xMDticmVhaztjYXNlIDk6bW4uYls5XVsxXSsrO2Nhc2UgMTA6cmV0dXJuIG1uLnNbMjddKyssbi5hYnJ1cHQoXCJyZXR1cm5cIixlKTtjYXNlIDEyOmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCkpKTtjYXNlIDI2OnJldHVybiB1PW4uc2VudCxtbi5zWzI4XSsrLG4uYWJydXB0KFwicmV0dXJuXCIsdS5sZW5ndGg+MT8obW4uYlsxMV1bMF0rKyx1KToobW4uYlsxMV1bMV0rKyx1WzBdKSk7Y2FzZSAyOTpjYXNlXCJlbmRcIjpyZXR1cm4gbi5zdG9wKCl9fSxuLHRoaXMpfSkpO3JldHVybiBmdW5jdGlvbihlLHQsbCl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKX0se2tleTpcImVuY3J5cHRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKHQpe3ZhciBsLGkscixjLHUscyxhLG0sZCxmLHAseSxoLGIsdixnLHcseDtyZXR1cm4gby5hLndyYXAoZnVuY3Rpb24obil7Zm9yKDs7KXN3aXRjaChuLnByZXY9bi5uZXh0KXtjYXNlIDA6aWYobD10Lm1lc3NhZ2UsaT10LmtleXMscj10Lm9wdGlvbnMsYz12b2lkIDA9PT1yPyhtbi5iWzEyXVswXSsrLHt9KTpyLG1uLmZbNF0rKyxtbi5zWzI5XSsrLHU9QSgpLG1uLnNbMzBdKyssYy5jb21wcmVzc2lvbj8obW4uYlsxM11bMF0rKyxtbi5zWzMxXSsrLGMuY29tcHJlc3Npb249dS5lbnVtcy5jb21wcmVzc2lvbltjLmNvbXByZXNzaW9uXSk6bW4uYlsxM11bMV0rKyxtbi5zWzMyXSsrLGMuYXJtb3I9ITEsbW4uc1szM10rKyxzPXUubWVzc2FnZS5mcm9tQmluYXJ5KGwuYmluYXJ5KSxtbi5zWzM0XSsrLG1uLmJbMTVdWzBdKyssdm9pZCAwIT09aS5wcml2YXRlS2V5cyYmKG1uLmJbMTVdWzFdKyssaS5wcml2YXRlS2V5cyBpbnN0YW5jZW9mIEFycmF5KSYmKG1uLmJbMTVdWzJdKyssaS5wcml2YXRlS2V5c1swXWluc3RhbmNlb2YgdS5rZXkuS2V5KT8obW4uYlsxNF1bMF0rKyxtbi5zWzM1XSsrLGE9aS5wcml2YXRlS2V5cyk6bW4uYlsxNF1bMV0rKyxtbi5zWzM2XSsrLCFpLnB1YmxpY0tleXMpe24ubmV4dD0yODticmVha31yZXR1cm4gbW4uYlsxNl1bMF0rKyxtbi5zWzM3XSsrLGY9e21lc3NhZ2U6cyxwdWJsaWNLZXlzOmkucHVibGljS2V5cyxwcml2YXRlS2V5czphLGZvcm1hdDpcImJpbmFyeVwifSxtbi5zWzM4XSsrLG4ubmV4dD0xNyx1LmVuY3J5cHQoT2JqZWN0LmFzc2lnbihmLGMpKTtjYXNlIDE3Om09bi5zZW50LG1uLnNbMzldKysscD1tLm1lc3NhZ2UuZ2V0RW5jcnlwdGlvbktleUlkcygpLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gbW4uZls1XSsrLG1uLnNbNDBdKyssbi50b0hleCgpfSksbW4uc1s0MV0rKyx5PVtdLG1uLnNbNDJdKyssaS5wdWJsaWNLZXlzLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gbW4uZls2XSsrLG1uLnNbNDNdKyssbi5nZXRLZXlzKCkubWFwKGZ1bmN0aW9uKG4pe21uLmZbN10rKyxtbi5zWzQ0XSsrLHkucHVzaChPKG4pKX0pfSksbW4uc1s0NV0rKyxoPXkuZmlsdGVyKGZ1bmN0aW9uKG4pe3JldHVybiBtbi5mWzhdKyssbW4uc1s0Nl0rKyxwLmluZGV4T2Yobi50b0hleCgpLnNsaWNlKDAsMTYpKT49MH0pLG1uLnNbNDddKyssYj1bcShtLm1lc3NhZ2UucGFja2V0cy53cml0ZSgpLEYoaCkse30pXSxtbi5zWzQ4XSsrLGQ9e21lc3NhZ2U6VyhcIm9wZW5wZ3BcIixcInB1YmxpY19rZXlfZW5jcnlwdFwiLGIse30pfSxuLm5leHQ9NTM7YnJlYWs7Y2FzZSAyODppZihtbi5iWzE2XVsxXSsrLG1uLnNbNDldKyssIWkuc2Vzc2lvbktleSl7bi5uZXh0PTUwO2JyZWFrfXJldHVybiBtbi5iWzE3XVswXSsrLG1uLnNbNTBdKyssdj17bWVzc2FnZTpzLHNlc3Npb25LZXk6e2RhdGE6aS5zZXNzaW9uS2V5LGFsZ29yaXRobTpjLmFsZ29yaXRobX0scHJpdmF0ZUtleXM6YSxmb3JtYXQ6XCJiaW5hcnlcIn0sbW4uc1s1MV0rKyxuLm5leHQ9MzYsdS5lbmNyeXB0KE9iamVjdC5hc3NpZ24odixjKSk7Y2FzZSAzNjpyZXR1cm4gbT1uLnNlbnQsbW4uc1s1Ml0rKyxuLnQwPXEsbi50MT1tLm1lc3NhZ2UucGFja2V0cy53cml0ZSgpLG4ubmV4dD00MixUKGkuc2Vzc2lvbktleSk7Y2FzZSA0MjpuLnQyPW4uc2VudCxuLnQzPXt9LG4udDQ9KDAsbi50MCkobi50MSxuLnQyLG4udDMpLGc9W24udDRdLG1uLnNbNTNdKyssZD17bWVzc2FnZTpXKFwib3BlbnBncFwiLFwic2Vzc2lvbl9rZXlfZW5jcnlwdFwiLGcse2FsZ29yaXRobTpjLmFsZ29yaXRobX0pfSxuLm5leHQ9NTM7YnJlYWs7Y2FzZSA1MDp0aHJvdyBtbi5iWzE3XVsxXSsrLG1uLnNbNTRdKyssbmV3IEVycm9yKFwiSW52YWxpZEVuY3J5cHRpb25LZXlcIik7Y2FzZSA1MzpyZXR1cm4gbW4uc1s1NV0rKyx3PXt9LG1uLnNbNTZdKyssbW4uYlsxOV1bMF0rKyxpLnByaXZhdGVLZXlzJiYobW4uYlsxOV1bMV0rKyxtLnNpZ25hdHVyZSk/KG1uLmJbMThdWzBdKyssbW4uc1s1N10rKyx4PWUuX2xpc3RGcm9tT3BlblBncFNpZyhtLnNpZ25hdHVyZS5wYWNrZXRzLGEpLG1uLnNbNThdKyssdz17c2lnbmF0dXJlOmxuKFwib3BlbnBncFwiLFwicHVibGljX2tleV9zaWduXCIseCx7fSl9KTptbi5iWzE4XVsxXSsrLG1uLnNbNTldKyssbi5hYnJ1cHQoXCJyZXR1cm5cIixPYmplY3QuYXNzaWduKGQsdykpO2Nhc2UgNTg6Y2FzZVwiZW5kXCI6cmV0dXJuIG4uc3RvcCgpfX0sbix0aGlzKX0pKTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKX0se2tleTpcImRlY3J5cHRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKGUpe3ZhciB0LGwsaSxyLGMsdSxzO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDpyZXR1cm4gdD1lLmVuY3J5cHRlZCxsPWUua2V5cyxpPWUub3B0aW9ucyxyPXZvaWQgMD09PWk/KG1uLmJbMjBdWzBdKysse30pOmksbW4uZls5XSsrLG1uLnNbNjBdKyssYz1BKCksbW4uc1s2MV0rKyxuLm5leHQ9NixjLm1lc3NhZ2UucmVhZCh0Lm1lc3NhZ2UubWVzc2FnZVswXS50b0J1ZmZlcigpLCExKTtjYXNlIDY6aWYodT1uLnNlbnQsbW4uc1s2Ml0rKyxcInB1YmxpY19rZXlfZW5jcnlwdFwiIT09dC5tZXNzYWdlLmtleVR5cGUpe24ubmV4dD0xNjticmVha31yZXR1cm4gbW4uYlsyMV1bMF0rKyxtbi5zWzYzXSsrLG4ubmV4dD0xMyxjLmRlY3J5cHQoT2JqZWN0LmFzc2lnbih7bWVzc2FnZTp1LHByaXZhdGVLZXlzOmwucHJpdmF0ZUtleXMscHVibGljS2V5czpsLnB1YmxpY0tleXMsZm9ybWF0OlwiYmluYXJ5XCJ9LHIpKTtjYXNlIDEzOnM9bi5zZW50LG4ubmV4dD0yNzticmVhaztjYXNlIDE2OmlmKG1uLmJbMjFdWzFdKyssbW4uc1s2NF0rKyxcInNlc3Npb25fa2V5X2VuY3J5cHRcIiE9PXQubWVzc2FnZS5rZXlUeXBlKXtuLm5leHQ9MjY7YnJlYWt9cmV0dXJuIG1uLmJbMjJdWzBdKyssbW4uc1s2NV0rKyxuLm5leHQ9MjMsYy5kZWNyeXB0KE9iamVjdC5hc3NpZ24oe21lc3NhZ2U6dSxzZXNzaW9uS2V5czpbe2RhdGE6bC5zZXNzaW9uS2V5LGFsZ29yaXRobTpyLmFsZ29yaXRobX1dLHB1YmxpY0tleXM6bC5wdWJsaWNLZXlzLGZvcm1hdDpcImJpbmFyeVwifSxyKSk7Y2FzZSAyMzpzPW4uc2VudCxuLm5leHQ9Mjc7YnJlYWs7Y2FzZSAyNjptbi5iWzIyXVsxXSsrO2Nhc2UgMjc6cmV0dXJuIG1uLnNbNjZdKysscy5kYXRhPW5ldyBVaW50OEFycmF5KHMuZGF0YSksbW4uc1s2N10rKyxzLnNpZ25hdHVyZXMgaW5zdGFuY2VvZiBBcnJheT8obW4uYlsyM11bMF0rKyxtbi5zWzY4XSsrLHMuc2lnbmF0dXJlcz1zLnNpZ25hdHVyZXMubWFwKGZ1bmN0aW9uKG4pe21uLmZbMTBdKys7dmFyIGU9KG1uLnNbNjldKyssbi5rZXlpZC50b0hleCgpKSx0PShtbi5zWzcwXSsrLG4uc2lnbmF0dXJlLnBhY2tldHMubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBtbi5mWzExXSsrLG1uLnNbNzFdKyssbmV3IFVpbnQ4QXJyYXkobi5pc3N1ZXJGaW5nZXJwcmludCl9KSksbD0obW4uc1s3Ml0rKyx0LmZpbHRlcihmdW5jdGlvbihuKXtyZXR1cm4gbW4uZlsxMl0rKyxtbi5zWzczXSsrLGU9PT1QLmEuZW5jb2Rlci5hcnJheUJ1ZmZlclRvSGV4U3RyaW5nKG4pLnNsaWNlKDAsMTYpfSkpO2lmKG1uLnNbNzRdKyssMD09PWwubGVuZ3RoKXRocm93IG1uLmJbMjRdWzBdKyssbW4uc1s3NV0rKyxuZXcgRXJyb3IoXCJTb21ldGhpbmdXcm9uZ0luT3BlblBHUFNpZ25hdHVyZVwiKTtyZXR1cm4gbW4uYlsyNF1bMV0rKyxtbi5zWzc2XSsrLHtrZXlJZDpSKGxbMF0pLHZhbGlkOm4udmFsaWR9fSkpOm1uLmJbMjNdWzFdKyssbW4uc1s3N10rKyxuLmFicnVwdChcInJldHVyblwiLHMpO2Nhc2UgMzM6Y2FzZVwiZW5kXCI6cmV0dXJuIG4uc3RvcCgpfX0sbix0aGlzKX0pKTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKX0se2tleTpcInNpZ25cIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKHQpe3ZhciBsLGkscixjLHUscyxhLG0sZDtyZXR1cm4gby5hLndyYXAoZnVuY3Rpb24obil7Zm9yKDs7KXN3aXRjaChuLnByZXY9bi5uZXh0KXtjYXNlIDA6aWYobD10Lm1lc3NhZ2UsaT10LmtleXMscj10Lm9wdGlvbnMsYz12b2lkIDA9PT1yPyhtbi5iWzI1XVswXSsrLHt9KTpyLG1uLmZbMTNdKyssbW4uc1s3OF0rKyx1PUEoKSxtbi5zWzc5XSsrLGMuZGV0YWNoZWQ9ITAsbW4uc1s4MF0rKyxjLmFybW9yPSExLG1uLnNbODFdKysscz11Lm1lc3NhZ2UuZnJvbUJpbmFyeShsLmJpbmFyeSksbW4uc1s4Ml0rKyxpLnByaXZhdGVLZXlzKXtuLm5leHQ9MTU7YnJlYWt9dGhyb3cgbW4uYlsyNl1bMF0rKyxtbi5zWzgzXSsrLG5ldyBFcnJvcihcIlNpZ25pbmdLZXlSZXF1aXJlZFwiKTtjYXNlIDE1Om1uLmJbMjZdWzFdKys7Y2FzZSAxNjpyZXR1cm4gbW4uc1s4NF0rKyxhPXttZXNzYWdlOnMscHJpdmF0ZUtleXM6aS5wcml2YXRlS2V5c30sbW4uc1s4NV0rKyxuLm5leHQ9MjAsdS5zaWduKE9iamVjdC5hc3NpZ24oYSxjKSk7Y2FzZSAyMDpyZXR1cm4gbT1uLnNlbnQsbW4uc1s4Nl0rKyxkPWUuX2xpc3RGcm9tT3BlblBncFNpZyhtLnNpZ25hdHVyZS5wYWNrZXRzLGkucHJpdmF0ZUtleXMpLG1uLnNbODddKyssbi5hYnJ1cHQoXCJyZXR1cm5cIix7c2lnbmF0dXJlOmxuKFwib3BlbnBncFwiLFwicHVibGljX2tleV9zaWduXCIsZCx7fSl9KTtjYXNlIDI0OmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCl9LHtrZXk6XCJ2ZXJpZnlcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKHQpe3ZhciBsLGksYyx1LHMsYSxtO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDppZihsPXQubWVzc2FnZSxpPXQuc2lnbmF0dXJlLGM9dC5rZXlzLHQub3B0aW9ucyxtbi5mWzE0XSsrLG1uLnNbODhdKyssdT1BKCksbW4uc1s4OV0rKyxjLnB1YmxpY0tleXMpe24ubmV4dD0xMDticmVha310aHJvdyBtbi5iWzI3XVswXSsrLG1uLnNbOTBdKyssbmV3IEVycm9yKFwiVmVyaWZpY2F0aW9uS2V5UmVxdWlyZWRcIik7Y2FzZSAxMDptbi5iWzI3XVsxXSsrO2Nhc2UgMTE6cmV0dXJuIG1uLnNbOTFdKysscz1lLl9MaXN0VG9PcGVuUGdwU2lnKGkuc2lnbmF0dXJlcyxjLnB1YmxpY0tleXMpLG1uLnNbOTJdKyssYT11Lm1lc3NhZ2UuZnJvbUJpbmFyeShsLmJpbmFyeSksbW4uc1s5M10rKyxuLm5leHQ9MTYsUHJvbWlzZS5hbGwocy5zaWduYXR1cmVPYmplY3RzLm1hcChmdW5jdGlvbigpe3ZhciBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKGUpe3ZhciB0LGwsaSxyO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDpyZXR1cm4gbW4uZlsxNV0rKyxtbi5zWzk0XSsrLHQ9YS51bndyYXBDb21wcmVzc2VkKCksbW4uc1s5NV0rKyxsPXQucGFja2V0cy5maWx0ZXJCeVRhZyh1LmVudW1zLnBhY2tldC5saXRlcmFsKSxtbi5zWzk2XSsrLGk9W2Uub3BlbnBncFNpZ25hdHVyZV0sbW4uc1s5N10rKyxuLm5leHQ9Nyx1Lm1lc3NhZ2UuY3JlYXRlVmVyaWZpY2F0aW9uT2JqZWN0cyhpLGwsW2UucHVibGljS2V5XSxuZXcgRGF0ZSk7Y2FzZSA3OnJldHVybiByPW4uc2VudCxtbi5zWzk4XSsrLG4udDA9ZS5zaWduYXR1cmUua2V5SWQsbi5uZXh0PTEyLHJbMF0udmVyaWZpZWQ7Y2FzZSAxMjpyZXR1cm4gbi50MT1uLnNlbnQsbi5hYnJ1cHQoXCJyZXR1cm5cIix7a2V5SWQ6bi50MCx2YWxpZDpuLnQxfSk7Y2FzZSAxNDpjYXNlXCJlbmRcIjpyZXR1cm4gbi5zdG9wKCl9fSxuLHRoaXMpfSkpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSgpKSk7Y2FzZSAxNjpyZXR1cm4gbT1uLnNlbnQsbW4uc1s5OV0rKyxuLmFicnVwdChcInJldHVyblwiLG0uY29uY2F0KHMudW52ZXJpZmllZCkpO2Nhc2UgMTk6Y2FzZVwiZW5kXCI6cmV0dXJuIG4uc3RvcCgpfX0sbix0aGlzKX0pKTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKX0se2tleTpcIl9saXN0RnJvbU9wZW5QZ3BTaWdcIix2YWx1ZTpmdW5jdGlvbihuLGUpe2lmKG1uLmZbMTZdKyssbW4uc1sxMDBdKyssIShuIGluc3RhbmNlb2YgQXJyYXkpKXRocm93IG1uLmJbMjhdWzBdKyssbW4uc1sxMDFdKyssbmV3IEVycm9yKFwiSW52YWxpZFNpZ25hdHVyZUxpc3RcIik7bW4uYlsyOF1bMV0rKzt2YXIgdD0obW4uc1sxMDJdKyssW10pO21uLnNbMTAzXSsrLGUubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBtbi5mWzE3XSsrLG1uLnNbMTA0XSsrLG4uZ2V0S2V5cygpLm1hcChmdW5jdGlvbihuKXttbi5mWzE4XSsrLG1uLnNbMTA1XSsrLHQucHVzaChPKG4pKX0pfSk7dmFyIGw9KG1uLnNbMTA2XSsrLFtdKTtyZXR1cm4gbW4uc1sxMDddKyssdC5tYXAoZnVuY3Rpb24oZSl7bW4uZlsxOV0rKzt2YXIgdD0obW4uc1sxMDhdKyssbi5maWx0ZXIoZnVuY3Rpb24obil7cmV0dXJuIG1uLmZbMjBdKyssbW4uc1sxMDldKyssbi5pc3N1ZXJLZXlJZC50b0hleCgpPT09ZS50b0hleCgpLnNsaWNlKDAsMTYpfSkpO21uLnNbMTEwXSsrLHQubWFwKGZ1bmN0aW9uKG4pe21uLmZbMjFdKyssbW4uc1sxMTFdKyssbC5wdXNoKGNuKG4ud3JpdGUoKSxlKSl9KX0pLG1uLnNbMTEyXSsrLGx9fSx7a2V5OlwiX0xpc3RUb09wZW5QZ3BTaWdcIix2YWx1ZTpmdW5jdGlvbihuLGUpe2lmKG1uLmZbMjJdKyssbW4uc1sxMTNdKyssIShuIGluc3RhbmNlb2YgQXJyYXkpKXRocm93IG1uLmJbMjldWzBdKyssbW4uc1sxMTRdKyssbmV3IEVycm9yKFwiSW52YWxpZFNpZ25hdHVyZUxpc3RcIik7bW4uYlsyOV1bMV0rKzt2YXIgdD0obW4uc1sxMTVdKyssQSgpKSxsPShtbi5zWzExNl0rKyxuLm1hcChmdW5jdGlvbihuKXtpZihtbi5mWzIzXSsrLG1uLnNbMTE3XSsrLCEobiBpbnN0YW5jZW9mIHVuKSl0aHJvdyBtbi5iWzMwXVswXSsrLG1uLnNbMTE4XSsrLG5ldyBFcnJvcihcIk5vdFJhd1NpZ25hdHVyZU9iamVjdFwiKTttbi5iWzMwXVsxXSsrO3ZhciBlPShtbi5zWzExOV0rKyxuZXcgdC5wYWNrZXQuU2lnbmF0dXJlKTtyZXR1cm4gbW4uc1sxMjBdKyssZS5yZWFkKG4udG9CdWZmZXIoKSwwLC0xKSxtbi5zWzEyMV0rKyx7b3BlbnBncFNpZ25hdHVyZTplLHNpZ25hdHVyZTpufX0pKSxvPShtbi5zWzEyMl0rKyxbXSk7bW4uc1sxMjNdKyssZS5tYXAoZnVuY3Rpb24obil7cmV0dXJuIG1uLmZbMjRdKyssbW4uc1sxMjRdKyssbi5nZXRLZXlzKCkubWFwKGZ1bmN0aW9uKG4pe21uLmZbMjVdKyssbW4uc1sxMjVdKyssby5wdXNoKHtwdWJsaWNLZXk6bixrZXlJZDpPKG4pfSl9KX0pO3ZhciBpPShtbi5zWzEyNl0rKyxbXSk7bW4uc1sxMjddKyssby5tYXAoZnVuY3Rpb24obil7bW4uZlsyNl0rKzt2YXIgZT0obW4uc1sxMjhdKyssbC5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIG1uLmZbMjddKyssbW4uc1sxMjldKyssZS5vcGVucGdwU2lnbmF0dXJlLmlzc3VlcktleUlkLnRvSGV4KCk9PT1uLmtleUlkLnRvSGV4KCkuc2xpY2UoMCwxNil9KSk7bW4uc1sxMzBdKyssZS5tYXAoZnVuY3Rpb24oZSl7bW4uZlsyOF0rKyxtbi5zWzEzMV0rKyxpLnB1c2goT2JqZWN0LmFzc2lnbih7cHVibGljS2V5Om4ucHVibGljS2V5fSxlKSl9KX0pO3ZhciByPShtbi5zWzEzMl0rKyxbXSksYz0obW4uc1sxMzNdKyssaS5tYXAoZnVuY3Rpb24obil7cmV0dXJuIG1uLmZbMjldKyssbW4uc1sxMzRdKyssbi5vcGVucGdwU2lnbmF0dXJlLmlzc3VlcktleUlkLnRvSGV4KCl9KSk7cmV0dXJuIG1uLnNbMTM1XSsrLGwubWFwKGZ1bmN0aW9uKG4pe21uLmZbMzBdKyssbW4uc1sxMzZdKyssYy5pbmRleE9mKG4ub3BlbnBncFNpZ25hdHVyZS5pc3N1ZXJLZXlJZC50b0hleCgpLnNsaWNlKDAsMTYpKTwwPyhtbi5iWzMxXVswXSsrLG1uLnNbMTM3XSsrLHIucHVzaCh7a2V5SWQ6UihuLm9wZW5wZ3BTaWduYXR1cmUuaXNzdWVyRmluZ2VycHJpbnQpLHZhbGlkOnZvaWQgMH0pKTptbi5iWzMxXVsxXSsrfSksbW4uc1sxMzhdKysse3NpZ25hdHVyZU9iamVjdHM6aSx1bnZlcmlmaWVkOnJ9fX1dKSxlfShrKSxmbj1mdW5jdGlvbigpe3ZhciBuPVwiL1VzZXJzL2p1bi9Qcm9qZWN0SmF2YVNjcmlwdC9jYXNjYWRlL3NyYy9rZXlzLmpzXCIsZT1cIjY2NzUwNDgyNGU2OTQzMzQ5MTE5NDVmNjg1OTA1YTVhYjNmOGY2ZjFcIix0PW5ldygwLGZ1bmN0aW9uKCl7fS5jb25zdHJ1Y3RvcikoXCJyZXR1cm4gdGhpc1wiKSgpLGw9XCJfX2NvdmVyYWdlX19cIixvPXtwYXRoOlwiL1VzZXJzL2p1bi9Qcm9qZWN0SmF2YVNjcmlwdC9jYXNjYWRlL3NyYy9rZXlzLmpzXCIsc3RhdGVtZW50TWFwOnswOntzdGFydDp7bGluZToxMixjb2x1bW46NH0sZW5kOntsaW5lOjE5LGNvbHVtbjo1fX0sMTp7c3RhcnQ6e2xpbmU6MTMsY29sdW1uOjZ9LGVuZDp7bGluZToxMyxjb2x1bW46MTAxfX0sMjp7c3RhcnQ6e2xpbmU6MTMsY29sdW1uOjcwfSxlbmQ6e2xpbmU6MTMsY29sdW1uOjEwMX19LDM6e3N0YXJ0OntsaW5lOjE0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTgsY29sdW1uOjd9fSw0OntzdGFydDp7bGluZToxNSxjb2x1bW46OH0sZW5kOntsaW5lOjE1LGNvbHVtbjoxMDZ9fSw1OntzdGFydDp7bGluZToxNSxjb2x1bW46NTJ9LGVuZDp7bGluZToxNSxjb2x1bW46MTA2fX0sNjp7c3RhcnQ6e2xpbmU6MTcsY29sdW1uOjh9LGVuZDp7bGluZToxNyxjb2x1bW46MTAyfX0sNzp7c3RhcnQ6e2xpbmU6MTcsY29sdW1uOjUyfSxlbmQ6e2xpbmU6MTcsY29sdW1uOjEwMn19LDg6e3N0YXJ0OntsaW5lOjIxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjgsY29sdW1uOjV9fSw5OntzdGFydDp7bGluZToyMixjb2x1bW46Nn0sZW5kOntsaW5lOjIyLGNvbHVtbjo5OX19LDEwOntzdGFydDp7bGluZToyMixjb2x1bW46Njh9LGVuZDp7bGluZToyMixjb2x1bW46OTl9fSwxMTp7c3RhcnQ6e2xpbmU6MjMsY29sdW1uOjZ9LGVuZDp7bGluZToyNyxjb2x1bW46N319LDEyOntzdGFydDp7bGluZToyNCxjb2x1bW46OH0sZW5kOntsaW5lOjI0LGNvbHVtbjoxMDd9fSwxMzp7c3RhcnQ6e2xpbmU6MjQsY29sdW1uOjUyfSxlbmQ6e2xpbmU6MjQsY29sdW1uOjEwN319LDE0OntzdGFydDp7bGluZToyNixjb2x1bW46OH0sZW5kOntsaW5lOjI2LGNvbHVtbjoxMDN9fSwxNTp7c3RhcnQ6e2xpbmU6MjYsY29sdW1uOjUyfSxlbmQ6e2xpbmU6MjYsY29sdW1uOjEwM319LDE2OntzdGFydDp7bGluZTozMCxjb2x1bW46NH0sZW5kOntsaW5lOjMzLGNvbHVtbjo1fX0sMTc6e3N0YXJ0OntsaW5lOjMxLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MzEsY29sdW1uOjEwMX19LDE4OntzdGFydDp7bGluZTozMSxjb2x1bW46NzB9LGVuZDp7bGluZTozMSxjb2x1bW46MTAxfX0sMTk6e3N0YXJ0OntsaW5lOjMyLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MzIsY29sdW1uOjEzM319LDIwOntzdGFydDp7bGluZTozMixjb2x1bW46MTAxfSxlbmQ6e2xpbmU6MzIsY29sdW1uOjEzM319LDIxOntzdGFydDp7bGluZTozNCxjb2x1bW46NH0sZW5kOntsaW5lOjM3LGNvbHVtbjo1fX0sMjI6e3N0YXJ0OntsaW5lOjM1LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MzUsY29sdW1uOjk5fX0sMjM6e3N0YXJ0OntsaW5lOjM1LGNvbHVtbjo2OH0sZW5kOntsaW5lOjM1LGNvbHVtbjo5OX19LDI0OntzdGFydDp7bGluZTozNixjb2x1bW46Nn0sZW5kOntsaW5lOjM2LGNvbHVtbjo4MH19LDI1OntzdGFydDp7bGluZTozNixjb2x1bW46NDl9LGVuZDp7bGluZTozNixjb2x1bW46ODB9fSwyNjp7c3RhcnQ6e2xpbmU6NDAsY29sdW1uOjR9LGVuZDp7bGluZTo0Mixjb2x1bW46NTF9fSwyNzp7c3RhcnQ6e2xpbmU6NDAsY29sdW1uOjI5fSxlbmQ6e2xpbmU6NDAsY29sdW1uOjc5fX0sMjg6e3N0YXJ0OntsaW5lOjQxLGNvbHVtbjo5fSxlbmQ6e2xpbmU6NDIsY29sdW1uOjUxfX0sMjk6e3N0YXJ0OntsaW5lOjQxLGNvbHVtbjozNH0sZW5kOntsaW5lOjQxLGNvbHVtbjo4NH19LDMwOntzdGFydDp7bGluZTo0Mixjb2x1bW46OX0sZW5kOntsaW5lOjQyLGNvbHVtbjo1MX19LDMxOntzdGFydDp7bGluZTo0NCxjb2x1bW46NH0sZW5kOntsaW5lOjQ0LGNvbHVtbjoyNn19LDMyOntzdGFydDp7bGluZTo0NSxjb2x1bW46NH0sZW5kOntsaW5lOjQ1LGNvbHVtbjoyOH19LDMzOntzdGFydDp7bGluZTo0Nixjb2x1bW46NH0sZW5kOntsaW5lOjQ2LGNvbHVtbjoyNn19LDM0OntzdGFydDp7bGluZTo0OCxjb2x1bW46NH0sZW5kOntsaW5lOjQ4LGNvbHVtbjoxNn19LDM1OntzdGFydDp7bGluZTo1MSxjb2x1bW46MTZ9LGVuZDp7bGluZTo1MSxjb2x1bW46MzR9fSwzNjp7c3RhcnQ6e2xpbmU6NTIsY29sdW1uOjE3fSxlbmQ6e2xpbmU6NTIsY29sdW1uOjM2fX0sMzc6e3N0YXJ0OntsaW5lOjUzLGNvbHVtbjoxNn0sZW5kOntsaW5lOjUzLGNvbHVtbjozNH19LDM4OntzdGFydDp7bGluZTo1NSxjb2x1bW46MTd9LGVuZDp7bGluZTo1NSxjb2x1bW46NTh9fSwzOTp7c3RhcnQ6e2xpbmU6NTYsY29sdW1uOjE3fSxlbmQ6e2xpbmU6NTYsY29sdW1uOjU4fX0sNDA6e3N0YXJ0OntsaW5lOjU3LGNvbHVtbjoxNH0sZW5kOntsaW5lOjU3LGNvbHVtbjo1Mn19LDQxOntzdGFydDp7bGluZTo1OCxjb2x1bW46MTZ9LGVuZDp7bGluZTo1OCxjb2x1bW46NTZ9fSw0Mjp7c3RhcnQ6e2xpbmU6NzEsY29sdW1uOjIyfSxlbmQ6e2xpbmU6NzEsY29sdW1uOjM5fX0sNDM6e3N0YXJ0OntsaW5lOjcyLGNvbHVtbjoyMH0sZW5kOntsaW5lOjcyLGNvbHVtbjozNX19LDQ0OntzdGFydDp7bGluZTo3Myxjb2x1bW46MjF9LGVuZDp7bGluZTo3Myxjb2x1bW46Mzd9fSw0NTp7c3RhcnQ6e2xpbmU6NzQsY29sdW1uOjIwfSxlbmQ6e2xpbmU6NzQsY29sdW1uOjM1fX0sNDY6e3N0YXJ0OntsaW5lOjc2LGNvbHVtbjoxN30sZW5kOntsaW5lOjc2LGNvbHVtbjoyN319LDQ3OntzdGFydDp7bGluZTo3Nyxjb2x1bW46Mn0sZW5kOntsaW5lOjc3LGNvbHVtbjo4OH19LDQ4OntzdGFydDp7bGluZTo3OCxjb2x1bW46Mn0sZW5kOntsaW5lOjc4LGNvbHVtbjoxNn19LDQ5OntzdGFydDp7bGluZTo5MCxjb2x1bW46MjF9LGVuZDp7bGluZTo5MCxjb2x1bW46MjN9fSw1MDp7c3RhcnQ6e2xpbmU6OTIsY29sdW1uOjJ9LGVuZDp7bGluZTo5Mixjb2x1bW46NjN9fSw1MTp7c3RhcnQ6e2xpbmU6OTIsY29sdW1uOjIzfSxlbmQ6e2xpbmU6OTIsY29sdW1uOjYzfX0sNTI6e3N0YXJ0OntsaW5lOjk0LGNvbHVtbjoxNn0sZW5kOntsaW5lOjk3LGNvbHVtbjozfX0sNTM6e3N0YXJ0OntsaW5lOjk4LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTE5LGNvbHVtbjo2fX0sNTQ6e3N0YXJ0OntsaW5lOjk5LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTE4LGNvbHVtbjo1fX0sNTU6e3N0YXJ0OntsaW5lOjEwMyxjb2x1bW46Nn0sZW5kOntsaW5lOjEwNSxjb2x1bW46NDN9fSw1Njp7c3RhcnQ6e2xpbmU6MTAzLGNvbHVtbjo0NX0sZW5kOntsaW5lOjEwMyxjb2x1bW46NjF9fSw1Nzp7c3RhcnQ6e2xpbmU6MTA0LGNvbHVtbjoxMX0sZW5kOntsaW5lOjEwNSxjb2x1bW46NDN9fSw1ODp7c3RhcnQ6e2xpbmU6MTA0LGNvbHVtbjo1M30sZW5kOntsaW5lOjEwNCxjb2x1bW46NzJ9fSw1OTp7c3RhcnQ6e2xpbmU6MTA1LGNvbHVtbjoxMX0sZW5kOntsaW5lOjEwNSxjb2x1bW46NDN9fSw2MDp7c3RhcnQ6e2xpbmU6MTA3LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTE3LGNvbHVtbjo0NX19LDYxOntzdGFydDp7bGluZToxMDgsY29sdW1uOjh9LGVuZDp7bGluZToxMDgsY29sdW1uOjEzMn19LDYyOntzdGFydDp7bGluZToxMDgsY29sdW1uOjI5fSxlbmQ6e2xpbmU6MTA4LGNvbHVtbjoxMzJ9fSw2Mzp7c3RhcnQ6e2xpbmU6MTA4LGNvbHVtbjoxMDB9LGVuZDp7bGluZToxMDgsY29sdW1uOjEyOX19LDY0OntzdGFydDp7bGluZToxMTAsY29sdW1uOjExfSxlbmQ6e2xpbmU6MTE3LGNvbHVtbjo0NX19LDY1OntzdGFydDp7bGluZToxMTEsY29sdW1uOjh9LGVuZDp7bGluZToxMTUsY29sdW1uOjl9fSw2Njp7c3RhcnQ6e2xpbmU6MTEyLGNvbHVtbjoxMH0sZW5kOntsaW5lOjExNCxjb2x1bW46MTJ9fSw2Nzp7c3RhcnQ6e2xpbmU6MTEzLGNvbHVtbjo1MH0sZW5kOntsaW5lOjExMyxjb2x1bW46MTA5fX0sNjg6e3N0YXJ0OntsaW5lOjExNyxjb2x1bW46MTF9LGVuZDp7bGluZToxMTcsY29sdW1uOjQ1fX0sNjk6e3N0YXJ0OntsaW5lOjEyMSxjb2x1bW46Mn0sZW5kOntsaW5lOjEyMSxjb2x1bW46NDN9fSw3MDp7c3RhcnQ6e2xpbmU6MTMyLGNvbHVtbjoyMX0sZW5kOntsaW5lOjEzMixjb2x1bW46MjN9fSw3MTp7c3RhcnQ6e2xpbmU6MTM0LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTM0LGNvbHVtbjo2M319LDcyOntzdGFydDp7bGluZToxMzQsY29sdW1uOjIzfSxlbmQ6e2xpbmU6MTM0LGNvbHVtbjo2M319LDczOntzdGFydDp7bGluZToxMzYsY29sdW1uOjJ9LGVuZDp7bGluZToxMzYsY29sdW1uOjYzfX0sNzQ6e3N0YXJ0OntsaW5lOjEzNixjb2x1bW46MjN9LGVuZDp7bGluZToxMzYsY29sdW1uOjYzfX0sNzU6e3N0YXJ0OntsaW5lOjEzOCxjb2x1bW46Mn0sZW5kOntsaW5lOjEzOCxjb2x1bW46NjZ9fSw3Njp7c3RhcnQ6e2xpbmU6MTM4LGNvbHVtbjoyNH0sZW5kOntsaW5lOjEzOCxjb2x1bW46NjZ9fSw3Nzp7c3RhcnQ6e2xpbmU6MTQwLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTQwLGNvbHVtbjo0MX19LDc4OntzdGFydDp7bGluZToxNTAsY29sdW1uOjI1fSxlbmQ6e2xpbmU6MTUwLGNvbHVtbjo0NX19LDc5OntzdGFydDp7bGluZToxNTIsY29sdW1uOjJ9LGVuZDp7bGluZToxNzMsY29sdW1uOjQ5fX0sODA6e3N0YXJ0OntsaW5lOjE1Myxjb2x1bW46NH0sZW5kOntsaW5lOjE2MCxjb2x1bW46OX19LDgxOntzdGFydDp7bGluZToxNTksY29sdW1uOjh9LGVuZDp7bGluZToxNTksY29sdW1uOjY0fX0sODI6e3N0YXJ0OntsaW5lOjE2Myxjb2x1bW46N30sZW5kOntsaW5lOjE3Myxjb2x1bW46NDl9fSw4Mzp7c3RhcnQ6e2xpbmU6MTY0LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTcxLGNvbHVtbjo5fX0sODQ6e3N0YXJ0OntsaW5lOjE3MCxjb2x1bW46OH0sZW5kOntsaW5lOjE3MCxjb2x1bW46NjV9fSw4NTp7c3RhcnQ6e2xpbmU6MTczLGNvbHVtbjo3fSxlbmQ6e2xpbmU6MTczLGNvbHVtbjo0OX19LDg2OntzdGFydDp7bGluZToxNzUsY29sdW1uOjJ9LGVuZDp7bGluZToxNzUsY29sdW1uOjE5fX19LGZuTWFwOnswOntuYW1lOlwiKGFub255bW91c18wKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjEwLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTAsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjEwLGNvbHVtbjo0MX0sZW5kOntsaW5lOjQ5LGNvbHVtbjozfX0sbGluZToxMH0sMTp7bmFtZTpcIihhbm9ueW1vdXNfMSlcIixkZWNsOntzdGFydDp7bGluZTo1MSxjb2x1bW46Mn0sZW5kOntsaW5lOjUxLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo1MSxjb2x1bW46MTR9LGVuZDp7bGluZTo1MSxjb2x1bW46MzZ9fSxsaW5lOjUxfSwyOntuYW1lOlwiKGFub255bW91c18yKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjUyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6NTIsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjUyLGNvbHVtbjoxNX0sZW5kOntsaW5lOjUyLGNvbHVtbjozOH19LGxpbmU6NTJ9LDM6e25hbWU6XCIoYW5vbnltb3VzXzMpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NTMsY29sdW1uOjJ9LGVuZDp7bGluZTo1Myxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6NTMsY29sdW1uOjE0fSxlbmQ6e2xpbmU6NTMsY29sdW1uOjM2fX0sbGluZTo1M30sNDp7bmFtZTpcIihhbm9ueW1vdXNfNClcIixkZWNsOntzdGFydDp7bGluZTo1NSxjb2x1bW46Mn0sZW5kOntsaW5lOjU1LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo1NSxjb2x1bW46MTV9LGVuZDp7bGluZTo1NSxjb2x1bW46NjB9fSxsaW5lOjU1fSw1OntuYW1lOlwiKGFub255bW91c181KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjU2LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NTYsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjU2LGNvbHVtbjoxNX0sZW5kOntsaW5lOjU2LGNvbHVtbjo2MH19LGxpbmU6NTZ9LDY6e25hbWU6XCIoYW5vbnltb3VzXzYpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NTcsY29sdW1uOjJ9LGVuZDp7bGluZTo1Nyxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6NTcsY29sdW1uOjEyfSxlbmQ6e2xpbmU6NTcsY29sdW1uOjU0fX0sbGluZTo1N30sNzp7bmFtZTpcIihhbm9ueW1vdXNfNylcIixkZWNsOntzdGFydDp7bGluZTo1OCxjb2x1bW46Mn0sZW5kOntsaW5lOjU4LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo1OCxjb2x1bW46MTR9LGVuZDp7bGluZTo1OCxjb2x1bW46NTh9fSxsaW5lOjU4fSw4OntuYW1lOlwiaW1wb3J0S2V5c1wiLGRlY2w6e3N0YXJ0OntsaW5lOjcwLGNvbHVtbjoyMn0sZW5kOntsaW5lOjcwLGNvbHVtbjozMn19LGxvYzp7c3RhcnQ6e2xpbmU6NzAsY29sdW1uOjcwfSxlbmQ6e2xpbmU6NzksY29sdW1uOjF9fSxsaW5lOjcwfSw5OntuYW1lOlwiaW1wb3J0S2V5U3RyaW5nc1wiLGRlY2w6e3N0YXJ0OntsaW5lOjg5LGNvbHVtbjoxNX0sZW5kOntsaW5lOjg5LGNvbHVtbjozMX19LGxvYzp7c3RhcnQ6e2xpbmU6ODksY29sdW1uOjUyfSxlbmQ6e2xpbmU6MTIyLGNvbHVtbjoxfX0sbGluZTo4OX0sMTA6e25hbWU6XCIoYW5vbnltb3VzXzEwKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjk4LGNvbHVtbjozMX0sZW5kOntsaW5lOjk4LGNvbHVtbjozMn19LGxvYzp7c3RhcnQ6e2xpbmU6OTgsY29sdW1uOjUzfSxlbmQ6e2xpbmU6MTE5LGNvbHVtbjozfX0sbGluZTo5OH0sMTE6e25hbWU6XCIoYW5vbnltb3VzXzExKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjEwOCxjb2x1bW46OTJ9LGVuZDp7bGluZToxMDgsY29sdW1uOjkzfX0sbG9jOntzdGFydDp7bGluZToxMDgsY29sdW1uOjEwMH0sZW5kOntsaW5lOjEwOCxjb2x1bW46MTI5fX0sbGluZToxMDh9LDEyOntuYW1lOlwiKGFub255bW91c18xMilcIixkZWNsOntzdGFydDp7bGluZToxMTMsY29sdW1uOjQwfSxlbmQ6e2xpbmU6MTEzLGNvbHVtbjo0MX19LGxvYzp7c3RhcnQ6e2xpbmU6MTEzLGNvbHVtbjo1MH0sZW5kOntsaW5lOjExMyxjb2x1bW46MTA5fX0sbGluZToxMTN9LDEzOntuYW1lOlwiaW1wb3J0S2V5T2JqZWN0c1wiLGRlY2w6e3N0YXJ0OntsaW5lOjEzMSxjb2x1bW46MTV9LGVuZDp7bGluZToxMzEsY29sdW1uOjMxfX0sbG9jOntzdGFydDp7bGluZToxMzEsY29sdW1uOjUyfSxlbmQ6e2xpbmU6MTQxLGNvbHVtbjoxfX0sbGluZToxMzF9LDE0OntuYW1lOlwiZ2VuZXJhdGVLZXlPYmplY3RcIixkZWNsOntzdGFydDp7bGluZToxNDksY29sdW1uOjIyfSxlbmQ6e2xpbmU6MTQ5LGNvbHVtbjozOX19LGxvYzp7c3RhcnQ6e2xpbmU6MTQ5LGNvbHVtbjo1MX0sZW5kOntsaW5lOjE3Nixjb2x1bW46MX19LGxpbmU6MTQ5fSwxNTp7bmFtZTpcIihhbm9ueW1vdXNfMTUpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTU4LGNvbHVtbjoxM30sZW5kOntsaW5lOjE1OCxjb2x1bW46MTR9fSxsb2M6e3N0YXJ0OntsaW5lOjE1OCxjb2x1bW46MjB9LGVuZDp7bGluZToxNjAsY29sdW1uOjd9fSxsaW5lOjE1OH0sMTY6e25hbWU6XCIoYW5vbnltb3VzXzE2KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjE2OSxjb2x1bW46MTN9LGVuZDp7bGluZToxNjksY29sdW1uOjE0fX0sbG9jOntzdGFydDp7bGluZToxNjksY29sdW1uOjIwfSxlbmQ6e2xpbmU6MTcxLGNvbHVtbjo3fX0sbGluZToxNjl9fSxicmFuY2hNYXA6ezA6e2xvYzp7c3RhcnQ6e2xpbmU6MTIsY29sdW1uOjR9LGVuZDp7bGluZToxOSxjb2x1bW46NX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjEyLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTksY29sdW1uOjV9fSx7c3RhcnQ6e2xpbmU6MTIsY29sdW1uOjR9LGVuZDp7bGluZToxOSxjb2x1bW46NX19XSxsaW5lOjEyfSwxOntsb2M6e3N0YXJ0OntsaW5lOjEzLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTMsY29sdW1uOjEwMX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjEzLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTMsY29sdW1uOjEwMX19LHtzdGFydDp7bGluZToxMyxjb2x1bW46Nn0sZW5kOntsaW5lOjEzLGNvbHVtbjoxMDF9fV0sbGluZToxM30sMjp7bG9jOntzdGFydDp7bGluZToxMyxjb2x1bW46OX0sZW5kOntsaW5lOjEzLGNvbHVtbjo2OH19LHR5cGU6XCJiaW5hcnktZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjEzLGNvbHVtbjo5fSxlbmQ6e2xpbmU6MTMsY29sdW1uOjM2fX0se3N0YXJ0OntsaW5lOjEzLGNvbHVtbjo0MH0sZW5kOntsaW5lOjEzLGNvbHVtbjo2OH19XSxsaW5lOjEzfSwzOntsb2M6e3N0YXJ0OntsaW5lOjE0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTgsY29sdW1uOjd9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxNCxjb2x1bW46Nn0sZW5kOntsaW5lOjE4LGNvbHVtbjo3fX0se3N0YXJ0OntsaW5lOjE0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTgsY29sdW1uOjd9fV0sbGluZToxNH0sNDp7bG9jOntzdGFydDp7bGluZToxNSxjb2x1bW46OH0sZW5kOntsaW5lOjE1LGNvbHVtbjoxMDZ9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxNSxjb2x1bW46OH0sZW5kOntsaW5lOjE1LGNvbHVtbjoxMDZ9fSx7c3RhcnQ6e2xpbmU6MTUsY29sdW1uOjh9LGVuZDp7bGluZToxNSxjb2x1bW46MTA2fX1dLGxpbmU6MTV9LDU6e2xvYzp7c3RhcnQ6e2xpbmU6MTcsY29sdW1uOjh9LGVuZDp7bGluZToxNyxjb2x1bW46MTAyfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTcsY29sdW1uOjh9LGVuZDp7bGluZToxNyxjb2x1bW46MTAyfX0se3N0YXJ0OntsaW5lOjE3LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTcsY29sdW1uOjEwMn19XSxsaW5lOjE3fSw2Ontsb2M6e3N0YXJ0OntsaW5lOjIxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjgsY29sdW1uOjV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyMSxjb2x1bW46NH0sZW5kOntsaW5lOjI4LGNvbHVtbjo1fX0se3N0YXJ0OntsaW5lOjIxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjgsY29sdW1uOjV9fV0sbGluZToyMX0sNzp7bG9jOntzdGFydDp7bGluZToyMixjb2x1bW46Nn0sZW5kOntsaW5lOjIyLGNvbHVtbjo5OX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjIyLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MjIsY29sdW1uOjk5fX0se3N0YXJ0OntsaW5lOjIyLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MjIsY29sdW1uOjk5fX1dLGxpbmU6MjJ9LDg6e2xvYzp7c3RhcnQ6e2xpbmU6MjIsY29sdW1uOjl9LGVuZDp7bGluZToyMixjb2x1bW46NjZ9fSx0eXBlOlwiYmluYXJ5LWV4cHJcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyMixjb2x1bW46OX0sZW5kOntsaW5lOjIyLGNvbHVtbjozNH19LHtzdGFydDp7bGluZToyMixjb2x1bW46Mzh9LGVuZDp7bGluZToyMixjb2x1bW46NjZ9fV0sbGluZToyMn0sOTp7bG9jOntzdGFydDp7bGluZToyMyxjb2x1bW46Nn0sZW5kOntsaW5lOjI3LGNvbHVtbjo3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjMsY29sdW1uOjZ9LGVuZDp7bGluZToyNyxjb2x1bW46N319LHtzdGFydDp7bGluZToyMyxjb2x1bW46Nn0sZW5kOntsaW5lOjI3LGNvbHVtbjo3fX1dLGxpbmU6MjN9LDEwOntsb2M6e3N0YXJ0OntsaW5lOjIzLGNvbHVtbjoxMH0sZW5kOntsaW5lOjIzLGNvbHVtbjo5OX19LHR5cGU6XCJiaW5hcnktZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjIzLGNvbHVtbjoxMH0sZW5kOntsaW5lOjIzLGNvbHVtbjo1Nn19LHtzdGFydDp7bGluZToyMyxjb2x1bW46NjB9LGVuZDp7bGluZToyMyxjb2x1bW46OTl9fV0sbGluZToyM30sMTE6e2xvYzp7c3RhcnQ6e2xpbmU6MjQsY29sdW1uOjh9LGVuZDp7bGluZToyNCxjb2x1bW46MTA3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjQsY29sdW1uOjh9LGVuZDp7bGluZToyNCxjb2x1bW46MTA3fX0se3N0YXJ0OntsaW5lOjI0LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MjQsY29sdW1uOjEwN319XSxsaW5lOjI0fSwxMjp7bG9jOntzdGFydDp7bGluZToyNixjb2x1bW46OH0sZW5kOntsaW5lOjI2LGNvbHVtbjoxMDN9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyNixjb2x1bW46OH0sZW5kOntsaW5lOjI2LGNvbHVtbjoxMDN9fSx7c3RhcnQ6e2xpbmU6MjYsY29sdW1uOjh9LGVuZDp7bGluZToyNixjb2x1bW46MTAzfX1dLGxpbmU6MjZ9LDEzOntsb2M6e3N0YXJ0OntsaW5lOjMwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MzMsY29sdW1uOjV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozMCxjb2x1bW46NH0sZW5kOntsaW5lOjMzLGNvbHVtbjo1fX0se3N0YXJ0OntsaW5lOjMwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MzMsY29sdW1uOjV9fV0sbGluZTozMH0sMTQ6e2xvYzp7c3RhcnQ6e2xpbmU6MzEsY29sdW1uOjZ9LGVuZDp7bGluZTozMSxjb2x1bW46MTAxfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MzEsY29sdW1uOjZ9LGVuZDp7bGluZTozMSxjb2x1bW46MTAxfX0se3N0YXJ0OntsaW5lOjMxLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MzEsY29sdW1uOjEwMX19XSxsaW5lOjMxfSwxNTp7bG9jOntzdGFydDp7bGluZTozMSxjb2x1bW46OX0sZW5kOntsaW5lOjMxLGNvbHVtbjo2OH19LHR5cGU6XCJiaW5hcnktZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjMxLGNvbHVtbjo5fSxlbmQ6e2xpbmU6MzEsY29sdW1uOjM2fX0se3N0YXJ0OntsaW5lOjMxLGNvbHVtbjo0MH0sZW5kOntsaW5lOjMxLGNvbHVtbjo2OH19XSxsaW5lOjMxfSwxNjp7bG9jOntzdGFydDp7bGluZTozMixjb2x1bW46Nn0sZW5kOntsaW5lOjMyLGNvbHVtbjoxMzN9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozMixjb2x1bW46Nn0sZW5kOntsaW5lOjMyLGNvbHVtbjoxMzN9fSx7c3RhcnQ6e2xpbmU6MzIsY29sdW1uOjZ9LGVuZDp7bGluZTozMixjb2x1bW46MTMzfX1dLGxpbmU6MzJ9LDE3Ontsb2M6e3N0YXJ0OntsaW5lOjMyLGNvbHVtbjo5fSxlbmQ6e2xpbmU6MzIsY29sdW1uOjk5fX0sdHlwZTpcImJpbmFyeS1leHByXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MzIsY29sdW1uOjl9LGVuZDp7bGluZTozMixjb2x1bW46NTV9fSx7c3RhcnQ6e2xpbmU6MzIsY29sdW1uOjYwfSxlbmQ6e2xpbmU6MzIsY29sdW1uOjk5fX1dLGxpbmU6MzJ9LDE4Ontsb2M6e3N0YXJ0OntsaW5lOjM0LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MzcsY29sdW1uOjV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozNCxjb2x1bW46NH0sZW5kOntsaW5lOjM3LGNvbHVtbjo1fX0se3N0YXJ0OntsaW5lOjM0LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MzcsY29sdW1uOjV9fV0sbGluZTozNH0sMTk6e2xvYzp7c3RhcnQ6e2xpbmU6MzUsY29sdW1uOjZ9LGVuZDp7bGluZTozNSxjb2x1bW46OTl9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozNSxjb2x1bW46Nn0sZW5kOntsaW5lOjM1LGNvbHVtbjo5OX19LHtzdGFydDp7bGluZTozNSxjb2x1bW46Nn0sZW5kOntsaW5lOjM1LGNvbHVtbjo5OX19XSxsaW5lOjM1fSwyMDp7bG9jOntzdGFydDp7bGluZTozNSxjb2x1bW46OX0sZW5kOntsaW5lOjM1LGNvbHVtbjo2Nn19LHR5cGU6XCJiaW5hcnktZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjM1LGNvbHVtbjo5fSxlbmQ6e2xpbmU6MzUsY29sdW1uOjM0fX0se3N0YXJ0OntsaW5lOjM1LGNvbHVtbjozOH0sZW5kOntsaW5lOjM1LGNvbHVtbjo2Nn19XSxsaW5lOjM1fSwyMTp7bG9jOntzdGFydDp7bGluZTozNixjb2x1bW46Nn0sZW5kOntsaW5lOjM2LGNvbHVtbjo4MH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjM2LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MzYsY29sdW1uOjgwfX0se3N0YXJ0OntsaW5lOjM2LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MzYsY29sdW1uOjgwfX1dLGxpbmU6MzZ9LDIyOntsb2M6e3N0YXJ0OntsaW5lOjQwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NDIsY29sdW1uOjUxfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NDAsY29sdW1uOjR9LGVuZDp7bGluZTo0Mixjb2x1bW46NTF9fSx7c3RhcnQ6e2xpbmU6NDAsY29sdW1uOjR9LGVuZDp7bGluZTo0Mixjb2x1bW46NTF9fV0sbGluZTo0MH0sMjM6e2xvYzp7c3RhcnQ6e2xpbmU6NDEsY29sdW1uOjl9LGVuZDp7bGluZTo0Mixjb2x1bW46NTF9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo0MSxjb2x1bW46OX0sZW5kOntsaW5lOjQyLGNvbHVtbjo1MX19LHtzdGFydDp7bGluZTo0MSxjb2x1bW46OX0sZW5kOntsaW5lOjQyLGNvbHVtbjo1MX19XSxsaW5lOjQxfSwyNDp7bG9jOntzdGFydDp7bGluZTo3MCxjb2x1bW46MzN9LGVuZDp7bGluZTo3MCxjb2x1bW46NDh9fSx0eXBlOlwiZGVmYXVsdC1hcmdcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo3MCxjb2x1bW46NDB9LGVuZDp7bGluZTo3MCxjb2x1bW46NDh9fV0sbGluZTo3MH0sMjU6e2xvYzp7c3RhcnQ6e2xpbmU6OTIsY29sdW1uOjJ9LGVuZDp7bGluZTo5Mixjb2x1bW46NjN9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo5Mixjb2x1bW46Mn0sZW5kOntsaW5lOjkyLGNvbHVtbjo2M319LHtzdGFydDp7bGluZTo5Mixjb2x1bW46Mn0sZW5kOntsaW5lOjkyLGNvbHVtbjo2M319XSxsaW5lOjkyfSwyNjp7bG9jOntzdGFydDp7bGluZTo5OSxjb2x1bW46NH0sZW5kOntsaW5lOjExOCxjb2x1bW46NX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjk5LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTE4LGNvbHVtbjo1fX0se3N0YXJ0OntsaW5lOjk5LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTE4LGNvbHVtbjo1fX1dLGxpbmU6OTl9LDI3Ontsb2M6e3N0YXJ0OntsaW5lOjEwMyxjb2x1bW46Nn0sZW5kOntsaW5lOjEwNSxjb2x1bW46NDN9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxMDMsY29sdW1uOjZ9LGVuZDp7bGluZToxMDUsY29sdW1uOjQzfX0se3N0YXJ0OntsaW5lOjEwMyxjb2x1bW46Nn0sZW5kOntsaW5lOjEwNSxjb2x1bW46NDN9fV0sbGluZToxMDN9LDI4Ontsb2M6e3N0YXJ0OntsaW5lOjEwNCxjb2x1bW46MTF9LGVuZDp7bGluZToxMDUsY29sdW1uOjQzfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTA0LGNvbHVtbjoxMX0sZW5kOntsaW5lOjEwNSxjb2x1bW46NDN9fSx7c3RhcnQ6e2xpbmU6MTA0LGNvbHVtbjoxMX0sZW5kOntsaW5lOjEwNSxjb2x1bW46NDN9fV0sbGluZToxMDR9LDI5Ontsb2M6e3N0YXJ0OntsaW5lOjEwNyxjb2x1bW46Nn0sZW5kOntsaW5lOjExNyxjb2x1bW46NDV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxMDcsY29sdW1uOjZ9LGVuZDp7bGluZToxMTcsY29sdW1uOjQ1fX0se3N0YXJ0OntsaW5lOjEwNyxjb2x1bW46Nn0sZW5kOntsaW5lOjExNyxjb2x1bW46NDV9fV0sbGluZToxMDd9LDMwOntsb2M6e3N0YXJ0OntsaW5lOjEwOCxjb2x1bW46OH0sZW5kOntsaW5lOjEwOCxjb2x1bW46MTMyfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTA4LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTA4LGNvbHVtbjoxMzJ9fSx7c3RhcnQ6e2xpbmU6MTA4LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTA4LGNvbHVtbjoxMzJ9fV0sbGluZToxMDh9LDMxOntsb2M6e3N0YXJ0OntsaW5lOjExMCxjb2x1bW46MTF9LGVuZDp7bGluZToxMTcsY29sdW1uOjQ1fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTEwLGNvbHVtbjoxMX0sZW5kOntsaW5lOjExNyxjb2x1bW46NDV9fSx7c3RhcnQ6e2xpbmU6MTEwLGNvbHVtbjoxMX0sZW5kOntsaW5lOjExNyxjb2x1bW46NDV9fV0sbGluZToxMTB9LDMyOntsb2M6e3N0YXJ0OntsaW5lOjExMSxjb2x1bW46OH0sZW5kOntsaW5lOjExNSxjb2x1bW46OX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjExMSxjb2x1bW46OH0sZW5kOntsaW5lOjExNSxjb2x1bW46OX19LHtzdGFydDp7bGluZToxMTEsY29sdW1uOjh9LGVuZDp7bGluZToxMTUsY29sdW1uOjl9fV0sbGluZToxMTF9LDMzOntsb2M6e3N0YXJ0OntsaW5lOjEzNCxjb2x1bW46Mn0sZW5kOntsaW5lOjEzNCxjb2x1bW46NjN9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxMzQsY29sdW1uOjJ9LGVuZDp7bGluZToxMzQsY29sdW1uOjYzfX0se3N0YXJ0OntsaW5lOjEzNCxjb2x1bW46Mn0sZW5kOntsaW5lOjEzNCxjb2x1bW46NjN9fV0sbGluZToxMzR9LDM0Ontsb2M6e3N0YXJ0OntsaW5lOjEzNixjb2x1bW46Mn0sZW5kOntsaW5lOjEzNixjb2x1bW46NjN9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxMzYsY29sdW1uOjJ9LGVuZDp7bGluZToxMzYsY29sdW1uOjYzfX0se3N0YXJ0OntsaW5lOjEzNixjb2x1bW46Mn0sZW5kOntsaW5lOjEzNixjb2x1bW46NjN9fV0sbGluZToxMzZ9LDM1Ontsb2M6e3N0YXJ0OntsaW5lOjEzOCxjb2x1bW46Mn0sZW5kOntsaW5lOjEzOCxjb2x1bW46NjZ9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxMzgsY29sdW1uOjJ9LGVuZDp7bGluZToxMzgsY29sdW1uOjY2fX0se3N0YXJ0OntsaW5lOjEzOCxjb2x1bW46Mn0sZW5kOntsaW5lOjEzOCxjb2x1bW46NjZ9fV0sbGluZToxMzh9LDM2Ontsb2M6e3N0YXJ0OntsaW5lOjE1Mixjb2x1bW46Mn0sZW5kOntsaW5lOjE3Myxjb2x1bW46NDl9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxNTIsY29sdW1uOjJ9LGVuZDp7bGluZToxNzMsY29sdW1uOjQ5fX0se3N0YXJ0OntsaW5lOjE1Mixjb2x1bW46Mn0sZW5kOntsaW5lOjE3Myxjb2x1bW46NDl9fV0sbGluZToxNTJ9LDM3Ontsb2M6e3N0YXJ0OntsaW5lOjE2Myxjb2x1bW46N30sZW5kOntsaW5lOjE3Myxjb2x1bW46NDl9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxNjMsY29sdW1uOjd9LGVuZDp7bGluZToxNzMsY29sdW1uOjQ5fX0se3N0YXJ0OntsaW5lOjE2Myxjb2x1bW46N30sZW5kOntsaW5lOjE3Myxjb2x1bW46NDl9fV0sbGluZToxNjN9fSxzOnswOjAsMTowLDI6MCwzOjAsNDowLDU6MCw2OjAsNzowLDg6MCw5OjAsMTA6MCwxMTowLDEyOjAsMTM6MCwxNDowLDE1OjAsMTY6MCwxNzowLDE4OjAsMTk6MCwyMDowLDIxOjAsMjI6MCwyMzowLDI0OjAsMjU6MCwyNjowLDI3OjAsMjg6MCwyOTowLDMwOjAsMzE6MCwzMjowLDMzOjAsMzQ6MCwzNTowLDM2OjAsMzc6MCwzODowLDM5OjAsNDA6MCw0MTowLDQyOjAsNDM6MCw0NDowLDQ1OjAsNDY6MCw0NzowLDQ4OjAsNDk6MCw1MDowLDUxOjAsNTI6MCw1MzowLDU0OjAsNTU6MCw1NjowLDU3OjAsNTg6MCw1OTowLDYwOjAsNjE6MCw2MjowLDYzOjAsNjQ6MCw2NTowLDY2OjAsNjc6MCw2ODowLDY5OjAsNzA6MCw3MTowLDcyOjAsNzM6MCw3NDowLDc1OjAsNzY6MCw3NzowLDc4OjAsNzk6MCw4MDowLDgxOjAsODI6MCw4MzowLDg0OjAsODU6MCw4NjowfSxmOnswOjAsMTowLDI6MCwzOjAsNDowLDU6MCw2OjAsNzowLDg6MCw5OjAsMTA6MCwxMTowLDEyOjAsMTM6MCwxNDowLDE1OjAsMTY6MH0sYjp7MDpbMCwwXSwxOlswLDBdLDI6WzAsMF0sMzpbMCwwXSw0OlswLDBdLDU6WzAsMF0sNjpbMCwwXSw3OlswLDBdLDg6WzAsMF0sOTpbMCwwXSwxMDpbMCwwXSwxMTpbMCwwXSwxMjpbMCwwXSwxMzpbMCwwXSwxNDpbMCwwXSwxNTpbMCwwXSwxNjpbMCwwXSwxNzpbMCwwXSwxODpbMCwwXSwxOTpbMCwwXSwyMDpbMCwwXSwyMTpbMCwwXSwyMjpbMCwwXSwyMzpbMCwwXSwyNDpbMF0sMjU6WzAsMF0sMjY6WzAsMF0sMjc6WzAsMF0sMjg6WzAsMF0sMjk6WzAsMF0sMzA6WzAsMF0sMzE6WzAsMF0sMzI6WzAsMF0sMzM6WzAsMF0sMzQ6WzAsMF0sMzU6WzAsMF0sMzY6WzAsMF0sMzc6WzAsMF19LF9jb3ZlcmFnZVNjaGVtYTpcIjQzZTI3ZTEzOGViZjljZmM1OTY2YjA4MmNmOWEwMjgzMDJlZDQxODRcIn0saT10W2xdfHwodFtsXT17fSk7cmV0dXJuIGlbbl0mJmlbbl0uaGFzaD09PWU/aVtuXTooby5oYXNoPWUsaVtuXT1vKX0oKSxwbj1mdW5jdGlvbigpe2Z1bmN0aW9uIG4oKXt1KCkodGhpcyxuKX1yZXR1cm4gYSgpKG4sW3trZXk6XCJmcm9tXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlLHQpe3ZhciBsLGkscixjO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDppZihsPXQua2V5cyxpPXQuc3VpdGUscj10Lm1vZGUsZm4uZlswXSsrLGZuLnNbMF0rKywhKHIuaW5kZXhPZihcImVuY3J5cHRcIik+PTApKXtuLm5leHQ9Mzc7YnJlYWt9aWYoZm4uYlswXVswXSsrLGZuLnNbMV0rKyxmbi5iWzJdWzBdKyssIShyLmluZGV4T2YoXCJ2ZXJpZnlcIik+PTB8fChmbi5iWzJdWzFdKyssci5pbmRleE9mKFwiZGVjcnlwdFwiKT49MCkpKXtuLm5leHQ9MTI7YnJlYWt9dGhyb3cgZm4uYlsxXVswXSsrLGZuLnNbMl0rKyxuZXcgRXJyb3IoXCJJbnZhbGlkTW9kZVwiKTtjYXNlIDEyOmZuLmJbMV1bMV0rKztjYXNlIDEzOmlmKGZuLnNbM10rKyx2b2lkIDA9PT1sLnB1YmxpY0tleXMpe24ubmV4dD0yNjticmVha31pZihmbi5iWzNdWzBdKyssZm4uc1s0XSsrLHZvaWQgMD09PWwuc2Vzc2lvbktleSl7bi5uZXh0PTIzO2JyZWFrfXRocm93IGZuLmJbNF1bMF0rKyxmbi5zWzVdKyssbmV3IEVycm9yKFwiU2Vzc2lvbktleUFuZFB1YmxpY0tleUFyZUV4Y2x1c2l2ZVwiKTtjYXNlIDIzOmZuLmJbNF1bMV0rKztjYXNlIDI0Om4ubmV4dD0zNTticmVhaztjYXNlIDI2OmlmKGZuLmJbM11bMV0rKyxmbi5zWzZdKyssdm9pZCAwIT09bC5zZXNzaW9uS2V5KXtuLm5leHQ9MzQ7YnJlYWt9dGhyb3cgZm4uYls1XVswXSsrLGZuLnNbN10rKyxuZXcgRXJyb3IoXCJOb1Nlc3Npb25LZXlPclB1YmxpY0tleUlzR2l2ZW5cIik7Y2FzZSAzNDpmbi5iWzVdWzFdKys7Y2FzZSAzNTpuLm5leHQ9Mzg7YnJlYWs7Y2FzZSAzNzpmbi5iWzBdWzFdKys7Y2FzZSAzODppZihmbi5zWzhdKyssIShyLmluZGV4T2YoXCJkZWNyeXB0XCIpPj0wKSl7bi5uZXh0PTczO2JyZWFrfWlmKGZuLmJbNl1bMF0rKyxmbi5zWzldKyssZm4uYls4XVswXSsrLCEoci5pbmRleE9mKFwic2lnblwiKT49MHx8KGZuLmJbOF1bMV0rKyxyLmluZGV4T2YoXCJlbmNyeXB0XCIpPj0wKSkpe24ubmV4dD00ODticmVha310aHJvdyBmbi5iWzddWzBdKyssZm4uc1sxMF0rKyxuZXcgRXJyb3IoXCJJbnZhbGlkTW9kZVwiKTtjYXNlIDQ4OmZuLmJbN11bMV0rKztjYXNlIDQ5OmlmKGZuLnNbMTFdKyssZm4uYlsxMF1bMF0rKyx2b2lkIDA9PT1sLnByaXZhdGVLZXlQYXNzU2V0cyYmKGZuLmJbMTBdWzFdKyssdm9pZCAwPT09bC5wcml2YXRlS2V5cykpe24ubmV4dD02MjticmVha31pZihmbi5iWzldWzBdKyssZm4uc1sxMl0rKyx2b2lkIDA9PT1sLnNlc3Npb25LZXkpe24ubmV4dD01OTticmVha310aHJvdyBmbi5iWzExXVswXSsrLGZuLnNbMTNdKyssbmV3IEVycm9yKFwiU2Vzc2lvbktleUFuZFByaXZhdGVLZXlBcmVFeGNsdXNpdmVcIik7Y2FzZSA1OTpmbi5iWzExXVsxXSsrO2Nhc2UgNjA6bi5uZXh0PTcxO2JyZWFrO2Nhc2UgNjI6aWYoZm4uYls5XVsxXSsrLGZuLnNbMTRdKyssdm9pZCAwIT09bC5zZXNzaW9uS2V5KXtuLm5leHQ9NzA7YnJlYWt9dGhyb3cgZm4uYlsxMl1bMF0rKyxmbi5zWzE1XSsrLG5ldyBFcnJvcihcIk5vU2Vzc2lvbktleU9yUHJpdmF0ZUtleUlzR2l2ZW5cIik7Y2FzZSA3MDpmbi5iWzEyXVsxXSsrO2Nhc2UgNzE6bi5uZXh0PTc0O2JyZWFrO2Nhc2UgNzM6Zm4uYls2XVsxXSsrO2Nhc2UgNzQ6aWYoZm4uc1sxNl0rKywhKHIuaW5kZXhPZihcInNpZ25cIik+PTApKXtuLm5leHQ9OTU7YnJlYWt9aWYoZm4uYlsxM11bMF0rKyxmbi5zWzE3XSsrLGZuLmJbMTVdWzBdKyssIShyLmluZGV4T2YoXCJ2ZXJpZnlcIik+PTB8fChmbi5iWzE1XVsxXSsrLHIuaW5kZXhPZihcImRlY3J5cHRcIik+PTApKSl7bi5uZXh0PTg0O2JyZWFrfXRocm93IGZuLmJbMTRdWzBdKyssZm4uc1sxOF0rKyxuZXcgRXJyb3IoXCJJbnZhbGlkTW9kZVwiKTtjYXNlIDg0OmZuLmJbMTRdWzFdKys7Y2FzZSA4NTppZihmbi5zWzE5XSsrLGZuLmJbMTddWzBdKyssdm9pZCAwIT09bC5wcml2YXRlS2V5UGFzc1NldHN8fChmbi5iWzE3XVsxXSsrLHZvaWQgMCE9PWwucHJpdmF0ZUtleXMpKXtuLm5leHQ9OTI7YnJlYWt9dGhyb3cgZm4uYlsxNl1bMF0rKyxmbi5zWzIwXSsrLG5ldyBFcnJvcihcIk5vUHJpdmF0ZUtleVwiKTtjYXNlIDkyOmZuLmJbMTZdWzFdKys7Y2FzZSA5MzpuLm5leHQ9OTY7YnJlYWs7Y2FzZSA5NTpmbi5iWzEzXVsxXSsrO2Nhc2UgOTY6aWYoZm4uc1syMV0rKywhKHIuaW5kZXhPZihcInZlcmlmeVwiKT49MCkpe24ubmV4dD0xMTc7YnJlYWt9aWYoZm4uYlsxOF1bMF0rKyxmbi5zWzIyXSsrLGZuLmJbMjBdWzBdKyssIShyLmluZGV4T2YoXCJzaWduXCIpPj0wfHwoZm4uYlsyMF1bMV0rKyxyLmluZGV4T2YoXCJlbmNyeXB0XCIpPj0wKSkpe24ubmV4dD0xMDY7YnJlYWt9dGhyb3cgZm4uYlsxOV1bMF0rKyxmbi5zWzIzXSsrLG5ldyBFcnJvcihcIkludmFsaWRNb2RlXCIpO2Nhc2UgMTA2OmZuLmJbMTldWzFdKys7Y2FzZSAxMDc6aWYoZm4uc1syNF0rKyx2b2lkIDAhPT1sLnB1YmxpY0tleXMpe24ubmV4dD0xMTQ7YnJlYWt9dGhyb3cgZm4uYlsyMV1bMF0rKyxmbi5zWzI1XSsrLG5ldyBFcnJvcihcIk5vUHVibGljS2V5XCIpO2Nhc2UgMTE0OmZuLmJbMjFdWzFdKys7Y2FzZSAxMTU6bi5uZXh0PTExODticmVhaztjYXNlIDExNzpmbi5iWzE4XVsxXSsrO2Nhc2UgMTE4OmlmKGZuLnNbMjZdKyssXCJzdHJpbmdcIiE9PWUpe24ubmV4dD0xMjc7YnJlYWt9cmV0dXJuIGZuLmJbMjJdWzBdKyssZm4uc1syN10rKyxuLm5leHQ9MTI0LGJuKHtrZXlzOmwsc3VpdGU6aSxtb2RlOnJ9KTtjYXNlIDEyNDpjPW4uc2VudCxuLm5leHQ9MTQwO2JyZWFrO2Nhc2UgMTI3OmlmKGZuLmJbMjJdWzFdKyssZm4uc1syOF0rKyxcIm9iamVjdFwiIT09ZSl7bi5uZXh0PTEzNzticmVha31yZXR1cm4gZm4uYlsyM11bMF0rKyxmbi5zWzI5XSsrLG4ubmV4dD0xMzQsZ24oe2tleXM6bCxzdWl0ZTppLG1vZGU6cn0pO2Nhc2UgMTM0OmM9bi5zZW50LG4ubmV4dD0xNDA7YnJlYWs7Y2FzZSAxMzc6dGhyb3cgZm4uYlsyM11bMV0rKyxmbi5zWzMwXSsrLG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkQXRUaGlzUG9pbnRcIik7Y2FzZSAxNDA6cmV0dXJuIGZuLnNbMzFdKyssdGhpcy5fa2V5cz1jLmtleXMsZm4uc1szMl0rKyx0aGlzLl9zdWl0ZT1jLnN1aXRlLGZuLnNbMzNdKyssdGhpcy5fbW9kZT1jLm1vZGUsZm4uc1szNF0rKyxuLmFicnVwdChcInJldHVyblwiLCEwKTtjYXNlIDE0ODpjYXNlXCJlbmRcIjpyZXR1cm4gbi5zdG9wKCl9fSxuLHRoaXMpfSkpO3JldHVybiBmdW5jdGlvbihlLHQpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCl9LHtrZXk6XCJjYW5FbmNyeXB0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZm4uZls0XSsrLGZuLnNbMzhdKyssdGhpcy5tb2RlLmluZGV4T2YoXCJlbmNyeXB0XCIpPj0wfX0se2tleTpcImNhbkRlY3J5cHRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBmbi5mWzVdKyssZm4uc1szOV0rKyx0aGlzLm1vZGUuaW5kZXhPZihcImRlY3J5cHRcIik+PTB9fSx7a2V5OlwiY2FuU2lnblwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGZuLmZbNl0rKyxmbi5zWzQwXSsrLHRoaXMubW9kZS5pbmRleE9mKFwic2lnblwiKT49MH19LHtrZXk6XCJjYW5WZXJpZnlcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBmbi5mWzddKyssZm4uc1s0MV0rKyx0aGlzLm1vZGUuaW5kZXhPZihcInZlcmlmeVwiKT49MH19LHtrZXk6XCJrZXlzXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZuLmZbMV0rKyxmbi5zWzM1XSsrLHRoaXMuX2tleXN9fSx7a2V5Olwic3VpdGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZm4uZlsyXSsrLGZuLnNbMzZdKyssdGhpcy5fc3VpdGV9fSx7a2V5OlwibW9kZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBmbi5mWzNdKyssZm4uc1szN10rKyx0aGlzLl9tb2RlfX1dKSxufSgpO2Z1bmN0aW9uIHluKCl7cmV0dXJuIGhuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBobigpe3JldHVybihobj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbigpe3ZhciBlLHQsbCxpLHIsYyx1LHMsYSxtLGY9YXJndW1lbnRzO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDpyZXR1cm4gZT1mLmxlbmd0aD4wJiZ2b2lkIDAhPT1mWzBdP2ZbMF06KGZuLmJbMjRdWzBdKyssXCJzdHJpbmdcIiksdD1mLmxlbmd0aD4xP2ZbMV06dm9pZCAwLGw9dC5rZXlzLGk9dC5zdWl0ZSxyPXQubW9kZSxmbi5mWzhdKyssZm4uc1s0Ml0rKyxjPWQoKShlKSxmbi5zWzQzXSsrLHU9ZCgpKGwpLGZuLnNbNDRdKysscz1kKCkoaSksZm4uc1s0NV0rKyxhPWQoKShyKSxmbi5zWzQ2XSsrLG09bmV3IHBuLGZuLnNbNDddKyssbi5uZXh0PTExLG0uZnJvbShjLHtrZXlzOnUsc3VpdGU6cyxtb2RlOmF9KTtjYXNlIDExOnJldHVybiBmbi5zWzQ4XSsrLG4uYWJydXB0KFwicmV0dXJuXCIsbSk7Y2FzZSAxMzpjYXNlXCJlbmRcIjpyZXR1cm4gbi5zdG9wKCl9fSxuLHRoaXMpfSkpKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gYm4obil7cmV0dXJuIHZuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiB2bigpe3JldHVybih2bj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlKXt2YXIgdCxsLGksYyx1O3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDpyZXR1cm4gdD1lLmtleXMsbD1lLnN1aXRlLGk9ZS5tb2RlLGZuLmZbOV0rKyxmbi5zWzQ5XSsrLGM9e30sZm4uc1s1MF0rKyx0LnNlc3Npb25LZXk/KGZuLmJbMjVdWzBdKyssZm4uc1s1MV0rKyxjLnNlc3Npb25LZXk9dC5zZXNzaW9uS2V5KTpmbi5iWzI1XVsxXSsrLGZuLnNbNTJdKyssdT1be25hbWU6XCJlbmNyeXB0X2RlY3J5cHRcIixvcDp7cHVibGljOlwiZW5jcnlwdFwiLHByaXZhdGU6XCJkZWNyeXB0XCJ9fSx7bmFtZTpcInNpZ25fdmVyaWZ5XCIsb3A6e3B1YmxpYzpcInZlcmlmeVwiLHByaXZhdGU6XCJzaWduXCJ9fV0sZm4uc1s1M10rKyxuLm5leHQ9OSxQcm9taXNlLmFsbCh1Lm1hcChmdW5jdGlvbigpe3ZhciBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKGUpe3ZhciByO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDppZihmbi5mWzEwXSsrLGZuLnNbNTRdKyssdm9pZCAwPT09bFtlLm5hbWVdKXtuLm5leHQ9NTg7YnJlYWt9aWYoZm4uYlsyNl1bMF0rKyxmbi5zWzU1XSsrLFwianNjdVwiIT09bFtlLm5hbWVdKXtuLm5leHQ9MTE7YnJlYWt9Zm4uYlsyN11bMF0rKyxmbi5zWzU2XSsrLHI9YW4sbi5uZXh0PTIyO2JyZWFrO2Nhc2UgMTE6aWYoZm4uYlsyN11bMV0rKyxmbi5zWzU3XSsrLFwib3BlbnBncFwiIT09bFtlLm5hbWVdKXtuLm5leHQ9MTk7YnJlYWt9Zm4uYlsyOF1bMF0rKyxmbi5zWzU4XSsrLHI9ZG4sbi5uZXh0PTIyO2JyZWFrO2Nhc2UgMTk6dGhyb3cgZm4uYlsyOF1bMV0rKyxmbi5zWzU5XSsrLG5ldyBFcnJvcihcIkludmFsaWRTdWl0ZVwiKTtjYXNlIDIyOmlmKGZuLnNbNjBdKyssIShpLmluZGV4T2YoZS5vcC5wdWJsaWMpPj0wKSl7bi5uZXh0PTM3O2JyZWFrfWlmKGZuLmJbMjldWzBdKyssZm4uc1s2MV0rKywhdC5wdWJsaWNLZXlzKXtuLm5leHQ9MzQ7YnJlYWt9cmV0dXJuIGZuLmJbMzBdWzBdKyssZm4uc1s2Ml0rKyxuLm5leHQ9MzEsUHJvbWlzZS5hbGwodC5wdWJsaWNLZXlzLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gZm4uZlsxMV0rKyxmbi5zWzYzXSsrLHIuaW1wb3J0S2V5KFwicGVtXCIsbil9KSk7Y2FzZSAzMTpjLnB1YmxpY0tleXM9bi5zZW50LG4ubmV4dD0zNTticmVhaztjYXNlIDM0OmZuLmJbMzBdWzFdKys7Y2FzZSAzNTpuLm5leHQ9NTY7YnJlYWs7Y2FzZSAzNzppZihmbi5iWzI5XVsxXSsrLGZuLnNbNjRdKyssIShpLmluZGV4T2YoZS5vcC5wcml2YXRlKT49MCkpe24ubmV4dD01MzticmVha31pZihmbi5iWzMxXVswXSsrLGZuLnNbNjVdKyssIXQucHJpdmF0ZUtleVBhc3NTZXRzKXtuLm5leHQ9NTA7YnJlYWt9cmV0dXJuIGZuLmJbMzJdWzBdKyssZm4uc1s2Nl0rKyxuLm5leHQ9NDcsUHJvbWlzZS5hbGwodC5wcml2YXRlS2V5UGFzc1NldHMubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBmbi5mWzEyXSsrLGZuLnNbNjddKyssci5pbXBvcnRLZXkoXCJwZW1cIixuLnByaXZhdGVLZXksbi5wYXNzcGhyYXNlKX0pKTtjYXNlIDQ3OmMucHJpdmF0ZUtleXM9bi5zZW50LG4ubmV4dD01MTticmVhaztjYXNlIDUwOmZuLmJbMzJdWzFdKys7Y2FzZSA1MTpuLm5leHQ9NTY7YnJlYWs7Y2FzZSA1Mzp0aHJvdyBmbi5iWzMxXVsxXSsrLGZuLnNbNjhdKyssbmV3IEVycm9yKFwiSW52YWxpZEtleU1vZGVcIik7Y2FzZSA1NjpuLm5leHQ9NTk7YnJlYWs7Y2FzZSA1ODpmbi5iWzI2XVsxXSsrO2Nhc2UgNTk6Y2FzZVwiZW5kXCI6cmV0dXJuIG4uc3RvcCgpfX0sbix0aGlzKX0pKTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKSkpO2Nhc2UgOTpyZXR1cm4gZm4uc1s2OV0rKyxuLmFicnVwdChcInJldHVyblwiLHtrZXlzOmMsc3VpdGU6bCxtb2RlOml9KTtjYXNlIDExOmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBnbihuKXtyZXR1cm4gd24uYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIHduKCl7cmV0dXJuKHduPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKGUpe3ZhciB0LGwsaSxyO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDpyZXR1cm4gdD1lLmtleXMsbD1lLnN1aXRlLGk9ZS5tb2RlLGZuLmZbMTNdKyssZm4uc1s3MF0rKyxyPXt9LGZuLnNbNzFdKyssdC5zZXNzaW9uS2V5Pyhmbi5iWzMzXVswXSsrLGZuLnNbNzJdKyssci5zZXNzaW9uS2V5PXQuc2Vzc2lvbktleSk6Zm4uYlszM11bMV0rKyxmbi5zWzczXSsrLHQucHVibGljS2V5cz8oZm4uYlszNF1bMF0rKyxmbi5zWzc0XSsrLHIucHVibGljS2V5cz10LnB1YmxpY0tleXMpOmZuLmJbMzRdWzFdKyssZm4uc1s3NV0rKyx0LnByaXZhdGVLZXlzPyhmbi5iWzM1XVswXSsrLGZuLnNbNzZdKyssci5wcml2YXRlS2V5cz10LnByaXZhdGVLZXlzKTpmbi5iWzM1XVsxXSsrLGZuLnNbNzddKyssbi5hYnJ1cHQoXCJyZXR1cm5cIix7a2V5czpyLHN1aXRlOmwsbW9kZTppfSk7Y2FzZSAxMTpjYXNlXCJlbmRcIjpyZXR1cm4gbi5zdG9wKCl9fSxuLHRoaXMpfSkpKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24geG4obil7cmV0dXJuIGtuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBrbigpe3JldHVybihrbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlKXt2YXIgdCxsO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDppZihmbi5mWzE0XSsrLGZuLnNbNzhdKyssdD1kKCkoZSksZm4uc1s3OV0rKyxcIm9wZW5wZ3BcIiE9PXQuc3VpdGUpe24ubmV4dD0xMTticmVha31yZXR1cm4gZm4uYlszNl1bMF0rKyxmbi5zWzgwXSsrLG4ubmV4dD04LGRuLmdlbmVyYXRlS2V5KHt1c2VySWRzOnQudXNlcklkcyxwYXNzcGhyYXNlOnQucGFzc3BocmFzZSxwYXJhbXM6dC5rZXlQYXJhbXN9KS5jYXRjaChmdW5jdGlvbihuKXt0aHJvdyBmbi5mWzE1XSsrLGZuLnNbODFdKyssbmV3IEVycm9yKFwiR1BHS2V5R2VuZXJhdGlvbkZhaWxlZDogXCIuY29uY2F0KG4ubWVzc2FnZSkpfSk7Y2FzZSA4Omw9bi5zZW50LG4ubmV4dD0yNDticmVhaztjYXNlIDExOmlmKGZuLmJbMzZdWzFdKyssZm4uc1s4Ml0rKyxcImpzY3VcIiE9PXQuc3VpdGUpe24ubmV4dD0yMTticmVha31yZXR1cm4gZm4uYlszN11bMF0rKyxmbi5zWzgzXSsrLG4ubmV4dD0xOCxhbi5nZW5lcmF0ZUtleSh7cGFzc3BocmFzZTp0LnBhc3NwaHJhc2UscGFyYW1zOnQua2V5UGFyYW1zLGVuY3J5cHRPcHRpb25zOnQuZW5jcnlwdE9wdGlvbnN9KS5jYXRjaChmdW5jdGlvbihuKXt0aHJvdyBmbi5mWzE2XSsrLGZuLnNbODRdKyssbmV3IEVycm9yKFwiSnNjdUtleUdlbmVyYXRpb25GYWlsZWQ6IFwiLmNvbmNhdChuLm1lc3NhZ2UpKX0pO2Nhc2UgMTg6bD1uLnNlbnQsbi5uZXh0PTI0O2JyZWFrO2Nhc2UgMjE6dGhyb3cgZm4uYlszN11bMV0rKyxmbi5zWzg1XSsrLG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkQ3J5cHRvU3VpdGVcIik7Y2FzZSAyNDpyZXR1cm4gZm4uc1s4Nl0rKyxuLmFicnVwdChcInJldHVyblwiLGwpO2Nhc2UgMjY6Y2FzZVwiZW5kXCI6cmV0dXJuIG4uc3RvcCgpfX0sbix0aGlzKX0pKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBfbj1mdW5jdGlvbigpe3ZhciBuPVwiL1VzZXJzL2p1bi9Qcm9qZWN0SmF2YVNjcmlwdC9jYXNjYWRlL3NyYy9tZXNzYWdlLmpzXCIsZT1cIjAzMzM5ZDFjNjk0ZmM1YTg4YjljMzU5NjBkMjA4YzJmNTI3NDk1OTVcIix0PW5ldygwLGZ1bmN0aW9uKCl7fS5jb25zdHJ1Y3RvcikoXCJyZXR1cm4gdGhpc1wiKSgpLGw9XCJfX2NvdmVyYWdlX19cIixvPXtwYXRoOlwiL1VzZXJzL2p1bi9Qcm9qZWN0SmF2YVNjcmlwdC9jYXNjYWRlL3NyYy9tZXNzYWdlLmpzXCIsc3RhdGVtZW50TWFwOnswOntzdGFydDp7bGluZToxNCxjb2x1bW46MjN9LGVuZDp7bGluZToxNCxjb2x1bW46Mzd9fSwxOntzdGFydDp7bGluZToxNSxjb2x1bW46MTR9LGVuZDp7bGluZToxNSxjb2x1bW46Mjd9fSwyOntzdGFydDp7bGluZToxNixjb2x1bW46Mn0sZW5kOntsaW5lOjE2LGNvbHVtbjoyNn19LDM6e3N0YXJ0OntsaW5lOjE3LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTcsY29sdW1uOjEzfX0sNDp7c3RhcnQ6e2xpbmU6MjIsY29sdW1uOjR9LGVuZDp7bGluZTozMCxjb2x1bW46NTF9fSw1OntzdGFydDp7bGluZToyMyxjb2x1bW46Nn0sZW5kOntsaW5lOjIzLGNvbHVtbjoyNn19LDY6e3N0YXJ0OntsaW5lOjI0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MjQsY29sdW1uOjM1fX0sNzp7c3RhcnQ6e2xpbmU6MjYsY29sdW1uOjl9LGVuZDp7bGluZTozMCxjb2x1bW46NTF9fSw4OntzdGFydDp7bGluZToyNyxjb2x1bW46Nn0sZW5kOntsaW5lOjI3LGNvbHVtbjo2MH19LDk6e3N0YXJ0OntsaW5lOjI4LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MjgsY29sdW1uOjM1fX0sMTA6e3N0YXJ0OntsaW5lOjMwLGNvbHVtbjo5fSxlbmQ6e2xpbmU6MzAsY29sdW1uOjUxfX0sMTE6e3N0YXJ0OntsaW5lOjM0LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MzQsY29sdW1uOjI1fX0sMTI6e3N0YXJ0OntsaW5lOjM4LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NDAsY29sdW1uOjIxfX0sMTM6e3N0YXJ0OntsaW5lOjM4LGNvbHVtbjozOH0sZW5kOntsaW5lOjM4LGNvbHVtbjo1OX19LDE0OntzdGFydDp7bGluZTozOSxjb2x1bW46OX0sZW5kOntsaW5lOjQwLGNvbHVtbjoyMX19LDE1OntzdGFydDp7bGluZTozOSxjb2x1bW46NDR9LGVuZDp7bGluZTozOSxjb2x1bW46OTl9fSwxNjp7c3RhcnQ6e2xpbmU6NDAsY29sdW1uOjl9LGVuZDp7bGluZTo0MCxjb2x1bW46MjF9fSwxNzp7c3RhcnQ6e2xpbmU6NDIsY29sdW1uOjIzfSxlbmQ6e2xpbmU6NDIsY29sdW1uOjQ4fX19LGZuTWFwOnswOntuYW1lOlwiaW1wb3J0TWVzc2FnZVwiLGRlY2w6e3N0YXJ0OntsaW5lOjEzLGNvbHVtbjoxNn0sZW5kOntsaW5lOjEzLGNvbHVtbjoyOX19LGxvYzp7c3RhcnQ6e2xpbmU6MTMsY29sdW1uOjM0fSxlbmQ6e2xpbmU6MTgsY29sdW1uOjF9fSxsaW5lOjEzfSwxOntuYW1lOlwiKGFub255bW91c18xKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjIxLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MjEsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjIxLGNvbHVtbjoxMn0sZW5kOntsaW5lOjMxLGNvbHVtbjozfX0sbGluZToyMX0sMjp7bmFtZTpcIihhbm9ueW1vdXNfMilcIixkZWNsOntzdGFydDp7bGluZTozMyxjb2x1bW46Mn0sZW5kOntsaW5lOjMzLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTozMyxjb2x1bW46MTZ9LGVuZDp7bGluZTozNSxjb2x1bW46M319LGxpbmU6MzN9LDM6e25hbWU6XCIoYW5vbnltb3VzXzMpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MzcsY29sdW1uOjJ9LGVuZDp7bGluZTozNyxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MzcsY29sdW1uOjE3fSxlbmQ6e2xpbmU6NDEsY29sdW1uOjN9fSxsaW5lOjM3fSw0OntuYW1lOlwiKGFub255bW91c180KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjQyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6NDIsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjQyLGNvbHVtbjoyMX0sZW5kOntsaW5lOjQyLGNvbHVtbjo1MH19LGxpbmU6NDJ9fSxicmFuY2hNYXA6ezA6e2xvYzp7c3RhcnQ6e2xpbmU6MjIsY29sdW1uOjR9LGVuZDp7bGluZTozMCxjb2x1bW46NTF9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyMixjb2x1bW46NH0sZW5kOntsaW5lOjMwLGNvbHVtbjo1MX19LHtzdGFydDp7bGluZToyMixjb2x1bW46NH0sZW5kOntsaW5lOjMwLGNvbHVtbjo1MX19XSxsaW5lOjIyfSwxOntsb2M6e3N0YXJ0OntsaW5lOjI2LGNvbHVtbjo5fSxlbmQ6e2xpbmU6MzAsY29sdW1uOjUxfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjYsY29sdW1uOjl9LGVuZDp7bGluZTozMCxjb2x1bW46NTF9fSx7c3RhcnQ6e2xpbmU6MjYsY29sdW1uOjl9LGVuZDp7bGluZTozMCxjb2x1bW46NTF9fV0sbGluZToyNn0sMjp7bG9jOntzdGFydDp7bGluZTozOCxjb2x1bW46NH0sZW5kOntsaW5lOjQwLGNvbHVtbjoyMX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjM4LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NDAsY29sdW1uOjIxfX0se3N0YXJ0OntsaW5lOjM4LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NDAsY29sdW1uOjIxfX1dLGxpbmU6Mzh9LDM6e2xvYzp7c3RhcnQ6e2xpbmU6MzksY29sdW1uOjl9LGVuZDp7bGluZTo0MCxjb2x1bW46MjF9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozOSxjb2x1bW46OX0sZW5kOntsaW5lOjQwLGNvbHVtbjoyMX19LHtzdGFydDp7bGluZTozOSxjb2x1bW46OX0sZW5kOntsaW5lOjQwLGNvbHVtbjoyMX19XSxsaW5lOjM5fX0sczp7MDowLDE6MCwyOjAsMzowLDQ6MCw1OjAsNjowLDc6MCw4OjAsOTowLDEwOjAsMTE6MCwxMjowLDEzOjAsMTQ6MCwxNTowLDE2OjAsMTc6MH0sZjp7MDowLDE6MCwyOjAsMzowLDQ6MH0sYjp7MDpbMCwwXSwxOlswLDBdLDI6WzAsMF0sMzpbMCwwXX0sX2NvdmVyYWdlU2NoZW1hOlwiNDNlMjdlMTM4ZWJmOWNmYzU5NjZiMDgyY2Y5YTAyODMwMmVkNDE4NFwifSxpPXRbbF18fCh0W2xdPXt9KTtyZXR1cm4gaVtuXSYmaVtuXS5oYXNoPT09ZT9pW25dOihvLmhhc2g9ZSxpW25dPW8pfSgpO2Z1bmN0aW9uIEVuKG4pe19uLmZbMF0rKzt2YXIgZT0oX24uc1swXSsrLGQoKShuKSksdD0oX24uc1sxXSsrLG5ldyBqbik7cmV0dXJuIF9uLnNbMl0rKyx0Ll9pbml0KGUpLF9uLnNbM10rKyx0fXZhciBqbj1mdW5jdGlvbigpe2Z1bmN0aW9uIG4oKXt1KCkodGhpcyxuKX1yZXR1cm4gYSgpKG4sW3trZXk6XCJfaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKG4pe2lmKF9uLmZbMV0rKyxfbi5zWzRdKyssbiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpX24uYlswXVswXSsrLF9uLnNbNV0rKyx0aGlzLl9tZXNzYWdlPW4sX24uc1s2XSsrLHRoaXMuX21lc3NhZ2VUeXBlPVwiYmluYXJ5XCI7ZWxzZXtpZihfbi5iWzBdWzFdKyssX24uc1s3XSsrLFwic3RyaW5nXCIhPXR5cGVvZiBuKXRocm93IF9uLmJbMV1bMV0rKyxfbi5zWzEwXSsrLG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkTWVzc2FnZVR5cGVcIik7X24uYlsxXVswXSsrLF9uLnNbOF0rKyx0aGlzLl9tZXNzYWdlPVAuYS5lbmNvZGVyLnN0cmluZ1RvQXJyYXlCdWZmZXIobiksX24uc1s5XSsrLHRoaXMuX21lc3NhZ2VUeXBlPVwic3RyaW5nXCJ9fX0se2tleTpcImJpbmFyeVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBfbi5mWzJdKyssX24uc1sxMV0rKyx0aGlzLl9tZXNzYWdlfX0se2tleTpcIm1lc3NhZ2VcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gX24uZlszXSsrLF9uLnNbMTJdKyssXCJiaW5hcnlcIj09PXRoaXMubWVzc2FnZVR5cGU/KF9uLmJbMl1bMF0rKyxfbi5zWzEzXSsrLHRoaXMuX21lc3NhZ2UpOihfbi5iWzJdWzFdKyssX24uc1sxNF0rKyxcInN0cmluZ1wiPT09dGhpcy5tZXNzYWdlVHlwZT8oX24uYlszXVswXSsrLF9uLnNbMTVdKyssUC5hLmVuY29kZXIuYXJyYXlCdWZmZXJUb1N0cmluZyh0aGlzLl9tZXNzYWdlKSk6KF9uLmJbM11bMV0rKyxfbi5zWzE2XSsrLG51bGwpKX19LHtrZXk6XCJtZXNzYWdlVHlwZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBfbi5mWzRdKyssX24uc1sxN10rKyx0aGlzLl9tZXNzYWdlVHlwZX19XSksbn0oKSxBbj1mdW5jdGlvbigpe3ZhciBuPVwiL1VzZXJzL2p1bi9Qcm9qZWN0SmF2YVNjcmlwdC9jYXNjYWRlL3NyYy9jb3JlLmpzXCIsZT1cIjI5NTk5MTljOWVhYjMyODNhN2YwMzFmYTZjYzhmMDg0NGQxNWMwODVcIix0PW5ldygwLGZ1bmN0aW9uKCl7fS5jb25zdHJ1Y3RvcikoXCJyZXR1cm4gdGhpc1wiKSgpLGw9XCJfX2NvdmVyYWdlX19cIixvPXtwYXRoOlwiL1VzZXJzL2p1bi9Qcm9qZWN0SmF2YVNjcmlwdC9jYXNjYWRlL3NyYy9jb3JlLmpzXCIsc3RhdGVtZW50TWFwOnswOntzdGFydDp7bGluZToyNSxjb2x1bW46MTd9LGVuZDp7bGluZToyNSxjb2x1bW46NTF9fSwxOntzdGFydDp7bGluZToyOCxjb2x1bW46Mn0sZW5kOntsaW5lOjUyLGNvbHVtbjozfX0sMjp7c3RhcnQ6e2xpbmU6MjksY29sdW1uOjR9LGVuZDp7bGluZToyOSxjb2x1bW46MTh9fSwzOntzdGFydDp7bGluZTozMixjb2x1bW46NH0sZW5kOntsaW5lOjUxLGNvbHVtbjo0N319LDQ6e3N0YXJ0OntsaW5lOjMzLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MzgsY29sdW1uOjh9fSw1OntzdGFydDp7bGluZTo0MCxjb2x1bW46OX0sZW5kOntsaW5lOjUxLGNvbHVtbjo0N319LDY6e3N0YXJ0OntsaW5lOjQxLGNvbHVtbjo2fSxlbmQ6e2xpbmU6NDksY29sdW1uOjh9fSw3OntzdGFydDp7bGluZTo1MSxjb2x1bW46OX0sZW5kOntsaW5lOjUxLGNvbHVtbjo0N319LDg6e3N0YXJ0OntsaW5lOjY0LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NjQsY29sdW1uOjkxfX0sOTp7c3RhcnQ6e2xpbmU6NjQsY29sdW1uOjQ1fSxlbmQ6e2xpbmU6NjQsY29sdW1uOjkxfX0sMTA6e3N0YXJ0OntsaW5lOjY3LGNvbHVtbjoxN30sZW5kOntsaW5lOjY3LGNvbHVtbjozOX19LDExOntzdGFydDp7bGluZTo3MCxjb2x1bW46MTV9LGVuZDp7bGluZTo3MCxjb2x1bW46MTd9fSwxMjp7c3RhcnQ6e2xpbmU6NzEsY29sdW1uOjJ9LGVuZDp7bGluZTo3OSxjb2x1bW46M319LDEzOntzdGFydDp7bGluZTo3NSxjb2x1bW46NH0sZW5kOntsaW5lOjc1LGNvbHVtbjoxMDR9fSwxNDp7c3RhcnQ6e2xpbmU6NzUsY29sdW1uOjU0fSxlbmQ6e2xpbmU6NzUsY29sdW1uOjEwNH19LDE1OntzdGFydDp7bGluZTo3Nixjb2x1bW46NH0sZW5kOntsaW5lOjc4LGNvbHVtbjo3M319LDE2OntzdGFydDp7bGluZTo3OCxjb2x1bW46MjJ9LGVuZDp7bGluZTo3OCxjb2x1bW46Njl9fSwxNzp7c3RhcnQ6e2xpbmU6ODMsY29sdW1uOjJ9LGVuZDp7bGluZTo4Myxjb2x1bW46MTEyfX0sMTg6e3N0YXJ0OntsaW5lOjgzLGNvbHVtbjo1OX0sZW5kOntsaW5lOjgzLGNvbHVtbjoxMTJ9fSwxOTp7c3RhcnQ6e2xpbmU6ODQsY29sdW1uOjIwfSxlbmQ6e2xpbmU6ODYsY29sdW1uOjc0fX0sMjA6e3N0YXJ0OntsaW5lOjg2LGNvbHVtbjoyMX0sZW5kOntsaW5lOjg2LGNvbHVtbjo3MX19LDIxOntzdGFydDp7bGluZTo5MCxjb2x1bW46Mn0sZW5kOntsaW5lOjkwLGNvbHVtbjo0Mn19LDIyOntzdGFydDp7bGluZToxMDAsY29sdW1uOjJ9LGVuZDp7bGluZToxMDAsY29sdW1uOjg4fX0sMjM6e3N0YXJ0OntsaW5lOjEwMCxjb2x1bW46NDJ9LGVuZDp7bGluZToxMDAsY29sdW1uOjg4fX0sMjQ6e3N0YXJ0OntsaW5lOjEwMyxjb2x1bW46Mn0sZW5kOntsaW5lOjEwMyxjb2x1bW46MTEwfX0sMjU6e3N0YXJ0OntsaW5lOjEwMyxjb2x1bW46NTd9LGVuZDp7bGluZToxMDMsY29sdW1uOjExMH19LDI2OntzdGFydDp7bGluZToxMDQsY29sdW1uOjIwfSxlbmQ6e2xpbmU6MTA2LGNvbHVtbjo5Mn19LDI3OntzdGFydDp7bGluZToxMDYsY29sdW1uOjIxfSxlbmQ6e2xpbmU6MTA2LGNvbHVtbjozOH19LDI4OntzdGFydDp7bGluZToxMDYsY29sdW1uOjM5fSxlbmQ6e2xpbmU6MTA2LGNvbHVtbjo4OX19LDI5OntzdGFydDp7bGluZToxMDksY29sdW1uOjE3fSxlbmQ6e2xpbmU6MTA5LGNvbHVtbjoxOX19LDMwOntzdGFydDp7bGluZToxMTAsY29sdW1uOjJ9LGVuZDp7bGluZToxMTUsY29sdW1uOjg4fX0sMzE6e3N0YXJ0OntsaW5lOjExMSxjb2x1bW46NH0sZW5kOntsaW5lOjExMyxjb2x1bW46Nzh9fSwzMjp7c3RhcnQ6e2xpbmU6MTEzLGNvbHVtbjoyMn0sZW5kOntsaW5lOjExMyxjb2x1bW46NzR9fSwzMzp7c3RhcnQ6e2xpbmU6MTE1LGNvbHVtbjo3fSxlbmQ6e2xpbmU6MTE1LGNvbHVtbjo4OH19LDM0OntzdGFydDp7bGluZToxMTUsY29sdW1uOjU2fSxlbmQ6e2xpbmU6MTE1LGNvbHVtbjo4OH19LDM1OntzdGFydDp7bGluZToxMTcsY29sdW1uOjJ9LGVuZDp7bGluZToxMTcsY29sdW1uOjU0fX0sMzY6e3N0YXJ0OntsaW5lOjEyOSxjb2x1bW46Mn0sZW5kOntsaW5lOjEyOSxjb2x1bW46ODV9fSwzNzp7c3RhcnQ6e2xpbmU6MTI5LGNvbHVtbjo0Mn0sZW5kOntsaW5lOjEyOSxjb2x1bW46ODV9fSwzODp7c3RhcnQ6e2xpbmU6MTMyLGNvbHVtbjoxN30sZW5kOntsaW5lOjEzMixjb2x1bW46Mzl9fSwzOTp7c3RhcnQ6e2xpbmU6MTM2LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTQyLGNvbHVtbjo0N319LDQwOntzdGFydDp7bGluZToxMzcsY29sdW1uOjR9LGVuZDp7bGluZToxNDEsY29sdW1uOjd9fSw0MTp7c3RhcnQ6e2xpbmU6MTQwLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTQwLGNvbHVtbjo1M319LDQyOntzdGFydDp7bGluZToxNDIsY29sdW1uOjl9LGVuZDp7bGluZToxNDIsY29sdW1uOjQ3fX0sNDM6e3N0YXJ0OntsaW5lOjE0NCxjb2x1bW46Mn0sZW5kOntsaW5lOjE0NCxjb2x1bW46MTZ9fSw0NDp7c3RhcnQ6e2xpbmU6MTQ5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTQ5LGNvbHVtbjo4NX19LDQ1OntzdGFydDp7bGluZToxNDksY29sdW1uOjQwfSxlbmQ6e2xpbmU6MTQ5LGNvbHVtbjo4NX19LDQ2OntzdGFydDp7bGluZToxNTEsY29sdW1uOjE3fSxlbmQ6e2xpbmU6MTUxLGNvbHVtbjozOX19LDQ3OntzdGFydDp7bGluZToxNTQsY29sdW1uOjE3fSxlbmQ6e2xpbmU6MTU0LGNvbHVtbjoxOX19LDQ4OntzdGFydDp7bGluZToxNTUsY29sdW1uOjJ9LGVuZDp7bGluZToxNjEsY29sdW1uOjYzfX0sNDk6e3N0YXJ0OntsaW5lOjE1Nixjb2x1bW46NH0sZW5kOntsaW5lOjE2MCxjb2x1bW46N319LDUwOntzdGFydDp7bGluZToxNTksY29sdW1uOjZ9LGVuZDp7bGluZToxNTksY29sdW1uOjU4fX0sNTE6e3N0YXJ0OntsaW5lOjE2MSxjb2x1bW46OX0sZW5kOntsaW5lOjE2MSxjb2x1bW46NjN9fSw1Mjp7c3RhcnQ6e2xpbmU6MTYzLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTYzLGNvbHVtbjoxOH19LDUzOntzdGFydDp7bGluZToxNjgsY29sdW1uOjIwfSxlbmQ6e2xpbmU6MTc3LGNvbHVtbjoxfX0sNTQ6e3N0YXJ0OntsaW5lOjE2OSxjb2x1bW46Mn0sZW5kOntsaW5lOjE2OSxjb2x1bW46NzN9fSw1NTp7c3RhcnQ6e2xpbmU6MTY5LGNvbHVtbjoyNn0sZW5kOntsaW5lOjE2OSxjb2x1bW46NzN9fSw1Njp7c3RhcnQ6e2xpbmU6MTcyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTc0LGNvbHVtbjo0OX19LDU3OntzdGFydDp7bGluZToxNzIsY29sdW1uOjQ1fSxlbmQ6e2xpbmU6MTcyLGNvbHVtbjo2MX19LDU4OntzdGFydDp7bGluZToxNzMsY29sdW1uOjd9LGVuZDp7bGluZToxNzQsY29sdW1uOjQ5fX0sNTk6e3N0YXJ0OntsaW5lOjE3Myxjb2x1bW46NTN9LGVuZDp7bGluZToxNzMsY29sdW1uOjcyfX0sNjA6e3N0YXJ0OntsaW5lOjE3NCxjb2x1bW46N30sZW5kOntsaW5lOjE3NCxjb2x1bW46NDl9fSw2MTp7c3RhcnQ6e2xpbmU6MTc2LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTc2LGNvbHVtbjo2NX19LDYyOntzdGFydDp7bGluZToxNzksY29sdW1uOjIwfSxlbmQ6e2xpbmU6MTg4LGNvbHVtbjoxfX0sNjM6e3N0YXJ0OntsaW5lOjE4MCxjb2x1bW46Mn0sZW5kOntsaW5lOjE4MCxjb2x1bW46NzJ9fSw2NDp7c3RhcnQ6e2xpbmU6MTgwLGNvbHVtbjoyNX0sZW5kOntsaW5lOjE4MCxjb2x1bW46NzJ9fSw2NTp7c3RhcnQ6e2xpbmU6MTgzLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTg1LGNvbHVtbjo0OX19LDY2OntzdGFydDp7bGluZToxODMsY29sdW1uOjQ1fSxlbmQ6e2xpbmU6MTgzLGNvbHVtbjo2MX19LDY3OntzdGFydDp7bGluZToxODQsY29sdW1uOjd9LGVuZDp7bGluZToxODUsY29sdW1uOjQ5fX0sNjg6e3N0YXJ0OntsaW5lOjE4NCxjb2x1bW46NTN9LGVuZDp7bGluZToxODQsY29sdW1uOjcyfX0sNjk6e3N0YXJ0OntsaW5lOjE4NSxjb2x1bW46N30sZW5kOntsaW5lOjE4NSxjb2x1bW46NDl9fSw3MDp7c3RhcnQ6e2xpbmU6MTg3LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTg3LGNvbHVtbjo2N319LDcxOntzdGFydDp7bGluZToxOTAsY29sdW1uOjE3fSxlbmQ6e2xpbmU6MTk5LGNvbHVtbjoxfX0sNzI6e3N0YXJ0OntsaW5lOjE5MSxjb2x1bW46Mn0sZW5kOntsaW5lOjE5MSxjb2x1bW46NjR9fSw3Mzp7c3RhcnQ6e2xpbmU6MTkxLGNvbHVtbjoyM30sZW5kOntsaW5lOjE5MSxjb2x1bW46NjR9fSw3NDp7c3RhcnQ6e2xpbmU6MTk0LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTk2LGNvbHVtbjo0Nn19LDc1OntzdGFydDp7bGluZToxOTQsY29sdW1uOjQxfSxlbmQ6e2xpbmU6MTk0LGNvbHVtbjo1N319LDc2OntzdGFydDp7bGluZToxOTUsY29sdW1uOjd9LGVuZDp7bGluZToxOTYsY29sdW1uOjQ2fX0sNzc6e3N0YXJ0OntsaW5lOjE5NSxjb2x1bW46NDl9LGVuZDp7bGluZToxOTUsY29sdW1uOjY4fX0sNzg6e3N0YXJ0OntsaW5lOjE5Nixjb2x1bW46N30sZW5kOntsaW5lOjE5Nixjb2x1bW46NDZ9fSw3OTp7c3RhcnQ6e2xpbmU6MTk4LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTk4LGNvbHVtbjo2Mn19LDgwOntzdGFydDp7bGluZToyMDEsY29sdW1uOjE5fSxlbmQ6e2xpbmU6MjEwLGNvbHVtbjoxfX0sODE6e3N0YXJ0OntsaW5lOjIwMixjb2x1bW46Mn0sZW5kOntsaW5lOjIwMixjb2x1bW46NzN9fSw4Mjp7c3RhcnQ6e2xpbmU6MjAyLGNvbHVtbjoyNH0sZW5kOntsaW5lOjIwMixjb2x1bW46NzN9fSw4Mzp7c3RhcnQ6e2xpbmU6MjA1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MjA3LGNvbHVtbjo0Nn19LDg0OntzdGFydDp7bGluZToyMDUsY29sdW1uOjQxfSxlbmQ6e2xpbmU6MjA1LGNvbHVtbjo1N319LDg1OntzdGFydDp7bGluZToyMDYsY29sdW1uOjd9LGVuZDp7bGluZToyMDcsY29sdW1uOjQ2fX0sODY6e3N0YXJ0OntsaW5lOjIwNixjb2x1bW46NDl9LGVuZDp7bGluZToyMDYsY29sdW1uOjY4fX0sODc6e3N0YXJ0OntsaW5lOjIwNyxjb2x1bW46N30sZW5kOntsaW5lOjIwNyxjb2x1bW46NDZ9fSw4ODp7c3RhcnQ6e2xpbmU6MjA5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MjA5LGNvbHVtbjo3NH19fSxmbk1hcDp7MDp7bmFtZTpcImdlbmVyYXRlS2V5XCIsZGVjbDp7c3RhcnQ6e2xpbmU6MjQsY29sdW1uOjIyfSxlbmQ6e2xpbmU6MjQsY29sdW1uOjMzfX0sbG9jOntzdGFydDp7bGluZToyNCxjb2x1bW46NDZ9LGVuZDp7bGluZTo1Myxjb2x1bW46MX19LGxpbmU6MjR9LDE6e25hbWU6XCJlbmNyeXB0XCIsZGVjbDp7c3RhcnQ6e2xpbmU6NjIsY29sdW1uOjIyfSxlbmQ6e2xpbmU6NjIsY29sdW1uOjI5fX0sbG9jOntzdGFydDp7bGluZTo2Mixjb2x1bW46NTR9LGVuZDp7bGluZTo5MSxjb2x1bW46MX19LGxpbmU6NjJ9LDI6e25hbWU6XCIoYW5vbnltb3VzXzIpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NzgsY29sdW1uOjEzfSxlbmQ6e2xpbmU6NzgsY29sdW1uOjE0fX0sbG9jOntzdGFydDp7bGluZTo3OCxjb2x1bW46MjB9LGVuZDp7bGluZTo3OCxjb2x1bW46NzF9fSxsaW5lOjc4fSwzOntuYW1lOlwiKGFub255bW91c18zKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjg2LGNvbHVtbjoxMn0sZW5kOntsaW5lOjg2LGNvbHVtbjoxM319LGxvYzp7c3RhcnQ6e2xpbmU6ODYsY29sdW1uOjE5fSxlbmQ6e2xpbmU6ODYsY29sdW1uOjczfX0sbGluZTo4Nn0sNDp7bmFtZTpcImRlY3J5cHRcIixkZWNsOntzdGFydDp7bGluZTo5OSxjb2x1bW46MjJ9LGVuZDp7bGluZTo5OSxjb2x1bW46Mjl9fSxsb2M6e3N0YXJ0OntsaW5lOjk5LGNvbHVtbjo0M30sZW5kOntsaW5lOjExOCxjb2x1bW46MX19LGxpbmU6OTl9LDU6e25hbWU6XCIoYW5vbnltb3VzXzUpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTA2LGNvbHVtbjoxMn0sZW5kOntsaW5lOjEwNixjb2x1bW46MTN9fSxsb2M6e3N0YXJ0OntsaW5lOjEwNixjb2x1bW46MTl9LGVuZDp7bGluZToxMDYsY29sdW1uOjkxfX0sbGluZToxMDZ9LDY6e25hbWU6XCIoYW5vbnltb3VzXzYpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTEzLGNvbHVtbjoxM30sZW5kOntsaW5lOjExMyxjb2x1bW46MTR9fSxsb2M6e3N0YXJ0OntsaW5lOjExMyxjb2x1bW46MjB9LGVuZDp7bGluZToxMTMsY29sdW1uOjc2fX0sbGluZToxMTN9LDc6e25hbWU6XCJzaWduXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTI3LGNvbHVtbjoyMn0sZW5kOntsaW5lOjEyNyxjb2x1bW46MjZ9fSxsb2M6e3N0YXJ0OntsaW5lOjEyNyxjb2x1bW46NTF9LGVuZDp7bGluZToxNDUsY29sdW1uOjF9fSxsaW5lOjEyN30sODp7bmFtZTpcIihhbm9ueW1vdXNfOClcIixkZWNsOntzdGFydDp7bGluZToxMzksY29sdW1uOjEzfSxlbmQ6e2xpbmU6MTM5LGNvbHVtbjoxNH19LGxvYzp7c3RhcnQ6e2xpbmU6MTM5LGNvbHVtbjoyMH0sZW5kOntsaW5lOjE0MSxjb2x1bW46NX19LGxpbmU6MTM5fSw5OntuYW1lOlwidmVyaWZ5XCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTQ3LGNvbHVtbjoyMn0sZW5kOntsaW5lOjE0Nyxjb2x1bW46Mjh9fSxsb2M6e3N0YXJ0OntsaW5lOjE0Nyxjb2x1bW46NTZ9LGVuZDp7bGluZToxNjQsY29sdW1uOjF9fSxsaW5lOjE0N30sMTA6e25hbWU6XCIoYW5vbnltb3VzXzEwKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjE1OCxjb2x1bW46MTN9LGVuZDp7bGluZToxNTgsY29sdW1uOjE0fX0sbG9jOntzdGFydDp7bGluZToxNTgsY29sdW1uOjIwfSxlbmQ6e2xpbmU6MTYwLGNvbHVtbjo1fX0sbGluZToxNTh9LDExOntuYW1lOlwiKGFub255bW91c18xMSlcIixkZWNsOntzdGFydDp7bGluZToxNjgsY29sdW1uOjIwfSxlbmQ6e2xpbmU6MTY4LGNvbHVtbjoyMX19LGxvYzp7c3RhcnQ6e2xpbmU6MTY4LGNvbHVtbjo1Nn0sZW5kOntsaW5lOjE3Nyxjb2x1bW46MX19LGxpbmU6MTY4fSwxMjp7bmFtZTpcIihhbm9ueW1vdXNfMTIpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTc5LGNvbHVtbjoyMH0sZW5kOntsaW5lOjE3OSxjb2x1bW46MjF9fSxsb2M6e3N0YXJ0OntsaW5lOjE3OSxjb2x1bW46NTh9LGVuZDp7bGluZToxODgsY29sdW1uOjF9fSxsaW5lOjE3OX0sMTM6e25hbWU6XCIoYW5vbnltb3VzXzEzKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjE5MCxjb2x1bW46MTd9LGVuZDp7bGluZToxOTAsY29sdW1uOjE4fX0sbG9jOntzdGFydDp7bGluZToxOTAsY29sdW1uOjUzfSxlbmQ6e2xpbmU6MTk5LGNvbHVtbjoxfX0sbGluZToxOTB9LDE0OntuYW1lOlwiKGFub255bW91c18xNClcIixkZWNsOntzdGFydDp7bGluZToyMDEsY29sdW1uOjE5fSxlbmQ6e2xpbmU6MjAxLGNvbHVtbjoyMH19LGxvYzp7c3RhcnQ6e2xpbmU6MjAxLGNvbHVtbjo2Nn0sZW5kOntsaW5lOjIxMCxjb2x1bW46MX19LGxpbmU6MjAxfX0sYnJhbmNoTWFwOnswOntsb2M6e3N0YXJ0OntsaW5lOjI4LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NTIsY29sdW1uOjN9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyOCxjb2x1bW46Mn0sZW5kOntsaW5lOjUyLGNvbHVtbjozfX0se3N0YXJ0OntsaW5lOjI4LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NTIsY29sdW1uOjN9fV0sbGluZToyOH0sMTp7bG9jOntzdGFydDp7bGluZTozMixjb2x1bW46NH0sZW5kOntsaW5lOjUxLGNvbHVtbjo0N319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjMyLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NTEsY29sdW1uOjQ3fX0se3N0YXJ0OntsaW5lOjMyLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NTEsY29sdW1uOjQ3fX1dLGxpbmU6MzJ9LDI6e2xvYzp7c3RhcnQ6e2xpbmU6MzcsY29sdW1uOjEwfSxlbmQ6e2xpbmU6MzcsY29sdW1uOjc0fX0sdHlwZTpcImNvbmQtZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjM3LGNvbHVtbjozNX0sZW5kOntsaW5lOjM3LGNvbHVtbjo2OX19LHtzdGFydDp7bGluZTozNyxjb2x1bW46NzJ9LGVuZDp7bGluZTozNyxjb2x1bW46NzR9fV0sbGluZTozN30sMzp7bG9jOntzdGFydDp7bGluZTo0MCxjb2x1bW46OX0sZW5kOntsaW5lOjUxLGNvbHVtbjo0N319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjQwLGNvbHVtbjo5fSxlbmQ6e2xpbmU6NTEsY29sdW1uOjQ3fX0se3N0YXJ0OntsaW5lOjQwLGNvbHVtbjo5fSxlbmQ6e2xpbmU6NTEsY29sdW1uOjQ3fX1dLGxpbmU6NDB9LDQ6e2xvYzp7c3RhcnQ6e2xpbmU6NDgsY29sdW1uOjEwfSxlbmQ6e2xpbmU6NDgsY29sdW1uOjc0fX0sdHlwZTpcImNvbmQtZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjQ4LGNvbHVtbjozNX0sZW5kOntsaW5lOjQ4LGNvbHVtbjo2OX19LHtzdGFydDp7bGluZTo0OCxjb2x1bW46NzJ9LGVuZDp7bGluZTo0OCxjb2x1bW46NzR9fV0sbGluZTo0OH0sNTp7bG9jOntzdGFydDp7bGluZTo2NCxjb2x1bW46Mn0sZW5kOntsaW5lOjY0LGNvbHVtbjo5MX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjY0LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NjQsY29sdW1uOjkxfX0se3N0YXJ0OntsaW5lOjY0LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NjQsY29sdW1uOjkxfX1dLGxpbmU6NjR9LDY6e2xvYzp7c3RhcnQ6e2xpbmU6NzEsY29sdW1uOjJ9LGVuZDp7bGluZTo3OSxjb2x1bW46M319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjcxLGNvbHVtbjoyfSxlbmQ6e2xpbmU6NzksY29sdW1uOjN9fSx7c3RhcnQ6e2xpbmU6NzEsY29sdW1uOjJ9LGVuZDp7bGluZTo3OSxjb2x1bW46M319XSxsaW5lOjcxfSw3Ontsb2M6e3N0YXJ0OntsaW5lOjcxLGNvbHVtbjo2fSxlbmQ6e2xpbmU6NzMsY29sdW1uOjEyMH19LHR5cGU6XCJiaW5hcnktZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjcxLGNvbHVtbjo2fSxlbmQ6e2xpbmU6NzEsY29sdW1uOjQwfX0se3N0YXJ0OntsaW5lOjcxLGNvbHVtbjo0NH0sZW5kOntsaW5lOjcxLGNvbHVtbjo2NH19LHtzdGFydDp7bGluZTo3Mixjb2x1bW46NX0sZW5kOntsaW5lOjcyLGNvbHVtbjo0Mn19LHtzdGFydDp7bGluZTo3Myxjb2x1bW46NX0sZW5kOntsaW5lOjczLGNvbHVtbjo0Mn19LHtzdGFydDp7bGluZTo3Myxjb2x1bW46NDZ9LGVuZDp7bGluZTo3Myxjb2x1bW46MTE4fX1dLGxpbmU6NzF9LDg6e2xvYzp7c3RhcnQ6e2xpbmU6NzMsY29sdW1uOjQ4fSxlbmQ6e2xpbmU6NzMsY29sdW1uOjExN319LHR5cGU6XCJiaW5hcnktZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjczLGNvbHVtbjo0OH0sZW5kOntsaW5lOjczLGNvbHVtbjo4Mn19LHtzdGFydDp7bGluZTo3Myxjb2x1bW46ODZ9LGVuZDp7bGluZTo3Myxjb2x1bW46MTE3fX1dLGxpbmU6NzN9LDk6e2xvYzp7c3RhcnQ6e2xpbmU6NzUsY29sdW1uOjR9LGVuZDp7bGluZTo3NSxjb2x1bW46MTA0fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NzUsY29sdW1uOjR9LGVuZDp7bGluZTo3NSxjb2x1bW46MTA0fX0se3N0YXJ0OntsaW5lOjc1LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NzUsY29sdW1uOjEwNH19XSxsaW5lOjc1fSwxMDp7bG9jOntzdGFydDp7bGluZTo4Myxjb2x1bW46Mn0sZW5kOntsaW5lOjgzLGNvbHVtbjoxMTJ9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo4Myxjb2x1bW46Mn0sZW5kOntsaW5lOjgzLGNvbHVtbjoxMTJ9fSx7c3RhcnQ6e2xpbmU6ODMsY29sdW1uOjJ9LGVuZDp7bGluZTo4Myxjb2x1bW46MTEyfX1dLGxpbmU6ODN9LDExOntsb2M6e3N0YXJ0OntsaW5lOjEwMCxjb2x1bW46Mn0sZW5kOntsaW5lOjEwMCxjb2x1bW46ODh9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxMDAsY29sdW1uOjJ9LGVuZDp7bGluZToxMDAsY29sdW1uOjg4fX0se3N0YXJ0OntsaW5lOjEwMCxjb2x1bW46Mn0sZW5kOntsaW5lOjEwMCxjb2x1bW46ODh9fV0sbGluZToxMDB9LDEyOntsb2M6e3N0YXJ0OntsaW5lOjEwMyxjb2x1bW46Mn0sZW5kOntsaW5lOjEwMyxjb2x1bW46MTEwfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTAzLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTAzLGNvbHVtbjoxMTB9fSx7c3RhcnQ6e2xpbmU6MTAzLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTAzLGNvbHVtbjoxMTB9fV0sbGluZToxMDN9LDEzOntsb2M6e3N0YXJ0OntsaW5lOjExMCxjb2x1bW46Mn0sZW5kOntsaW5lOjExNSxjb2x1bW46ODh9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxMTAsY29sdW1uOjJ9LGVuZDp7bGluZToxMTUsY29sdW1uOjg4fX0se3N0YXJ0OntsaW5lOjExMCxjb2x1bW46Mn0sZW5kOntsaW5lOjExNSxjb2x1bW46ODh9fV0sbGluZToxMTB9LDE0Ontsb2M6e3N0YXJ0OntsaW5lOjExMCxjb2x1bW46NX0sZW5kOntsaW5lOjExMCxjb2x1bW46NjZ9fSx0eXBlOlwiYmluYXJ5LWV4cHJcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxMTAsY29sdW1uOjV9LGVuZDp7bGluZToxMTAsY29sdW1uOjQyfX0se3N0YXJ0OntsaW5lOjExMCxjb2x1bW46NDZ9LGVuZDp7bGluZToxMTAsY29sdW1uOjY2fX1dLGxpbmU6MTEwfSwxNTp7bG9jOntzdGFydDp7bGluZToxMTUsY29sdW1uOjd9LGVuZDp7bGluZToxMTUsY29sdW1uOjg4fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTE1LGNvbHVtbjo3fSxlbmQ6e2xpbmU6MTE1LGNvbHVtbjo4OH19LHtzdGFydDp7bGluZToxMTUsY29sdW1uOjd9LGVuZDp7bGluZToxMTUsY29sdW1uOjg4fX1dLGxpbmU6MTE1fSwxNjp7bG9jOntzdGFydDp7bGluZToxMjksY29sdW1uOjJ9LGVuZDp7bGluZToxMjksY29sdW1uOjg1fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTI5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTI5LGNvbHVtbjo4NX19LHtzdGFydDp7bGluZToxMjksY29sdW1uOjJ9LGVuZDp7bGluZToxMjksY29sdW1uOjg1fX1dLGxpbmU6MTI5fSwxNzp7bG9jOntzdGFydDp7bGluZToxMzYsY29sdW1uOjJ9LGVuZDp7bGluZToxNDIsY29sdW1uOjQ3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTM2LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTQyLGNvbHVtbjo0N319LHtzdGFydDp7bGluZToxMzYsY29sdW1uOjJ9LGVuZDp7bGluZToxNDIsY29sdW1uOjQ3fX1dLGxpbmU6MTM2fSwxODp7bG9jOntzdGFydDp7bGluZToxNDksY29sdW1uOjJ9LGVuZDp7bGluZToxNDksY29sdW1uOjg1fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTQ5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTQ5LGNvbHVtbjo4NX19LHtzdGFydDp7bGluZToxNDksY29sdW1uOjJ9LGVuZDp7bGluZToxNDksY29sdW1uOjg1fX1dLGxpbmU6MTQ5fSwxOTp7bG9jOntzdGFydDp7bGluZToxNTUsY29sdW1uOjJ9LGVuZDp7bGluZToxNjEsY29sdW1uOjYzfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTU1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTYxLGNvbHVtbjo2M319LHtzdGFydDp7bGluZToxNTUsY29sdW1uOjJ9LGVuZDp7bGluZToxNjEsY29sdW1uOjYzfX1dLGxpbmU6MTU1fSwyMDp7bG9jOntzdGFydDp7bGluZToxNTUsY29sdW1uOjV9LGVuZDp7bGluZToxNTUsY29sdW1uOjYxfX0sdHlwZTpcImJpbmFyeS1leHByXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTU1LGNvbHVtbjo1fSxlbmQ6e2xpbmU6MTU1LGNvbHVtbjozN319LHtzdGFydDp7bGluZToxNTUsY29sdW1uOjQxfSxlbmQ6e2xpbmU6MTU1LGNvbHVtbjo2MX19XSxsaW5lOjE1NX0sMjE6e2xvYzp7c3RhcnQ6e2xpbmU6MTY5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTY5LGNvbHVtbjo3M319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE2OSxjb2x1bW46Mn0sZW5kOntsaW5lOjE2OSxjb2x1bW46NzN9fSx7c3RhcnQ6e2xpbmU6MTY5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTY5LGNvbHVtbjo3M319XSxsaW5lOjE2OX0sMjI6e2xvYzp7c3RhcnQ6e2xpbmU6MTcyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTc0LGNvbHVtbjo0OX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE3Mixjb2x1bW46Mn0sZW5kOntsaW5lOjE3NCxjb2x1bW46NDl9fSx7c3RhcnQ6e2xpbmU6MTcyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTc0LGNvbHVtbjo0OX19XSxsaW5lOjE3Mn0sMjM6e2xvYzp7c3RhcnQ6e2xpbmU6MTczLGNvbHVtbjo3fSxlbmQ6e2xpbmU6MTc0LGNvbHVtbjo0OX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE3Myxjb2x1bW46N30sZW5kOntsaW5lOjE3NCxjb2x1bW46NDl9fSx7c3RhcnQ6e2xpbmU6MTczLGNvbHVtbjo3fSxlbmQ6e2xpbmU6MTc0LGNvbHVtbjo0OX19XSxsaW5lOjE3M30sMjQ6e2xvYzp7c3RhcnQ6e2xpbmU6MTgwLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTgwLGNvbHVtbjo3Mn19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE4MCxjb2x1bW46Mn0sZW5kOntsaW5lOjE4MCxjb2x1bW46NzJ9fSx7c3RhcnQ6e2xpbmU6MTgwLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTgwLGNvbHVtbjo3Mn19XSxsaW5lOjE4MH0sMjU6e2xvYzp7c3RhcnQ6e2xpbmU6MTgzLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTg1LGNvbHVtbjo0OX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE4Myxjb2x1bW46Mn0sZW5kOntsaW5lOjE4NSxjb2x1bW46NDl9fSx7c3RhcnQ6e2xpbmU6MTgzLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTg1LGNvbHVtbjo0OX19XSxsaW5lOjE4M30sMjY6e2xvYzp7c3RhcnQ6e2xpbmU6MTg0LGNvbHVtbjo3fSxlbmQ6e2xpbmU6MTg1LGNvbHVtbjo0OX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE4NCxjb2x1bW46N30sZW5kOntsaW5lOjE4NSxjb2x1bW46NDl9fSx7c3RhcnQ6e2xpbmU6MTg0LGNvbHVtbjo3fSxlbmQ6e2xpbmU6MTg1LGNvbHVtbjo0OX19XSxsaW5lOjE4NH0sMjc6e2xvYzp7c3RhcnQ6e2xpbmU6MTkxLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTkxLGNvbHVtbjo2NH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE5MSxjb2x1bW46Mn0sZW5kOntsaW5lOjE5MSxjb2x1bW46NjR9fSx7c3RhcnQ6e2xpbmU6MTkxLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTkxLGNvbHVtbjo2NH19XSxsaW5lOjE5MX0sMjg6e2xvYzp7c3RhcnQ6e2xpbmU6MTk0LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTk2LGNvbHVtbjo0Nn19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE5NCxjb2x1bW46Mn0sZW5kOntsaW5lOjE5Nixjb2x1bW46NDZ9fSx7c3RhcnQ6e2xpbmU6MTk0LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTk2LGNvbHVtbjo0Nn19XSxsaW5lOjE5NH0sMjk6e2xvYzp7c3RhcnQ6e2xpbmU6MTk1LGNvbHVtbjo3fSxlbmQ6e2xpbmU6MTk2LGNvbHVtbjo0Nn19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE5NSxjb2x1bW46N30sZW5kOntsaW5lOjE5Nixjb2x1bW46NDZ9fSx7c3RhcnQ6e2xpbmU6MTk1LGNvbHVtbjo3fSxlbmQ6e2xpbmU6MTk2LGNvbHVtbjo0Nn19XSxsaW5lOjE5NX0sMzA6e2xvYzp7c3RhcnQ6e2xpbmU6MjAyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MjAyLGNvbHVtbjo3M319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjIwMixjb2x1bW46Mn0sZW5kOntsaW5lOjIwMixjb2x1bW46NzN9fSx7c3RhcnQ6e2xpbmU6MjAyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MjAyLGNvbHVtbjo3M319XSxsaW5lOjIwMn0sMzE6e2xvYzp7c3RhcnQ6e2xpbmU6MjA1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MjA3LGNvbHVtbjo0Nn19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjIwNSxjb2x1bW46Mn0sZW5kOntsaW5lOjIwNyxjb2x1bW46NDZ9fSx7c3RhcnQ6e2xpbmU6MjA1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MjA3LGNvbHVtbjo0Nn19XSxsaW5lOjIwNX0sMzI6e2xvYzp7c3RhcnQ6e2xpbmU6MjA2LGNvbHVtbjo3fSxlbmQ6e2xpbmU6MjA3LGNvbHVtbjo0Nn19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjIwNixjb2x1bW46N30sZW5kOntsaW5lOjIwNyxjb2x1bW46NDZ9fSx7c3RhcnQ6e2xpbmU6MjA2LGNvbHVtbjo3fSxlbmQ6e2xpbmU6MjA3LGNvbHVtbjo0Nn19XSxsaW5lOjIwNn19LHM6ezA6MCwxOjAsMjowLDM6MCw0OjAsNTowLDY6MCw3OjAsODowLDk6MCwxMDowLDExOjAsMTI6MCwxMzowLDE0OjAsMTU6MCwxNjowLDE3OjAsMTg6MCwxOTowLDIwOjAsMjE6MCwyMjowLDIzOjAsMjQ6MCwyNTowLDI2OjAsMjc6MCwyODowLDI5OjAsMzA6MCwzMTowLDMyOjAsMzM6MCwzNDowLDM1OjAsMzY6MCwzNzowLDM4OjAsMzk6MCw0MDowLDQxOjAsNDI6MCw0MzowLDQ0OjAsNDU6MCw0NjowLDQ3OjAsNDg6MCw0OTowLDUwOjAsNTE6MCw1MjowLDUzOjAsNTQ6MCw1NTowLDU2OjAsNTc6MCw1ODowLDU5OjAsNjA6MCw2MTowLDYyOjAsNjM6MCw2NDowLDY1OjAsNjY6MCw2NzowLDY4OjAsNjk6MCw3MDowLDcxOjAsNzI6MCw3MzowLDc0OjAsNzU6MCw3NjowLDc3OjAsNzg6MCw3OTowLDgwOjAsODE6MCw4MjowLDgzOjAsODQ6MCw4NTowLDg2OjAsODc6MCw4ODowfSxmOnswOjAsMTowLDI6MCwzOjAsNDowLDU6MCw2OjAsNzowLDg6MCw5OjAsMTA6MCwxMTowLDEyOjAsMTM6MCwxNDowfSxiOnswOlswLDBdLDE6WzAsMF0sMjpbMCwwXSwzOlswLDBdLDQ6WzAsMF0sNTpbMCwwXSw2OlswLDBdLDc6WzAsMCwwLDAsMF0sODpbMCwwXSw5OlswLDBdLDEwOlswLDBdLDExOlswLDBdLDEyOlswLDBdLDEzOlswLDBdLDE0OlswLDBdLDE1OlswLDBdLDE2OlswLDBdLDE3OlswLDBdLDE4OlswLDBdLDE5OlswLDBdLDIwOlswLDBdLDIxOlswLDBdLDIyOlswLDBdLDIzOlswLDBdLDI0OlswLDBdLDI1OlswLDBdLDI2OlswLDBdLDI3OlswLDBdLDI4OlswLDBdLDI5OlswLDBdLDMwOlswLDBdLDMxOlswLDBdLDMyOlswLDBdfSxfY292ZXJhZ2VTY2hlbWE6XCI0M2UyN2UxMzhlYmY5Y2ZjNTk2NmIwODJjZjlhMDI4MzAyZWQ0MTg0XCJ9LGk9dFtsXXx8KHRbbF09e30pO3JldHVybiBpW25dJiZpW25dLmhhc2g9PT1lP2lbbl06KG8uaGFzaD1lLGlbbl09byl9KCk7ZnVuY3Rpb24gS24obil7cmV0dXJuIFNuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBTbigpe3JldHVybihTbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlKXt2YXIgdDtyZXR1cm4gby5hLndyYXAoZnVuY3Rpb24obil7Zm9yKDs7KXN3aXRjaChuLnByZXY9bi5uZXh0KXtjYXNlIDA6cmV0dXJuIEFuLmZbMF0rKyxBbi5zWzBdKyssbi5uZXh0PTQseG4oZSk7Y2FzZSA0OmlmKHQ9bi5zZW50LEFuLnNbMV0rKyxcInNlc3Npb25cIiE9PWUua2V5UGFyYW1zLnR5cGUpe24ubmV4dD0xMjticmVha31yZXR1cm4gQW4uYlswXVswXSsrLEFuLnNbMl0rKyxuLmFicnVwdChcInJldHVyblwiLHQpO2Nhc2UgMTI6aWYoQW4uYlswXVsxXSsrLEFuLnNbM10rKyxcIm9wZW5wZ3BcIiE9PWUuc3VpdGUpe24ubmV4dD0yMDticmVha31yZXR1cm4gQW4uYlsxXVswXSsrLEFuLnNbNF0rKyxuLmFicnVwdChcInJldHVyblwiLHtwdWJsaWNLZXk6e2tleVN0cmluZzp0LnB1YmxpY0tleS5hcm1vcigpLGtleUlkczp0LmtleUlkc30scHJpdmF0ZUtleTpPYmplY3QuYXNzaWduKHtrZXlTdHJpbmc6dC5wcml2YXRlS2V5LmFybW9yKCksa2V5SWRzOnQua2V5SWRzfSxlLnBhc3NwaHJhc2U/KEFuLmJbMl1bMF0rKyx7cGFzc3BocmFzZTplLnBhc3NwaHJhc2V9KTooQW4uYlsyXVsxXSsrLHt9KSl9KTtjYXNlIDIwOmlmKEFuLmJbMV1bMV0rKyxBbi5zWzVdKyssXCJqc2N1XCIhPT1lLnN1aXRlKXtuLm5leHQ9NDE7YnJlYWt9cmV0dXJuIEFuLmJbM11bMF0rKyxBbi5zWzZdKyssbi5uZXh0PTI3LHQucHVibGljS2V5LmV4cG9ydChcInBlbVwiLHtvdXRwdXRQdWJsaWM6ITB9KTtjYXNlIDI3OnJldHVybiBuLnQwPW4uc2VudCxuLnQxPXQua2V5SWRzLG4udDI9e2tleVN0cmluZzpuLnQwLGtleUlkczpuLnQxfSxuLnQzPU9iamVjdCxuLm5leHQ9MzMsdC5wcml2YXRlS2V5LmV4cG9ydChcInBlbVwiKTtjYXNlIDMzOnJldHVybiBuLnQ0PW4uc2VudCxuLnQ1PXQua2V5SWRzLG4udDY9e2tleVN0cmluZzpuLnQ0LGtleUlkczpuLnQ1fSxuLnQ3PWUucGFzc3BocmFzZT8oQW4uYls0XVswXSsrLHtwYXNzcGhyYXNlOmUucGFzc3BocmFzZX0pOihBbi5iWzRdWzFdKysse30pLG4udDg9bi50My5hc3NpZ24uY2FsbChuLnQzLG4udDYsbi50Nyksbi5hYnJ1cHQoXCJyZXR1cm5cIix7cHVibGljS2V5Om4udDIscHJpdmF0ZUtleTpuLnQ4fSk7Y2FzZSA0MTp0aHJvdyBBbi5iWzNdWzFdKyssQW4uc1s3XSsrLG5ldyBFcnJvcihcIkludmFsaWRDcnlwdG9TdWl0ZVwiKTtjYXNlIDQ0OmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBVbihuKXtyZXR1cm4gUG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIFBuKCl7cmV0dXJuKFBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKGUpe3ZhciB0LGwsaSxyLGMsdTtyZXR1cm4gby5hLndyYXAoZnVuY3Rpb24obil7Zm9yKDs7KXN3aXRjaChuLnByZXY9bi5uZXh0KXtjYXNlIDA6aWYodD1lLm1lc3NhZ2UsbD1lLmtleXMsaT1lLmNvbmZpZyxBbi5mWzFdKyssQW4uc1s4XSsrLHZvaWQgMCE9PWkuZW5jcnlwdCl7bi5uZXh0PTk7YnJlYWt9dGhyb3cgQW4uYls1XVswXSsrLEFuLnNbOV0rKyxuZXcgRXJyb3IoXCJJbnZhbGlkQ29uZmlnRm9yRW5jcnlwdGlvblwiKTtjYXNlIDk6QW4uYls1XVsxXSsrO2Nhc2UgMTA6aWYoQW4uc1sxMF0rKyxyPUVuKHQpLEFuLnNbMTFdKyssYz17fSxBbi5zWzEyXSsrLEFuLmJbN11bMF0rKyx2b2lkIDA9PT1pLnNpZ258fChBbi5iWzddWzFdKyssIWkuc2lnbi5yZXF1aXJlZCl8fChBbi5iWzddWzJdKyssdm9pZCAwIT09aS5lbmNyeXB0JiYoQW4uYls3XVszXSsrLHZvaWQgMD09PWkuZW5jcnlwdHx8KEFuLmJbN11bNF0rKyxBbi5iWzhdWzBdKyssXCJvcGVucGdwXCI9PT1pLmVuY3J5cHQuc3VpdGUmJihBbi5iWzhdWzFdKyssXCJvcGVucGdwXCI9PT1pLnNpZ24uc3VpdGUpKSkpKXtuLm5leHQ9Mjk7YnJlYWt9aWYoQW4uYls2XVswXSsrLEFuLnNbMTNdKyssbC5zdWl0ZS5zaWduX3ZlcmlmeT09PWkuc2lnbi5zdWl0ZSl7bi5uZXh0PTIyO2JyZWFrfXRocm93IEFuLmJbOV1bMF0rKyxBbi5zWzE0XSsrLG5ldyBFcnJvcihcIlVubWF0Y2hlZEtleVR5cGVUb1NpZ25pbmdTdWl0ZVwiKTtjYXNlIDIyOkFuLmJbOV1bMV0rKztjYXNlIDIzOnJldHVybiBBbi5zWzE1XSsrLG4ubmV4dD0yNixGbih7bWVzc2FnZTpyLGtleXM6bCxvcHRpb25zOmkuc2lnbi5vcHRpb25zfSkuY2F0Y2goZnVuY3Rpb24obil7dGhyb3cgQW4uZlsyXSsrLEFuLnNbMTZdKyssbmV3IEVycm9yKFwiU2lnbmluZ0ZhaWxlZDogXCIuY29uY2F0KG4ubWVzc2FnZSkpfSk7Y2FzZSAyNjpjPW4uc2VudCxuLm5leHQ9MzA7YnJlYWs7Y2FzZSAyOTpBbi5iWzZdWzFdKys7Y2FzZSAzMDppZihBbi5zWzE3XSsrLGwuc3VpdGUuZW5jcnlwdF9kZWNyeXB0PT09aS5lbmNyeXB0LnN1aXRlKXtuLm5leHQ9Mzc7YnJlYWt9dGhyb3cgQW4uYlsxMF1bMF0rKyxBbi5zWzE4XSsrLG5ldyBFcnJvcihcIlVubWF0Y2hlZEtleVR5cGVUb0VuY3J5cHRpb25TdWl0ZVwiKTtjYXNlIDM3OkFuLmJbMTBdWzFdKys7Y2FzZSAzODpyZXR1cm4gQW4uc1sxOV0rKyxuLm5leHQ9NDEsUm4oe21lc3NhZ2U6cixrZXlzOmwsb3B0aW9uczppLmVuY3J5cHQub3B0aW9uc30pLmNhdGNoKGZ1bmN0aW9uKG4pe3Rocm93IEFuLmZbM10rKyxBbi5zWzIwXSsrLG5ldyBFcnJvcihcIkVuY3J5cHRpb25GYWlsZWQ6IFwiLmNvbmNhdChuLm1lc3NhZ2UpKX0pO2Nhc2UgNDE6cmV0dXJuIHU9bi5zZW50LEFuLnNbMjFdKyssbi5hYnJ1cHQoXCJyZXR1cm5cIixPYmplY3QuYXNzaWduKHUsYykpO2Nhc2UgNDQ6Y2FzZVwiZW5kXCI6cmV0dXJuIG4uc3RvcCgpfX0sbix0aGlzKX0pKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIEluKG4pe3JldHVybiBPbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gT24oKXtyZXR1cm4oT249cigpKG8uYS5tYXJrKGZ1bmN0aW9uIG4oZSl7dmFyIHQsbCxpLHI7cmV0dXJuIG8uYS53cmFwKGZ1bmN0aW9uKG4pe2Zvcig7Oylzd2l0Y2gobi5wcmV2PW4ubmV4dCl7Y2FzZSAwOmlmKHQ9ZS5kYXRhLGw9ZS5rZXlzLEFuLmZbNF0rKyxBbi5zWzIyXSsrLHZvaWQgMCE9PXQubWVzc2FnZSl7bi5uZXh0PTk7YnJlYWt9dGhyb3cgQW4uYlsxMV1bMF0rKyxBbi5zWzIzXSsrLG5ldyBFcnJvcihcIkludmFsaWRFbmNyeXB0ZWREYXRhRm9ybWF0XCIpO2Nhc2UgOTpBbi5iWzExXVsxXSsrO2Nhc2UgMTA6aWYoQW4uc1syNF0rKyxsLnN1aXRlLmVuY3J5cHRfZGVjcnlwdD09PXQubWVzc2FnZS5zdWl0ZSl7bi5uZXh0PTE3O2JyZWFrfXRocm93IEFuLmJbMTJdWzBdKyssQW4uc1syNV0rKyxuZXcgRXJyb3IoXCJVbm1hdGNoZWRLZXlUeXBlVG9FbmNyeXB0aW9uU3VpdGVcIik7Y2FzZSAxNzpBbi5iWzEyXVsxXSsrO2Nhc2UgMTg6cmV0dXJuIEFuLnNbMjZdKyssbi5uZXh0PTIxLExuKHtlbmNyeXB0ZWQ6dCxrZXlzOmwsb3B0aW9uczp0Lm1lc3NhZ2Uub3B0aW9uc30pLmNhdGNoKGZ1bmN0aW9uKG4pe3Rocm93IEFuLmZbNV0rKyxBbi5zWzI3XSsrLGNvbnNvbGUuZXJyb3IobiksQW4uc1syOF0rKyxuZXcgRXJyb3IoXCJEZWNyeXB0aW9uRmFpbGVkOiBcIi5jb25jYXQobi5tZXNzYWdlKSl9KTtjYXNlIDIxOmlmKGk9bi5zZW50LEFuLnNbMjldKysscj17fSxBbi5zWzMwXSsrLEFuLmJbMTRdWzBdKyssdm9pZCAwPT09dC5zaWduYXR1cmV8fChBbi5iWzE0XVsxXSsrLCFsLmtleXMucHVibGljS2V5cykpe24ubmV4dD0zMjticmVha31yZXR1cm4gQW4uYlsxM11bMF0rKyxBbi5zWzMxXSsrLG4ubmV4dD0yOSxDbih7bWVzc2FnZTpFbihpLmRhdGEpLHNpZ25hdHVyZTp0LnNpZ25hdHVyZSxrZXlzOmwsb3B0aW9uczp0LnNpZ25hdHVyZS5vcHRpb25zfSkuY2F0Y2goZnVuY3Rpb24obil7dGhyb3cgQW4uZls2XSsrLEFuLnNbMzJdKyssbmV3IEVycm9yKFwiVmVyaWZpY2F0aW9uRmFpbGVkOiBcIi5jb25jYXQobi5tZXNzYWdlKSl9KTtjYXNlIDI5OnI9bi5zZW50LG4ubmV4dD0zNTticmVhaztjYXNlIDMyOkFuLmJbMTNdWzFdKyssQW4uc1szM10rKyx2b2lkIDAhPT1pLnNpZ25hdHVyZXM/KEFuLmJbMTVdWzBdKyssQW4uc1szNF0rKyxyPWkuc2lnbmF0dXJlcyk6QW4uYlsxNV1bMV0rKztjYXNlIDM1OnJldHVybiBBbi5zWzM1XSsrLG4uYWJydXB0KFwicmV0dXJuXCIse2RhdGE6aS5kYXRhLHNpZ25hdHVyZXM6cn0pO2Nhc2UgMzc6Y2FzZVwiZW5kXCI6cmV0dXJuIG4uc3RvcCgpfX0sbix0aGlzKX0pKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIEJuKG4pe3JldHVybiBNbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gTW4oKXtyZXR1cm4oTW49cigpKG8uYS5tYXJrKGZ1bmN0aW9uIG4oZSl7dmFyIHQsbCxpLHIsYztyZXR1cm4gby5hLndyYXAoZnVuY3Rpb24obil7Zm9yKDs7KXN3aXRjaChuLnByZXY9bi5uZXh0KXtjYXNlIDA6aWYodD1lLm1lc3NhZ2UsbD1lLmtleXMsaT1lLmNvbmZpZyxBbi5mWzddKyssQW4uc1szNl0rKyx2b2lkIDAhPT1pLnNpZ24pe24ubmV4dD05O2JyZWFrfXRocm93IEFuLmJbMTZdWzBdKyssQW4uc1szN10rKyxuZXcgRXJyb3IoXCJJbnZhbGlkQ29uZmlnRm9yU2lnbmluZ1wiKTtjYXNlIDk6QW4uYlsxNl1bMV0rKztjYXNlIDEwOmlmKEFuLnNbMzhdKysscj1Fbih0KSxBbi5zWzM5XSsrLCFsLmtleXMucHJpdmF0ZUtleXMpe24ubmV4dD0yMDticmVha31yZXR1cm4gQW4uYlsxN11bMF0rKyxBbi5zWzQwXSsrLG4ubmV4dD0xNyxGbih7bWVzc2FnZTpyLGtleXM6bCxvcHRpb25zOmkuc2lnbi5vcHRpb25zLG91dHB1dDp7c2lnbjppLnNpZ24ub3V0cHV0fX0pLmNhdGNoKGZ1bmN0aW9uKG4pe3Rocm93IEFuLmZbOF0rKyxBbi5zWzQxXSsrLG5ldyBFcnJvcihcIlNpZ25pbmdGYWlsZWQ6IFwiLmNvbmNhdChuLm1lc3NhZ2UpKX0pO2Nhc2UgMTc6Yz1uLnNlbnQsbi5uZXh0PTIzO2JyZWFrO2Nhc2UgMjA6dGhyb3cgQW4uYlsxN11bMV0rKyxBbi5zWzQyXSsrLG5ldyBFcnJvcihcIkludmFsaWRQcml2YXRlS2V5c1wiKTtjYXNlIDIzOnJldHVybiBBbi5zWzQzXSsrLG4uYWJydXB0KFwicmV0dXJuXCIsYyk7Y2FzZSAyNTpjYXNlXCJlbmRcIjpyZXR1cm4gbi5zdG9wKCl9fSxuLHRoaXMpfSkpKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gVG4obil7cmV0dXJuIE5uLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBObigpe3JldHVybihObj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlKXt2YXIgdCxsLGkscixjO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDppZih0PWUubWVzc2FnZSxsPWUuc2lnbmF0dXJlLGk9ZS5rZXlzLEFuLmZbOV0rKyxBbi5zWzQ0XSsrLHZvaWQgMCE9PWwpe24ubmV4dD05O2JyZWFrfXRocm93IEFuLmJbMThdWzBdKyssQW4uc1s0NV0rKyxuZXcgRXJyb3IoXCJJbnZhbGlkT2JqZWN0Rm9yU2lnbmF0dXJlXCIpO2Nhc2UgOTpBbi5iWzE4XVsxXSsrO2Nhc2UgMTA6aWYoQW4uc1s0Nl0rKyxyPUVuKHQpLEFuLnNbNDddKyssYz17fSxBbi5zWzQ4XSsrLEFuLmJbMjBdWzBdKyssdm9pZCAwPT09bHx8KEFuLmJbMjBdWzFdKyssIWkua2V5cy5wdWJsaWNLZXlzKSl7bi5uZXh0PTIxO2JyZWFrfXJldHVybiBBbi5iWzE5XVswXSsrLEFuLnNbNDldKyssbi5uZXh0PTE4LENuKHttZXNzYWdlOnIsc2lnbmF0dXJlOmwsa2V5czppLG9wdGlvbnM6bC5vcHRpb25zfSkuY2F0Y2goZnVuY3Rpb24obil7dGhyb3cgQW4uZlsxMF0rKyxBbi5zWzUwXSsrLG5ldyBFcnJvcihcIlZlcmlmaWNhdGlvbkZhaWxlZDogXCIuY29uY2F0KG4ubWVzc2FnZSkpfSk7Y2FzZSAxODpjPW4uc2VudCxuLm5leHQ9MjQ7YnJlYWs7Y2FzZSAyMTp0aHJvdyBBbi5iWzE5XVsxXSsrLEFuLnNbNTFdKyssbmV3IEVycm9yKFwiSW52YWxpZFNpZ25hdHVyZU9ySW52YWxpZFB1YmxpY0tleVwiKTtjYXNlIDI0OnJldHVybiBBbi5zWzUyXSsrLG4uYWJydXB0KFwicmV0dXJuXCIsYyk7Y2FzZSAyNjpjYXNlXCJlbmRcIjpyZXR1cm4gbi5zdG9wKCl9fSxuLHRoaXMpfSkpKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9QW4uc1s1M10rKzt2YXIgUm49ZnVuY3Rpb24oKXt2YXIgbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlKXt2YXIgdCxsLGkscjtyZXR1cm4gby5hLndyYXAoZnVuY3Rpb24obil7Zm9yKDs7KXN3aXRjaChuLnByZXY9bi5uZXh0KXtjYXNlIDA6aWYodD1lLm1lc3NhZ2UsbD1lLmtleXMsaT1lLm9wdGlvbnMsQW4uZlsxMV0rKyxBbi5zWzU0XSsrLGwuY2FuRW5jcnlwdCgpKXtuLm5leHQ9OTticmVha310aHJvdyBBbi5iWzIxXVswXSsrLEFuLnNbNTVdKyssbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWRLZXlGb3JFbmNyeXB0aW9uXCIpO2Nhc2UgOTpBbi5iWzIxXVsxXSsrO2Nhc2UgMTA6aWYoQW4uc1s1Nl0rKyxcImpzY3VcIiE9PWwuc3VpdGUuZW5jcnlwdF9kZWNyeXB0KXtuLm5leHQ9MTc7YnJlYWt9QW4uYlsyMl1bMF0rKyxBbi5zWzU3XSsrLHI9YW4sbi5uZXh0PTI4O2JyZWFrO2Nhc2UgMTc6aWYoQW4uYlsyMl1bMV0rKyxBbi5zWzU4XSsrLFwib3BlbnBncFwiIT09bC5zdWl0ZS5lbmNyeXB0X2RlY3J5cHQpe24ubmV4dD0yNTticmVha31Bbi5iWzIzXVswXSsrLEFuLnNbNTldKysscj1kbixuLm5leHQ9Mjg7YnJlYWs7Y2FzZSAyNTp0aHJvdyBBbi5iWzIzXVsxXSsrLEFuLnNbNjBdKyssbmV3IEVycm9yKFwiVW5rbm93bkVuY3J5cHRpb25TdWl0ZVwiKTtjYXNlIDI4OnJldHVybiBBbi5zWzYxXSsrLG4uYWJydXB0KFwicmV0dXJuXCIsci5lbmNyeXB0KHttZXNzYWdlOnQsa2V5czpsLmtleXMsb3B0aW9uczppfSkpO2Nhc2UgMzA6Y2FzZVwiZW5kXCI6cmV0dXJuIG4uc3RvcCgpfX0sbix0aGlzKX0pKTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKTtBbi5zWzYyXSsrO3ZhciBMbj1mdW5jdGlvbigpe3ZhciBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKGUpe3ZhciB0LGwsaSxyO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDppZih0PWUuZW5jcnlwdGVkLGw9ZS5rZXlzLGk9ZS5vcHRpb25zLEFuLmZbMTJdKyssQW4uc1s2M10rKyxsLmNhbkRlY3J5cHQoKSl7bi5uZXh0PTk7YnJlYWt9dGhyb3cgQW4uYlsyNF1bMF0rKyxBbi5zWzY0XSsrLG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkS2V5Rm9yRGVjcnlwdGlvblwiKTtjYXNlIDk6QW4uYlsyNF1bMV0rKztjYXNlIDEwOmlmKEFuLnNbNjVdKyssXCJqc2N1XCIhPT1sLnN1aXRlLmVuY3J5cHRfZGVjcnlwdCl7bi5uZXh0PTE3O2JyZWFrfUFuLmJbMjVdWzBdKyssQW4uc1s2Nl0rKyxyPWFuLG4ubmV4dD0yODticmVhaztjYXNlIDE3OmlmKEFuLmJbMjVdWzFdKyssQW4uc1s2N10rKyxcIm9wZW5wZ3BcIiE9PWwuc3VpdGUuZW5jcnlwdF9kZWNyeXB0KXtuLm5leHQ9MjU7YnJlYWt9QW4uYlsyNl1bMF0rKyxBbi5zWzY4XSsrLHI9ZG4sbi5uZXh0PTI4O2JyZWFrO2Nhc2UgMjU6dGhyb3cgQW4uYlsyNl1bMV0rKyxBbi5zWzY5XSsrLG5ldyBFcnJvcihcIlVua25vd25EZWNyeXB0aW9uU3VpdGVcIik7Y2FzZSAyODpyZXR1cm4gQW4uc1s3MF0rKyxuLmFicnVwdChcInJldHVyblwiLHIuZGVjcnlwdCh7ZW5jcnlwdGVkOnQsa2V5czpsLmtleXMsb3B0aW9uczppfSkpO2Nhc2UgMzA6Y2FzZVwiZW5kXCI6cmV0dXJuIG4uc3RvcCgpfX0sbix0aGlzKX0pKTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKTtBbi5zWzcxXSsrO3ZhciBGbj1mdW5jdGlvbigpe3ZhciBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKGUpe3ZhciB0LGwsaSxyO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDppZih0PWUubWVzc2FnZSxsPWUua2V5cyxpPWUub3B0aW9ucyxBbi5mWzEzXSsrLEFuLnNbNzJdKyssbC5jYW5TaWduKCkpe24ubmV4dD05O2JyZWFrfXRocm93IEFuLmJbMjddWzBdKyssQW4uc1s3M10rKyxuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZEtleUZvclNpZ25cIik7Y2FzZSA5OkFuLmJbMjddWzFdKys7Y2FzZSAxMDppZihBbi5zWzc0XSsrLFwianNjdVwiIT09bC5zdWl0ZS5zaWduX3ZlcmlmeSl7bi5uZXh0PTE3O2JyZWFrfUFuLmJbMjhdWzBdKyssQW4uc1s3NV0rKyxyPWFuLG4ubmV4dD0yODticmVhaztjYXNlIDE3OmlmKEFuLmJbMjhdWzFdKyssQW4uc1s3Nl0rKyxcIm9wZW5wZ3BcIiE9PWwuc3VpdGUuc2lnbl92ZXJpZnkpe24ubmV4dD0yNTticmVha31Bbi5iWzI5XVswXSsrLEFuLnNbNzddKysscj1kbixuLm5leHQ9Mjg7YnJlYWs7Y2FzZSAyNTp0aHJvdyBBbi5iWzI5XVsxXSsrLEFuLnNbNzhdKyssbmV3IEVycm9yKFwiVW5rbm93blNpZ25pbmdTdWl0ZVwiKTtjYXNlIDI4OnJldHVybiBBbi5zWzc5XSsrLG4uYWJydXB0KFwicmV0dXJuXCIsci5zaWduKHttZXNzYWdlOnQsa2V5czpsLmtleXMsb3B0aW9uczppfSkpO2Nhc2UgMzA6Y2FzZVwiZW5kXCI6cmV0dXJuIG4uc3RvcCgpfX0sbix0aGlzKX0pKTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKTtBbi5zWzgwXSsrO3ZhciBDbj1mdW5jdGlvbigpe3ZhciBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKGUpe3ZhciB0LGwsaSxyLGM7cmV0dXJuIG8uYS53cmFwKGZ1bmN0aW9uKG4pe2Zvcig7Oylzd2l0Y2gobi5wcmV2PW4ubmV4dCl7Y2FzZSAwOmlmKHQ9ZS5tZXNzYWdlLGw9ZS5zaWduYXR1cmUsaT1lLmtleXMscj1lLm9wdGlvbnMsQW4uZlsxNF0rKyxBbi5zWzgxXSsrLGkuY2FuVmVyaWZ5KCkpe24ubmV4dD05O2JyZWFrfXRocm93IEFuLmJbMzBdWzBdKyssQW4uc1s4Ml0rKyxuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZEtleUZvclZlcmlmaWNhdGlvblwiKTtjYXNlIDk6QW4uYlszMF1bMV0rKztjYXNlIDEwOmlmKEFuLnNbODNdKyssXCJqc2N1XCIhPT1pLnN1aXRlLnNpZ25fdmVyaWZ5KXtuLm5leHQ9MTc7YnJlYWt9QW4uYlszMV1bMF0rKyxBbi5zWzg0XSsrLGM9YW4sbi5uZXh0PTI4O2JyZWFrO2Nhc2UgMTc6aWYoQW4uYlszMV1bMV0rKyxBbi5zWzg1XSsrLFwib3BlbnBncFwiIT09aS5zdWl0ZS5zaWduX3ZlcmlmeSl7bi5uZXh0PTI1O2JyZWFrfUFuLmJbMzJdWzBdKyssQW4uc1s4Nl0rKyxjPWRuLG4ubmV4dD0yODticmVhaztjYXNlIDI1OnRocm93IEFuLmJbMzJdWzFdKyssQW4uc1s4N10rKyxuZXcgRXJyb3IoXCJVbmtub3duU2lnbmluZ1N1aXRlXCIpO2Nhc2UgMjg6cmV0dXJuIEFuLnNbODhdKyssbi5hYnJ1cHQoXCJyZXR1cm5cIixjLnZlcmlmeSh7bWVzc2FnZTp0LHNpZ25hdHVyZTpsLGtleXM6aS5rZXlzLG9wdGlvbnM6cn0pKTtjYXNlIDMwOmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCksRG49ZnVuY3Rpb24oKXt2YXIgbj1cIi9Vc2Vycy9qdW4vUHJvamVjdEphdmFTY3JpcHQvY2FzY2FkZS9zcmMvY2FzY2FkZWRfZGF0YS5qc1wiLGU9XCJiNzRjYzk0MDcwZWQxZWZhMWVkMmMzYmI0NTZkNWFkOWViN2EwMmFiXCIsdD1uZXcoMCxmdW5jdGlvbigpe30uY29uc3RydWN0b3IpKFwicmV0dXJuIHRoaXNcIikoKSxsPVwiX19jb3ZlcmFnZV9fXCIsbz17cGF0aDpcIi9Vc2Vycy9qdW4vUHJvamVjdEphdmFTY3JpcHQvY2FzY2FkZS9zcmMvY2FzY2FkZWRfZGF0YS5qc1wiLHN0YXRlbWVudE1hcDp7MDp7c3RhcnQ6e2xpbmU6MTAsY29sdW1uOjJ9LGVuZDp7bGluZToxMCxjb2x1bW46OTB9fSwxOntzdGFydDp7bGluZToxMCxjb2x1bW46NDN9LGVuZDp7bGluZToxMCxjb2x1bW46OTB9fSwyOntzdGFydDp7bGluZToxMixjb2x1bW46Mn0sZW5kOntsaW5lOjE0LGNvbHVtbjo3OX19LDM6e3N0YXJ0OntsaW5lOjEzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTMsY29sdW1uOjM3fX0sNDp7c3RhcnQ6e2xpbmU6MTQsY29sdW1uOjE2fSxlbmQ6e2xpbmU6MTQsY29sdW1uOjc3fX0sNTp7c3RhcnQ6e2xpbmU6MTYsY29sdW1uOjJ9LGVuZDp7bGluZToxNixjb2x1bW46NzB9fSw2OntzdGFydDp7bGluZToxNixjb2x1bW46MzF9LGVuZDp7bGluZToxNixjb2x1bW46NzB9fSw3OntzdGFydDp7bGluZToxOCxjb2x1bW46Mjd9LGVuZDp7bGluZToyMyxjb2x1bW46NH19LDg6e3N0YXJ0OntsaW5lOjE5LGNvbHVtbjoyNX0sZW5kOntsaW5lOjE5LGNvbHVtbjoyN319LDk6e3N0YXJ0OntsaW5lOjIwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjAsY29sdW1uOjEwMX19LDEwOntzdGFydDp7bGluZToyMCxjb2x1bW46NDN9LGVuZDp7bGluZToyMCxjb2x1bW46MTAxfX0sMTE6e3N0YXJ0OntsaW5lOjIxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjEsY29sdW1uOjEwN319LDEyOntzdGFydDp7bGluZToyMSxjb2x1bW46NDV9LGVuZDp7bGluZToyMSxjb2x1bW46MTA3fX0sMTM6e3N0YXJ0OntsaW5lOjIyLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjIsY29sdW1uOjI0fX0sMTQ6e3N0YXJ0OntsaW5lOjI1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MjUsY29sdW1uOjQ2fX0sMTU6e3N0YXJ0OntsaW5lOjMwLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzAsY29sdW1uOjc1fX0sMTY6e3N0YXJ0OntsaW5lOjMwLGNvbHVtbjozMn0sZW5kOntsaW5lOjMwLGNvbHVtbjo3NX19LDE3OntzdGFydDp7bGluZTozMSxjb2x1bW46Mn0sZW5kOntsaW5lOjM1LGNvbHVtbjo1fX0sMTg6e3N0YXJ0OntsaW5lOjMyLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MzIsY29sdW1uOjEzMn19LDE5OntzdGFydDp7bGluZTozMixjb2x1bW46ODl9LGVuZDp7bGluZTozMixjb2x1bW46MTMyfX0sMjA6e3N0YXJ0OntsaW5lOjMzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MzMsY29sdW1uOjEyMn19LDIxOntzdGFydDp7bGluZTozMyxjb2x1bW46ODZ9LGVuZDp7bGluZTozMyxjb2x1bW46MTIyfX0sMjI6e3N0YXJ0OntsaW5lOjM0LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MzQsY29sdW1uOjEzM319LDIzOntzdGFydDp7bGluZTozNCxjb2x1bW46ODN9LGVuZDp7bGluZTozNCxjb2x1bW46MTMzfX0sMjQ6e3N0YXJ0OntsaW5lOjM3LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzcsY29sdW1uOjMyfX0sMjU6e3N0YXJ0OntsaW5lOjQyLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NDIsY29sdW1uOjEyfX0sMjY6e3N0YXJ0OntsaW5lOjQzLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NDMsY29sdW1uOjIzfX0sMjc6e3N0YXJ0OntsaW5lOjQ3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NDcsY29sdW1uOjgzfX0sMjg6e3N0YXJ0OntsaW5lOjQ3LGNvbHVtbjo0MX0sZW5kOntsaW5lOjQ3LGNvbHVtbjo4M319LDI5OntzdGFydDp7bGluZTo0OCxjb2x1bW46NH0sZW5kOntsaW5lOjQ4LGNvbHVtbjo5NX19LDMwOntzdGFydDp7bGluZTo0OCxjb2x1bW46NTB9LGVuZDp7bGluZTo0OCxjb2x1bW46OTV9fSwzMTp7c3RhcnQ6e2xpbmU6NTAsY29sdW1uOjR9LGVuZDp7bGluZTo1MCxjb2x1bW46Mzl9fSwzMjp7c3RhcnQ6e2xpbmU6NTQsY29sdW1uOjR9LGVuZDp7bGluZTo1NCxjb2x1bW46ODN9fSwzMzp7c3RhcnQ6e2xpbmU6NTQsY29sdW1uOjQxfSxlbmQ6e2xpbmU6NTQsY29sdW1uOjgzfX0sMzQ6e3N0YXJ0OntsaW5lOjU1LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NTUsY29sdW1uOjg1fX0sMzU6e3N0YXJ0OntsaW5lOjU1LGNvbHVtbjozN30sZW5kOntsaW5lOjU1LGNvbHVtbjo4NX19LDM2OntzdGFydDp7bGluZTo1Nixjb2x1bW46NH0sZW5kOntsaW5lOjU2LGNvbHVtbjo3OH19LDM3OntzdGFydDp7bGluZTo1Nixjb2x1bW46Mzh9LGVuZDp7bGluZTo1Nixjb2x1bW46Nzh9fSwzODp7c3RhcnQ6e2xpbmU6NTgsY29sdW1uOjR9LGVuZDp7bGluZTo1OCxjb2x1bW46Mzh9fSwzOTp7c3RhcnQ6e2xpbmU6NjIsY29sdW1uOjMyfSxlbmQ6e2xpbmU6NjcsY29sdW1uOjZ9fSw0MDp7c3RhcnQ6e2xpbmU6NjMsY29sdW1uOjI3fSxlbmQ6e2xpbmU6NjMsY29sdW1uOjI5fX0sNDE6e3N0YXJ0OntsaW5lOjY0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NjQsY29sdW1uOjkzfX0sNDI6e3N0YXJ0OntsaW5lOjY0LGNvbHVtbjo0Nn0sZW5kOntsaW5lOjY0LGNvbHVtbjo5M319LDQzOntzdGFydDp7bGluZTo2NSxjb2x1bW46Nn0sZW5kOntsaW5lOjY1LGNvbHVtbjo5OX19LDQ0OntzdGFydDp7bGluZTo2NSxjb2x1bW46NDh9LGVuZDp7bGluZTo2NSxjb2x1bW46OTl9fSw0NTp7c3RhcnQ6e2xpbmU6NjYsY29sdW1uOjZ9LGVuZDp7bGluZTo2Nixjb2x1bW46MjZ9fSw0Njp7c3RhcnQ6e2xpbmU6NjgsY29sdW1uOjI0fSxlbmQ6e2xpbmU6NjgsY29sdW1uOjU5fX0sNDc6e3N0YXJ0OntsaW5lOjY5LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NjksY29sdW1uOjM5fX0sNDg6e3N0YXJ0OntsaW5lOjcyLGNvbHVtbjoxNH0sZW5kOntsaW5lOjcyLGNvbHVtbjozOH19LDQ5OntzdGFydDp7bGluZTo3NCxjb2x1bW46MTh9LGVuZDp7bGluZTo3NCxjb2x1bW46NTZ9fX0sZm5NYXA6ezA6e25hbWU6XCJpbXBvcnRDYXNjYWRlZEJ1ZmZlclwiLGRlY2w6e3N0YXJ0OntsaW5lOjksY29sdW1uOjE2fSxlbmQ6e2xpbmU6OSxjb2x1bW46MzZ9fSxsb2M6e3N0YXJ0OntsaW5lOjksY29sdW1uOjQ4fSxlbmQ6e2xpbmU6MjYsY29sdW1uOjF9fSxsaW5lOjl9LDE6e25hbWU6XCIoYW5vbnltb3VzXzEpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTgsY29sdW1uOjM2fSxlbmQ6e2xpbmU6MTgsY29sdW1uOjM3fX0sbG9jOntzdGFydDp7bGluZToxOCxjb2x1bW46NDV9LGVuZDp7bGluZToyMyxjb2x1bW46M319LGxpbmU6MTh9LDI6e25hbWU6XCJjcmVhdGVDYXNjYWRlZERhdGFcIixkZWNsOntzdGFydDp7bGluZToyOCxjb2x1bW46MTZ9LGVuZDp7bGluZToyOCxjb2x1bW46MzR9fSxsb2M6e3N0YXJ0OntsaW5lOjI4LGNvbHVtbjo0MX0sZW5kOntsaW5lOjM4LGNvbHVtbjoxfX0sbGluZToyOH0sMzp7bmFtZTpcIihhbm9ueW1vdXNfMylcIixkZWNsOntzdGFydDp7bGluZTozMSxjb2x1bW46MTJ9LGVuZDp7bGluZTozMSxjb2x1bW46MTN9fSxsb2M6e3N0YXJ0OntsaW5lOjMxLGNvbHVtbjoyMX0sZW5kOntsaW5lOjM1LGNvbHVtbjozfX0sbGluZTozMX0sNDp7bmFtZTpcIihhbm9ueW1vdXNfNClcIixkZWNsOntzdGFydDp7bGluZTo0MSxjb2x1bW46Mn0sZW5kOntsaW5lOjQxLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo0MSxjb2x1bW46MTl9LGVuZDp7bGluZTo0NCxjb2x1bW46M319LGxpbmU6NDF9LDU6e25hbWU6XCIoYW5vbnltb3VzXzUpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NDYsY29sdW1uOjJ9LGVuZDp7bGluZTo0Nixjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6NDYsY29sdW1uOjE1fSxlbmQ6e2xpbmU6NTEsY29sdW1uOjN9fSxsaW5lOjQ2fSw2OntuYW1lOlwiKGFub255bW91c182KVwiLGRlY2w6e3N0YXJ0OntsaW5lOjUzLGNvbHVtbjoyfSxlbmQ6e2xpbmU6NTMsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjUzLGNvbHVtbjoyM30sZW5kOntsaW5lOjU5LGNvbHVtbjozfX0sbGluZTo1M30sNzp7bmFtZTpcIihhbm9ueW1vdXNfNylcIixkZWNsOntzdGFydDp7bGluZTo2MSxjb2x1bW46Mn0sZW5kOntsaW5lOjYxLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTo2MSxjb2x1bW46MTR9LGVuZDp7bGluZTo3MCxjb2x1bW46M319LGxpbmU6NjF9LDg6e25hbWU6XCIoYW5vbnltb3VzXzgpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NjIsY29sdW1uOjQyfSxlbmQ6e2xpbmU6NjIsY29sdW1uOjQzfX0sbG9jOntzdGFydDp7bGluZTo2Mixjb2x1bW46NTF9LGVuZDp7bGluZTo2Nyxjb2x1bW46NX19LGxpbmU6NjJ9LDk6e25hbWU6XCIoYW5vbnltb3VzXzkpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NzIsY29sdW1uOjJ9LGVuZDp7bGluZTo3Mixjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6NzIsY29sdW1uOjEyfSxlbmQ6e2xpbmU6NzIsY29sdW1uOjQwfX0sbGluZTo3Mn0sMTA6e25hbWU6XCIoYW5vbnltb3VzXzEwKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjc0LGNvbHVtbjoyfSxlbmQ6e2xpbmU6NzQsY29sdW1uOjN9fSxsb2M6e3N0YXJ0OntsaW5lOjc0LGNvbHVtbjoxNn0sZW5kOntsaW5lOjc0LGNvbHVtbjo1OH19LGxpbmU6NzR9fSxicmFuY2hNYXA6ezA6e2xvYzp7c3RhcnQ6e2xpbmU6MTAsY29sdW1uOjJ9LGVuZDp7bGluZToxMCxjb2x1bW46OTB9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxMCxjb2x1bW46Mn0sZW5kOntsaW5lOjEwLGNvbHVtbjo5MH19LHtzdGFydDp7bGluZToxMCxjb2x1bW46Mn0sZW5kOntsaW5lOjEwLGNvbHVtbjo5MH19XSxsaW5lOjEwfSwxOntsb2M6e3N0YXJ0OntsaW5lOjE2LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTYsY29sdW1uOjcwfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTYsY29sdW1uOjJ9LGVuZDp7bGluZToxNixjb2x1bW46NzB9fSx7c3RhcnQ6e2xpbmU6MTYsY29sdW1uOjJ9LGVuZDp7bGluZToxNixjb2x1bW46NzB9fV0sbGluZToxNn0sMjp7bG9jOntzdGFydDp7bGluZToyMCxjb2x1bW46NH0sZW5kOntsaW5lOjIwLGNvbHVtbjoxMDF9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToyMCxjb2x1bW46NH0sZW5kOntsaW5lOjIwLGNvbHVtbjoxMDF9fSx7c3RhcnQ6e2xpbmU6MjAsY29sdW1uOjR9LGVuZDp7bGluZToyMCxjb2x1bW46MTAxfX1dLGxpbmU6MjB9LDM6e2xvYzp7c3RhcnQ6e2xpbmU6MjEsY29sdW1uOjR9LGVuZDp7bGluZToyMSxjb2x1bW46MTA3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MjEsY29sdW1uOjR9LGVuZDp7bGluZToyMSxjb2x1bW46MTA3fX0se3N0YXJ0OntsaW5lOjIxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MjEsY29sdW1uOjEwN319XSxsaW5lOjIxfSw0Ontsb2M6e3N0YXJ0OntsaW5lOjMwLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzAsY29sdW1uOjc1fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MzAsY29sdW1uOjJ9LGVuZDp7bGluZTozMCxjb2x1bW46NzV9fSx7c3RhcnQ6e2xpbmU6MzAsY29sdW1uOjJ9LGVuZDp7bGluZTozMCxjb2x1bW46NzV9fV0sbGluZTozMH0sNTp7bG9jOntzdGFydDp7bGluZTozMixjb2x1bW46NH0sZW5kOntsaW5lOjMyLGNvbHVtbjoxMzJ9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozMixjb2x1bW46NH0sZW5kOntsaW5lOjMyLGNvbHVtbjoxMzJ9fSx7c3RhcnQ6e2xpbmU6MzIsY29sdW1uOjR9LGVuZDp7bGluZTozMixjb2x1bW46MTMyfX1dLGxpbmU6MzJ9LDY6e2xvYzp7c3RhcnQ6e2xpbmU6MzIsY29sdW1uOjd9LGVuZDp7bGluZTozMixjb2x1bW46ODd9fSx0eXBlOlwiYmluYXJ5LWV4cHJcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozMixjb2x1bW46N30sZW5kOntsaW5lOjMyLGNvbHVtbjo0MX19LHtzdGFydDp7bGluZTozMixjb2x1bW46NDV9LGVuZDp7bGluZTozMixjb2x1bW46ODd9fV0sbGluZTozMn0sNzp7bG9jOntzdGFydDp7bGluZTozMyxjb2x1bW46NH0sZW5kOntsaW5lOjMzLGNvbHVtbjoxMjJ9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozMyxjb2x1bW46NH0sZW5kOntsaW5lOjMzLGNvbHVtbjoxMjJ9fSx7c3RhcnQ6e2xpbmU6MzMsY29sdW1uOjR9LGVuZDp7bGluZTozMyxjb2x1bW46MTIyfX1dLGxpbmU6MzN9LDg6e2xvYzp7c3RhcnQ6e2xpbmU6MzMsY29sdW1uOjd9LGVuZDp7bGluZTozMyxjb2x1bW46ODR9fSx0eXBlOlwiYmluYXJ5LWV4cHJcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozMyxjb2x1bW46N30sZW5kOntsaW5lOjMzLGNvbHVtbjo0M319LHtzdGFydDp7bGluZTozMyxjb2x1bW46NDd9LGVuZDp7bGluZTozMyxjb2x1bW46ODR9fV0sbGluZTozM30sOTp7bG9jOntzdGFydDp7bGluZTozNCxjb2x1bW46NH0sZW5kOntsaW5lOjM0LGNvbHVtbjoxMzN9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTozNCxjb2x1bW46NH0sZW5kOntsaW5lOjM0LGNvbHVtbjoxMzN9fSx7c3RhcnQ6e2xpbmU6MzQsY29sdW1uOjR9LGVuZDp7bGluZTozNCxjb2x1bW46MTMzfX1dLGxpbmU6MzR9LDEwOntsb2M6e3N0YXJ0OntsaW5lOjM0LGNvbHVtbjo3fSxlbmQ6e2xpbmU6MzQsY29sdW1uOjgxfX0sdHlwZTpcImJpbmFyeS1leHByXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MzQsY29sdW1uOjd9LGVuZDp7bGluZTozNCxjb2x1bW46NDF9fSx7c3RhcnQ6e2xpbmU6MzQsY29sdW1uOjQ1fSxlbmQ6e2xpbmU6MzQsY29sdW1uOjgxfX1dLGxpbmU6MzR9LDExOntsb2M6e3N0YXJ0OntsaW5lOjQ3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NDcsY29sdW1uOjgzfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NDcsY29sdW1uOjR9LGVuZDp7bGluZTo0Nyxjb2x1bW46ODN9fSx7c3RhcnQ6e2xpbmU6NDcsY29sdW1uOjR9LGVuZDp7bGluZTo0Nyxjb2x1bW46ODN9fV0sbGluZTo0N30sMTI6e2xvYzp7c3RhcnQ6e2xpbmU6NDcsY29sdW1uOjh9LGVuZDp7bGluZTo0Nyxjb2x1bW46Mzl9fSx0eXBlOlwiYmluYXJ5LWV4cHJcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo0Nyxjb2x1bW46OH0sZW5kOntsaW5lOjQ3LGNvbHVtbjoyOH19LHtzdGFydDp7bGluZTo0Nyxjb2x1bW46MzJ9LGVuZDp7bGluZTo0Nyxjb2x1bW46Mzl9fV0sbGluZTo0N30sMTM6e2xvYzp7c3RhcnQ6e2xpbmU6NDgsY29sdW1uOjR9LGVuZDp7bGluZTo0OCxjb2x1bW46OTV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo0OCxjb2x1bW46NH0sZW5kOntsaW5lOjQ4LGNvbHVtbjo5NX19LHtzdGFydDp7bGluZTo0OCxjb2x1bW46NH0sZW5kOntsaW5lOjQ4LGNvbHVtbjo5NX19XSxsaW5lOjQ4fSwxNDp7bG9jOntzdGFydDp7bGluZTo1NCxjb2x1bW46NH0sZW5kOntsaW5lOjU0LGNvbHVtbjo4M319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjU0LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NTQsY29sdW1uOjgzfX0se3N0YXJ0OntsaW5lOjU0LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NTQsY29sdW1uOjgzfX1dLGxpbmU6NTR9LDE1Ontsb2M6e3N0YXJ0OntsaW5lOjU0LGNvbHVtbjo4fSxlbmQ6e2xpbmU6NTQsY29sdW1uOjM5fX0sdHlwZTpcImJpbmFyeS1leHByXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NTQsY29sdW1uOjh9LGVuZDp7bGluZTo1NCxjb2x1bW46Mjh9fSx7c3RhcnQ6e2xpbmU6NTQsY29sdW1uOjMyfSxlbmQ6e2xpbmU6NTQsY29sdW1uOjM5fX1dLGxpbmU6NTR9LDE2Ontsb2M6e3N0YXJ0OntsaW5lOjU1LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NTUsY29sdW1uOjg1fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NTUsY29sdW1uOjR9LGVuZDp7bGluZTo1NSxjb2x1bW46ODV9fSx7c3RhcnQ6e2xpbmU6NTUsY29sdW1uOjR9LGVuZDp7bGluZTo1NSxjb2x1bW46ODV9fV0sbGluZTo1NX0sMTc6e2xvYzp7c3RhcnQ6e2xpbmU6NTYsY29sdW1uOjR9LGVuZDp7bGluZTo1Nixjb2x1bW46Nzh9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo1Nixjb2x1bW46NH0sZW5kOntsaW5lOjU2LGNvbHVtbjo3OH19LHtzdGFydDp7bGluZTo1Nixjb2x1bW46NH0sZW5kOntsaW5lOjU2LGNvbHVtbjo3OH19XSxsaW5lOjU2fSwxODp7bG9jOntzdGFydDp7bGluZTo2NCxjb2x1bW46Nn0sZW5kOntsaW5lOjY0LGNvbHVtbjo5M319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjY0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NjQsY29sdW1uOjkzfX0se3N0YXJ0OntsaW5lOjY0LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NjQsY29sdW1uOjkzfX1dLGxpbmU6NjR9LDE5Ontsb2M6e3N0YXJ0OntsaW5lOjY1LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NjUsY29sdW1uOjk5fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NjUsY29sdW1uOjZ9LGVuZDp7bGluZTo2NSxjb2x1bW46OTl9fSx7c3RhcnQ6e2xpbmU6NjUsY29sdW1uOjZ9LGVuZDp7bGluZTo2NSxjb2x1bW46OTl9fV0sbGluZTo2NX19LHM6ezA6MCwxOjAsMjowLDM6MCw0OjAsNTowLDY6MCw3OjAsODowLDk6MCwxMDowLDExOjAsMTI6MCwxMzowLDE0OjAsMTU6MCwxNjowLDE3OjAsMTg6MCwxOTowLDIwOjAsMjE6MCwyMjowLDIzOjAsMjQ6MCwyNTowLDI2OjAsMjc6MCwyODowLDI5OjAsMzA6MCwzMTowLDMyOjAsMzM6MCwzNDowLDM1OjAsMzY6MCwzNzowLDM4OjAsMzk6MCw0MDowLDQxOjAsNDI6MCw0MzowLDQ0OjAsNDU6MCw0NjowLDQ3OjAsNDg6MCw0OTowfSxmOnswOjAsMTowLDI6MCwzOjAsNDowLDU6MCw2OjAsNzowLDg6MCw5OjAsMTA6MH0sYjp7MDpbMCwwXSwxOlswLDBdLDI6WzAsMF0sMzpbMCwwXSw0OlswLDBdLDU6WzAsMF0sNjpbMCwwXSw3OlswLDBdLDg6WzAsMF0sOTpbMCwwXSwxMDpbMCwwXSwxMTpbMCwwXSwxMjpbMCwwXSwxMzpbMCwwXSwxNDpbMCwwXSwxNTpbMCwwXSwxNjpbMCwwXSwxNzpbMCwwXSwxODpbMCwwXSwxOTpbMCwwXX0sX2NvdmVyYWdlU2NoZW1hOlwiNDNlMjdlMTM4ZWJmOWNmYzU5NjZiMDgyY2Y5YTAyODMwMmVkNDE4NFwifSxpPXRbbF18fCh0W2xdPXt9KTtyZXR1cm4gaVtuXSYmaVtuXS5oYXNoPT09ZT9pW25dOihvLmhhc2g9ZSxpW25dPW8pfSgpO2Z1bmN0aW9uIEpuKG4pe2lmKERuLmZbMF0rKyxEbi5zWzBdKyssIShuIGluc3RhbmNlb2YgVWludDhBcnJheSkpdGhyb3cgRG4uYlswXVswXSsrLERuLnNbMV0rKyxuZXcgRXJyb3IoXCJOb25VaW50OEFycmF5U2VyaWFsaXplZERhdGFcIik7dmFyIGU7RG4uYlswXVsxXSsrLERuLnNbMl0rKzt0cnl7RG4uc1szXSsrLGU9Si5hLmRlY29kZShuKX1jYXRjaChuKXt0aHJvdyBEbi5zWzRdKyssbmV3IEVycm9yKFwiRmFpbGVkVG9QYXJzZUNhc2NhZGVkQnVmZmVyOiBcIi5jb25jYXQobi5tZXNzYWdlKSl9aWYoRG4uc1s1XSsrLCEoZSBpbnN0YW5jZW9mIEFycmF5KSl0aHJvdyBEbi5iWzFdWzBdKyssRG4uc1s2XSsrLG5ldyBFcnJvcihcIkludmFsaWRDYXNjYWRlZERhdGFcIik7RG4uYlsxXVsxXSsrO3ZhciB0PShEbi5zWzddKyssZS5tYXAoZnVuY3Rpb24obil7RG4uZlsxXSsrO3ZhciBlPShEbi5zWzhdKysse30pO3JldHVybiBEbi5zWzldKyssdm9pZCAwIT09bi5tZXNzYWdlPyhEbi5iWzJdWzBdKyssRG4uc1sxMF0rKyxlLm1lc3NhZ2U9eihuLm1lc3NhZ2UpKTpEbi5iWzJdWzFdKyssRG4uc1sxMV0rKyx2b2lkIDAhPT1uLnNpZ25hdHVyZT8oRG4uYlszXVswXSsrLERuLnNbMTJdKyssZS5zaWduYXR1cmU9dG4obi5zaWduYXR1cmUpKTpEbi5iWzNdWzFdKyssRG4uc1sxM10rKyxlfSkpO3JldHVybiBEbi5zWzE0XSsrLEduKHQpfWZ1bmN0aW9uIEduKG4pe2lmKERuLmZbMl0rKyxEbi5zWzE1XSsrLCEobiBpbnN0YW5jZW9mIEFycmF5KSl0aHJvdyBEbi5iWzRdWzBdKyssRG4uc1sxNl0rKyxuZXcgRXJyb3IoXCJOb3RBcnJheUZvckNhc2NhZGVkRGF0YVwiKTtyZXR1cm4gRG4uYls0XVsxXSsrLERuLnNbMTddKyssbi5tYXAoZnVuY3Rpb24obil7aWYoRG4uZlszXSsrLERuLnNbMThdKyssRG4uYls2XVswXSsrLCEodm9pZCAwPT09bi5tZXNzYWdlfHwoRG4uYls2XVsxXSsrLG4ubWVzc2FnZSBpbnN0YW5jZW9mICQpKSl0aHJvdyBEbi5iWzVdWzBdKyssRG4uc1sxOV0rKyxuZXcgRXJyb3IoXCJJbnZhbGlkRW5jcnlwdGVkTWVzc2FnZVwiKTtpZihEbi5iWzVdWzFdKyssRG4uc1syMF0rKyxEbi5iWzhdWzBdKyssISh2b2lkIDA9PT1uLnNpZ25hdHVyZXx8KERuLmJbOF1bMV0rKyxuLnNpZ25hdHVyZSBpbnN0YW5jZW9mIG9uKSkpdGhyb3cgRG4uYls3XVswXSsrLERuLnNbMjFdKyssbmV3IEVycm9yKFwiSW52YWxpZFNpZ25hdHVyZVwiKTtpZihEbi5iWzddWzFdKyssRG4uc1syMl0rKyxEbi5iWzEwXVswXSsrLHZvaWQgMD09PW4ubWVzc2FnZSYmKERuLmJbMTBdWzFdKyssdm9pZCAwPT09bi5zaWduYXR1cmUpKXRocm93IERuLmJbOV1bMF0rKyxEbi5zWzIzXSsrLG5ldyBFcnJvcihcIk5vRW5jcnlwdGVkTWVzc2FnZUFuZFNpZ25hdHVyZVwiKTtEbi5iWzldWzFdKyt9KSxEbi5zWzI0XSsrLG5ldyBIbihuKX12YXIgSG49ZnVuY3Rpb24obil7ZnVuY3Rpb24gZShuKXt2YXIgdCxsO3JldHVybiB1KCkodGhpcyxlKSxEbi5mWzRdKyssRG4uc1syNV0rKyxsPWgoKSh0aGlzLHYoKShlKS5jYWxsKHRoaXMpKSxEbi5zWzI2XSsrLCh0PWwpLnB1c2guYXBwbHkodCxwKCkobikpLGx9cmV0dXJuIHcoKShlLG4pLGEoKShlLFt7a2V5OlwiZXh0cmFjdFwiLHZhbHVlOmZ1bmN0aW9uKG4pe2lmKERuLmZbNV0rKyxEbi5zWzI3XSsrLERuLmJbMTJdWzBdKyssbj50aGlzLmxlbmd0aC0xfHwoRG4uYlsxMl1bMV0rKyxuPDApKXRocm93IERuLmJbMTFdWzBdKyssRG4uc1syOF0rKyxuZXcgRXJyb3IoXCJJbnZhbGlkSW5kZXhPdXRPZlJhbmdlXCIpO2lmKERuLmJbMTFdWzFdKyssRG4uc1syOV0rKyx2b2lkIDA9PT10aGlzW25dLm1lc3NhZ2UpdGhyb3cgRG4uYlsxM11bMF0rKyxEbi5zWzMwXSsrLG5ldyBFcnJvcihcIk1lc3NhZ2VPYmplY3REb2VzTm90RXhpc3RcIik7cmV0dXJuIERuLmJbMTNdWzFdKyssRG4uc1szMV0rKyx0aGlzW25dLm1lc3NhZ2UuZXh0cmFjdCgpfX0se2tleTpcImluc2VydFwiLHZhbHVlOmZ1bmN0aW9uKG4sZSl7aWYoRG4uZls2XSsrLERuLnNbMzJdKyssRG4uYlsxNV1bMF0rKyxuPnRoaXMubGVuZ3RoLTF8fChEbi5iWzE1XVsxXSsrLG48MCkpdGhyb3cgRG4uYlsxNF1bMF0rKyxEbi5zWzMzXSsrLG5ldyBFcnJvcihcIkludmFsaWRJbmRleE91dE9mUmFuZ2VcIik7aWYoRG4uYlsxNF1bMV0rKyxEbi5zWzM0XSsrLCEoZSBpbnN0YW5jZW9mIEFycmF5KSl0aHJvdyBEbi5iWzE2XVswXSsrLERuLnNbMzVdKyssbmV3IEVycm9yKFwiSW52YWxpZEVuY3J5cHRlZE1lc3NhZ2VBcnJheVwiKTtpZihEbi5iWzE2XVsxXSsrLERuLnNbMzZdKyssdGhpc1tuXS5tZXNzYWdlLmxlbmd0aD4wKXRocm93IERuLmJbMTddWzBdKyssRG4uc1szN10rKyxuZXcgRXJyb3IoXCJNZXNzYWdlQWxyZWFkeUV4aXN0c1wiKTtEbi5iWzE3XVsxXSsrLERuLnNbMzhdKyssdGhpc1tuXS5tZXNzYWdlLmluc2VydChlKX19LHtrZXk6XCJzZXJpYWxpemVcIix2YWx1ZTpmdW5jdGlvbigpe0RuLmZbN10rKzt2YXIgbj0oRG4uc1szOV0rKyx0aGlzLm1hcChmdW5jdGlvbihuKXtEbi5mWzhdKys7dmFyIGU9KERuLnNbNDBdKysse30pO3JldHVybiBEbi5zWzQxXSsrLHZvaWQgMCE9PW4ubWVzc2FnZT8oRG4uYlsxOF1bMF0rKyxEbi5zWzQyXSsrLGUubWVzc2FnZT1uLm1lc3NhZ2Uuc2VyaWFsaXplKCkpOkRuLmJbMThdWzFdKyssRG4uc1s0M10rKyx2b2lkIDAhPT1uLnNpZ25hdHVyZT8oRG4uYlsxOV1bMF0rKyxEbi5zWzQ0XSsrLGUuc2lnbmF0dXJlPW4uc2lnbmF0dXJlLnNlcmlhbGl6ZSgpKTpEbi5iWzE5XVsxXSsrLERuLnNbNDVdKyssZX0pKSxlPShEbi5zWzQ2XSsrLEouYS5lbmNvZGUobikpO3JldHVybiBEbi5zWzQ3XSsrLG5ldyBVaW50OEFycmF5KGUpfX0se2tleTpcInRvQXJyYXlcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBEbi5mWzldKyssRG4uc1s0OF0rKyxBcnJheS5mcm9tKHRoaXMpfX0se2tleTpcIm1hcFwiLHZhbHVlOmZ1bmN0aW9uKG4pe3JldHVybiBEbi5mWzEwXSsrLERuLnNbNDldKyssQXJyYXkuZnJvbSh0aGlzKS5tYXAobil9fV0pLGV9KFMoKShBcnJheSkpLFZuPWZ1bmN0aW9uKCl7dmFyIG49XCIvVXNlcnMvanVuL1Byb2plY3RKYXZhU2NyaXB0L2Nhc2NhZGUvc3JjL2Nhc2NhZGUuanNcIixlPVwiYzNhN2QwM2NkYjdmOWVhZmZlZmRkNTA2ZjQwMzdiNDYxYzRmZmEwNlwiLHQ9bmV3KDAsZnVuY3Rpb24oKXt9LmNvbnN0cnVjdG9yKShcInJldHVybiB0aGlzXCIpKCksbD1cIl9fY292ZXJhZ2VfX1wiLG89e3BhdGg6XCIvVXNlcnMvanVuL1Byb2plY3RKYXZhU2NyaXB0L2Nhc2NhZGUvc3JjL2Nhc2NhZGUuanNcIixzdGF0ZW1lbnRNYXA6ezA6e3N0YXJ0OntsaW5lOjE1LGNvbHVtbjoyMH0sZW5kOntsaW5lOjE1LGNvbHVtbjozNX19LDE6e3N0YXJ0OntsaW5lOjE2LGNvbHVtbjoyNX0sZW5kOntsaW5lOjE2LGNvbHVtbjo2MH19LDI6e3N0YXJ0OntsaW5lOjE2LGNvbHVtbjo0N30sZW5kOntsaW5lOjE2LGNvbHVtbjo1OX19LDM6e3N0YXJ0OntsaW5lOjE4LGNvbHVtbjoxOH0sZW5kOntsaW5lOjE4LGNvbHVtbjozMX19LDQ6e3N0YXJ0OntsaW5lOjE5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTksY29sdW1uOjc5fX0sNTp7c3RhcnQ6e2xpbmU6MjAsY29sdW1uOjJ9LGVuZDp7bGluZToyMCxjb2x1bW46NDN9fSw2OntzdGFydDp7bGluZToyMixjb2x1bW46Mn0sZW5kOntsaW5lOjIyLGNvbHVtbjoxN319LDc6e3N0YXJ0OntsaW5lOjI2LGNvbHVtbjoyMH0sZW5kOntsaW5lOjI2LGNvbHVtbjozNX19LDg6e3N0YXJ0OntsaW5lOjI4LGNvbHVtbjoxOH0sZW5kOntsaW5lOjI4LGNvbHVtbjozMX19LDk6e3N0YXJ0OntsaW5lOjI5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MjksY29sdW1uOjYzfX0sMTA6e3N0YXJ0OntsaW5lOjMwLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzAsY29sdW1uOjM3fX0sMTE6e3N0YXJ0OntsaW5lOjMyLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MzIsY29sdW1uOjE3fX0sMTI6e3N0YXJ0OntsaW5lOjM2LGNvbHVtbjoxNH0sZW5kOntsaW5lOjM2LGNvbHVtbjozNn19LDEzOntzdGFydDp7bGluZTo0MCxjb2x1bW46NH0sZW5kOntsaW5lOjQwLGNvbHVtbjo2NH19LDE0OntzdGFydDp7bGluZTo0MCxjb2x1bW46MzN9LGVuZDp7bGluZTo0MCxjb2x1bW46NjR9fSwxNTp7c3RhcnQ6e2xpbmU6NDEsY29sdW1uOjR9LGVuZDp7bGluZTo0MSxjb2x1bW46NjV9fSwxNjp7c3RhcnQ6e2xpbmU6NDEsY29sdW1uOjMzfSxlbmQ6e2xpbmU6NDEsY29sdW1uOjY1fX0sMTc6e3N0YXJ0OntsaW5lOjQyLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NDIsY29sdW1uOjczfX0sMTg6e3N0YXJ0OntsaW5lOjQyLGNvbHVtbjozN30sZW5kOntsaW5lOjQyLGNvbHVtbjo3M319LDE5OntzdGFydDp7bGluZTo0NCxjb2x1bW46NH0sZW5kOntsaW5lOjQ0LGNvbHVtbjoyOX19LDIwOntzdGFydDp7bGluZTo0NSxjb2x1bW46NH0sZW5kOntsaW5lOjQ1LGNvbHVtbjoyNX19LDIxOntzdGFydDp7bGluZTo0Nyxjb2x1bW46NH0sZW5kOntsaW5lOjU0LGNvbHVtbjo1fX0sMjI6e3N0YXJ0OntsaW5lOjQ4LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NDgsY29sdW1uOjc4fX0sMjM6e3N0YXJ0OntsaW5lOjQ4LGNvbHVtbjo0MX0sZW5kOntsaW5lOjQ4LGNvbHVtbjo3OH19LDI0OntzdGFydDp7bGluZTo0OSxjb2x1bW46MjJ9LGVuZDp7bGluZTo1Mixjb2x1bW46OH19LDI1OntzdGFydDp7bGluZTo1MCxjb2x1bW46OH0sZW5kOntsaW5lOjUwLGNvbHVtbjo4Nn19LDI2OntzdGFydDp7bGluZTo1MCxjb2x1bW46NTB9LGVuZDp7bGluZTo1MCxjb2x1bW46ODZ9fSwyNzp7c3RhcnQ6e2xpbmU6NTEsY29sdW1uOjh9LGVuZDp7bGluZTo1MSxjb2x1bW46MjR9fSwyODp7c3RhcnQ6e2xpbmU6NTMsY29sdW1uOjZ9LGVuZDp7bGluZTo1Myxjb2x1bW46Mjh9fSwyOTp7c3RhcnQ6e2xpbmU6NTYsY29sdW1uOjR9LGVuZDp7bGluZTo2Myxjb2x1bW46NX19LDMwOntzdGFydDp7bGluZTo1Nyxjb2x1bW46Nn0sZW5kOntsaW5lOjU3LGNvbHVtbjo5Mn19LDMxOntzdGFydDp7bGluZTo1Nyxjb2x1bW46NDh9LGVuZDp7bGluZTo1Nyxjb2x1bW46OTJ9fSwzMjp7c3RhcnQ6e2xpbmU6NTgsY29sdW1uOjIyfSxlbmQ6e2xpbmU6NjEsY29sdW1uOjh9fSwzMzp7c3RhcnQ6e2xpbmU6NTksY29sdW1uOjh9LGVuZDp7bGluZTo1OSxjb2x1bW46MTAyfX0sMzQ6e3N0YXJ0OntsaW5lOjU5LGNvbHVtbjo1OX0sZW5kOntsaW5lOjU5LGNvbHVtbjoxMDJ9fSwzNTp7c3RhcnQ6e2xpbmU6NjAsY29sdW1uOjh9LGVuZDp7bGluZTo2MCxjb2x1bW46Mzl9fSwzNjp7c3RhcnQ6e2xpbmU6NjIsY29sdW1uOjZ9LGVuZDp7bGluZTo2Mixjb2x1bW46Mjh9fSwzNzp7c3RhcnQ6e2xpbmU6NjYsY29sdW1uOjR9LGVuZDp7bGluZTo2Nixjb2x1bW46NDd9fSwzODp7c3RhcnQ6e2xpbmU6NzEsY29sdW1uOjI0fSxlbmQ6e2xpbmU6NzEsY29sdW1uOjU0fX0sMzk6e3N0YXJ0OntsaW5lOjczLGNvbHVtbjoyM30sZW5kOntsaW5lOjczLGNvbHVtbjo1Mn19LDQwOntzdGFydDp7bGluZTo3NCxjb2x1bW46NH0sZW5kOntsaW5lOjEwOCxjb2x1bW46OH19LDQxOntzdGFydDp7bGluZTo3NSxjb2x1bW46Nn0sZW5kOntsaW5lOjc1LGNvbHVtbjoxMDF9fSw0Mjp7c3RhcnQ6e2xpbmU6NzUsY29sdW1uOjY1fSxlbmQ6e2xpbmU6NzUsY29sdW1uOjEwMX19LDQzOntzdGFydDp7bGluZTo3Nyxjb2x1bW46MjZ9LGVuZDp7bGluZTo3Nyxjb2x1bW46NzB9fSw0NDp7c3RhcnQ6e2xpbmU6NzgsY29sdW1uOjI0fSxlbmQ6e2xpbmU6NzgsY29sdW1uOjM1fX0sNDU6e3N0YXJ0OntsaW5lOjgxLGNvbHVtbjoyNH0sZW5kOntsaW5lOjgxLGNvbHVtbjoxMDZ9fSw0Njp7c3RhcnQ6e2xpbmU6ODIsY29sdW1uOjZ9LGVuZDp7bGluZTo4Mixjb2x1bW46NDR9fSw0Nzp7c3RhcnQ6e2xpbmU6ODMsY29sdW1uOjI1fSxlbmQ6e2xpbmU6ODMsY29sdW1uOjU5fX0sNDg6e3N0YXJ0OntsaW5lOjg0LGNvbHVtbjozMX0sZW5kOntsaW5lOjg2LGNvbHVtbjo0Nn19LDQ5OntzdGFydDp7bGluZTo5MSxjb2x1bW46Nn0sZW5kOntsaW5lOjk2LGNvbHVtbjo3fX0sNTA6e3N0YXJ0OntsaW5lOjkxLGNvbHVtbjo1MH0sZW5kOntsaW5lOjkxLGNvbHVtbjo4M319LDUxOntzdGFydDp7bGluZTo5Myxjb2x1bW46OH0sZW5kOntsaW5lOjk1LGNvbHVtbjo0NX19LDUyOntzdGFydDp7bGluZTo5Myxjb2x1bW46NDB9LGVuZDp7bGluZTo5Myxjb2x1bW46MTAwfX0sNTM6e3N0YXJ0OntsaW5lOjk0LGNvbHVtbjoxM30sZW5kOntsaW5lOjk1LGNvbHVtbjo0NX19LDU0OntzdGFydDp7bGluZTo5NCxjb2x1bW46NDh9LGVuZDp7bGluZTo5NCxjb2x1bW46MTExfX0sNTU6e3N0YXJ0OntsaW5lOjk1LGNvbHVtbjoxM30sZW5kOntsaW5lOjk1LGNvbHVtbjo0NX19LDU2OntzdGFydDp7bGluZTo5Nyxjb2x1bW46Nn0sZW5kOntsaW5lOjk3LGNvbHVtbjo0NH19LDU3OntzdGFydDp7bGluZToxMDAsY29sdW1uOjZ9LGVuZDp7bGluZToxMDUsY29sdW1uOjd9fSw1ODp7c3RhcnQ6e2xpbmU6MTAxLGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTAxLGNvbHVtbjo5Mn19LDU5OntzdGFydDp7bGluZToxMDIsY29sdW1uOjh9LGVuZDp7bGluZToxMDIsY29sdW1uOjUxfX0sNjA6e3N0YXJ0OntsaW5lOjEwMyxjb2x1bW46OH0sZW5kOntsaW5lOjEwMyxjb2x1bW46NTd9fSw2MTp7c3RhcnQ6e2xpbmU6MTA0LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTA0LGNvbHVtbjozMX19LDYyOntzdGFydDp7bGluZToxMDcsY29sdW1uOjZ9LGVuZDp7bGluZToxMDcsY29sdW1uOjExMn19LDYzOntzdGFydDp7bGluZToxMTYsY29sdW1uOjR9LGVuZDp7bGluZToxMTYsY29sdW1uOjgwfX0sNjQ6e3N0YXJ0OntsaW5lOjExNixjb2x1bW46NDB9LGVuZDp7bGluZToxMTYsY29sdW1uOjgwfX0sNjU6e3N0YXJ0OntsaW5lOjExNyxjb2x1bW46NH0sZW5kOntsaW5lOjExNyxjb2x1bW46ODF9fSw2Njp7c3RhcnQ6e2xpbmU6MTE3LGNvbHVtbjo0MX0sZW5kOntsaW5lOjExNyxjb2x1bW46ODF9fSw2Nzp7c3RhcnQ6e2xpbmU6MTIwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTIwLGNvbHVtbjozMH19LDY4OntzdGFydDp7bGluZToxMjIsY29sdW1uOjE3fSxlbmQ6e2xpbmU6MTIyLGNvbHVtbjo3NX19LDY5OntzdGFydDp7bGluZToxMjIsY29sdW1uOjU1fSxlbmQ6e2xpbmU6MTIyLGNvbHVtbjo3M319LDcwOntzdGFydDp7bGluZToxMjMsY29sdW1uOjR9LGVuZDp7bGluZToxMjMsY29sdW1uOjM2fX0sNzE6e3N0YXJ0OntsaW5lOjEyNyxjb2x1bW46NH0sZW5kOntsaW5lOjEyNyxjb2x1bW46ODB9fSw3Mjp7c3RhcnQ6e2xpbmU6MTI3LGNvbHVtbjo0MH0sZW5kOntsaW5lOjEyNyxjb2x1bW46ODB9fSw3Mzp7c3RhcnQ6e2xpbmU6MTMwLGNvbHVtbjoyOX0sZW5kOntsaW5lOjEzMCxjb2x1bW46NTh9fSw3NDp7c3RhcnQ6e2xpbmU6MTMzLGNvbHVtbjoyMn0sZW5kOntsaW5lOjEzMyxjb2x1bW46NDR9fSw3NTp7c3RhcnQ6e2xpbmU6MTM0LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTc0LGNvbHVtbjo1fX0sNzY6e3N0YXJ0OntsaW5lOjEzNSxjb2x1bW46Nn0sZW5kOntsaW5lOjEzNSxjb2x1bW46ODJ9fSw3Nzp7c3RhcnQ6e2xpbmU6MTM1LGNvbHVtbjo0NX0sZW5kOntsaW5lOjEzNSxjb2x1bW46ODJ9fSw3ODp7c3RhcnQ6e2xpbmU6MTM2LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTM2LGNvbHVtbjo4Nn19LDc5OntzdGFydDp7bGluZToxMzYsY29sdW1uOjQ5fSxlbmQ6e2xpbmU6MTM2LGNvbHVtbjo4Nn19LDgwOntzdGFydDp7bGluZToxMzgsY29sdW1uOjZ9LGVuZDp7bGluZToxMzgsY29sdW1uOjUzfX0sODE6e3N0YXJ0OntsaW5lOjE0MSxjb2x1bW46Nn0sZW5kOntsaW5lOjE3Myxjb2x1bW46N319LDgyOntzdGFydDp7bGluZToxNDIsY29sdW1uOjI4fSxlbmQ6e2xpbmU6MTQyLGNvbHVtbjo3N319LDgzOntzdGFydDp7bGluZToxNDMsY29sdW1uOjI2fSxlbmQ6e2xpbmU6MTQzLGNvbHVtbjozN319LDg0OntzdGFydDp7bGluZToxNDYsY29sdW1uOjh9LGVuZDp7bGluZToxNTUsY29sdW1uOjl9fSw4NTp7c3RhcnQ6e2xpbmU6MTQ2LGNvbHVtbjo3Mn0sZW5kOntsaW5lOjE0Nixjb2x1bW46MTMyfX0sODY6e3N0YXJ0OntsaW5lOjE0OCxjb2x1bW46MTB9LGVuZDp7bGluZToxNTQsY29sdW1uOjQ3fX0sODc6e3N0YXJ0OntsaW5lOjE0OSxjb2x1bW46MTJ9LGVuZDp7bGluZToxNDksY29sdW1uOjEwNH19LDg4OntzdGFydDp7bGluZToxNTEsY29sdW1uOjE1fSxlbmQ6e2xpbmU6MTU0LGNvbHVtbjo0N319LDg5OntzdGFydDp7bGluZToxNTIsY29sdW1uOjEyfSxlbmQ6e2xpbmU6MTUyLGNvbHVtbjoxMDd9fSw5MDp7c3RhcnQ6e2xpbmU6MTU0LGNvbHVtbjoxNX0sZW5kOntsaW5lOjE1NCxjb2x1bW46NDd9fSw5MTp7c3RhcnQ6e2xpbmU6MTU4LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTcwLGNvbHVtbjo5fX0sOTI6e3N0YXJ0OntsaW5lOjE1OSxjb2x1bW46MTB9LGVuZDp7bGluZToxNTksY29sdW1uOjY0fX0sOTM6e3N0YXJ0OntsaW5lOjE2MCxjb2x1bW46MTB9LGVuZDp7bGluZToxNjAsY29sdW1uOjY5fX0sOTQ6e3N0YXJ0OntsaW5lOjE2MSxjb2x1bW46MTB9LGVuZDp7bGluZToxNjEsY29sdW1uOjM1fX0sOTU6e3N0YXJ0OntsaW5lOjE2NCxjb2x1bW46MTN9LGVuZDp7bGluZToxNzAsY29sdW1uOjl9fSw5Njp7c3RhcnQ6e2xpbmU6MTY3LGNvbHVtbjoxMH0sZW5kOntsaW5lOjE2Nyxjb2x1bW46NjR9fSw5Nzp7c3RhcnQ6e2xpbmU6MTY4LGNvbHVtbjoxMH0sZW5kOntsaW5lOjE2OCxjb2x1bW46NDZ9fSw5ODp7c3RhcnQ6e2xpbmU6MTY5LGNvbHVtbjoxMH0sZW5kOntsaW5lOjE2OSxjb2x1bW46MzV9fSw5OTp7c3RhcnQ6e2xpbmU6MTcyLGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTcyLGNvbHVtbjoxMjZ9fSwxMDA6e3N0YXJ0OntsaW5lOjE3NSxjb2x1bW46NH0sZW5kOntsaW5lOjE3NSxjb2x1bW46MjF9fSwxMDE6e3N0YXJ0OntsaW5lOjE3OSxjb2x1bW46MTZ9LGVuZDp7bGluZToxNzksY29sdW1uOjQxfX0sMTAyOntzdGFydDp7bGluZToxODAsY29sdW1uOjE2fSxlbmQ6e2xpbmU6MTgwLGNvbHVtbjozN319LDEwMzp7c3RhcnQ6e2xpbmU6MTgzLGNvbHVtbjoxNH0sZW5kOntsaW5lOjE4Myxjb2x1bW46Mzh9fSwxMDQ6e3N0YXJ0OntsaW5lOjE4NSxjb2x1bW46MTh9LGVuZDp7bGluZToxODUsY29sdW1uOjU0fX0sMTA1OntzdGFydDp7bGluZToxODYsY29sdW1uOjE3fSxlbmQ6e2xpbmU6MTg2LGNvbHVtbjo1MX19fSxmbk1hcDp7MDp7bmFtZTpcImNyZWF0ZUVuY3J5cHRpb25DYXNjYWRlXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTQsY29sdW1uOjIyfSxlbmQ6e2xpbmU6MTQsY29sdW1uOjQ1fX0sbG9jOntzdGFydDp7bGluZToxNCxjb2x1bW46NjR9LGVuZDp7bGluZToyMyxjb2x1bW46MX19LGxpbmU6MTR9LDE6e25hbWU6XCIoYW5vbnltb3VzXzEpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTYsY29sdW1uOjQwfSxlbmQ6e2xpbmU6MTYsY29sdW1uOjQxfX0sbG9jOntzdGFydDp7bGluZToxNixjb2x1bW46NDd9LGVuZDp7bGluZToxNixjb2x1bW46NTl9fSxsaW5lOjE2fSwyOntuYW1lOlwiY3JlYXRlRGVjcnlwdGlvbkNhc2NhZGVcIixkZWNsOntzdGFydDp7bGluZToyNSxjb2x1bW46MTZ9LGVuZDp7bGluZToyNSxjb2x1bW46Mzl9fSxsb2M6e3N0YXJ0OntsaW5lOjI1LGNvbHVtbjo1OH0sZW5kOntsaW5lOjMzLGNvbHVtbjoxfX0sbGluZToyNX0sMzp7bmFtZTpcIihhbm9ueW1vdXNfMylcIixkZWNsOntzdGFydDp7bGluZTozOCxjb2x1bW46Mn0sZW5kOntsaW5lOjM4LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZTozOCxjb2x1bW46NDN9LGVuZDp7bGluZTo2Nyxjb2x1bW46M319LGxpbmU6Mzh9LDQ6e25hbWU6XCIoYW5vbnltb3VzXzQpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NDksY29sdW1uOjM3fSxlbmQ6e2xpbmU6NDksY29sdW1uOjM4fX0sbG9jOntzdGFydDp7bGluZTo0OSxjb2x1bW46NDl9LGVuZDp7bGluZTo1Mixjb2x1bW46N319LGxpbmU6NDl9LDU6e25hbWU6XCIoYW5vbnltb3VzXzUpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NTgsY29sdW1uOjM3fSxlbmQ6e2xpbmU6NTgsY29sdW1uOjM4fX0sbG9jOntzdGFydDp7bGluZTo1OCxjb2x1bW46NTh9LGVuZDp7bGluZTo2MSxjb2x1bW46N319LGxpbmU6NTh9LDY6e25hbWU6XCIoYW5vbnltb3VzXzYpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6NjksY29sdW1uOjJ9LGVuZDp7bGluZTo2OSxjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6NjksY29sdW1uOjM0fSxlbmQ6e2xpbmU6MTA5LGNvbHVtbjozfX0sbGluZTo2OX0sNzp7bmFtZTpcIihhbm9ueW1vdXNfNylcIixkZWNsOntzdGFydDp7bGluZTo3NCxjb2x1bW46Mzh9LGVuZDp7bGluZTo3NCxjb2x1bW46Mzl9fSxsb2M6e3N0YXJ0OntsaW5lOjc0LGNvbHVtbjo1OX0sZW5kOntsaW5lOjEwOCxjb2x1bW46NX19LGxpbmU6NzR9LDg6e25hbWU6XCIoYW5vbnltb3VzXzgpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTExLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTExLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToxMTEsY29sdW1uOjI4fSxlbmQ6e2xpbmU6MTEzLGNvbHVtbjozfX0sbGluZToxMTF9LDk6e25hbWU6XCIoYW5vbnltb3VzXzkpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTE1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTE1LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToxMTUsY29sdW1uOjI0fSxlbmQ6e2xpbmU6MTI0LGNvbHVtbjozfX0sbGluZToxMTV9LDEwOntuYW1lOlwiKGFub255bW91c18xMClcIixkZWNsOntzdGFydDp7bGluZToxMjIsY29sdW1uOjQ1fSxlbmQ6e2xpbmU6MTIyLGNvbHVtbjo0Nn19LGxvYzp7c3RhcnQ6e2xpbmU6MTIyLGNvbHVtbjo1NX0sZW5kOntsaW5lOjEyMixjb2x1bW46NzN9fSxsaW5lOjEyMn0sMTE6e25hbWU6XCIoYW5vbnltb3VzXzExKVwiLGRlY2w6e3N0YXJ0OntsaW5lOjEyNixjb2x1bW46Mn0sZW5kOntsaW5lOjEyNixjb2x1bW46M319LGxvYzp7c3RhcnQ6e2xpbmU6MTI2LGNvbHVtbjoxN30sZW5kOntsaW5lOjE3Nyxjb2x1bW46M319LGxpbmU6MTI2fSwxMjp7bmFtZTpcIihhbm9ueW1vdXNfMTIpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTc5LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTc5LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToxNzksY29sdW1uOjE0fSxlbmQ6e2xpbmU6MTc5LGNvbHVtbjo0M319LGxpbmU6MTc5fSwxMzp7bmFtZTpcIihhbm9ueW1vdXNfMTMpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTgwLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTgwLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToxODAsY29sdW1uOjE0fSxlbmQ6e2xpbmU6MTgwLGNvbHVtbjozOX19LGxpbmU6MTgwfSwxNDp7bmFtZTpcIihhbm9ueW1vdXNfMTQpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTgzLGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTgzLGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToxODMsY29sdW1uOjEyfSxlbmQ6e2xpbmU6MTgzLGNvbHVtbjo0MH19LGxpbmU6MTgzfSwxNTp7bmFtZTpcIihhbm9ueW1vdXNfMTUpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTg1LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTg1LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToxODUsY29sdW1uOjE2fSxlbmQ6e2xpbmU6MTg1LGNvbHVtbjo1Nn19LGxpbmU6MTg1fSwxNjp7bmFtZTpcIihhbm9ueW1vdXNfMTYpXCIsZGVjbDp7c3RhcnQ6e2xpbmU6MTg2LGNvbHVtbjoyfSxlbmQ6e2xpbmU6MTg2LGNvbHVtbjozfX0sbG9jOntzdGFydDp7bGluZToxODYsY29sdW1uOjE1fSxlbmQ6e2xpbmU6MTg2LGNvbHVtbjo1M319LGxpbmU6MTg2fX0sYnJhbmNoTWFwOnswOntsb2M6e3N0YXJ0OntsaW5lOjQwLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NDAsY29sdW1uOjY0fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NDAsY29sdW1uOjR9LGVuZDp7bGluZTo0MCxjb2x1bW46NjR9fSx7c3RhcnQ6e2xpbmU6NDAsY29sdW1uOjR9LGVuZDp7bGluZTo0MCxjb2x1bW46NjR9fV0sbGluZTo0MH0sMTp7bG9jOntzdGFydDp7bGluZTo0MSxjb2x1bW46NH0sZW5kOntsaW5lOjQxLGNvbHVtbjo2NX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjQxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NDEsY29sdW1uOjY1fX0se3N0YXJ0OntsaW5lOjQxLGNvbHVtbjo0fSxlbmQ6e2xpbmU6NDEsY29sdW1uOjY1fX1dLGxpbmU6NDF9LDI6e2xvYzp7c3RhcnQ6e2xpbmU6NDIsY29sdW1uOjR9LGVuZDp7bGluZTo0Mixjb2x1bW46NzN9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo0Mixjb2x1bW46NH0sZW5kOntsaW5lOjQyLGNvbHVtbjo3M319LHtzdGFydDp7bGluZTo0Mixjb2x1bW46NH0sZW5kOntsaW5lOjQyLGNvbHVtbjo3M319XSxsaW5lOjQyfSwzOntsb2M6e3N0YXJ0OntsaW5lOjQ3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NTQsY29sdW1uOjV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo0Nyxjb2x1bW46NH0sZW5kOntsaW5lOjU0LGNvbHVtbjo1fX0se3N0YXJ0OntsaW5lOjQ3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NTQsY29sdW1uOjV9fV0sbGluZTo0N30sNDp7bG9jOntzdGFydDp7bGluZTo0OCxjb2x1bW46Nn0sZW5kOntsaW5lOjQ4LGNvbHVtbjo3OH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjQ4LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NDgsY29sdW1uOjc4fX0se3N0YXJ0OntsaW5lOjQ4LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NDgsY29sdW1uOjc4fX1dLGxpbmU6NDh9LDU6e2xvYzp7c3RhcnQ6e2xpbmU6NTAsY29sdW1uOjh9LGVuZDp7bGluZTo1MCxjb2x1bW46ODZ9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo1MCxjb2x1bW46OH0sZW5kOntsaW5lOjUwLGNvbHVtbjo4Nn19LHtzdGFydDp7bGluZTo1MCxjb2x1bW46OH0sZW5kOntsaW5lOjUwLGNvbHVtbjo4Nn19XSxsaW5lOjUwfSw2Ontsb2M6e3N0YXJ0OntsaW5lOjU2LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NjMsY29sdW1uOjV9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZTo1Nixjb2x1bW46NH0sZW5kOntsaW5lOjYzLGNvbHVtbjo1fX0se3N0YXJ0OntsaW5lOjU2LGNvbHVtbjo0fSxlbmQ6e2xpbmU6NjMsY29sdW1uOjV9fV0sbGluZTo1Nn0sNzp7bG9jOntzdGFydDp7bGluZTo1Nyxjb2x1bW46Nn0sZW5kOntsaW5lOjU3LGNvbHVtbjo5Mn19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjU3LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NTcsY29sdW1uOjkyfX0se3N0YXJ0OntsaW5lOjU3LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NTcsY29sdW1uOjkyfX1dLGxpbmU6NTd9LDg6e2xvYzp7c3RhcnQ6e2xpbmU6NTksY29sdW1uOjh9LGVuZDp7bGluZTo1OSxjb2x1bW46MTAyfX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6NTksY29sdW1uOjh9LGVuZDp7bGluZTo1OSxjb2x1bW46MTAyfX0se3N0YXJ0OntsaW5lOjU5LGNvbHVtbjo4fSxlbmQ6e2xpbmU6NTksY29sdW1uOjEwMn19XSxsaW5lOjU5fSw5Ontsb2M6e3N0YXJ0OntsaW5lOjc1LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NzUsY29sdW1uOjEwMX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjc1LGNvbHVtbjo2fSxlbmQ6e2xpbmU6NzUsY29sdW1uOjEwMX19LHtzdGFydDp7bGluZTo3NSxjb2x1bW46Nn0sZW5kOntsaW5lOjc1LGNvbHVtbjoxMDF9fV0sbGluZTo3NX0sMTA6e2xvYzp7c3RhcnQ6e2xpbmU6ODQsY29sdW1uOjMxfSxlbmQ6e2xpbmU6ODYsY29sdW1uOjQ2fX0sdHlwZTpcImNvbmQtZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjg1LGNvbHVtbjoxMH0sZW5kOntsaW5lOjg1LGNvbHVtbjozOH19LHtzdGFydDp7bGluZTo4Nixjb2x1bW46MTB9LGVuZDp7bGluZTo4Nixjb2x1bW46NDZ9fV0sbGluZTo4NH0sMTE6e2xvYzp7c3RhcnQ6e2xpbmU6OTEsY29sdW1uOjZ9LGVuZDp7bGluZTo5Nixjb2x1bW46N319LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjkxLGNvbHVtbjo2fSxlbmQ6e2xpbmU6OTYsY29sdW1uOjd9fSx7c3RhcnQ6e2xpbmU6OTEsY29sdW1uOjZ9LGVuZDp7bGluZTo5Nixjb2x1bW46N319XSxsaW5lOjkxfSwxMjp7bG9jOntzdGFydDp7bGluZTo5Myxjb2x1bW46OH0sZW5kOntsaW5lOjk1LGNvbHVtbjo0NX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjkzLGNvbHVtbjo4fSxlbmQ6e2xpbmU6OTUsY29sdW1uOjQ1fX0se3N0YXJ0OntsaW5lOjkzLGNvbHVtbjo4fSxlbmQ6e2xpbmU6OTUsY29sdW1uOjQ1fX1dLGxpbmU6OTN9LDEzOntsb2M6e3N0YXJ0OntsaW5lOjk0LGNvbHVtbjoxM30sZW5kOntsaW5lOjk1LGNvbHVtbjo0NX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjk0LGNvbHVtbjoxM30sZW5kOntsaW5lOjk1LGNvbHVtbjo0NX19LHtzdGFydDp7bGluZTo5NCxjb2x1bW46MTN9LGVuZDp7bGluZTo5NSxjb2x1bW46NDV9fV0sbGluZTo5NH0sMTQ6e2xvYzp7c3RhcnQ6e2xpbmU6MTAwLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTA1LGNvbHVtbjo3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTAwLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTA1LGNvbHVtbjo3fX0se3N0YXJ0OntsaW5lOjEwMCxjb2x1bW46Nn0sZW5kOntsaW5lOjEwNSxjb2x1bW46N319XSxsaW5lOjEwMH0sMTU6e2xvYzp7c3RhcnQ6e2xpbmU6MTAwLGNvbHVtbjoxMH0sZW5kOntsaW5lOjEwMCxjb2x1bW46Nzh9fSx0eXBlOlwiYmluYXJ5LWV4cHJcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxMDAsY29sdW1uOjEwfSxlbmQ6e2xpbmU6MTAwLGNvbHVtbjo0OX19LHtzdGFydDp7bGluZToxMDAsY29sdW1uOjUzfSxlbmQ6e2xpbmU6MTAwLGNvbHVtbjo3OH19XSxsaW5lOjEwMH0sMTY6e2xvYzp7c3RhcnQ6e2xpbmU6MTE2LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTE2LGNvbHVtbjo4MH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjExNixjb2x1bW46NH0sZW5kOntsaW5lOjExNixjb2x1bW46ODB9fSx7c3RhcnQ6e2xpbmU6MTE2LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTE2LGNvbHVtbjo4MH19XSxsaW5lOjExNn0sMTc6e2xvYzp7c3RhcnQ6e2xpbmU6MTE3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTE3LGNvbHVtbjo4MX19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjExNyxjb2x1bW46NH0sZW5kOntsaW5lOjExNyxjb2x1bW46ODF9fSx7c3RhcnQ6e2xpbmU6MTE3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTE3LGNvbHVtbjo4MX19XSxsaW5lOjExN30sMTg6e2xvYzp7c3RhcnQ6e2xpbmU6MTI3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTI3LGNvbHVtbjo4MH19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjEyNyxjb2x1bW46NH0sZW5kOntsaW5lOjEyNyxjb2x1bW46ODB9fSx7c3RhcnQ6e2xpbmU6MTI3LGNvbHVtbjo0fSxlbmQ6e2xpbmU6MTI3LGNvbHVtbjo4MH19XSxsaW5lOjEyN30sMTk6e2xvYzp7c3RhcnQ6e2xpbmU6MTM1LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTM1LGNvbHVtbjo4Mn19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjEzNSxjb2x1bW46Nn0sZW5kOntsaW5lOjEzNSxjb2x1bW46ODJ9fSx7c3RhcnQ6e2xpbmU6MTM1LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTM1LGNvbHVtbjo4Mn19XSxsaW5lOjEzNX0sMjA6e2xvYzp7c3RhcnQ6e2xpbmU6MTM2LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTM2LGNvbHVtbjo4Nn19LHR5cGU6XCJpZlwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjEzNixjb2x1bW46Nn0sZW5kOntsaW5lOjEzNixjb2x1bW46ODZ9fSx7c3RhcnQ6e2xpbmU6MTM2LGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTM2LGNvbHVtbjo4Nn19XSxsaW5lOjEzNn0sMjE6e2xvYzp7c3RhcnQ6e2xpbmU6MTQxLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTczLGNvbHVtbjo3fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTQxLGNvbHVtbjo2fSxlbmQ6e2xpbmU6MTczLGNvbHVtbjo3fX0se3N0YXJ0OntsaW5lOjE0MSxjb2x1bW46Nn0sZW5kOntsaW5lOjE3Myxjb2x1bW46N319XSxsaW5lOjE0MX0sMjI6e2xvYzp7c3RhcnQ6e2xpbmU6MTQ2LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTU1LGNvbHVtbjo5fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTQ2LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTU1LGNvbHVtbjo5fX0se3N0YXJ0OntsaW5lOjE0Nixjb2x1bW46OH0sZW5kOntsaW5lOjE1NSxjb2x1bW46OX19XSxsaW5lOjE0Nn0sMjM6e2xvYzp7c3RhcnQ6e2xpbmU6MTQ4LGNvbHVtbjoxMH0sZW5kOntsaW5lOjE1NCxjb2x1bW46NDd9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxNDgsY29sdW1uOjEwfSxlbmQ6e2xpbmU6MTU0LGNvbHVtbjo0N319LHtzdGFydDp7bGluZToxNDgsY29sdW1uOjEwfSxlbmQ6e2xpbmU6MTU0LGNvbHVtbjo0N319XSxsaW5lOjE0OH0sMjQ6e2xvYzp7c3RhcnQ6e2xpbmU6MTUxLGNvbHVtbjoxNX0sZW5kOntsaW5lOjE1NCxjb2x1bW46NDd9fSx0eXBlOlwiaWZcIixsb2NhdGlvbnM6W3tzdGFydDp7bGluZToxNTEsY29sdW1uOjE1fSxlbmQ6e2xpbmU6MTU0LGNvbHVtbjo0N319LHtzdGFydDp7bGluZToxNTEsY29sdW1uOjE1fSxlbmQ6e2xpbmU6MTU0LGNvbHVtbjo0N319XSxsaW5lOjE1MX0sMjU6e2xvYzp7c3RhcnQ6e2xpbmU6MTU4LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTcwLGNvbHVtbjo5fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTU4LGNvbHVtbjo4fSxlbmQ6e2xpbmU6MTcwLGNvbHVtbjo5fX0se3N0YXJ0OntsaW5lOjE1OCxjb2x1bW46OH0sZW5kOntsaW5lOjE3MCxjb2x1bW46OX19XSxsaW5lOjE1OH0sMjY6e2xvYzp7c3RhcnQ6e2xpbmU6MTU4LGNvbHVtbjoxMn0sZW5kOntsaW5lOjE1OCxjb2x1bW46MTAyfX0sdHlwZTpcImJpbmFyeS1leHByXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTU4LGNvbHVtbjoxMn0sZW5kOntsaW5lOjE1OCxjb2x1bW46NTl9fSx7c3RhcnQ6e2xpbmU6MTU4LGNvbHVtbjo2M30sZW5kOntsaW5lOjE1OCxjb2x1bW46MTAyfX1dLGxpbmU6MTU4fSwyNzp7bG9jOntzdGFydDp7bGluZToxNjQsY29sdW1uOjEzfSxlbmQ6e2xpbmU6MTcwLGNvbHVtbjo5fX0sdHlwZTpcImlmXCIsbG9jYXRpb25zOlt7c3RhcnQ6e2xpbmU6MTY0LGNvbHVtbjoxM30sZW5kOntsaW5lOjE3MCxjb2x1bW46OX19LHtzdGFydDp7bGluZToxNjQsY29sdW1uOjEzfSxlbmQ6e2xpbmU6MTcwLGNvbHVtbjo5fX1dLGxpbmU6MTY0fSwyODp7bG9jOntzdGFydDp7bGluZToxNjQsY29sdW1uOjE3fSxlbmQ6e2xpbmU6MTY2LGNvbHVtbjo1Mn19LHR5cGU6XCJiaW5hcnktZXhwclwiLGxvY2F0aW9uczpbe3N0YXJ0OntsaW5lOjE2NCxjb2x1bW46MTd9LGVuZDp7bGluZToxNjQsY29sdW1uOjY0fX0se3N0YXJ0OntsaW5lOjE2NSxjb2x1bW46MTN9LGVuZDp7bGluZToxNjUsY29sdW1uOjU3fX0se3N0YXJ0OntsaW5lOjE2Nixjb2x1bW46MTN9LGVuZDp7bGluZToxNjYsY29sdW1uOjUyfX1dLGxpbmU6MTY0fX0sczp7MDowLDE6MCwyOjAsMzowLDQ6MCw1OjAsNjowLDc6MCw4OjAsOTowLDEwOjAsMTE6MCwxMjowLDEzOjAsMTQ6MCwxNTowLDE2OjAsMTc6MCwxODowLDE5OjAsMjA6MCwyMTowLDIyOjAsMjM6MCwyNDowLDI1OjAsMjY6MCwyNzowLDI4OjAsMjk6MCwzMDowLDMxOjAsMzI6MCwzMzowLDM0OjAsMzU6MCwzNjowLDM3OjAsMzg6MCwzOTowLDQwOjAsNDE6MCw0MjowLDQzOjAsNDQ6MCw0NTowLDQ2OjAsNDc6MCw0ODowLDQ5OjAsNTA6MCw1MTowLDUyOjAsNTM6MCw1NDowLDU1OjAsNTY6MCw1NzowLDU4OjAsNTk6MCw2MDowLDYxOjAsNjI6MCw2MzowLDY0OjAsNjU6MCw2NjowLDY3OjAsNjg6MCw2OTowLDcwOjAsNzE6MCw3MjowLDczOjAsNzQ6MCw3NTowLDc2OjAsNzc6MCw3ODowLDc5OjAsODA6MCw4MTowLDgyOjAsODM6MCw4NDowLDg1OjAsODY6MCw4NzowLDg4OjAsODk6MCw5MDowLDkxOjAsOTI6MCw5MzowLDk0OjAsOTU6MCw5NjowLDk3OjAsOTg6MCw5OTowLDEwMDowLDEwMTowLDEwMjowLDEwMzowLDEwNDowLDEwNTowfSxmOnswOjAsMTowLDI6MCwzOjAsNDowLDU6MCw2OjAsNzowLDg6MCw5OjAsMTA6MCwxMTowLDEyOjAsMTM6MCwxNDowLDE1OjAsMTY6MH0sYjp7MDpbMCwwXSwxOlswLDBdLDI6WzAsMF0sMzpbMCwwXSw0OlswLDBdLDU6WzAsMF0sNjpbMCwwXSw3OlswLDBdLDg6WzAsMF0sOTpbMCwwXSwxMDpbMCwwXSwxMTpbMCwwXSwxMjpbMCwwXSwxMzpbMCwwXSwxNDpbMCwwXSwxNTpbMCwwXSwxNjpbMCwwXSwxNzpbMCwwXSwxODpbMCwwXSwxOTpbMCwwXSwyMDpbMCwwXSwyMTpbMCwwXSwyMjpbMCwwXSwyMzpbMCwwXSwyNDpbMCwwXSwyNTpbMCwwXSwyNjpbMCwwXSwyNzpbMCwwXSwyODpbMCwwLDBdfSxfY292ZXJhZ2VTY2hlbWE6XCI0M2UyN2UxMzhlYmY5Y2ZjNTk2NmIwODJjZjlhMDI4MzAyZWQ0MTg0XCJ9LGk9dFtsXXx8KHRbbF09e30pO3JldHVybiBpW25dJiZpW25dLmhhc2g9PT1lP2lbbl06KG8uaGFzaD1lLGlbbl09byl9KCk7ZnVuY3Rpb24gem4obil7cmV0dXJuIFluLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBZbigpe3JldHVybihZbj1yKCkoby5hLm1hcmsoZnVuY3Rpb24gbihlKXt2YXIgdCxsLGkscixjO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDpyZXR1cm4gdD1lLmtleXMsbD1lLnByb2NlZHVyZSxWbi5mWzBdKyssVm4uc1swXSsrLGk9ZCgpKHQpLFZuLnNbMV0rKyxyPWwubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBWbi5mWzFdKyssVm4uc1syXSsrLGQoKShuKX0pLFZuLnNbM10rKyxjPW5ldyAkbixWbi5zWzRdKyssYy5faW5pdCh7bW9kZTpcImVuY3J5cHRcIixrZXlzOmkscHJvY2VkdXJlOnJ9KSxWbi5zWzVdKyssbi5uZXh0PTEwLGMuX2luaXRFbmNyeXB0aW9uUHJvY2VkdXJlKCk7Y2FzZSAxMDpyZXR1cm4gVm4uc1s2XSsrLG4uYWJydXB0KFwicmV0dXJuXCIsYyk7Y2FzZSAxMjpjYXNlXCJlbmRcIjpyZXR1cm4gbi5zdG9wKCl9fSxuLHRoaXMpfSkpKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gV24obil7dmFyIGU9bi5rZXlzLHQ9bi5lbmNyeXB0ZWQ7Vm4uZlsyXSsrO3ZhciBsPShWbi5zWzddKyssZCgpKGUpKSxvPShWbi5zWzhdKyssbmV3ICRuKTtyZXR1cm4gVm4uc1s5XSsrLG8uX2luaXQoe21vZGU6XCJkZWNyeXB0XCIsa2V5czpsLGVuY3J5cHRlZDp0fSksVm4uc1sxMF0rKyxvLl9pbml0RGVjcnlwdGlvblByb2NlZHVyZSgpLFZuLnNbMTFdKyssb312YXIgcW49KFZuLnNbMTJdKyssW1wiZW5jcnlwdFwiLFwiZGVjcnlwdFwiXSksJG49ZnVuY3Rpb24obil7ZnVuY3Rpb24gZSgpe3JldHVybiB1KCkodGhpcyxlKSxoKCkodGhpcyx2KCkoZSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gdygpKGUsbiksYSgpKGUsW3trZXk6XCJfaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKG4pe3ZhciBlPW4ubW9kZSx0PW4ua2V5cyxsPW4ucHJvY2VkdXJlLG89bi5lbmNyeXB0ZWQ7aWYoVm4uZlszXSsrLFZuLnNbMTNdKysscW4uaW5kZXhPZihlKTwwKXRocm93IFZuLmJbMF1bMF0rKyxWbi5zWzE0XSsrLG5ldyBFcnJvcihcIkludmFsaWRNb2RlXCIpO2lmKFZuLmJbMF1bMV0rKyxWbi5zWzE1XSsrLCEodCBpbnN0YW5jZW9mIHBuKSl0aHJvdyBWbi5iWzFdWzBdKyssVm4uc1sxNl0rKyxuZXcgRXJyb3IoXCJOb3RLZXlPYmplY3RcIik7aWYoVm4uYlsxXVsxXSsrLFZuLnNbMTddKyssdC5tb2RlLmluZGV4T2YoZSk8MCl0aHJvdyBWbi5iWzJdWzBdKyssVm4uc1sxOF0rKyxuZXcgRXJyb3IoXCJVbm1hdGNoZWRLZXlNb2RlXCIpO2lmKFZuLmJbMl1bMV0rKyxWbi5zWzE5XSsrLHRoaXMuX2Nhc2NhZGVNb2RlPWUsVm4uc1syMF0rKyx0aGlzLl9vcmdLZXlzPXQsVm4uc1syMV0rKyxcImVuY3J5cHRcIj09PWUpe2lmKFZuLmJbM11bMF0rKyxWbi5zWzIyXSsrLCEobCBpbnN0YW5jZW9mIEFycmF5KSl0aHJvdyBWbi5iWzRdWzBdKyssVm4uc1syM10rKyxuZXcgRXJyb3IoXCJOb3RBcnJheVByb2NlZHVyZVwiKTtWbi5iWzRdWzFdKys7dmFyIGk9KFZuLnNbMjRdKyssbC5tYXAoZnVuY3Rpb24obil7aWYoVm4uZls0XSsrLFZuLnNbMjVdKyssdm9pZCAwPT09bi5lbmNyeXB0KXRocm93IFZuLmJbNV1bMF0rKyxWbi5zWzI2XSsrLG5ldyBFcnJvcihcIkludmFsaWRQcm9jZWR1cmVcIik7cmV0dXJuIFZuLmJbNV1bMV0rKyxWbi5zWzI3XSsrLHtjb25maWc6bn19KSk7Vm4uc1syOF0rKyx0aGlzLnB1c2guYXBwbHkodGhpcyxwKCkoaSkpfWVsc2UgVm4uYlszXVsxXSsrO2lmKFZuLnNbMjldKyssXCJkZWNyeXB0XCI9PT1lKXtpZihWbi5iWzZdWzBdKyssVm4uc1szMF0rKywhKG8gaW5zdGFuY2VvZiBIbikpdGhyb3cgVm4uYls3XVswXSsrLFZuLnNbMzFdKyssbmV3IEVycm9yKFwiTm90Q2FzY2FkZWRFbmNyeXB0ZWREYXRhXCIpO1ZuLmJbN11bMV0rKzt2YXIgcj0oVm4uc1szMl0rKyxvLm1hcChmdW5jdGlvbihuKXtpZihWbi5mWzVdKyssVm4uc1szM10rKyx2b2lkIDA9PT1uLm1lc3NhZ2UpdGhyb3cgVm4uYls4XVswXSsrLFZuLnNbMzRdKyssbmV3IEVycm9yKFwiSW52YWxpZEVuY3J5cHRlZE1lc3NhZ2VcIik7cmV0dXJuIFZuLmJbOF1bMV0rKyxWbi5zWzM1XSsrLHtkYXRhOm59fSkpO1ZuLnNbMzZdKyssdGhpcy5wdXNoLmFwcGx5KHRoaXMscCgpKHIpKX1lbHNlIFZuLmJbNl1bMV0rKztWbi5zWzM3XSsrLHRoaXNbdGhpcy5sZW5ndGgtMV0ua2V5cz10aGlzLl9vcmdLZXlzfX0se2tleTpcIl9pbml0RW5jcnlwdGlvblByb2NlZHVyZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIG49cigpKG8uYS5tYXJrKGZ1bmN0aW9uIG4oKXt2YXIgZSx0LGw9dGhpcztyZXR1cm4gby5hLndyYXAoZnVuY3Rpb24obil7Zm9yKDs7KXN3aXRjaChuLnByZXY9bi5uZXh0KXtjYXNlIDA6cmV0dXJuIFZuLmZbNl0rKyxWbi5zWzM4XSsrLGU9dGhpcy5fb3JnS2V5cy5rZXlzLnByaXZhdGVLZXlzLFZuLnNbMzldKyssdD10aGlzLnNsaWNlKDAsdGhpcy5sZW5ndGgtMSksVm4uc1s0MF0rKyxuLm5leHQ9NixQcm9taXNlLmFsbCh0Lm1hcChmdW5jdGlvbigpe3ZhciBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKHQsaSl7dmFyIHIsYyx1LHMsYSxtO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDppZihWbi5mWzddKyssVm4uc1s0MV0rKyx2b2lkIDAhPT10LmNvbmZpZy5lbmNyeXB0Lm9uZXRpbWVLZXkpe24ubmV4dD04O2JyZWFrfXRocm93IFZuLmJbOV1bMF0rKyxWbi5zWzQyXSsrLG5ldyBFcnJvcihcIk5vS2V5UGFyYW1zR2l2ZW5cIik7Y2FzZSA4OlZuLmJbOV1bMV0rKztjYXNlIDk6cmV0dXJuIFZuLnNbNDNdKysscj17ZW5jcnlwdF9kZWNyeXB0OnQuY29uZmlnLmVuY3J5cHQuc3VpdGV9LFZuLnNbNDRdKyssYz1bXCJlbmNyeXB0XCJdLFZuLnNbNDVdKyssdT1PYmplY3QuYXNzaWduKHtzdWl0ZTp0LmNvbmZpZy5lbmNyeXB0LnN1aXRlfSx0LmNvbmZpZy5lbmNyeXB0Lm9uZXRpbWVLZXkpLFZuLnNbNDZdKyssZGVsZXRlIHQuY29uZmlnLmVuY3J5cHQub25ldGltZUtleSxWbi5zWzQ3XSsrLG4ubmV4dD0xNyx4bih1KTtjYXNlIDE3OmlmKHM9bi5zZW50LFZuLnNbNDhdKyssYT1cInNlc3Npb25cIj09PXUua2V5UGFyYW1zLnR5cGU/KFZuLmJbMTBdWzBdKysse3Nlc3Npb25LZXk6cy5rZXl9KTooVm4uYlsxMF1bMV0rKyx7cHVibGljS2V5czpbcy5wdWJsaWNLZXldfSksVm4uc1s0OV0rKyxcInNlc3Npb25cIiE9PXUua2V5UGFyYW1zLnR5cGUpe24ubmV4dD0yNjticmVha31Wbi5iWzExXVswXSsrLFZuLnNbNTBdKyssbT1zLmtleSxuLm5leHQ9NDc7YnJlYWs7Y2FzZSAyNjppZihWbi5iWzExXVsxXSsrLFZuLnNbNTFdKyssXCJqc2N1XCIhPT11LnN1aXRlKXtuLm5leHQ9MzY7YnJlYWt9cmV0dXJuIFZuLmJbMTJdWzBdKyssVm4uc1s1Ml0rKyxuLm5leHQ9MzMscy5wcml2YXRlS2V5LmV4cG9ydChcImRlclwiKTtjYXNlIDMzOm09bi5zZW50LG4ubmV4dD00NzticmVhaztjYXNlIDM2OmlmKFZuLmJbMTJdWzFdKyssVm4uc1s1M10rKyxcIm9wZW5wZ3BcIiE9PXUuc3VpdGUpe24ubmV4dD00NDticmVha31Wbi5iWzEzXVswXSsrLFZuLnNbNTRdKyssbT1zLnByaXZhdGVLZXkudG9QYWNrZXRsaXN0KCkud3JpdGUoKSxuLm5leHQ9NDc7YnJlYWs7Y2FzZSA0NDp0aHJvdyBWbi5iWzEzXVsxXSsrLFZuLnNbNTVdKyssbmV3IEVycm9yKFwiVW5rbm93blN1aXRlXCIpO2Nhc2UgNDc6cmV0dXJuIFZuLnNbNTZdKyssbFtpKzFdLm1lc3NhZ2U9bSxWbi5zWzU3XSsrLFZuLmJbMTVdWzBdKyssdm9pZCAwIT09dC5jb25maWcuc2lnbiYmKFZuLmJbMTVdWzFdKyssdC5jb25maWcuc2lnbi5yZXF1aXJlZCk/KFZuLmJbMTRdWzBdKyssVm4uc1s1OF0rKyx0LmNvbmZpZy5zaWduPU9iamVjdC5hc3NpZ24odC5jb25maWcuc2lnbixsW2wubGVuZ3RoLTFdLmNvbmZpZy5zaWduKSxWbi5zWzU5XSsrLGEucHJpdmF0ZUtleXM9ZSxWbi5zWzYwXSsrLHIuc2lnbl92ZXJpZnk9dC5jb25maWcuc2lnbi5zdWl0ZSxWbi5zWzYxXSsrLGMucHVzaChcInNpZ25cIikpOlZuLmJbMTRdWzFdKyssVm4uc1s2Ml0rKyxuLm5leHQ9NTQseW4oXCJvYmplY3RcIix7a2V5czphLHN1aXRlOnIsbW9kZTpjfSk7Y2FzZSA1NDpsW2ldLmtleXM9bi5zZW50O2Nhc2UgNTU6Y2FzZVwiZW5kXCI6cmV0dXJuIG4uc3RvcCgpfX0sbix0aGlzKX0pKTtyZXR1cm4gZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSgpKSk7Y2FzZSA2OmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKX0se2tleTpcIl9pbml0RGVjcnlwdGlvblByb2NlZHVyZVwiLHZhbHVlOmZ1bmN0aW9uKCl7Vm4uZls4XSsrfX0se2tleTpcImVuY3J5cHRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKGUpe3ZhciB0O3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDppZihWbi5mWzldKyssVm4uc1s2M10rKyxcImVuY3J5cHRcIj09PXRoaXMuX2Nhc2NhZGVNb2RlKXtuLm5leHQ9ODticmVha310aHJvdyBWbi5iWzE2XVswXSsrLFZuLnNbNjRdKyssbmV3IEVycm9yKFwiTm90RW5jcnlwdGlvbkNhc2NhZGVcIik7Y2FzZSA4OlZuLmJbMTZdWzFdKys7Y2FzZSA5OmlmKFZuLnNbNjVdKyssZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpe24ubmV4dD0xNjticmVha310aHJvdyBWbi5iWzE3XVswXSsrLFZuLnNbNjZdKyssbmV3IEVycm9yKFwiTm90VWludDhBcnJheU1lc3NhZ2VcIik7Y2FzZSAxNjpWbi5iWzE3XVsxXSsrO2Nhc2UgMTc6cmV0dXJuIFZuLnNbNjddKyssdGhpc1swXS5tZXNzYWdlPWUsVm4uc1s2OF0rKyxuLm5leHQ9MjIsUHJvbWlzZS5hbGwodGhpcy5tYXAoZnVuY3Rpb24obil7cmV0dXJuIFZuLmZbMTBdKyssVm4uc1s2OV0rKyxVbihuKX0pKTtjYXNlIDIyOnJldHVybiB0PW4uc2VudCxWbi5zWzcwXSsrLG4uYWJydXB0KFwicmV0dXJuXCIsR24odCkpO2Nhc2UgMjU6Y2FzZVwiZW5kXCI6cmV0dXJuIG4uc3RvcCgpfX0sbix0aGlzKX0pKTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKX0se2tleTpcImRlY3J5cHRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBuPXIoKShvLmEubWFyayhmdW5jdGlvbiBuKCl7dmFyIGUsdCxsLGkscixjO3JldHVybiBvLmEud3JhcChmdW5jdGlvbihuKXtmb3IoOzspc3dpdGNoKG4ucHJldj1uLm5leHQpe2Nhc2UgMDppZihWbi5mWzExXSsrLFZuLnNbNzFdKyssXCJkZWNyeXB0XCI9PT10aGlzLl9jYXNjYWRlTW9kZSl7bi5uZXh0PTg7YnJlYWt9dGhyb3cgVm4uYlsxOF1bMF0rKyxWbi5zWzcyXSsrLG5ldyBFcnJvcihcIk5vdERlY3J5cHRpb25DYXNjYWRlXCIpO2Nhc2UgODpWbi5iWzE4XVsxXSsrO2Nhc2UgOTpWbi5zWzczXSsrLGU9dGhpcy5fb3JnS2V5cy5rZXlzLnB1YmxpY0tleXMsVm4uc1s3NF0rKyx0PW5ldyBBcnJheSh0aGlzLmxlbmd0aCksVm4uc1s3NV0rKyxsPXRoaXMubGVuZ3RoLTE7Y2FzZSAxMzppZighKGw+PTApKXtuLm5leHQ9ODY7YnJlYWt9aWYoVm4uc1s3Nl0rKyx0aGlzW2xdLmtleXMgaW5zdGFuY2VvZiBwbil7bi5uZXh0PTIxO2JyZWFrfXRocm93IFZuLmJbMTldWzBdKyssVm4uc1s3N10rKyxuZXcgRXJyb3IoXCJJbnZhbGlkS2V5c09iamVjdFwiKTtjYXNlIDIxOlZuLmJbMTldWzFdKys7Y2FzZSAyMjppZihWbi5zWzc4XSsrLHZvaWQgMCE9PXRoaXNbbF0uZGF0YSl7bi5uZXh0PTI5O2JyZWFrfXRocm93IFZuLmJbMjBdWzBdKyssVm4uc1s3OV0rKyxuZXcgRXJyb3IoXCJJbnZhbGlkRGF0YU9iamVjdFwiKTtjYXNlIDI5OlZuLmJbMjBdWzFdKys7Y2FzZSAzMDpyZXR1cm4gVm4uc1s4MF0rKyxuLm5leHQ9MzMsSW4odGhpc1tsXSk7Y2FzZSAzMzppZih0W2xdPW4uc2VudCxWbi5zWzgxXSsrLCEobD4wKSl7bi5uZXh0PTgyO2JyZWFrfWlmKFZuLmJbMjFdWzBdKyssVm4uc1s4Ml0rKyxpPXtlbmNyeXB0X2RlY3J5cHQ6dGhpc1tsLTFdLmRhdGEubWVzc2FnZS5zdWl0ZX0sVm4uc1s4M10rKyxyPVtcImRlY3J5cHRcIl0sYz12b2lkIDAsVm4uc1s4NF0rKyxcInNlc3Npb25fa2V5X2VuY3J5cHRcIiE9PXRoaXNbbC0xXS5kYXRhLm1lc3NhZ2Uua2V5VHlwZSl7bi5uZXh0PTQ3O2JyZWFrfVZuLmJbMjJdWzBdKyssVm4uc1s4NV0rKyxjPXtzZXNzaW9uS2V5OnRbbF0uZGF0YX0sbi5uZXh0PTc0O2JyZWFrO2Nhc2UgNDc6aWYoVm4uYlsyMl1bMV0rKyxWbi5zWzg2XSsrLFwianNjdVwiIT09dGhpc1tsLTFdLmRhdGEubWVzc2FnZS5zdWl0ZSl7bi5uZXh0PTU5O2JyZWFrfXJldHVybiBWbi5iWzIzXVswXSsrLFZuLnNbODddKyssbi5uZXh0PTU0LGFuLmltcG9ydEtleShcImRlclwiLHRbbF0uZGF0YSk7Y2FzZSA1NDpuLnQwPW4uc2VudCxuLnQxPVtuLnQwXSxjPXtwcml2YXRlS2V5czpuLnQxfSxuLm5leHQ9NzQ7YnJlYWs7Y2FzZSA1OTppZihWbi5iWzIzXVsxXSsrLFZuLnNbODhdKyssXCJvcGVucGdwXCIhPT10aGlzW2wtMV0uZGF0YS5tZXNzYWdlLnN1aXRlKXtuLm5leHQ9NzE7YnJlYWt9cmV0dXJuIFZuLmJbMjRdWzBdKyssVm4uc1s4OV0rKyxuLm5leHQ9NjYsZG4uaW1wb3J0S2V5KFwiZGVyXCIsdFtsXS5kYXRhKTtjYXNlIDY2Om4udDI9bi5zZW50LG4udDM9W24udDJdLGM9e3ByaXZhdGVLZXlzOm4udDN9LG4ubmV4dD03NDticmVhaztjYXNlIDcxOnRocm93IFZuLmJbMjRdWzFdKyssVm4uc1s5MF0rKyxuZXcgRXJyb3IoXCJVbmtub3duU3VpdGVcIik7Y2FzZSA3NDpyZXR1cm4gVm4uc1s5MV0rKyxWbi5iWzI2XVswXSsrLHRoaXNbbC0xXS5kYXRhLnNpZ25hdHVyZSBpbnN0YW5jZW9mIG9uJiYoVm4uYlsyNl1bMV0rKyx2b2lkIDAhPT1lKT8oVm4uYlsyNV1bMF0rKyxWbi5zWzkyXSsrLGMucHVibGljS2V5cz1lLFZuLnNbOTNdKyssaS5zaWduX3ZlcmlmeT10aGlzW2wtMV0uZGF0YS5zaWduYXR1cmUuc3VpdGUsVm4uc1s5NF0rKyxyLnB1c2goXCJ2ZXJpZnlcIikpOihWbi5iWzI1XVsxXSsrLFZuLnNbOTVdKyssVm4uYlsyOF1bMF0rKyx2b2lkIDAhPT10aGlzW2wtMV0uZGF0YS5tZXNzYWdlJiYoVm4uYlsyOF1bMV0rKyxcIm9wZW5wZ3BcIj09PXRoaXNbbC0xXS5kYXRhLm1lc3NhZ2Uuc3VpdGUpJiYoVm4uYlsyOF1bMl0rKyx2b2lkIDAhPT1lKT8oVm4uYlsyN11bMF0rKyxWbi5zWzk2XSsrLGMucHVibGljS2V5cz1lLFZuLnNbOTddKyssaS5zaWduX3ZlcmlmeT1cIm9wZW5wZ3BcIixWbi5zWzk4XSsrLHIucHVzaChcInZlcmlmeVwiKSk6Vm4uYlsyN11bMV0rKyksVm4uc1s5OV0rKyxuLm5leHQ9NzkseW4oXCJvYmplY3RcIix7a2V5czpjLHN1aXRlOmksbW9kZTpyfSk7Y2FzZSA3OTp0aGlzW2wtMV0ua2V5cz1uLnNlbnQsbi5uZXh0PTgzO2JyZWFrO2Nhc2UgODI6Vm4uYlsyMV1bMV0rKztjYXNlIDgzOmwtLSxuLm5leHQ9MTM7YnJlYWs7Y2FzZSA4NjpyZXR1cm4gVm4uc1sxMDBdKyssbi5hYnJ1cHQoXCJyZXR1cm5cIix0KTtjYXNlIDg4OmNhc2VcImVuZFwiOnJldHVybiBuLnN0b3AoKX19LG4sdGhpcyl9KSk7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKX0se2tleTpcInRvQXJyYXlcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBWbi5mWzE0XSsrLFZuLnNbMTAzXSsrLEFycmF5LmZyb20odGhpcyl9fSx7a2V5OlwibWFwXCIsdmFsdWU6ZnVuY3Rpb24obil7cmV0dXJuIFZuLmZbMTVdKyssVm4uc1sxMDRdKyssdGhpcy50b0FycmF5KCkubWFwKG4pfX0se2tleTpcInNsaWNlXCIsdmFsdWU6ZnVuY3Rpb24obixlKXtyZXR1cm4gVm4uZlsxNl0rKyxWbi5zWzEwNV0rKyx0aGlzLnRvQXJyYXkoKS5zbGljZShuLGUpfX0se2tleTpcIm1vZGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gVm4uZlsxMl0rKyxWbi5zWzEwMV0rKyx0aGlzLl9jYXNjYWRlTW9kZX19LHtrZXk6XCJrZXlzXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFZuLmZbMTNdKyssVm4uc1sxMDJdKyssdGhpcy5fb3JnS2V5c319XSksZX0oUygpKEFycmF5KSk7dC5kKGUsXCJnZW5lcmF0ZUtleVwiLGZ1bmN0aW9uKCl7cmV0dXJuIEtufSksdC5kKGUsXCJlbmNyeXB0XCIsZnVuY3Rpb24oKXtyZXR1cm4gVW59KSx0LmQoZSxcImRlY3J5cHRcIixmdW5jdGlvbigpe3JldHVybiBJbn0pLHQuZChlLFwic2lnblwiLGZ1bmN0aW9uKCl7cmV0dXJuIEJufSksdC5kKGUsXCJ2ZXJpZnlcIixmdW5jdGlvbigpe3JldHVybiBUbn0pLHQuZChlLFwiaW1wb3J0S2V5c1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHlufSksdC5kKGUsXCJpbXBvcnRFbmNyeXB0ZWRCdWZmZXJcIixmdW5jdGlvbigpe3JldHVybiB6fSksdC5kKGUsXCJpbXBvcnRSYXdFbmNyeXB0ZWRCdWZmZXJMaXN0XCIsZnVuY3Rpb24oKXtyZXR1cm4gWX0pLHQuZChlLFwiaW1wb3J0U2lnbmF0dXJlQnVmZmVyXCIsZnVuY3Rpb24oKXtyZXR1cm4gdG59KSx0LmQoZSxcImltcG9ydENhc2NhZGVkQnVmZmVyXCIsZnVuY3Rpb24oKXtyZXR1cm4gSm59KSx0LmQoZSxcImNyZWF0ZUVuY3J5cHRpb25DYXNjYWRlXCIsZnVuY3Rpb24oKXtyZXR1cm4gem59KSx0LmQoZSxcImNyZWF0ZURlY3J5cHRpb25DYXNjYWRlXCIsZnVuY3Rpb24oKXtyZXR1cm4gV259KTsoZnVuY3Rpb24oKXt2YXIgbj1cIi9Vc2Vycy9qdW4vUHJvamVjdEphdmFTY3JpcHQvY2FzY2FkZS9zcmMvaW5kZXguanNcIixlPVwiNmM3ZDQyM2Q1NTJmOGQ1N2RiOWQ0NThhZTkxY2U2YTA5Y2EzNTIxYlwiLHQ9bmV3KDAsZnVuY3Rpb24oKXt9LmNvbnN0cnVjdG9yKShcInJldHVybiB0aGlzXCIpKCksbD1cIl9fY292ZXJhZ2VfX1wiLG89e3BhdGg6XCIvVXNlcnMvanVuL1Byb2plY3RKYXZhU2NyaXB0L2Nhc2NhZGUvc3JjL2luZGV4LmpzXCIsc3RhdGVtZW50TWFwOnt9LGZuTWFwOnt9LGJyYW5jaE1hcDp7fSxzOnt9LGY6e30sYjp7fSxfY292ZXJhZ2VTY2hlbWE6XCI0M2UyN2UxMzhlYmY5Y2ZjNTk2NmIwODJjZjlhMDI4MzAyZWQ0MTg0XCJ9LGk9dFtsXXx8KHRbbF09e30pO2lbbl0mJmlbbl0uaGFzaD09PWU/aVtuXTooby5oYXNoPWUsaVtuXT1vKX0pKCksZS5kZWZhdWx0PXtnZW5lcmF0ZUtleTpLbixlbmNyeXB0OlVuLGRlY3J5cHQ6SW4sc2lnbjpCbix2ZXJpZnk6VG4saW1wb3J0S2V5czp5bixpbXBvcnRFbmNyeXB0ZWRCdWZmZXI6eixpbXBvcnRSYXdFbmNyeXB0ZWRCdWZmZXJMaXN0OlksaW1wb3J0U2lnbmF0dXJlQnVmZmVyOnRuLGltcG9ydENhc2NhZGVkQnVmZmVyOkpuLGNyZWF0ZUVuY3J5cHRpb25DYXNjYWRlOnpuLGNyZWF0ZURlY3J5cHRpb25DYXNjYWRlOldufX1dKX0pOyIsImZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjazsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICBpZiAoaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICAgIHZhciBhID0gW251bGxdO1xuICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpO1xuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICBpZiAoQ2xhc3MpIHNldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jb25zdHJ1Y3Q7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2Y7IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHM7IiwiZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXNOYXRpdmVGdW5jdGlvbjsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5OyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVNwcmVhZDsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjsiLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiLCJ2YXIgYXJyYXlXaXRob3V0SG9sZXMgPSByZXF1aXJlKFwiLi9hcnJheVdpdGhvdXRIb2xlc1wiKTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheVwiKTtcblxudmFyIG5vbkl0ZXJhYmxlU3ByZWFkID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVTcHJlYWRcIik7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdG9Db25zdW1hYmxlQXJyYXk7IiwiZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YyKG9iaik7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiBfdHlwZW9mMihvYmopO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwidmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vZ2V0UHJvdG90eXBlT2ZcIik7XG5cbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mXCIpO1xuXG52YXIgaXNOYXRpdmVGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2lzTmF0aXZlRnVuY3Rpb25cIik7XG5cbnZhciBjb25zdHJ1Y3QgPSByZXF1aXJlKFwiLi9jb25zdHJ1Y3RcIik7XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcblxuICBtb2R1bGUuZXhwb3J0cyA9IF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gICAgaWYgKENsYXNzID09PSBudWxsIHx8ICFpc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzO1xuXG4gICAgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpO1xuXG4gICAgICBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBXcmFwcGVyKCkge1xuICAgICAgcmV0dXJuIGNvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBnZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IFdyYXBwZXIsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTtcbiAgfTtcblxuICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3dyYXBOYXRpdmVTdXBlcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9IChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMgfHwgKHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiICYmIHNlbGYpO1xufSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG5cbi8vIFVzZSBgZ2V0T3duUHJvcGVydHlOYW1lc2AgYmVjYXVzZSBub3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgY2FsbGluZ1xuLy8gYGhhc093blByb3BlcnR5YCBvbiB0aGUgZ2xvYmFsIGBzZWxmYCBvYmplY3QgaW4gYSB3b3JrZXIuIFNlZSAjMTgzLlxudmFyIGhhZFJ1bnRpbWUgPSBnLnJlZ2VuZXJhdG9yUnVudGltZSAmJlxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpID49IDA7XG5cbi8vIFNhdmUgdGhlIG9sZCByZWdlbmVyYXRvclJ1bnRpbWUgaW4gY2FzZSBpdCBuZWVkcyB0byBiZSByZXN0b3JlZCBsYXRlci5cbnZhciBvbGRSdW50aW1lID0gaGFkUnVudGltZSAmJiBnLnJlZ2VuZXJhdG9yUnVudGltZTtcblxuLy8gRm9yY2UgcmVldmFsdXRhdGlvbiBvZiBydW50aW1lLmpzLlxuZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcnVudGltZVwiKTtcblxuaWYgKGhhZFJ1bnRpbWUpIHtcbiAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgcnVudGltZS5cbiAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBvbGRSdW50aW1lO1xufSBlbHNlIHtcbiAgLy8gUmVtb3ZlIHRoZSBnbG9iYWwgcHJvcGVydHkgYWRkZWQgYnkgcnVudGltZS5qcy5cbiAgdHJ5IHtcbiAgICBkZWxldGUgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIGcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBJbiBzbG9wcHkgbW9kZSwgdW5ib3VuZCBgdGhpc2AgcmVmZXJzIHRvIHRoZSBnbG9iYWwgb2JqZWN0LCBmYWxsYmFjayB0b1xuICAvLyBGdW5jdGlvbiBjb25zdHJ1Y3RvciBpZiB3ZSdyZSBpbiBnbG9iYWwgc3RyaWN0IG1vZGUuIFRoYXQgaXMgc2FkbHkgYSBmb3JtXG4gIC8vIG9mIGluZGlyZWN0IGV2YWwgd2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kuXG4gIChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcyB8fCAodHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgJiYgc2VsZik7XG4gIH0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpXG4pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIi8qIVxuICogYXNzZXJ0aW9uLWVycm9yXG4gKiBDb3B5cmlnaHQoYykgMjAxMyBKYWtlIEx1ZXIgPGpha2VAcXVhbGlhbmN5LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBvbmUgb2JqZWN0IHRvIGFub3RoZXIgZXhjbHVkaW5nIGFueSBvcmlnaW5hbGx5XG4gKiBsaXN0ZWQuIFJldHVybmVkIGZ1bmN0aW9uIHdpbGwgY3JlYXRlIGEgbmV3IGB7fWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV4Y2x1ZGVkIHByb3BlcnRpZXMgLi4uXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuXG5mdW5jdGlvbiBleGNsdWRlICgpIHtcbiAgdmFyIGV4Y2x1ZGVzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gIGZ1bmN0aW9uIGV4Y2x1ZGVQcm9wcyAocmVzLCBvYmopIHtcbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCF+ZXhjbHVkZXMuaW5kZXhPZihrZXkpKSByZXNba2V5XSA9IG9ialtrZXldO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGV4dGVuZEV4Y2x1ZGUgKCkge1xuICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICAsIGkgPSAwXG4gICAgICAsIHJlcyA9IHt9O1xuXG4gICAgZm9yICg7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBleGNsdWRlUHJvcHMocmVzLCBhcmdzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xufTtcblxuLyohXG4gKiBQcmltYXJ5IEV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFzc2VydGlvbkVycm9yO1xuXG4vKipcbiAqICMjIyBBc3NlcnRpb25FcnJvclxuICpcbiAqIEFuIGV4dGVuc2lvbiBvZiB0aGUgSmF2YVNjcmlwdCBgRXJyb3JgIGNvbnN0cnVjdG9yIGZvclxuICogYXNzZXJ0aW9uIGFuZCB2YWxpZGF0aW9uIHNjZW5hcmlvcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgdG8gaW5jbHVkZSAob3B0aW9uYWwpXG4gKiBAcGFyYW0ge2NhbGxlZX0gc3RhcnQgc3RhY2sgZnVuY3Rpb24gKG9wdGlvbmFsKVxuICovXG5cbmZ1bmN0aW9uIEFzc2VydGlvbkVycm9yIChtZXNzYWdlLCBfcHJvcHMsIHNzZikge1xuICB2YXIgZXh0ZW5kID0gZXhjbHVkZSgnbmFtZScsICdtZXNzYWdlJywgJ3N0YWNrJywgJ2NvbnN0cnVjdG9yJywgJ3RvSlNPTicpXG4gICAgLCBwcm9wcyA9IGV4dGVuZChfcHJvcHMgfHwge30pO1xuXG4gIC8vIGRlZmF1bHQgdmFsdWVzXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UgfHwgJ1Vuc3BlY2lmaWVkIEFzc2VydGlvbkVycm9yJztcbiAgdGhpcy5zaG93RGlmZiA9IGZhbHNlO1xuXG4gIC8vIGNvcHkgZnJvbSBwcm9wZXJ0aWVzXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHRoaXNba2V5XSA9IHByb3BzW2tleV07XG4gIH1cblxuICAvLyBjYXB0dXJlIHN0YWNrIHRyYWNlXG4gIHNzZiA9IHNzZiB8fCBBc3NlcnRpb25FcnJvcjtcbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgc3NmKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICB0aGlzLnN0YWNrID0gZS5zdGFjaztcbiAgICB9XG4gIH1cbn1cblxuLyohXG4gKiBJbmhlcml0IGZyb20gRXJyb3IucHJvdG90eXBlXG4gKi9cblxuQXNzZXJ0aW9uRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuXG4vKiFcbiAqIFN0YXRpY2FsbHkgc2V0IG5hbWVcbiAqL1xuXG5Bc3NlcnRpb25FcnJvci5wcm90b3R5cGUubmFtZSA9ICdBc3NlcnRpb25FcnJvcic7XG5cbi8qIVxuICogRW5zdXJlIGNvcnJlY3QgY29uc3RydWN0b3JcbiAqL1xuXG5Bc3NlcnRpb25FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBc3NlcnRpb25FcnJvcjtcblxuLyoqXG4gKiBBbGxvdyBlcnJvcnMgdG8gYmUgY29udmVydGVkIHRvIEpTT04gZm9yIHN0YXRpYyB0cmFuc2Zlci5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGluY2x1ZGUgc3RhY2sgKGRlZmF1bHQ6IGB0cnVlYClcbiAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHRoYXQgY2FuIGJlIGBKU09OLnN0cmluZ2lmeWBcbiAqL1xuXG5Bc3NlcnRpb25FcnJvci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKHN0YWNrKSB7XG4gIHZhciBleHRlbmQgPSBleGNsdWRlKCdjb25zdHJ1Y3RvcicsICd0b0pTT04nLCAnc3RhY2snKVxuICAgICwgcHJvcHMgPSBleHRlbmQoeyBuYW1lOiB0aGlzLm5hbWUgfSwgdGhpcyk7XG5cbiAgLy8gaW5jbHVkZSBzdGFjayBpZiBleGlzdHMgYW5kIG5vdCB0dXJuZWQgb2ZmXG4gIGlmIChmYWxzZSAhPT0gc3RhY2sgJiYgdGhpcy5zdGFjaykge1xuICAgIHByb3BzLnN0YWNrID0gdGhpcy5zdGFjaztcbiAgfVxuXG4gIHJldHVybiBwcm9wcztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2NoYWknKTtcbiIsIi8qIVxuICogY2hhaVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciB1c2VkID0gW107XG5cbi8qIVxuICogQ2hhaSB2ZXJzaW9uXG4gKi9cblxuZXhwb3J0cy52ZXJzaW9uID0gJzQuMi4wJztcblxuLyohXG4gKiBBc3NlcnRpb24gRXJyb3JcbiAqL1xuXG5leHBvcnRzLkFzc2VydGlvbkVycm9yID0gcmVxdWlyZSgnYXNzZXJ0aW9uLWVycm9yJyk7XG5cbi8qIVxuICogVXRpbHMgZm9yIHBsdWdpbnMgKG5vdCBleHBvcnRlZClcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vY2hhaS91dGlscycpO1xuXG4vKipcbiAqICMgLnVzZShmdW5jdGlvbilcbiAqXG4gKiBQcm92aWRlcyBhIHdheSB0byBleHRlbmQgdGhlIGludGVybmFscyBvZiBDaGFpLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259XG4gKiBAcmV0dXJucyB7dGhpc30gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMudXNlID0gZnVuY3Rpb24gKGZuKSB7XG4gIGlmICghfnVzZWQuaW5kZXhPZihmbikpIHtcbiAgICBmbihleHBvcnRzLCB1dGlsKTtcbiAgICB1c2VkLnB1c2goZm4pO1xuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHM7XG59O1xuXG4vKiFcbiAqIFV0aWxpdHkgRnVuY3Rpb25zXG4gKi9cblxuZXhwb3J0cy51dGlsID0gdXRpbDtcblxuLyohXG4gKiBDb25maWd1cmF0aW9uXG4gKi9cblxudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4vY2hhaS9jb25maWcnKTtcbmV4cG9ydHMuY29uZmlnID0gY29uZmlnO1xuXG4vKiFcbiAqIFByaW1hcnkgYEFzc2VydGlvbmAgcHJvdG90eXBlXG4gKi9cblxudmFyIGFzc2VydGlvbiA9IHJlcXVpcmUoJy4vY2hhaS9hc3NlcnRpb24nKTtcbmV4cG9ydHMudXNlKGFzc2VydGlvbik7XG5cbi8qIVxuICogQ29yZSBBc3NlcnRpb25zXG4gKi9cblxudmFyIGNvcmUgPSByZXF1aXJlKCcuL2NoYWkvY29yZS9hc3NlcnRpb25zJyk7XG5leHBvcnRzLnVzZShjb3JlKTtcblxuLyohXG4gKiBFeHBlY3QgaW50ZXJmYWNlXG4gKi9cblxudmFyIGV4cGVjdCA9IHJlcXVpcmUoJy4vY2hhaS9pbnRlcmZhY2UvZXhwZWN0Jyk7XG5leHBvcnRzLnVzZShleHBlY3QpO1xuXG4vKiFcbiAqIFNob3VsZCBpbnRlcmZhY2VcbiAqL1xuXG52YXIgc2hvdWxkID0gcmVxdWlyZSgnLi9jaGFpL2ludGVyZmFjZS9zaG91bGQnKTtcbmV4cG9ydHMudXNlKHNob3VsZCk7XG5cbi8qIVxuICogQXNzZXJ0IGludGVyZmFjZVxuICovXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCcuL2NoYWkvaW50ZXJmYWNlL2Fzc2VydCcpO1xuZXhwb3J0cy51c2UoYXNzZXJ0KTtcbiIsIi8qIVxuICogY2hhaVxuICogaHR0cDovL2NoYWlqcy5jb21cbiAqIENvcHlyaWdodChjKSAyMDExLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX2NoYWksIHV0aWwpIHtcbiAgLyohXG4gICAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gICAqL1xuXG4gIHZhciBBc3NlcnRpb25FcnJvciA9IF9jaGFpLkFzc2VydGlvbkVycm9yXG4gICAgLCBmbGFnID0gdXRpbC5mbGFnO1xuXG4gIC8qIVxuICAgKiBNb2R1bGUgZXhwb3J0LlxuICAgKi9cblxuICBfY2hhaS5Bc3NlcnRpb24gPSBBc3NlcnRpb247XG5cbiAgLyohXG4gICAqIEFzc2VydGlvbiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBDcmVhdGVzIG9iamVjdCBmb3IgY2hhaW5pbmcuXG4gICAqXG4gICAqIGBBc3NlcnRpb25gIG9iamVjdHMgY29udGFpbiBtZXRhZGF0YSBpbiB0aGUgZm9ybSBvZiBmbGFncy4gVGhyZWUgZmxhZ3MgY2FuXG4gICAqIGJlIGFzc2lnbmVkIGR1cmluZyBpbnN0YW50aWF0aW9uIGJ5IHBhc3NpbmcgYXJndW1lbnRzIHRvIHRoaXMgY29uc3RydWN0b3I6XG4gICAqXG4gICAqIC0gYG9iamVjdGA6IFRoaXMgZmxhZyBjb250YWlucyB0aGUgdGFyZ2V0IG9mIHRoZSBhc3NlcnRpb24uIEZvciBleGFtcGxlLCBpblxuICAgKiAgIHRoZSBhc3NlcnRpb24gYGV4cGVjdChudW1LaXR0ZW5zKS50by5lcXVhbCg3KTtgLCB0aGUgYG9iamVjdGAgZmxhZyB3aWxsXG4gICAqICAgY29udGFpbiBgbnVtS2l0dGVuc2Agc28gdGhhdCB0aGUgYGVxdWFsYCBhc3NlcnRpb24gY2FuIHJlZmVyZW5jZSBpdCB3aGVuXG4gICAqICAgbmVlZGVkLlxuICAgKlxuICAgKiAtIGBtZXNzYWdlYDogVGhpcyBmbGFnIGNvbnRhaW5zIGFuIG9wdGlvbmFsIGN1c3RvbSBlcnJvciBtZXNzYWdlIHRvIGJlXG4gICAqICAgcHJlcGVuZGVkIHRvIHRoZSBlcnJvciBtZXNzYWdlIHRoYXQncyBnZW5lcmF0ZWQgYnkgdGhlIGFzc2VydGlvbiB3aGVuIGl0XG4gICAqICAgZmFpbHMuXG4gICAqXG4gICAqIC0gYHNzZmlgOiBUaGlzIGZsYWcgc3RhbmRzIGZvciBcInN0YXJ0IHN0YWNrIGZ1bmN0aW9uIGluZGljYXRvclwiLiBJdFxuICAgKiAgIGNvbnRhaW5zIGEgZnVuY3Rpb24gcmVmZXJlbmNlIHRoYXQgc2VydmVzIGFzIHRoZSBzdGFydGluZyBwb2ludCBmb3JcbiAgICogICByZW1vdmluZyBmcmFtZXMgZnJvbSB0aGUgc3RhY2sgdHJhY2Ugb2YgdGhlIGVycm9yIHRoYXQncyBjcmVhdGVkIGJ5IHRoZVxuICAgKiAgIGFzc2VydGlvbiB3aGVuIGl0IGZhaWxzLiBUaGUgZ29hbCBpcyB0byBwcm92aWRlIGEgY2xlYW5lciBzdGFjayB0cmFjZSB0b1xuICAgKiAgIGVuZCB1c2VycyBieSByZW1vdmluZyBDaGFpJ3MgaW50ZXJuYWwgZnVuY3Rpb25zLiBOb3RlIHRoYXQgaXQgb25seSB3b3Jrc1xuICAgKiAgIGluIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgYEVycm9yLmNhcHR1cmVTdGFja1RyYWNlYCwgYW5kIG9ubHkgd2hlblxuICAgKiAgIGBDaGFpLmNvbmZpZy5pbmNsdWRlU3RhY2tgIGhhc24ndCBiZWVuIHNldCB0byBgZmFsc2VgLlxuICAgKlxuICAgKiAtIGBsb2NrU3NmaWA6IFRoaXMgZmxhZyBjb250cm9scyB3aGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gYHNzZmlgIGZsYWdcbiAgICogICBzaG91bGQgcmV0YWluIGl0cyBjdXJyZW50IHZhbHVlLCBldmVuIGFzIGFzc2VydGlvbnMgYXJlIGNoYWluZWQgb2ZmIG9mXG4gICAqICAgdGhpcyBvYmplY3QuIFRoaXMgaXMgdXN1YWxseSBzZXQgdG8gYHRydWVgIHdoZW4gY3JlYXRpbmcgYSBuZXcgYXNzZXJ0aW9uXG4gICAqICAgZnJvbSB3aXRoaW4gYW5vdGhlciBhc3NlcnRpb24uIEl0J3MgYWxzbyB0ZW1wb3JhcmlseSBzZXQgdG8gYHRydWVgIGJlZm9yZVxuICAgKiAgIGFuIG92ZXJ3cml0dGVuIGFzc2VydGlvbiBnZXRzIGNhbGxlZCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge01peGVkfSBvYmogdGFyZ2V0IG9mIHRoZSBhc3NlcnRpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyAob3B0aW9uYWwpIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHNzZmkgKG9wdGlvbmFsKSBzdGFydGluZyBwb2ludCBmb3IgcmVtb3Zpbmcgc3RhY2sgZnJhbWVzXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gbG9ja1NzZmkgKG9wdGlvbmFsKSB3aGV0aGVyIG9yIG5vdCB0aGUgc3NmaSBmbGFnIGlzIGxvY2tlZFxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgZnVuY3Rpb24gQXNzZXJ0aW9uIChvYmosIG1zZywgc3NmaSwgbG9ja1NzZmkpIHtcbiAgICBmbGFnKHRoaXMsICdzc2ZpJywgc3NmaSB8fCBBc3NlcnRpb24pO1xuICAgIGZsYWcodGhpcywgJ2xvY2tTc2ZpJywgbG9ja1NzZmkpO1xuICAgIGZsYWcodGhpcywgJ29iamVjdCcsIG9iaik7XG4gICAgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG5cbiAgICByZXR1cm4gdXRpbC5wcm94aWZ5KHRoaXMpO1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFzc2VydGlvbiwgJ2luY2x1ZGVTdGFjaycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS53YXJuKCdBc3NlcnRpb24uaW5jbHVkZVN0YWNrIGlzIGRlcHJlY2F0ZWQsIHVzZSBjaGFpLmNvbmZpZy5pbmNsdWRlU3RhY2sgaW5zdGVhZC4nKTtcbiAgICAgIHJldHVybiBjb25maWcuaW5jbHVkZVN0YWNrO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgY29uc29sZS53YXJuKCdBc3NlcnRpb24uaW5jbHVkZVN0YWNrIGlzIGRlcHJlY2F0ZWQsIHVzZSBjaGFpLmNvbmZpZy5pbmNsdWRlU3RhY2sgaW5zdGVhZC4nKTtcbiAgICAgIGNvbmZpZy5pbmNsdWRlU3RhY2sgPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBc3NlcnRpb24sICdzaG93RGlmZicsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS53YXJuKCdBc3NlcnRpb24uc2hvd0RpZmYgaXMgZGVwcmVjYXRlZCwgdXNlIGNoYWkuY29uZmlnLnNob3dEaWZmIGluc3RlYWQuJyk7XG4gICAgICByZXR1cm4gY29uZmlnLnNob3dEaWZmO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgY29uc29sZS53YXJuKCdBc3NlcnRpb24uc2hvd0RpZmYgaXMgZGVwcmVjYXRlZCwgdXNlIGNoYWkuY29uZmlnLnNob3dEaWZmIGluc3RlYWQuJyk7XG4gICAgICBjb25maWcuc2hvd0RpZmYgPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xuICAgIHV0aWwuYWRkUHJvcGVydHkodGhpcy5wcm90b3R5cGUsIG5hbWUsIGZuKTtcbiAgfTtcblxuICBBc3NlcnRpb24uYWRkTWV0aG9kID0gZnVuY3Rpb24gKG5hbWUsIGZuKSB7XG4gICAgdXRpbC5hZGRNZXRob2QodGhpcy5wcm90b3R5cGUsIG5hbWUsIGZuKTtcbiAgfTtcblxuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kID0gZnVuY3Rpb24gKG5hbWUsIGZuLCBjaGFpbmluZ0JlaGF2aW9yKSB7XG4gICAgdXRpbC5hZGRDaGFpbmFibGVNZXRob2QodGhpcy5wcm90b3R5cGUsIG5hbWUsIGZuLCBjaGFpbmluZ0JlaGF2aW9yKTtcbiAgfTtcblxuICBBc3NlcnRpb24ub3ZlcndyaXRlUHJvcGVydHkgPSBmdW5jdGlvbiAobmFtZSwgZm4pIHtcbiAgICB1dGlsLm92ZXJ3cml0ZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLm92ZXJ3cml0ZU1ldGhvZCA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xuICAgIHV0aWwub3ZlcndyaXRlTWV0aG9kKHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCA9IGZ1bmN0aW9uIChuYW1lLCBmbiwgY2hhaW5pbmdCZWhhdmlvcikge1xuICAgIHV0aWwub3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kKHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbiwgY2hhaW5pbmdCZWhhdmlvcik7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuYXNzZXJ0KGV4cHJlc3Npb24sIG1lc3NhZ2UsIG5lZ2F0ZU1lc3NhZ2UsIGV4cGVjdGVkLCBhY3R1YWwsIHNob3dEaWZmKVxuICAgKlxuICAgKiBFeGVjdXRlcyBhbiBleHByZXNzaW9uIGFuZCBjaGVjayBleHBlY3RhdGlvbnMuIFRocm93cyBBc3NlcnRpb25FcnJvciBmb3IgcmVwb3J0aW5nIGlmIHRlc3QgZG9lc24ndCBwYXNzLlxuICAgKlxuICAgKiBAbmFtZSBhc3NlcnRcbiAgICogQHBhcmFtIHtQaGlsb3NvcGhpY2FsfSBleHByZXNzaW9uIHRvIGJlIHRlc3RlZFxuICAgKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gbWVzc2FnZSBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgbWVzc2FnZSB0byBkaXNwbGF5IGlmIGV4cHJlc3Npb24gZmFpbHNcbiAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IG5lZ2F0ZWRNZXNzYWdlIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBuZWdhdGVkTWVzc2FnZSB0byBkaXNwbGF5IGlmIG5lZ2F0ZWQgZXhwcmVzc2lvbiBmYWlsc1xuICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZCB2YWx1ZSAocmVtZW1iZXIgdG8gY2hlY2sgZm9yIG5lZ2F0aW9uKVxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWwgKG9wdGlvbmFsKSB3aWxsIGRlZmF1bHQgdG8gYHRoaXMub2JqYFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNob3dEaWZmIChvcHRpb25hbCkgd2hlbiBzZXQgdG8gYHRydWVgLCBhc3NlcnQgd2lsbCBkaXNwbGF5IGEgZGlmZiBpbiBhZGRpdGlvbiB0byB0aGUgbWVzc2FnZSBpZiBleHByZXNzaW9uIGZhaWxzXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cblxuICBBc3NlcnRpb24ucHJvdG90eXBlLmFzc2VydCA9IGZ1bmN0aW9uIChleHByLCBtc2csIG5lZ2F0ZU1zZywgZXhwZWN0ZWQsIF9hY3R1YWwsIHNob3dEaWZmKSB7XG4gICAgdmFyIG9rID0gdXRpbC50ZXN0KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGZhbHNlICE9PSBzaG93RGlmZikgc2hvd0RpZmYgPSB0cnVlO1xuICAgIGlmICh1bmRlZmluZWQgPT09IGV4cGVjdGVkICYmIHVuZGVmaW5lZCA9PT0gX2FjdHVhbCkgc2hvd0RpZmYgPSBmYWxzZTtcbiAgICBpZiAodHJ1ZSAhPT0gY29uZmlnLnNob3dEaWZmKSBzaG93RGlmZiA9IGZhbHNlO1xuXG4gICAgaWYgKCFvaykge1xuICAgICAgbXNnID0gdXRpbC5nZXRNZXNzYWdlKHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB2YXIgYWN0dWFsID0gdXRpbC5nZXRBY3R1YWwodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihtc2csIHtcbiAgICAgICAgICBhY3R1YWw6IGFjdHVhbFxuICAgICAgICAsIGV4cGVjdGVkOiBleHBlY3RlZFxuICAgICAgICAsIHNob3dEaWZmOiBzaG93RGlmZlxuICAgICAgfSwgKGNvbmZpZy5pbmNsdWRlU3RhY2spID8gdGhpcy5hc3NlcnQgOiBmbGFnKHRoaXMsICdzc2ZpJykpO1xuICAgIH1cbiAgfTtcblxuICAvKiFcbiAgICogIyMjIC5fb2JqXG4gICAqXG4gICAqIFF1aWNrIHJlZmVyZW5jZSB0byBzdG9yZWQgYGFjdHVhbGAgdmFsdWUgZm9yIHBsdWdpbiBkZXZlbG9wZXJzLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFzc2VydGlvbi5wcm90b3R5cGUsICdfb2JqJyxcbiAgICB7IGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gICAgICB9XG4gICAgLCBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgZmxhZyh0aGlzLCAnb2JqZWN0JywgdmFsKTtcbiAgICAgIH1cbiAgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyoqXG4gICAqICMjIyBjb25maWcuaW5jbHVkZVN0YWNrXG4gICAqXG4gICAqIFVzZXIgY29uZmlndXJhYmxlIHByb3BlcnR5LCBpbmZsdWVuY2VzIHdoZXRoZXIgc3RhY2sgdHJhY2VcbiAgICogaXMgaW5jbHVkZWQgaW4gQXNzZXJ0aW9uIGVycm9yIG1lc3NhZ2UuIERlZmF1bHQgb2YgZmFsc2VcbiAgICogc3VwcHJlc3NlcyBzdGFjayB0cmFjZSBpbiB0aGUgZXJyb3IgbWVzc2FnZS5cbiAgICpcbiAgICogICAgIGNoYWkuY29uZmlnLmluY2x1ZGVTdGFjayA9IHRydWU7ICAvLyBlbmFibGUgc3RhY2sgb24gZXJyb3JcbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBpbmNsdWRlU3RhY2s6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiAjIyMgY29uZmlnLnNob3dEaWZmXG4gICAqXG4gICAqIFVzZXIgY29uZmlndXJhYmxlIHByb3BlcnR5LCBpbmZsdWVuY2VzIHdoZXRoZXIgb3Igbm90XG4gICAqIHRoZSBgc2hvd0RpZmZgIGZsYWcgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZSB0aHJvd25cbiAgICogQXNzZXJ0aW9uRXJyb3JzLiBgZmFsc2VgIHdpbGwgYWx3YXlzIGJlIGBmYWxzZWA7IGB0cnVlYFxuICAgKiB3aWxsIGJlIHRydWUgd2hlbiB0aGUgYXNzZXJ0aW9uIGhhcyByZXF1ZXN0ZWQgYSBkaWZmXG4gICAqIGJlIHNob3duLlxuICAgKlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHNob3dEaWZmOiB0cnVlLFxuXG4gIC8qKlxuICAgKiAjIyMgY29uZmlnLnRydW5jYXRlVGhyZXNob2xkXG4gICAqXG4gICAqIFVzZXIgY29uZmlndXJhYmxlIHByb3BlcnR5LCBzZXRzIGxlbmd0aCB0aHJlc2hvbGQgZm9yIGFjdHVhbCBhbmRcbiAgICogZXhwZWN0ZWQgdmFsdWVzIGluIGFzc2VydGlvbiBlcnJvcnMuIElmIHRoaXMgdGhyZXNob2xkIGlzIGV4Y2VlZGVkLCBmb3JcbiAgICogZXhhbXBsZSBmb3IgbGFyZ2UgZGF0YSBzdHJ1Y3R1cmVzLCB0aGUgdmFsdWUgaXMgcmVwbGFjZWQgd2l0aCBzb21ldGhpbmdcbiAgICogbGlrZSBgWyBBcnJheSgzKSBdYCBvciBgeyBPYmplY3QgKHByb3AxLCBwcm9wMikgfWAuXG4gICAqXG4gICAqIFNldCBpdCB0byB6ZXJvIGlmIHlvdSB3YW50IHRvIGRpc2FibGUgdHJ1bmNhdGluZyBhbHRvZ2V0aGVyLlxuICAgKlxuICAgKiBUaGlzIGlzIGVzcGVjaWFsbHkgdXNlcmZ1bCB3aGVuIGRvaW5nIGFzc2VydGlvbnMgb24gYXJyYXlzOiBoYXZpbmcgdGhpc1xuICAgKiBzZXQgdG8gYSByZWFzb25hYmxlIGxhcmdlIHZhbHVlIG1ha2VzIHRoZSBmYWlsdXJlIG1lc3NhZ2VzIHJlYWRpbHlcbiAgICogaW5zcGVjdGFibGUuXG4gICAqXG4gICAqICAgICBjaGFpLmNvbmZpZy50cnVuY2F0ZVRocmVzaG9sZCA9IDA7ICAvLyBkaXNhYmxlIHRydW5jYXRpbmdcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHRydW5jYXRlVGhyZXNob2xkOiA0MCxcblxuICAvKipcbiAgICogIyMjIGNvbmZpZy51c2VQcm94eVxuICAgKlxuICAgKiBVc2VyIGNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSwgZGVmaW5lcyBpZiBjaGFpIHdpbGwgdXNlIGEgUHJveHkgdG8gdGhyb3dcbiAgICogYW4gZXJyb3Igd2hlbiBhIG5vbi1leGlzdGVudCBwcm9wZXJ0eSBpcyByZWFkLCB3aGljaCBwcm90ZWN0cyB1c2Vyc1xuICAgKiBmcm9tIHR5cG9zIHdoZW4gdXNpbmcgcHJvcGVydHktYmFzZWQgYXNzZXJ0aW9ucy5cbiAgICpcbiAgICogU2V0IGl0IHRvIGZhbHNlIGlmIHlvdSB3YW50IHRvIGRpc2FibGUgdGhpcyBmZWF0dXJlLlxuICAgKlxuICAgKiAgICAgY2hhaS5jb25maWcudXNlUHJveHkgPSBmYWxzZTsgIC8vIGRpc2FibGUgdXNlIG9mIFByb3h5XG4gICAqXG4gICAqIFRoaXMgZmVhdHVyZSBpcyBhdXRvbWF0aWNhbGx5IGRpc2FibGVkIHJlZ2FyZGxlc3Mgb2YgdGhpcyBjb25maWcgdmFsdWVcbiAgICogaW4gZW52aXJvbm1lbnRzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBwcm94aWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHVzZVByb3h5OiB0cnVlLFxuXG4gIC8qKlxuICAgKiAjIyMgY29uZmlnLnByb3h5RXhjbHVkZWRLZXlzXG4gICAqXG4gICAqIFVzZXIgY29uZmlndXJhYmxlIHByb3BlcnR5LCBkZWZpbmVzIHdoaWNoIHByb3BlcnRpZXMgc2hvdWxkIGJlIGlnbm9yZWRcbiAgICogaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBlcnJvciBpZiB0aGV5IGRvIG5vdCBleGlzdCBvbiB0aGUgYXNzZXJ0aW9uLlxuICAgKiBUaGlzIGlzIG9ubHkgYXBwbGllZCBpZiB0aGUgZW52aXJvbm1lbnQgQ2hhaSBpcyBydW5uaW5nIGluIHN1cHBvcnRzIHByb3hpZXMgYW5kXG4gICAqIGlmIHRoZSBgdXNlUHJveHlgIGNvbmZpZ3VyYXRpb24gc2V0dGluZyBpcyBlbmFibGVkLlxuICAgKiBCeSBkZWZhdWx0LCBgdGhlbmAgYW5kIGBpbnNwZWN0YCB3aWxsIG5vdCB0aHJvdyBhbiBlcnJvciBpZiB0aGV5IGRvIG5vdCBleGlzdCBvbiB0aGVcbiAgICogYXNzZXJ0aW9uIG9iamVjdCBiZWNhdXNlIHRoZSBgLmluc3BlY3RgIHByb3BlcnR5IGlzIHJlYWQgYnkgYHV0aWwuaW5zcGVjdGAgKGZvciBleGFtcGxlLCB3aGVuXG4gICAqIHVzaW5nIGBjb25zb2xlLmxvZ2Agb24gdGhlIGFzc2VydGlvbiBvYmplY3QpIGFuZCBgLnRoZW5gIGlzIG5lY2Vzc2FyeSBmb3IgcHJvbWlzZSB0eXBlLWNoZWNraW5nLlxuICAgKlxuICAgKiAgICAgLy8gQnkgZGVmYXVsdCB0aGVzZSBrZXlzIHdpbGwgbm90IHRocm93IGFuIGVycm9yIGlmIHRoZXkgZG8gbm90IGV4aXN0IG9uIHRoZSBhc3NlcnRpb24gb2JqZWN0XG4gICAqICAgICBjaGFpLmNvbmZpZy5wcm94eUV4Y2x1ZGVkS2V5cyA9IFsndGhlbicsICdpbnNwZWN0J107XG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHByb3h5RXhjbHVkZWRLZXlzOiBbJ3RoZW4nLCAnY2F0Y2gnLCAnaW5zcGVjdCcsICd0b0pTT04nXVxufTtcbiIsIi8qIVxuICogY2hhaVxuICogaHR0cDovL2NoYWlqcy5jb21cbiAqIENvcHlyaWdodChjKSAyMDExLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjaGFpLCBfKSB7XG4gIHZhciBBc3NlcnRpb24gPSBjaGFpLkFzc2VydGlvblxuICAgICwgQXNzZXJ0aW9uRXJyb3IgPSBjaGFpLkFzc2VydGlvbkVycm9yXG4gICAgLCBmbGFnID0gXy5mbGFnO1xuXG4gIC8qKlxuICAgKiAjIyMgTGFuZ3VhZ2UgQ2hhaW5zXG4gICAqXG4gICAqIFRoZSBmb2xsb3dpbmcgYXJlIHByb3ZpZGVkIGFzIGNoYWluYWJsZSBnZXR0ZXJzIHRvIGltcHJvdmUgdGhlIHJlYWRhYmlsaXR5XG4gICAqIG9mIHlvdXIgYXNzZXJ0aW9ucy5cbiAgICpcbiAgICogKipDaGFpbnMqKlxuICAgKlxuICAgKiAtIHRvXG4gICAqIC0gYmVcbiAgICogLSBiZWVuXG4gICAqIC0gaXNcbiAgICogLSB0aGF0XG4gICAqIC0gd2hpY2hcbiAgICogLSBhbmRcbiAgICogLSBoYXNcbiAgICogLSBoYXZlXG4gICAqIC0gd2l0aFxuICAgKiAtIGF0XG4gICAqIC0gb2ZcbiAgICogLSBzYW1lXG4gICAqIC0gYnV0XG4gICAqIC0gZG9lc1xuICAgKiAtIHN0aWxsXG4gICAqXG4gICAqIEBuYW1lIGxhbmd1YWdlIGNoYWluc1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBbICd0bycsICdiZScsICdiZWVuJywgJ2lzJ1xuICAsICdhbmQnLCAnaGFzJywgJ2hhdmUnLCAnd2l0aCdcbiAgLCAndGhhdCcsICd3aGljaCcsICdhdCcsICdvZidcbiAgLCAnc2FtZScsICdidXQnLCAnZG9lcycsICdzdGlsbCcgXS5mb3JFYWNoKGZ1bmN0aW9uIChjaGFpbikge1xuICAgIEFzc2VydGlvbi5hZGRQcm9wZXJ0eShjaGFpbik7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFxuICAgKlxuICAgKiBOZWdhdGVzIGFsbCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbi5cbiAgICpcbiAgICogICAgIGV4cGVjdChmdW5jdGlvbiAoKSB7fSkudG8ubm90LnRocm93KCk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgnYicpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8uYmUuYW4oJ2FycmF5JykudGhhdC5kb2VzLm5vdC5pbmNsdWRlKDMpO1xuICAgKlxuICAgKiBKdXN0IGJlY2F1c2UgeW91IGNhbiBuZWdhdGUgYW55IGFzc2VydGlvbiB3aXRoIGAubm90YCBkb2Vzbid0IG1lYW4geW91XG4gICAqIHNob3VsZC4gV2l0aCBncmVhdCBwb3dlciBjb21lcyBncmVhdCByZXNwb25zaWJpbGl0eS4gSXQncyBvZnRlbiBiZXN0IHRvXG4gICAqIGFzc2VydCB0aGF0IHRoZSBvbmUgZXhwZWN0ZWQgb3V0cHV0IHdhcyBwcm9kdWNlZCwgcmF0aGVyIHRoYW4gYXNzZXJ0aW5nXG4gICAqIHRoYXQgb25lIG9mIGNvdW50bGVzcyB1bmV4cGVjdGVkIG91dHB1dHMgd2Fzbid0IHByb2R1Y2VkLiBTZWUgaW5kaXZpZHVhbFxuICAgKiBhc3NlcnRpb25zIGZvciBzcGVjaWZpYyBndWlkYW5jZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5ub3QuZXF1YWwoMSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBAbmFtZSBub3RcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdub3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgZmxhZyh0aGlzLCAnbmVnYXRlJywgdHJ1ZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBcbiAgICpcbiAgICogQ2F1c2VzIGFsbCBgLmVxdWFsYCwgYC5pbmNsdWRlYCwgYC5tZW1iZXJzYCwgYC5rZXlzYCwgYW5kIGAucHJvcGVydHlgXG4gICAqIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIHVzZSBkZWVwIGVxdWFsaXR5IGluc3RlYWQgb2Ygc3RyaWN0XG4gICAqIChgPT09YCkgZXF1YWxpdHkuIFNlZSB0aGUgYGRlZXAtZXFsYCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXBcbiAgICogZXF1YWxpdHkgYWxnb3JpdGhtOiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IG9iamVjdCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGVxdWFscyBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uZGVlcC5lcXVhbCh7YTogMX0pO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmVxdWFsKHthOiAxfSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgYXJyYXkgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBpbmNsdWRlcyBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5kZWVwLmluY2x1ZGUoe2E6IDF9KTtcbiAgICogICAgIGV4cGVjdChbe2E6IDF9XSkudG8ubm90LmluY2x1ZGUoe2E6IDF9KTtcbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBpbmNsdWRlcyBgeDoge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5kZWVwLmluY2x1ZGUoe3g6IHthOiAxfX0pO1xuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5ub3QuaW5jbHVkZSh7eDoge2E6IDF9fSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgYXJyYXkgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBoYXMgbWVtYmVyIGB7YTogMX1gXG4gICAqICAgICBleHBlY3QoW3thOiAxfV0pLnRvLmhhdmUuZGVlcC5tZW1iZXJzKFt7YTogMX1dKTtcbiAgICogICAgIGV4cGVjdChbe2E6IDF9XSkudG8ubm90LmhhdmUubWVtYmVycyhbe2E6IDF9XSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgc2V0IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaGFzIGtleSBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KG5ldyBTZXQoW3thOiAxfV0pKS50by5oYXZlLmRlZXAua2V5cyhbe2E6IDF9XSk7XG4gICAqICAgICBleHBlY3QobmV3IFNldChbe2E6IDF9XSkpLnRvLm5vdC5oYXZlLmtleXMoW3thOiAxfV0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IG9iamVjdCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGhhcyBwcm9wZXJ0eSBgeDoge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5oYXZlLmRlZXAucHJvcGVydHkoJ3gnLCB7YTogMX0pO1xuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgneCcsIHthOiAxfSk7XG4gICAqXG4gICAqIEBuYW1lIGRlZXBcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdkZWVwJywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ2RlZXAnLCB0cnVlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAubmVzdGVkXG4gICAqXG4gICAqIEVuYWJsZXMgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBpbiBhbGwgYC5wcm9wZXJ0eWAgYW5kIGAuaW5jbHVkZWBcbiAgICogYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4uXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbJ3gnLCAneSddfX0pLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KCdhLmJbMV0nKTtcbiAgICogICAgIGV4cGVjdCh7YToge2I6IFsneCcsICd5J119fSkudG8ubmVzdGVkLmluY2x1ZGUoeydhLmJbMV0nOiAneSd9KTtcbiAgICpcbiAgICogSWYgYC5gIG9yIGBbXWAgYXJlIHBhcnQgb2YgYW4gYWN0dWFsIHByb3BlcnR5IG5hbWUsIHRoZXkgY2FuIGJlIGVzY2FwZWQgYnlcbiAgICogYWRkaW5nIHR3byBiYWNrc2xhc2hlcyBiZWZvcmUgdGhlbS5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7Jy5hJzogeydbYl0nOiAneCd9fSkudG8uaGF2ZS5uZXN0ZWQucHJvcGVydHkoJ1xcXFwuYS5cXFxcW2JcXFxcXScpO1xuICAgKiAgICAgZXhwZWN0KHsnLmEnOiB7J1tiXSc6ICd4J319KS50by5uZXN0ZWQuaW5jbHVkZSh7J1xcXFwuYS5cXFxcW2JcXFxcXSc6ICd4J30pO1xuICAgKlxuICAgKiBgLm5lc3RlZGAgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggYC5vd25gLlxuICAgKlxuICAgKiBAbmFtZSBuZXN0ZWRcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCduZXN0ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZmxhZyh0aGlzLCAnbmVzdGVkJywgdHJ1ZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm93blxuICAgKlxuICAgKiBDYXVzZXMgYWxsIGAucHJvcGVydHlgIGFuZCBgLmluY2x1ZGVgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluXG4gICAqIHRvIGlnbm9yZSBpbmhlcml0ZWQgcHJvcGVydGllcy5cbiAgICpcbiAgICogICAgIE9iamVjdC5wcm90b3R5cGUuYiA9IDI7XG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLm93bi5wcm9wZXJ0eSgnYScpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5wcm9wZXJ0eSgnYicpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmhhdmUub3duLnByb3BlcnR5KCdiJyk7XG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5vd24uaW5jbHVkZSh7YTogMX0pO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaW5jbHVkZSh7YjogMn0pLmJ1dC5ub3Qub3duLmluY2x1ZGUoe2I6IDJ9KTtcbiAgICpcbiAgICogYC5vd25gIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIGAubmVzdGVkYC5cbiAgICpcbiAgICogQG5hbWUgb3duXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnb3duJywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ293bicsIHRydWUpO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5vcmRlcmVkXG4gICAqXG4gICAqIENhdXNlcyBhbGwgYC5tZW1iZXJzYCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byByZXF1aXJlIHRoYXRcbiAgICogbWVtYmVycyBiZSBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMl0pLnRvLmhhdmUub3JkZXJlZC5tZW1iZXJzKFsxLCAyXSlcbiAgICogICAgICAgLmJ1dC5ub3QuaGF2ZS5vcmRlcmVkLm1lbWJlcnMoWzIsIDFdKTtcbiAgICpcbiAgICogV2hlbiBgLmluY2x1ZGVgIGFuZCBgLm9yZGVyZWRgIGFyZSBjb21iaW5lZCwgdGhlIG9yZGVyaW5nIGJlZ2lucyBhdCB0aGVcbiAgICogc3RhcnQgb2YgYm90aCBhcnJheXMuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5pbmNsdWRlLm9yZGVyZWQubWVtYmVycyhbMSwgMl0pXG4gICAqICAgICAgIC5idXQubm90LmluY2x1ZGUub3JkZXJlZC5tZW1iZXJzKFsyLCAzXSk7XG4gICAqXG4gICAqIEBuYW1lIG9yZGVyZWRcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdvcmRlcmVkJywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ29yZGVyZWQnLCB0cnVlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuYW55XG4gICAqXG4gICAqIENhdXNlcyBhbGwgYC5rZXlzYCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byBvbmx5IHJlcXVpcmUgdGhhdFxuICAgKiB0aGUgdGFyZ2V0IGhhdmUgYXQgbGVhc3Qgb25lIG9mIHRoZSBnaXZlbiBrZXlzLiBUaGlzIGlzIHRoZSBvcHBvc2l0ZSBvZlxuICAgKiBgLmFsbGAsIHdoaWNoIHJlcXVpcmVzIHRoYXQgdGhlIHRhcmdldCBoYXZlIGFsbCBvZiB0aGUgZ2l2ZW4ga2V5cy5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLm5vdC5oYXZlLmFueS5rZXlzKCdjJywgJ2QnKTtcbiAgICpcbiAgICogU2VlIHRoZSBgLmtleXNgIGRvYyBmb3IgZ3VpZGFuY2Ugb24gd2hlbiB0byB1c2UgYC5hbnlgIG9yIGAuYWxsYC5cbiAgICpcbiAgICogQG5hbWUgYW55XG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnYW55JywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ2FueScsIHRydWUpO1xuICAgIGZsYWcodGhpcywgJ2FsbCcsIGZhbHNlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuYWxsXG4gICAqXG4gICAqIENhdXNlcyBhbGwgYC5rZXlzYCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byByZXF1aXJlIHRoYXQgdGhlXG4gICAqIHRhcmdldCBoYXZlIGFsbCBvZiB0aGUgZ2l2ZW4ga2V5cy4gVGhpcyBpcyB0aGUgb3Bwb3NpdGUgb2YgYC5hbnlgLCB3aGljaFxuICAgKiBvbmx5IHJlcXVpcmVzIHRoYXQgdGhlIHRhcmdldCBoYXZlIGF0IGxlYXN0IG9uZSBvZiB0aGUgZ2l2ZW4ga2V5cy5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBOb3RlIHRoYXQgYC5hbGxgIGlzIHVzZWQgYnkgZGVmYXVsdCB3aGVuIG5laXRoZXIgYC5hbGxgIG5vciBgLmFueWAgYXJlXG4gICAqIGFkZGVkIGVhcmxpZXIgaW4gdGhlIGNoYWluLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYWRkIGAuYWxsYCBhbnl3YXlcbiAgICogYmVjYXVzZSBpdCBpbXByb3ZlcyByZWFkYWJpbGl0eS5cbiAgICpcbiAgICogU2VlIHRoZSBgLmtleXNgIGRvYyBmb3IgZ3VpZGFuY2Ugb24gd2hlbiB0byB1c2UgYC5hbnlgIG9yIGAuYWxsYC5cbiAgICpcbiAgICogQG5hbWUgYWxsXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnYWxsJywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ2FsbCcsIHRydWUpO1xuICAgIGZsYWcodGhpcywgJ2FueScsIGZhbHNlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuYSh0eXBlWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQncyB0eXBlIGlzIGVxdWFsIHRvIHRoZSBnaXZlbiBzdHJpbmcgYHR5cGVgLiBUeXBlc1xuICAgKiBhcmUgY2FzZSBpbnNlbnNpdGl2ZS4gU2VlIHRoZSBgdHlwZS1kZXRlY3RgIHByb2plY3QgcGFnZSBmb3IgaW5mbyBvbiB0aGVcbiAgICogdHlwZSBkZXRlY3Rpb24gYWxnb3JpdGhtOiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL3R5cGUtZGV0ZWN0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmJlLmFuKCdvYmplY3QnKTtcbiAgICogICAgIGV4cGVjdChudWxsKS50by5iZS5hKCdudWxsJyk7XG4gICAqICAgICBleHBlY3QodW5kZWZpbmVkKS50by5iZS5hbigndW5kZWZpbmVkJyk7XG4gICAqICAgICBleHBlY3QobmV3IEVycm9yKS50by5iZS5hbignZXJyb3InKTtcbiAgICogICAgIGV4cGVjdChQcm9taXNlLnJlc29sdmUoKSkudG8uYmUuYSgncHJvbWlzZScpO1xuICAgKiAgICAgZXhwZWN0KG5ldyBGbG9hdDMyQXJyYXkpLnRvLmJlLmEoJ2Zsb2F0MzJhcnJheScpO1xuICAgKiAgICAgZXhwZWN0KFN5bWJvbCgpKS50by5iZS5hKCdzeW1ib2wnKTtcbiAgICpcbiAgICogYC5hYCBzdXBwb3J0cyBvYmplY3RzIHRoYXQgaGF2ZSBhIGN1c3RvbSB0eXBlIHNldCB2aWEgYFN5bWJvbC50b1N0cmluZ1RhZ2AuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7XG4gICAqICAgICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnbXlDdXN0b21UeXBlJ1xuICAgKiAgICAgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChteU9iaikudG8uYmUuYSgnbXlDdXN0b21UeXBlJykuYnV0Lm5vdC5hbignb2JqZWN0Jyk7XG4gICAqXG4gICAqIEl0J3Mgb2Z0ZW4gYmVzdCB0byB1c2UgYC5hYCB0byBjaGVjayBhIHRhcmdldCdzIHR5cGUgYmVmb3JlIG1ha2luZyBtb3JlXG4gICAqIGFzc2VydGlvbnMgb24gdGhlIHNhbWUgdGFyZ2V0LiBUaGF0IHdheSwgeW91IGF2b2lkIHVuZXhwZWN0ZWQgYmVoYXZpb3IgZnJvbVxuICAgKiBhbnkgYXNzZXJ0aW9uIHRoYXQgZG9lcyBkaWZmZXJlbnQgdGhpbmdzIGJhc2VkIG9uIHRoZSB0YXJnZXQncyB0eXBlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uYmUuYW4oJ2FycmF5JykudGhhdC5pbmNsdWRlcygyKTtcbiAgICogICAgIGV4cGVjdChbXSkudG8uYmUuYW4oJ2FycmF5JykudGhhdC5pcy5lbXB0eTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5hYC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvXG4gICAqIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgdGhlIGV4cGVjdGVkIHR5cGUsIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IGl0XG4gICAqIGlzbid0IG9uZSBvZiBtYW55IHVuZXhwZWN0ZWQgdHlwZXMuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmJlLmEoJ3N0cmluZycpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5ub3QuYmUuYW4oJ2FycmF5Jyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmFgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZSB0b1xuICAgKiBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZFxuICAgKiBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5hKCdzdHJpbmcnLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmEoJ3N0cmluZycpO1xuICAgKlxuICAgKiBgLmFgIGNhbiBhbHNvIGJlIHVzZWQgYXMgYSBsYW5ndWFnZSBjaGFpbiB0byBpbXByb3ZlIHRoZSByZWFkYWJpbGl0eSBvZlxuICAgKiB5b3VyIGFzc2VydGlvbnMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2I6IDJ9KS50by5oYXZlLmEucHJvcGVydHkoJ2InKTtcbiAgICpcbiAgICogVGhlIGFsaWFzIGAuYW5gIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuYWAuXG4gICAqXG4gICAqIEBuYW1lIGFcbiAgICogQGFsaWFzIGFuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhbiAodHlwZSwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgYXJ0aWNsZSA9IH5bICdhJywgJ2UnLCAnaScsICdvJywgJ3UnIF0uaW5kZXhPZih0eXBlLmNoYXJBdCgwKSkgPyAnYW4gJyA6ICdhICc7XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgdHlwZSA9PT0gXy50eXBlKG9iaikudG9Mb3dlckNhc2UoKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSAnICsgYXJ0aWNsZSArIHR5cGVcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gbm90IHRvIGJlICcgKyBhcnRpY2xlICsgdHlwZVxuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdhbicsIGFuKTtcbiAgQXNzZXJ0aW9uLmFkZENoYWluYWJsZU1ldGhvZCgnYScsIGFuKTtcblxuICAvKipcbiAgICogIyMjIC5pbmNsdWRlKHZhbFssIG1zZ10pXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIHN0cmluZywgYC5pbmNsdWRlYCBhc3NlcnRzIHRoYXQgdGhlIGdpdmVuIHN0cmluZyBgdmFsYFxuICAgKiBpcyBhIHN1YnN0cmluZyBvZiB0aGUgdGFyZ2V0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5pbmNsdWRlKCdmb28nKTtcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGFuIGFycmF5LCBgLmluY2x1ZGVgIGFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gYHZhbGAgaXMgYVxuICAgKiBtZW1iZXIgb2YgdGhlIHRhcmdldC5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmluY2x1ZGUoMik7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhbiBvYmplY3QsIGAuaW5jbHVkZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBvYmplY3RcbiAgICogYHZhbGAncyBwcm9wZXJ0aWVzIGFyZSBhIHN1YnNldCBvZiB0aGUgdGFyZ2V0J3MgcHJvcGVydGllcy5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMiwgYzogM30pLnRvLmluY2x1ZGUoe2E6IDEsIGI6IDJ9KTtcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGEgU2V0IG9yIFdlYWtTZXQsIGAuaW5jbHVkZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBgdmFsYCBpcyBhXG4gICAqIG1lbWJlciBvZiB0aGUgdGFyZ2V0LiBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobSBpcyB1c2VkLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KG5ldyBTZXQoWzEsIDJdKSkudG8uaW5jbHVkZSgyKTtcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGEgTWFwLCBgLmluY2x1ZGVgIGFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gYHZhbGAgaXMgb25lIG9mXG4gICAqIHRoZSB2YWx1ZXMgb2YgdGhlIHRhcmdldC4gU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG0gaXMgdXNlZC5cbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgTWFwKFtbJ2EnLCAxXSwgWydiJywgMl1dKSkudG8uaW5jbHVkZSgyKTtcbiAgICpcbiAgICogQmVjYXVzZSBgLmluY2x1ZGVgIGRvZXMgZGlmZmVyZW50IHRoaW5ncyBiYXNlZCBvbiB0aGUgdGFyZ2V0J3MgdHlwZSwgaXQnc1xuICAgKiBpbXBvcnRhbnQgdG8gY2hlY2sgdGhlIHRhcmdldCdzIHR5cGUgYmVmb3JlIHVzaW5nIGAuaW5jbHVkZWAuIFNlZSB0aGUgYC5hYFxuICAgKiBkb2MgZm9yIGluZm8gb24gdGVzdGluZyBhIHRhcmdldCdzIHR5cGUuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5iZS5hbignYXJyYXknKS50aGF0LmluY2x1ZGVzKDIpO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBzdHJpY3QgKGA9PT1gKSBlcXVhbGl0eSBpcyB1c2VkIHRvIGNvbXBhcmUgYXJyYXkgbWVtYmVycyBhbmRcbiAgICogb2JqZWN0IHByb3BlcnRpZXMuIEFkZCBgLmRlZXBgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIHVzZSBkZWVwIGVxdWFsaXR5XG4gICAqIGluc3RlYWQgKFdlYWtTZXQgdGFyZ2V0cyBhcmUgbm90IHN1cHBvcnRlZCkuIFNlZSB0aGUgYGRlZXAtZXFsYCBwcm9qZWN0XG4gICAqIHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaW5jbHVkZXMgYHthOiAxfWBcbiAgICogICAgIGV4cGVjdChbe2E6IDF9XSkudG8uZGVlcC5pbmNsdWRlKHthOiAxfSk7XG4gICAqICAgICBleHBlY3QoW3thOiAxfV0pLnRvLm5vdC5pbmNsdWRlKHthOiAxfSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaW5jbHVkZXMgYHg6IHthOiAxfWBcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8uZGVlcC5pbmNsdWRlKHt4OiB7YTogMX19KTtcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8ubm90LmluY2x1ZGUoe3g6IHthOiAxfX0pO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBhbGwgb2YgdGhlIHRhcmdldCdzIHByb3BlcnRpZXMgYXJlIHNlYXJjaGVkIHdoZW4gd29ya2luZyB3aXRoXG4gICAqIG9iamVjdHMuIFRoaXMgaW5jbHVkZXMgcHJvcGVydGllcyB0aGF0IGFyZSBpbmhlcml0ZWQgYW5kL29yIG5vbi1lbnVtZXJhYmxlLlxuICAgKiBBZGQgYC5vd25gIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGV4Y2x1ZGUgdGhlIHRhcmdldCdzIGluaGVyaXRlZFxuICAgKiBwcm9wZXJ0aWVzIGZyb20gdGhlIHNlYXJjaC5cbiAgICpcbiAgICogICAgIE9iamVjdC5wcm90b3R5cGUuYiA9IDI7XG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5vd24uaW5jbHVkZSh7YTogMX0pO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaW5jbHVkZSh7YjogMn0pLmJ1dC5ub3Qub3duLmluY2x1ZGUoe2I6IDJ9KTtcbiAgICpcbiAgICogTm90ZSB0aGF0IGEgdGFyZ2V0IG9iamVjdCBpcyBhbHdheXMgb25seSBzZWFyY2hlZCBmb3IgYHZhbGAncyBvd25cbiAgICogZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiBgLmRlZXBgIGFuZCBgLm93bmAgY2FuIGJlIGNvbWJpbmVkLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiB7YjogMn19KS50by5kZWVwLm93bi5pbmNsdWRlKHthOiB7YjogMn19KTtcbiAgICpcbiAgICogQWRkIGAubmVzdGVkYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBlbmFibGUgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiB3aGVuXG4gICAqIHJlZmVyZW5jaW5nIG5lc3RlZCBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiB7YjogWyd4JywgJ3knXX19KS50by5uZXN0ZWQuaW5jbHVkZSh7J2EuYlsxXSc6ICd5J30pO1xuICAgKlxuICAgKiBJZiBgLmAgb3IgYFtdYCBhcmUgcGFydCBvZiBhbiBhY3R1YWwgcHJvcGVydHkgbmFtZSwgdGhleSBjYW4gYmUgZXNjYXBlZCBieVxuICAgKiBhZGRpbmcgdHdvIGJhY2tzbGFzaGVzIGJlZm9yZSB0aGVtLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHsnLmEnOiB7J1tiXSc6IDJ9fSkudG8ubmVzdGVkLmluY2x1ZGUoeydcXFxcLmEuXFxcXFtiXFxcXF0nOiAyfSk7XG4gICAqXG4gICAqIGAuZGVlcGAgYW5kIGAubmVzdGVkYCBjYW4gYmUgY29tYmluZWQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbe2M6IDN9XX19KS50by5kZWVwLm5lc3RlZC5pbmNsdWRlKHsnYS5iWzBdJzoge2M6IDN9fSk7XG4gICAqXG4gICAqIGAub3duYCBhbmQgYC5uZXN0ZWRgIGNhbm5vdCBiZSBjb21iaW5lZC5cbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5pbmNsdWRlYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJykudG8ubm90LmluY2x1ZGUoJ3RhY28nKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLm5vdC5pbmNsdWRlKDQpO1xuICAgKlxuICAgKiBIb3dldmVyLCBpdCdzIGRhbmdlcm91cyB0byBuZWdhdGUgYC5pbmNsdWRlYCB3aGVuIHRoZSB0YXJnZXQgaXMgYW4gb2JqZWN0LlxuICAgKiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9ucyBieSBhc3NlcnRpbmcgdGhhdCB0aGVcbiAgICogdGFyZ2V0IG9iamVjdCBkb2Vzbid0IGhhdmUgYWxsIG9mIGB2YWxgJ3Mga2V5L3ZhbHVlIHBhaXJzIGJ1dCBtYXkgb3IgbWF5XG4gICAqIG5vdCBoYXZlIHNvbWUgb2YgdGhlbS4gSXQncyBvZnRlbiBiZXN0IHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzXG4gICAqIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhbiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBvYmplY3QgaXNuJ3QgZXZlbiBleHBlY3RlZCB0byBoYXZlIGB2YWxgJ3Mga2V5cywgaXQnc1xuICAgKiBvZnRlbiBiZXN0IHRvIGFzc2VydCBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2M6IDN9KS50by5ub3QuaGF2ZS5hbnkua2V5cygnYScsICdiJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2M6IDN9KS50by5ub3QuaW5jbHVkZSh7YTogMSwgYjogMn0pOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IG9iamVjdCBpcyBleHBlY3RlZCB0byBoYXZlIGB2YWxgJ3Mga2V5cywgaXQncyBvZnRlbiBiZXN0IHRvXG4gICAqIGFzc2VydCB0aGF0IGVhY2ggb2YgdGhlIHByb3BlcnRpZXMgaGFzIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW5cbiAgICogYXNzZXJ0aW5nIHRoYXQgZWFjaCBwcm9wZXJ0eSBkb2Vzbid0IGhhdmUgb25lIG9mIG1hbnkgdW5leHBlY3RlZCB2YWx1ZXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDMsIGI6IDR9KS50by5pbmNsdWRlKHthOiAzLCBiOiA0fSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDMsIGI6IDR9KS50by5ub3QuaW5jbHVkZSh7YTogMSwgYjogMn0pOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5pbmNsdWRlYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5pbmNsdWRlKDQsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10sICdub29vIHdoeSBmYWlsPz8nKS50by5pbmNsdWRlKDQpO1xuICAgKlxuICAgKiBgLmluY2x1ZGVgIGNhbiBhbHNvIGJlIHVzZWQgYXMgYSBsYW5ndWFnZSBjaGFpbiwgY2F1c2luZyBhbGwgYC5tZW1iZXJzYCBhbmRcbiAgICogYC5rZXlzYCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byByZXF1aXJlIHRoZSB0YXJnZXQgdG8gYmUgYVxuICAgKiBzdXBlcnNldCBvZiB0aGUgZXhwZWN0ZWQgc2V0LCByYXRoZXIgdGhhbiBhbiBpZGVudGljYWwgc2V0LiBOb3RlIHRoYXRcbiAgICogYC5tZW1iZXJzYCBpZ25vcmVzIGR1cGxpY2F0ZXMgaW4gdGhlIHN1YnNldCB3aGVuIGAuaW5jbHVkZWAgaXMgYWRkZWQuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0J3Mga2V5cyBhcmUgYSBzdXBlcnNldCBvZiBbJ2EnLCAnYiddIGJ1dCBub3QgaWRlbnRpY2FsXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDIsIGM6IDN9KS50by5pbmNsdWRlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMiwgYzogM30pLnRvLm5vdC5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBhcnJheSBpcyBhIHN1cGVyc2V0IG9mIFsxLCAyXSBidXQgbm90IGlkZW50aWNhbFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaW5jbHVkZS5tZW1iZXJzKFsxLCAyXSk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5ub3QuaGF2ZS5tZW1iZXJzKFsxLCAyXSk7XG4gICAqXG4gICAqICAgICAvLyBEdXBsaWNhdGVzIGluIHRoZSBzdWJzZXQgYXJlIGlnbm9yZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmluY2x1ZGUubWVtYmVycyhbMSwgMiwgMiwgMl0pO1xuICAgKlxuICAgKiBOb3RlIHRoYXQgYWRkaW5nIGAuYW55YCBlYXJsaWVyIGluIHRoZSBjaGFpbiBjYXVzZXMgdGhlIGAua2V5c2AgYXNzZXJ0aW9uXG4gICAqIHRvIGlnbm9yZSBgLmluY2x1ZGVgLlxuICAgKlxuICAgKiAgICAgLy8gQm90aCBhc3NlcnRpb25zIGFyZSBpZGVudGljYWxcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmluY2x1ZGUuYW55LmtleXMoJ2EnLCAnYicpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5hbnkua2V5cygnYScsICdiJyk7XG4gICAqXG4gICAqIFRoZSBhbGlhc2VzIGAuaW5jbHVkZXNgLCBgLmNvbnRhaW5gLCBhbmQgYC5jb250YWluc2AgY2FuIGJlIHVzZWRcbiAgICogaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5pbmNsdWRlYC5cbiAgICpcbiAgICogQG5hbWUgaW5jbHVkZVxuICAgKiBAYWxpYXMgY29udGFpblxuICAgKiBAYWxpYXMgaW5jbHVkZXNcbiAgICogQGFsaWFzIGNvbnRhaW5zXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gU2FtZVZhbHVlWmVybyhhLCBiKSB7XG4gICAgcmV0dXJuIChfLmlzTmFOKGEpICYmIF8uaXNOYU4oYikpIHx8IGEgPT09IGI7XG4gIH1cblxuICBmdW5jdGlvbiBpbmNsdWRlQ2hhaW5pbmdCZWhhdmlvciAoKSB7XG4gICAgZmxhZyh0aGlzLCAnY29udGFpbnMnLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluY2x1ZGUgKHZhbCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG5cbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgb2JqVHlwZSA9IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBuZWdhdGUgPSBmbGFnKHRoaXMsICduZWdhdGUnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpXG4gICAgICAsIGlzRGVlcCA9IGZsYWcodGhpcywgJ2RlZXAnKVxuICAgICAgLCBkZXNjcmlwdG9yID0gaXNEZWVwID8gJ2RlZXAgJyA6ICcnO1xuXG4gICAgZmxhZ01zZyA9IGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyA6ICcnO1xuXG4gICAgdmFyIGluY2x1ZGVkID0gZmFsc2U7XG5cbiAgICBzd2l0Y2ggKG9ialR5cGUpIHtcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIGluY2x1ZGVkID0gb2JqLmluZGV4T2YodmFsKSAhPT0gLTE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd3ZWFrc2V0JzpcbiAgICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICAgIGZsYWdNc2cgKyAndW5hYmxlIHRvIHVzZSAuZGVlcC5pbmNsdWRlIHdpdGggV2Vha1NldCcsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBzc2ZpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluY2x1ZGVkID0gb2JqLmhhcyh2YWwpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbWFwJzpcbiAgICAgICAgdmFyIGlzRXFsID0gaXNEZWVwID8gXy5lcWwgOiBTYW1lVmFsdWVaZXJvO1xuICAgICAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIGluY2x1ZGVkID0gaW5jbHVkZWQgfHwgaXNFcWwoaXRlbSwgdmFsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzZXQnOlxuICAgICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGluY2x1ZGVkID0gaW5jbHVkZWQgfHwgXy5lcWwoaXRlbSwgdmFsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmNsdWRlZCA9IG9iai5oYXModmFsKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgICAgaW5jbHVkZWQgPSBvYmouc29tZShmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIF8uZXFsKGl0ZW0sIHZhbCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmNsdWRlZCA9IG9iai5pbmRleE9mKHZhbCkgIT09IC0xO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBUaGlzIGJsb2NrIGlzIGZvciBhc3NlcnRpbmcgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBvYmplY3QuXG4gICAgICAgIC8vIGBfLmV4cGVjdFR5cGVzYCBpc24ndCB1c2VkIGhlcmUgYmVjYXVzZSBgLmluY2x1ZGVgIHNob3VsZCB3b3JrIHdpdGhcbiAgICAgICAgLy8gb2JqZWN0cyB3aXRoIGEgY3VzdG9tIGBAQHRvU3RyaW5nVGFnYC5cbiAgICAgICAgaWYgKHZhbCAhPT0gT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgICBmbGFnTXNnICsgJ29iamVjdCB0ZXN0ZWQgbXVzdCBiZSBhbiBhcnJheSwgYSBtYXAsIGFuIG9iamVjdCwnXG4gICAgICAgICAgICAgICsgJyBhIHNldCwgYSBzdHJpbmcsIG9yIGEgd2Vha3NldCwgYnV0ICcgKyBvYmpUeXBlICsgJyBnaXZlbicsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBzc2ZpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcm9wcyA9IE9iamVjdC5rZXlzKHZhbClcbiAgICAgICAgICAsIGZpcnN0RXJyID0gbnVsbFxuICAgICAgICAgICwgbnVtRXJycyA9IDA7XG5cbiAgICAgICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgIHZhciBwcm9wQXNzZXJ0aW9uID0gbmV3IEFzc2VydGlvbihvYmopO1xuICAgICAgICAgIF8udHJhbnNmZXJGbGFncyh0aGlzLCBwcm9wQXNzZXJ0aW9uLCB0cnVlKTtcbiAgICAgICAgICBmbGFnKHByb3BBc3NlcnRpb24sICdsb2NrU3NmaScsIHRydWUpO1xuXG4gICAgICAgICAgaWYgKCFuZWdhdGUgfHwgcHJvcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBwcm9wQXNzZXJ0aW9uLnByb3BlcnR5KHByb3AsIHZhbFtwcm9wXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByb3BBc3NlcnRpb24ucHJvcGVydHkocHJvcCwgdmFsW3Byb3BdKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmICghXy5jaGVja0Vycm9yLmNvbXBhdGlibGVDb25zdHJ1Y3RvcihlcnIsIEFzc2VydGlvbkVycm9yKSkge1xuICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmlyc3RFcnIgPT09IG51bGwpIGZpcnN0RXJyID0gZXJyO1xuICAgICAgICAgICAgbnVtRXJycysrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgLy8gV2hlbiB2YWxpZGF0aW5nIC5ub3QuaW5jbHVkZSB3aXRoIG11bHRpcGxlIHByb3BlcnRpZXMsIHdlIG9ubHkgd2FudFxuICAgICAgICAvLyB0byB0aHJvdyBhbiBhc3NlcnRpb24gZXJyb3IgaWYgYWxsIG9mIHRoZSBwcm9wZXJ0aWVzIGFyZSBpbmNsdWRlZCxcbiAgICAgICAgLy8gaW4gd2hpY2ggY2FzZSB3ZSB0aHJvdyB0aGUgZmlyc3QgcHJvcGVydHkgYXNzZXJ0aW9uIGVycm9yIHRoYXQgd2VcbiAgICAgICAgLy8gZW5jb3VudGVyZWQuXG4gICAgICAgIGlmIChuZWdhdGUgJiYgcHJvcHMubGVuZ3RoID4gMSAmJiBudW1FcnJzID09PSBwcm9wcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyBmaXJzdEVycjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQXNzZXJ0IGluY2x1c2lvbiBpbiBjb2xsZWN0aW9uIG9yIHN1YnN0cmluZyBpbiBhIHN0cmluZy5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGluY2x1ZGVkXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvICcgKyBkZXNjcmlwdG9yICsgJ2luY2x1ZGUgJyArIF8uaW5zcGVjdCh2YWwpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCAnICsgZGVzY3JpcHRvciArICdpbmNsdWRlICcgKyBfLmluc3BlY3QodmFsKSk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdpbmNsdWRlJywgaW5jbHVkZSwgaW5jbHVkZUNoYWluaW5nQmVoYXZpb3IpO1xuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdjb250YWluJywgaW5jbHVkZSwgaW5jbHVkZUNoYWluaW5nQmVoYXZpb3IpO1xuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdjb250YWlucycsIGluY2x1ZGUsIGluY2x1ZGVDaGFpbmluZ0JlaGF2aW9yKTtcbiAgQXNzZXJ0aW9uLmFkZENoYWluYWJsZU1ldGhvZCgnaW5jbHVkZXMnLCBpbmNsdWRlLCBpbmNsdWRlQ2hhaW5pbmdCZWhhdmlvcik7XG5cbiAgLyoqXG4gICAqICMjIyAub2tcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgYSB0cnV0aHkgdmFsdWUgKGNvbnNpZGVyZWQgYHRydWVgIGluIGJvb2xlYW4gY29udGV4dCkuXG4gICAqIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIHN0cmljdGx5IChgPT09YCkgb3JcbiAgICogZGVlcGx5IGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QodHJ1ZSkudG8uYmUudHJ1ZTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh0cnVlKS50by5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAub2tgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDApLnRvLmVxdWFsKDApOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDApLnRvLm5vdC5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoZmFsc2UpLnRvLmJlLmZhbHNlOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGZhbHNlKS50by5ub3QuYmUub2s7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KG51bGwpLnRvLmJlLm51bGw7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QobnVsbCkudG8ubm90LmJlLm9rOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLmJlLnVuZGVmaW5lZDsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLm5vdC5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoZmFsc2UsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5vaztcbiAgICpcbiAgICogQG5hbWUgb2tcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdvaycsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgdHJ1dGh5J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBmYWxzeScpO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC50cnVlXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gYHRydWVgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHRydWUpLnRvLmJlLnRydWU7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAudHJ1ZWAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdFxuICAgKiB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW4gbm90XG4gICAqIGVxdWFsIHRvIGB0cnVlYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChmYWxzZSkudG8uYmUuZmFsc2U7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoZmFsc2UpLnRvLm5vdC5iZS50cnVlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3QuYmUudHJ1ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoZmFsc2UsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS50cnVlO1xuICAgKlxuICAgKiBAbmFtZSB0cnVlXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgndHJ1ZScsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgdHJ1ZSA9PT0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgdHJ1ZSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgZmFsc2UnXG4gICAgICAsIGZsYWcodGhpcywgJ25lZ2F0ZScpID8gZmFsc2UgOiB0cnVlXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZmFsc2VcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgc3RyaWN0bHkgKGA9PT1gKSBlcXVhbCB0byBgZmFsc2VgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZhbHNlKS50by5iZS5mYWxzZTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5mYWxzZWAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW5cbiAgICogbm90IGVxdWFsIHRvIGBmYWxzZWAuXG4gICAqXG4gICAqICAgICBleHBlY3QodHJ1ZSkudG8uYmUudHJ1ZTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh0cnVlKS50by5ub3QuYmUuZmFsc2U7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS5mYWxzZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QodHJ1ZSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmZhbHNlO1xuICAgKlxuICAgKiBAbmFtZSBmYWxzZVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2ZhbHNlJywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBmYWxzZSA9PT0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgZmFsc2UnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIHRydWUnXG4gICAgICAsIGZsYWcodGhpcywgJ25lZ2F0ZScpID8gdHJ1ZSA6IGZhbHNlXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAubnVsbFxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIGBudWxsYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChudWxsKS50by5iZS5udWxsO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLm51bGxgLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlciB0aGFuIG5vdFxuICAgKiBlcXVhbCB0byBgbnVsbGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLm51bGw7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDQyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUubnVsbDtcbiAgICpcbiAgICogQG5hbWUgbnVsbFxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ251bGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIG51bGwgPT09IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIG51bGwnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IG5vdCB0byBiZSBudWxsJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLnVuZGVmaW5lZFxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHVuZGVmaW5lZCkudG8uYmUudW5kZWZpbmVkO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnVuZGVmaW5lZGAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW5cbiAgICogbm90IGVxdWFsIHRvIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS51bmRlZmluZWQ7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDQyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUudW5kZWZpbmVkO1xuICAgKlxuICAgKiBAbmFtZSB1bmRlZmluZWRcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCd1bmRlZmluZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHVuZGVmaW5lZCA9PT0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgdW5kZWZpbmVkJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gYmUgdW5kZWZpbmVkJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLk5hTlxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBleGFjdGx5IGBOYU5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KE5hTikudG8uYmUuTmFOO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLk5hTmAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdFxuICAgKiB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW4gbm90XG4gICAqIGVxdWFsIHRvIGBOYU5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5lcXVhbCgnZm9vJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLm5vdC5iZS5OYU47IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDQyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuTmFOO1xuICAgKlxuICAgKiBAbmFtZSBOYU5cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdOYU4nLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIF8uaXNOYU4oZmxhZyh0aGlzLCAnb2JqZWN0JykpXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgTmFOJ1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IG5vdCB0byBiZSBOYU4nXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZXhpc3RcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgbm90IHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gZWl0aGVyIGBudWxsYCBvclxuICAgKiBgdW5kZWZpbmVkYC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG9cbiAgICogaXRzIGV4cGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmV4aXN0OyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCgwKS50by5lcXVhbCgwKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgwKS50by5leGlzdDsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZXhpc3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KG51bGwpLnRvLmJlLm51bGw7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QobnVsbCkudG8ubm90LmV4aXN0OyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLmJlLnVuZGVmaW5lZDsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLm5vdC5leGlzdDsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QobnVsbCwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmV4aXN0O1xuICAgKlxuICAgKiBAbmFtZSBleGlzdFxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2V4aXN0JywgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWwgPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgdmFsICE9PSBudWxsICYmIHZhbCAhPT0gdW5kZWZpbmVkXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGV4aXN0J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgZXhpc3QnXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZW1wdHlcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIGFycmF5LCBgLmVtcHR5YCBhc3NlcnRzIHRoYXQgdGhlIHRhcmdldCdzXG4gICAqIGBsZW5ndGhgIHByb3BlcnR5IGlzIHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gYDBgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFtdKS50by5iZS5lbXB0eTtcbiAgICogICAgIGV4cGVjdCgnJykudG8uYmUuZW1wdHk7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIG1hcCBvciBzZXQsIGAuZW1wdHlgIGFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0J3MgYHNpemVgXG4gICAqIHByb3BlcnR5IGlzIHN0cmljdGx5IGVxdWFsIHRvIGAwYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KCkpLnRvLmJlLmVtcHR5O1xuICAgKiAgICAgZXhwZWN0KG5ldyBNYXAoKSkudG8uYmUuZW1wdHk7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIG5vbi1mdW5jdGlvbiBvYmplY3QsIGAuZW1wdHlgIGFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0XG4gICAqIGRvZXNuJ3QgaGF2ZSBhbnkgb3duIGVudW1lcmFibGUgcHJvcGVydGllcy4gUHJvcGVydGllcyB3aXRoIFN5bWJvbC1iYXNlZFxuICAgKiBrZXlzIGFyZSBleGNsdWRlZCBmcm9tIHRoZSBjb3VudC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7fSkudG8uYmUuZW1wdHk7XG4gICAqXG4gICAqIEJlY2F1c2UgYC5lbXB0eWAgZG9lcyBkaWZmZXJlbnQgdGhpbmdzIGJhc2VkIG9uIHRoZSB0YXJnZXQncyB0eXBlLCBpdCdzXG4gICAqIGltcG9ydGFudCB0byBjaGVjayB0aGUgdGFyZ2V0J3MgdHlwZSBiZWZvcmUgdXNpbmcgYC5lbXB0eWAuIFNlZSB0aGUgYC5hYFxuICAgKiBkb2MgZm9yIGluZm8gb24gdGVzdGluZyBhIHRhcmdldCdzIHR5cGUuXG4gICAqXG4gICAqICAgICBleHBlY3QoW10pLnRvLmJlLmFuKCdhcnJheScpLnRoYXQuaXMuZW1wdHk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZW1wdHlgLiBIb3dldmVyLCBpdCdzIG9mdGVuXG4gICAqIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBjb250YWlucyBpdHMgZXhwZWN0ZWQgbnVtYmVyIG9mIHZhbHVlcyxcbiAgICogcmF0aGVyIHRoYW4gYXNzZXJ0aW5nIHRoYXQgaXQncyBub3QgZW1wdHkuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8ubm90LmJlLmVtcHR5OyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFsxLCAyLCAzXSkpLnRvLmhhdmUucHJvcGVydHkoJ3NpemUnLCAzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFsxLCAyLCAzXSkpLnRvLm5vdC5iZS5lbXB0eTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoT2JqZWN0LmtleXMoe2E6IDF9KSkudG8uaGF2ZS5sZW5ndGhPZigxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5iZS5lbXB0eTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuZW1wdHk7XG4gICAqXG4gICAqIEBuYW1lIGVtcHR5XG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnZW1wdHknLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbCA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBpdGVtc0NvdW50O1xuXG4gICAgZmxhZ01zZyA9IGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyA6ICcnO1xuXG4gICAgc3dpdGNoIChfLnR5cGUodmFsKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdhcnJheSc6XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBpdGVtc0NvdW50ID0gdmFsLmxlbmd0aDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtYXAnOlxuICAgICAgY2FzZSAnc2V0JzpcbiAgICAgICAgaXRlbXNDb3VudCA9IHZhbC5zaXplO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3dlYWttYXAnOlxuICAgICAgY2FzZSAnd2Vha3NldCc6XG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICBmbGFnTXNnICsgJy5lbXB0eSB3YXMgcGFzc2VkIGEgd2VhayBjb2xsZWN0aW9uJyxcbiAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgc3NmaVxuICAgICAgICApO1xuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICB2YXIgbXNnID0gZmxhZ01zZyArICcuZW1wdHkgd2FzIHBhc3NlZCBhIGZ1bmN0aW9uICcgKyBfLmdldE5hbWUodmFsKTtcbiAgICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKG1zZy50cmltKCksIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAodmFsICE9PSBPYmplY3QodmFsKSkge1xuICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICAgIGZsYWdNc2cgKyAnLmVtcHR5IHdhcyBwYXNzZWQgbm9uLXN0cmluZyBwcmltaXRpdmUgJyArIF8uaW5zcGVjdCh2YWwpLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3NmaVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbXNDb3VudCA9IE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoO1xuICAgIH1cblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAwID09PSBpdGVtc0NvdW50XG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGVtcHR5J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gYmUgZW1wdHknXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuYXJndW1lbnRzXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIHRlc3QgKCkge1xuICAgKiAgICAgICBleHBlY3QoYXJndW1lbnRzKS50by5iZS5hcmd1bWVudHM7XG4gICAqICAgICB9XG4gICAqXG4gICAqICAgICB0ZXN0KCk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuYXJndW1lbnRzYC4gSG93ZXZlciwgaXQncyBvZnRlblxuICAgKiBiZXN0IHRvIGFzc2VydCB3aGljaCB0eXBlIHRoZSB0YXJnZXQgaXMgZXhwZWN0ZWQgdG8gYmUsIHJhdGhlciB0aGFuXG4gICAqIGFzc2VydGluZyB0aGF0IGl0cyBub3QgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5iZS5hKCdzdHJpbmcnKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8ubm90LmJlLmFyZ3VtZW50czsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe30sICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5hcmd1bWVudHM7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLkFyZ3VtZW50c2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5hcmd1bWVudHNgLlxuICAgKlxuICAgKiBAbmFtZSBhcmd1bWVudHNcbiAgICogQGFsaWFzIEFyZ3VtZW50c1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBjaGVja0FyZ3VtZW50cyAoKSB7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIHR5cGUgPSBfLnR5cGUob2JqKTtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgJ0FyZ3VtZW50cycgPT09IHR5cGVcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYXJndW1lbnRzIGJ1dCBnb3QgJyArIHR5cGVcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGJlIGFyZ3VtZW50cydcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdhcmd1bWVudHMnLCBjaGVja0FyZ3VtZW50cyk7XG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnQXJndW1lbnRzJywgY2hlY2tBcmd1bWVudHMpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmVxdWFsKHZhbFssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gdGhlIGdpdmVuIGB2YWxgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpO1xuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5lcXVhbCgnZm9vJyk7XG4gICAqXG4gICAqIEFkZCBgLmRlZXBgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIHVzZSBkZWVwIGVxdWFsaXR5IGluc3RlYWQuIFNlZSB0aGVcbiAgICogYGRlZXAtZXFsYCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IG9iamVjdCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGVxdWFscyBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uZGVlcC5lcXVhbCh7YTogMX0pO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmVxdWFsKHthOiAxfSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgYXJyYXkgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBlcXVhbHMgYFsxLCAyXWBcbiAgICogICAgIGV4cGVjdChbMSwgMl0pLnRvLmRlZXAuZXF1YWwoWzEsIDJdKTtcbiAgICogICAgIGV4cGVjdChbMSwgMl0pLnRvLm5vdC5lcXVhbChbMSwgMl0pO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmVxdWFsYC4gSG93ZXZlciwgaXQncyBvZnRlblxuICAgKiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkIHZhbHVlLCByYXRoZXIgdGhhblxuICAgKiBub3QgZXF1YWwgdG8gb25lIG9mIGNvdW50bGVzcyB1bmV4cGVjdGVkIHZhbHVlcy5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3QuZXF1YWwoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmVxdWFsYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2VcbiAgICogdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZVxuICAgKiBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMiwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5lcXVhbCgyKTtcbiAgICpcbiAgICogVGhlIGFsaWFzZXMgYC5lcXVhbHNgIGFuZCBgZXFgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuZXF1YWxgLlxuICAgKlxuICAgKiBAbmFtZSBlcXVhbFxuICAgKiBAYWxpYXMgZXF1YWxzXG4gICAqIEBhbGlhcyBlcVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWxcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydEVxdWFsICh2YWwsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcbiAgICBpZiAoZmxhZyh0aGlzLCAnZGVlcCcpKSB7XG4gICAgICB2YXIgcHJldkxvY2tTc2ZpID0gZmxhZyh0aGlzLCAnbG9ja1NzZmknKTtcbiAgICAgIGZsYWcodGhpcywgJ2xvY2tTc2ZpJywgdHJ1ZSk7XG4gICAgICB0aGlzLmVxbCh2YWwpO1xuICAgICAgZmxhZyh0aGlzLCAnbG9ja1NzZmknLCBwcmV2TG9ja1NzZmkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICB2YWwgPT09IG9ialxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGVxdWFsICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgZXF1YWwgI3tleHB9J1xuICAgICAgICAsIHZhbFxuICAgICAgICAsIHRoaXMuX29ialxuICAgICAgICAsIHRydWVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXF1YWwnLCBhc3NlcnRFcXVhbCk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2VxdWFscycsIGFzc2VydEVxdWFsKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXEnLCBhc3NlcnRFcXVhbCk7XG5cbiAgLyoqXG4gICAqICMjIyAuZXFsKG9ialssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGRlZXBseSBlcXVhbCB0byB0aGUgZ2l2ZW4gYG9iamAuIFNlZSB0aGVcbiAgICogYGRlZXAtZXFsYCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IG9iamVjdCBpcyBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGVxdWFsIHRvIHthOiAxfVxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uZXFsKHthOiAxfSkuYnV0Lm5vdC5lcXVhbCh7YTogMX0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGlzIGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgZXF1YWwgdG8gWzEsIDJdXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5lcWwoWzEsIDJdKS5idXQubm90LmVxdWFsKFsxLCAyXSk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZXFsYC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0XG4gICAqIHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZGVlcGx5IGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyXG4gICAqIHRoYW4gbm90IGRlZXBseSBlcXVhbCB0byBvbmUgb2YgY291bnRsZXNzIHVuZXhwZWN0ZWQgdmFsdWVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uZXFsKHthOiAxfSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5ub3QuZXFsKHtiOiAyfSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmVxbGAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uZXFsKHtiOiAyfSwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmVxbCh7YjogMn0pO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5lcWxzYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmVxbGAuXG4gICAqXG4gICAqIFRoZSBgLmRlZXAuZXF1YWxgIGFzc2VydGlvbiBpcyBhbG1vc3QgaWRlbnRpY2FsIHRvIGAuZXFsYCBidXQgd2l0aCBvbmVcbiAgICogZGlmZmVyZW5jZTogYC5kZWVwLmVxdWFsYCBjYXVzZXMgZGVlcCBlcXVhbGl0eSBjb21wYXJpc29ucyB0byBhbHNvIGJlIHVzZWRcbiAgICogZm9yIGFueSBvdGhlciBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbi5cbiAgICpcbiAgICogQG5hbWUgZXFsXG4gICAqIEBhbGlhcyBlcWxzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9ialxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0RXFsKG9iaiwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIF8uZXFsKG9iaiwgZmxhZyh0aGlzLCAnb2JqZWN0JykpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGRlZXBseSBlcXVhbCAje2V4cH0nXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBkZWVwbHkgZXF1YWwgI3tleHB9J1xuICAgICAgLCBvYmpcbiAgICAgICwgdGhpcy5fb2JqXG4gICAgICAsIHRydWVcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXFsJywgYXNzZXJ0RXFsKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXFscycsIGFzc2VydEVxbCk7XG5cbiAgLyoqXG4gICAqICMjIyAuYWJvdmUoblssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyIG9yIGEgZGF0ZSBncmVhdGVyIHRoYW4gdGhlIGdpdmVuIG51bWJlciBvciBkYXRlIGBuYCByZXNwZWN0aXZlbHkuXG4gICAqIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZFxuICAgKiB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS5hYm92ZSgxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLmxlbmd0aE9mYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0J3MgYGxlbmd0aGBcbiAgICogb3IgYHNpemVgIGlzIGdyZWF0ZXIgdGhhbiB0aGUgZ2l2ZW4gbnVtYmVyIGBuYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZi5hYm92ZSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5hYm92ZSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuYWJvdmVgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmVxdWFsKDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS5hYm92ZSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAuYWJvdmVgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5hYm92ZSgyLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmFib3ZlKDIpO1xuICAgKlxuICAgKiBUaGUgYWxpYXNlcyBgLmd0YCBhbmQgYC5ncmVhdGVyVGhhbmAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGhcbiAgICogYC5hYm92ZWAuXG4gICAqXG4gICAqIEBuYW1lIGFib3ZlXG4gICAqIEBhbGlhcyBndFxuICAgKiBAYWxpYXMgZ3JlYXRlclRoYW5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydEFib3ZlIChuLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZG9MZW5ndGggPSBmbGFnKHRoaXMsICdkb0xlbmd0aCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgbXNnUHJlZml4ID0gKChmbGFnTXNnKSA/IGZsYWdNc2cgKyAnOiAnIDogJycpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgb2JqVHlwZSA9IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgblR5cGUgPSBfLnR5cGUobikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBlcnJvck1lc3NhZ2VcbiAgICAgICwgc2hvdWxkVGhyb3cgPSB0cnVlO1xuXG4gICAgaWYgKGRvTGVuZ3RoICYmIG9ialR5cGUgIT09ICdtYXAnICYmIG9ialR5cGUgIT09ICdzZXQnKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkudG8uaGF2ZS5wcm9wZXJ0eSgnbGVuZ3RoJyk7XG4gICAgfVxuXG4gICAgaWYgKCFkb0xlbmd0aCAmJiAob2JqVHlwZSA9PT0gJ2RhdGUnICYmIG5UeXBlICE9PSAnZGF0ZScpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50IHRvIGFib3ZlIG11c3QgYmUgYSBkYXRlJztcbiAgICB9IGVsc2UgaWYgKG5UeXBlICE9PSAnbnVtYmVyJyAmJiAoZG9MZW5ndGggfHwgb2JqVHlwZSA9PT0gJ251bWJlcicpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50IHRvIGFib3ZlIG11c3QgYmUgYSBudW1iZXInO1xuICAgIH0gZWxzZSBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlICE9PSAnZGF0ZScgJiYgb2JqVHlwZSAhPT0gJ251bWJlcicpKSB7XG4gICAgICB2YXIgcHJpbnRPYmogPSAob2JqVHlwZSA9PT0gJ3N0cmluZycpID8gXCInXCIgKyBvYmogKyBcIidcIiA6IG9iajtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICdleHBlY3RlZCAnICsgcHJpbnRPYmogKyAnIHRvIGJlIGEgbnVtYmVyIG9yIGEgZGF0ZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3VsZFRocm93ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFRocm93KSB7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoZXJyb3JNZXNzYWdlLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgIH1cblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSAnbGVuZ3RoJ1xuICAgICAgICAsIGl0ZW1zQ291bnQ7XG4gICAgICBpZiAob2JqVHlwZSA9PT0gJ21hcCcgfHwgb2JqVHlwZSA9PT0gJ3NldCcpIHtcbiAgICAgICAgZGVzY3JpcHRvciA9ICdzaXplJztcbiAgICAgICAgaXRlbXNDb3VudCA9IG9iai5zaXplO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbXNDb3VudCA9IG9iai5sZW5ndGg7XG4gICAgICB9XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBpdGVtc0NvdW50ID4gblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgYSAnICsgZGVzY3JpcHRvciArICcgYWJvdmUgI3tleHB9IGJ1dCBnb3QgI3thY3R9J1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBoYXZlIGEgJyArIGRlc2NyaXB0b3IgKyAnIGFib3ZlICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICAgICwgaXRlbXNDb3VudFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgb2JqID4gblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGFib3ZlICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhdCBtb3N0ICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2Fib3ZlJywgYXNzZXJ0QWJvdmUpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdndCcsIGFzc2VydEFib3ZlKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZ3JlYXRlclRoYW4nLCBhc3NlcnRBYm92ZSk7XG5cbiAgLyoqXG4gICAqICMjIyAubGVhc3QoblssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyIG9yIGEgZGF0ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuXG4gICAqIG51bWJlciBvciBkYXRlIGBuYCByZXNwZWN0aXZlbHkuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvXG4gICAqIGl0cyBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS5hdC5sZWFzdCgxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8uYmUuYXQubGVhc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5sZW5ndGhPZmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCdzIGBsZW5ndGhgXG4gICAqIG9yIGBzaXplYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlciBgbmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YuYXQubGVhc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YuYXQubGVhc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmxlYXN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3QuYmUuYXQubGVhc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmxlYXN0YCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2VcbiAgICogdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZVxuICAgKiBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUuYXQubGVhc3QoMiwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5hdC5sZWFzdCgyKTtcbiAgICpcbiAgICogVGhlIGFsaWFzIGAuZ3RlYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmxlYXN0YC5cbiAgICpcbiAgICogQG5hbWUgbGVhc3RcbiAgICogQGFsaWFzIGd0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0TGVhc3QgKG4sIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBkb0xlbmd0aCA9IGZsYWcodGhpcywgJ2RvTGVuZ3RoJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBtc2dQcmVmaXggPSAoKGZsYWdNc2cpID8gZmxhZ01zZyArICc6ICcgOiAnJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iaikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBuVHlwZSA9IF8udHlwZShuKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIGVycm9yTWVzc2FnZVxuICAgICAgLCBzaG91bGRUaHJvdyA9IHRydWU7XG5cbiAgICBpZiAoZG9MZW5ndGggJiYgb2JqVHlwZSAhPT0gJ21hcCcgJiYgb2JqVHlwZSAhPT0gJ3NldCcpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KCdsZW5ndGgnKTtcbiAgICB9XG5cbiAgICBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlID09PSAnZGF0ZScgJiYgblR5cGUgIT09ICdkYXRlJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gbGVhc3QgbXVzdCBiZSBhIGRhdGUnO1xuICAgIH0gZWxzZSBpZiAoblR5cGUgIT09ICdudW1iZXInICYmIChkb0xlbmd0aCB8fCBvYmpUeXBlID09PSAnbnVtYmVyJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gbGVhc3QgbXVzdCBiZSBhIG51bWJlcic7XG4gICAgfSBlbHNlIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgIT09ICdkYXRlJyAmJiBvYmpUeXBlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIHZhciBwcmludE9iaiA9IChvYmpUeXBlID09PSAnc3RyaW5nJykgPyBcIidcIiArIG9iaiArIFwiJ1wiIDogb2JqO1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ2V4cGVjdGVkICcgKyBwcmludE9iaiArICcgdG8gYmUgYSBudW1iZXIgb3IgYSBkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVGhyb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9ICdsZW5ndGgnXG4gICAgICAgICwgaXRlbXNDb3VudDtcbiAgICAgIGlmIChvYmpUeXBlID09PSAnbWFwJyB8fCBvYmpUeXBlID09PSAnc2V0Jykge1xuICAgICAgICBkZXNjcmlwdG9yID0gJ3NpemUnO1xuICAgICAgICBpdGVtc0NvdW50ID0gb2JqLnNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtc0NvdW50ID0gb2JqLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGl0ZW1zQ291bnQgPj0gblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgYSAnICsgZGVzY3JpcHRvciArICcgYXQgbGVhc3QgI3tleHB9IGJ1dCBnb3QgI3thY3R9J1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgYSAnICsgZGVzY3JpcHRvciArICcgYmVsb3cgI3tleHB9J1xuICAgICAgICAsIG5cbiAgICAgICAgLCBpdGVtc0NvdW50XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBvYmogPj0gblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGF0IGxlYXN0ICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBiZWxvdyAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdsZWFzdCcsIGFzc2VydExlYXN0KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZ3RlJywgYXNzZXJ0TGVhc3QpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmJlbG93KG5bLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlciBvciBhIGRhdGUgbGVzcyB0aGFuIHRoZSBnaXZlbiBudW1iZXIgb3IgZGF0ZSBgbmAgcmVzcGVjdGl2ZWx5LlxuICAgKiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWRcbiAgICogdmFsdWUuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUuYmVsb3coMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5sZW5ndGhPZmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCdzIGBsZW5ndGhgXG4gICAqIG9yIGBzaXplYCBpcyBsZXNzIHRoYW4gdGhlIGdpdmVuIG51bWJlciBgbmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YuYmVsb3coNCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGgoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mLmJlbG93KDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5iZWxvd2AuXG4gICAqXG4gICAqICAgICBleHBlY3QoMikudG8uZXF1YWwoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8ubm90LmJlLmJlbG93KDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5iZWxvd2AgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLmJlbG93KDEsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuYmVsb3coMSk7XG4gICAqXG4gICAqIFRoZSBhbGlhc2VzIGAubHRgIGFuZCBgLmxlc3NUaGFuYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aFxuICAgKiBgLmJlbG93YC5cbiAgICpcbiAgICogQG5hbWUgYmVsb3dcbiAgICogQGFsaWFzIGx0XG4gICAqIEBhbGlhcyBsZXNzVGhhblxuICAgKiBAcGFyYW0ge051bWJlcn0gblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0QmVsb3cgKG4sIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBkb0xlbmd0aCA9IGZsYWcodGhpcywgJ2RvTGVuZ3RoJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBtc2dQcmVmaXggPSAoKGZsYWdNc2cpID8gZmxhZ01zZyArICc6ICcgOiAnJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iaikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBuVHlwZSA9IF8udHlwZShuKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIGVycm9yTWVzc2FnZVxuICAgICAgLCBzaG91bGRUaHJvdyA9IHRydWU7XG5cbiAgICBpZiAoZG9MZW5ndGggJiYgb2JqVHlwZSAhPT0gJ21hcCcgJiYgb2JqVHlwZSAhPT0gJ3NldCcpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KCdsZW5ndGgnKTtcbiAgICB9XG5cbiAgICBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlID09PSAnZGF0ZScgJiYgblR5cGUgIT09ICdkYXRlJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gYmVsb3cgbXVzdCBiZSBhIGRhdGUnO1xuICAgIH0gZWxzZSBpZiAoblR5cGUgIT09ICdudW1iZXInICYmIChkb0xlbmd0aCB8fCBvYmpUeXBlID09PSAnbnVtYmVyJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gYmVsb3cgbXVzdCBiZSBhIG51bWJlcic7XG4gICAgfSBlbHNlIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgIT09ICdkYXRlJyAmJiBvYmpUeXBlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIHZhciBwcmludE9iaiA9IChvYmpUeXBlID09PSAnc3RyaW5nJykgPyBcIidcIiArIG9iaiArIFwiJ1wiIDogb2JqO1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ2V4cGVjdGVkICcgKyBwcmludE9iaiArICcgdG8gYmUgYSBudW1iZXIgb3IgYSBkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVGhyb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9ICdsZW5ndGgnXG4gICAgICAgICwgaXRlbXNDb3VudDtcbiAgICAgIGlmIChvYmpUeXBlID09PSAnbWFwJyB8fCBvYmpUeXBlID09PSAnc2V0Jykge1xuICAgICAgICBkZXNjcmlwdG9yID0gJ3NpemUnO1xuICAgICAgICBpdGVtc0NvdW50ID0gb2JqLnNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtc0NvdW50ID0gb2JqLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGl0ZW1zQ291bnQgPCBuXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhICcgKyBkZXNjcmlwdG9yICsgJyBiZWxvdyAje2V4cH0gYnV0IGdvdCAje2FjdH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgYSAnICsgZGVzY3JpcHRvciArICcgYmVsb3cgI3tleHB9J1xuICAgICAgICAsIG5cbiAgICAgICAgLCBpdGVtc0NvdW50XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBvYmogPCBuXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYmVsb3cgI3tleHB9J1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGF0IGxlYXN0ICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2JlbG93JywgYXNzZXJ0QmVsb3cpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdsdCcsIGFzc2VydEJlbG93KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnbGVzc1RoYW4nLCBhc3NlcnRCZWxvdyk7XG5cbiAgLyoqXG4gICAqICMjIyAubW9zdChuWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgYSBudW1iZXIgb3IgYSBkYXRlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAqIG9yIGRhdGUgYG5gIHJlc3BlY3RpdmVseS4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG8gaXRzXG4gICAqIGV4cGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmF0Lm1vc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmF0Lm1vc3QoMSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5sZW5ndGhPZmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCdzIGBsZW5ndGhgXG4gICAqIG9yIGBzaXplYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlciBgbmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YuYXQubW9zdCg0KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5hdC5tb3N0KDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5tb3N0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5ub3QuYmUuYXQubW9zdCgxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAubW9zdGAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLmF0Lm1vc3QoMSwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDIsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5hdC5tb3N0KDEpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5sdGVgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAubW9zdGAuXG4gICAqXG4gICAqIEBuYW1lIG1vc3RcbiAgICogQGFsaWFzIGx0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0TW9zdCAobiwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGRvTGVuZ3RoID0gZmxhZyh0aGlzLCAnZG9MZW5ndGgnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIG1zZ1ByZWZpeCA9ICgoZmxhZ01zZykgPyBmbGFnTXNnICsgJzogJyA6ICcnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpXG4gICAgICAsIG9ialR5cGUgPSBfLnR5cGUob2JqKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIG5UeXBlID0gXy50eXBlKG4pLnRvTG93ZXJDYXNlKClcbiAgICAgICwgZXJyb3JNZXNzYWdlXG4gICAgICAsIHNob3VsZFRocm93ID0gdHJ1ZTtcblxuICAgIGlmIChkb0xlbmd0aCAmJiBvYmpUeXBlICE9PSAnbWFwJyAmJiBvYmpUeXBlICE9PSAnc2V0Jykge1xuICAgICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIH1cblxuICAgIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgPT09ICdkYXRlJyAmJiBuVHlwZSAhPT0gJ2RhdGUnKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudCB0byBtb3N0IG11c3QgYmUgYSBkYXRlJztcbiAgICB9IGVsc2UgaWYgKG5UeXBlICE9PSAnbnVtYmVyJyAmJiAoZG9MZW5ndGggfHwgb2JqVHlwZSA9PT0gJ251bWJlcicpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50IHRvIG1vc3QgbXVzdCBiZSBhIG51bWJlcic7XG4gICAgfSBlbHNlIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgIT09ICdkYXRlJyAmJiBvYmpUeXBlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIHZhciBwcmludE9iaiA9IChvYmpUeXBlID09PSAnc3RyaW5nJykgPyBcIidcIiArIG9iaiArIFwiJ1wiIDogb2JqO1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ2V4cGVjdGVkICcgKyBwcmludE9iaiArICcgdG8gYmUgYSBudW1iZXIgb3IgYSBkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVGhyb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9ICdsZW5ndGgnXG4gICAgICAgICwgaXRlbXNDb3VudDtcbiAgICAgIGlmIChvYmpUeXBlID09PSAnbWFwJyB8fCBvYmpUeXBlID09PSAnc2V0Jykge1xuICAgICAgICBkZXNjcmlwdG9yID0gJ3NpemUnO1xuICAgICAgICBpdGVtc0NvdW50ID0gb2JqLnNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtc0NvdW50ID0gb2JqLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGl0ZW1zQ291bnQgPD0gblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgYSAnICsgZGVzY3JpcHRvciArICcgYXQgbW9zdCAje2V4cH0gYnV0IGdvdCAje2FjdH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhICcgKyBkZXNjcmlwdG9yICsgJyBhYm92ZSAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgICAsIGl0ZW1zQ291bnRcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIG9iaiA8PSBuXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYXQgbW9zdCAje2V4cH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYWJvdmUgI3tleHB9J1xuICAgICAgICAsIG5cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnbW9zdCcsIGFzc2VydE1vc3QpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdsdGUnLCBhc3NlcnRNb3N0KTtcblxuICAvKipcbiAgICogIyMjIC53aXRoaW4oc3RhcnQsIGZpbmlzaFssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyIG9yIGEgZGF0ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuXG4gICAqIG51bWJlciBvciBkYXRlIGBzdGFydGAsIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlciBvciBkYXRlIGBmaW5pc2hgIHJlc3BlY3RpdmVseS5cbiAgICogSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkXG4gICAqIHZhbHVlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmVxdWFsKDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLndpdGhpbigxLCAzKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8uYmUud2l0aGluKDIsIDMpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS53aXRoaW4oMSwgMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5sZW5ndGhPZmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCdzIGBsZW5ndGhgXG4gICAqIG9yIGBzaXplYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlciBgc3RhcnRgLCBhbmQgbGVzc1xuICAgKiB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXIgYGZpbmlzaGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2Yud2l0aGluKDIsIDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mLndpdGhpbigyLCA0KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAud2l0aGluYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3QuYmUud2l0aGluKDIsIDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC53aXRoaW5gIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCg0KS50by5iZS53aXRoaW4oMSwgMywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDQsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS53aXRoaW4oMSwgMyk7XG4gICAqXG4gICAqIEBuYW1lIHdpdGhpblxuICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnQgbG93ZXIgYm91bmQgaW5jbHVzaXZlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBmaW5pc2ggdXBwZXIgYm91bmQgaW5jbHVzaXZlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCd3aXRoaW4nLCBmdW5jdGlvbiAoc3RhcnQsIGZpbmlzaCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGRvTGVuZ3RoID0gZmxhZyh0aGlzLCAnZG9MZW5ndGgnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIG1zZ1ByZWZpeCA9ICgoZmxhZ01zZykgPyBmbGFnTXNnICsgJzogJyA6ICcnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpXG4gICAgICAsIG9ialR5cGUgPSBfLnR5cGUob2JqKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIHN0YXJ0VHlwZSA9IF8udHlwZShzdGFydCkudG9Mb3dlckNhc2UoKVxuICAgICAgLCBmaW5pc2hUeXBlID0gXy50eXBlKGZpbmlzaCkudG9Mb3dlckNhc2UoKVxuICAgICAgLCBlcnJvck1lc3NhZ2VcbiAgICAgICwgc2hvdWxkVGhyb3cgPSB0cnVlXG4gICAgICAsIHJhbmdlID0gKHN0YXJ0VHlwZSA9PT0gJ2RhdGUnICYmIGZpbmlzaFR5cGUgPT09ICdkYXRlJylcbiAgICAgICAgICA/IHN0YXJ0LnRvVVRDU3RyaW5nKCkgKyAnLi4nICsgZmluaXNoLnRvVVRDU3RyaW5nKClcbiAgICAgICAgICA6IHN0YXJ0ICsgJy4uJyArIGZpbmlzaDtcblxuICAgIGlmIChkb0xlbmd0aCAmJiBvYmpUeXBlICE9PSAnbWFwJyAmJiBvYmpUeXBlICE9PSAnc2V0Jykge1xuICAgICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIH1cblxuICAgIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgPT09ICdkYXRlJyAmJiAoc3RhcnRUeXBlICE9PSAnZGF0ZScgfHwgZmluaXNoVHlwZSAhPT0gJ2RhdGUnKSkpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnRzIHRvIHdpdGhpbiBtdXN0IGJlIGRhdGVzJztcbiAgICB9IGVsc2UgaWYgKChzdGFydFR5cGUgIT09ICdudW1iZXInIHx8IGZpbmlzaFR5cGUgIT09ICdudW1iZXInKSAmJiAoZG9MZW5ndGggfHwgb2JqVHlwZSA9PT0gJ251bWJlcicpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50cyB0byB3aXRoaW4gbXVzdCBiZSBudW1iZXJzJztcbiAgICB9IGVsc2UgaWYgKCFkb0xlbmd0aCAmJiAob2JqVHlwZSAhPT0gJ2RhdGUnICYmIG9ialR5cGUgIT09ICdudW1iZXInKSkge1xuICAgICAgdmFyIHByaW50T2JqID0gKG9ialR5cGUgPT09ICdzdHJpbmcnKSA/IFwiJ1wiICsgb2JqICsgXCInXCIgOiBvYmo7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAnZXhwZWN0ZWQgJyArIHByaW50T2JqICsgJyB0byBiZSBhIG51bWJlciBvciBhIGRhdGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG91bGRUaHJvdyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRUaHJvdykge1xuICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKGVycm9yTWVzc2FnZSwgdW5kZWZpbmVkLCBzc2ZpKTtcbiAgICB9XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gJ2xlbmd0aCdcbiAgICAgICAgLCBpdGVtc0NvdW50O1xuICAgICAgaWYgKG9ialR5cGUgPT09ICdtYXAnIHx8IG9ialR5cGUgPT09ICdzZXQnKSB7XG4gICAgICAgIGRlc2NyaXB0b3IgPSAnc2l6ZSc7XG4gICAgICAgIGl0ZW1zQ291bnQgPSBvYmouc2l6ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1zQ291bnQgPSBvYmoubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgaXRlbXNDb3VudCA+PSBzdGFydCAmJiBpdGVtc0NvdW50IDw9IGZpbmlzaFxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgYSAnICsgZGVzY3JpcHRvciArICcgd2l0aGluICcgKyByYW5nZVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBoYXZlIGEgJyArIGRlc2NyaXB0b3IgKyAnIHdpdGhpbiAnICsgcmFuZ2VcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIG9iaiA+PSBzdGFydCAmJiBvYmogPD0gZmluaXNoXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgd2l0aGluICcgKyByYW5nZVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSB3aXRoaW4gJyArIHJhbmdlXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuaW5zdGFuY2VvZihjb25zdHJ1Y3RvclssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGFuIGluc3RhbmNlIG9mIHRoZSBnaXZlbiBgY29uc3RydWN0b3JgLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gQ2F0ICgpIHsgfVxuICAgKlxuICAgKiAgICAgZXhwZWN0KG5ldyBDYXQoKSkudG8uYmUuYW4uaW5zdGFuY2VvZihDYXQpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8uYmUuYW4uaW5zdGFuY2VvZihBcnJheSk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuaW5zdGFuY2VvZmAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5ub3QuYmUuYW4uaW5zdGFuY2VvZihBcnJheSk7XG4gICAqXG4gICAqIGAuaW5zdGFuY2VvZmAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmFuLmluc3RhbmNlb2YoQXJyYXksICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgxLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuYW4uaW5zdGFuY2VvZihBcnJheSk7XG4gICAqXG4gICAqIER1ZSB0byBsaW1pdGF0aW9ucyBpbiBFUzUsIGAuaW5zdGFuY2VvZmAgbWF5IG5vdCBhbHdheXMgd29yayBhcyBleHBlY3RlZFxuICAgKiB3aGVuIHVzaW5nIGEgdHJhbnNwaWxlciBzdWNoIGFzIEJhYmVsIG9yIFR5cGVTY3JpcHQuIEluIHBhcnRpY3VsYXIsIGl0IG1heVxuICAgKiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cyB3aGVuIHN1YmNsYXNzaW5nIGJ1aWx0LWluIG9iamVjdCBzdWNoIGFzXG4gICAqIGBBcnJheWAsIGBFcnJvcmAsIGFuZCBgTWFwYC4gU2VlIHlvdXIgdHJhbnNwaWxlcidzIGRvY3MgZm9yIGRldGFpbHM6XG4gICAqXG4gICAqIC0gKFtCYWJlbF0oaHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvdXNhZ2UvY2F2ZWF0cy8jY2xhc3NlcykpXG4gICAqIC0gKFtUeXBlU2NyaXB0XShodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvd2lraS9CcmVha2luZy1DaGFuZ2VzI2V4dGVuZGluZy1idWlsdC1pbnMtbGlrZS1lcnJvci1hcnJheS1hbmQtbWFwLW1heS1uby1sb25nZXItd29yaykpXG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmluc3RhbmNlT2ZgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuaW5zdGFuY2VvZmAuXG4gICAqXG4gICAqIEBuYW1lIGluc3RhbmNlb2ZcbiAgICogQHBhcmFtIHtDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBhbGlhcyBpbnN0YW5jZU9mXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydEluc3RhbmNlT2YgKGNvbnN0cnVjdG9yLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcblxuICAgIHZhciB0YXJnZXQgPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgIHZhciBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuICAgIHZhciBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0luc3RhbmNlT2YgPSB0YXJnZXQgaW5zdGFuY2VvZiBjb25zdHJ1Y3RvcjtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBUeXBlRXJyb3IpIHtcbiAgICAgICAgZmxhZ01zZyA9IGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyA6ICcnO1xuICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgZmxhZ01zZyArICdUaGUgaW5zdGFuY2VvZiBhc3NlcnRpb24gbmVlZHMgYSBjb25zdHJ1Y3RvciBidXQgJ1xuICAgICAgICAgICAgKyBfLnR5cGUoY29uc3RydWN0b3IpICsgJyB3YXMgZ2l2ZW4uJyxcbiAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgc3NmaVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cblxuICAgIHZhciBuYW1lID0gXy5nZXROYW1lKGNvbnN0cnVjdG9yKTtcbiAgICBpZiAobmFtZSA9PT0gbnVsbCkge1xuICAgICAgbmFtZSA9ICdhbiB1bm5hbWVkIGNvbnN0cnVjdG9yJztcbiAgICB9XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgaXNJbnN0YW5jZU9mXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGFuIGluc3RhbmNlIG9mICcgKyBuYW1lXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBhbiBpbnN0YW5jZSBvZiAnICsgbmFtZVxuICAgICk7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnaW5zdGFuY2VvZicsIGFzc2VydEluc3RhbmNlT2YpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdpbnN0YW5jZU9mJywgYXNzZXJ0SW5zdGFuY2VPZik7XG5cbiAgLyoqXG4gICAqICMjIyAucHJvcGVydHkobmFtZVssIHZhbFssIG1zZ11dKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBoYXMgYSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBrZXkgYG5hbWVgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5wcm9wZXJ0eSgnYScpO1xuICAgKlxuICAgKiBXaGVuIGB2YWxgIGlzIHByb3ZpZGVkLCBgLnByb3BlcnR5YCBhbHNvIGFzc2VydHMgdGhhdCB0aGUgcHJvcGVydHkncyB2YWx1ZVxuICAgKiBpcyBlcXVhbCB0byB0aGUgZ2l2ZW4gYHZhbGAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLnByb3BlcnR5KCdhJywgMSk7XG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHN0cmljdCAoYD09PWApIGVxdWFsaXR5IGlzIHVzZWQuIEFkZCBgLmRlZXBgIGVhcmxpZXIgaW4gdGhlXG4gICAqIGNoYWluIHRvIHVzZSBkZWVwIGVxdWFsaXR5IGluc3RlYWQuIFNlZSB0aGUgYGRlZXAtZXFsYCBwcm9qZWN0IHBhZ2UgZm9yXG4gICAqIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IG9iamVjdCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGhhcyBwcm9wZXJ0eSBgeDoge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5oYXZlLmRlZXAucHJvcGVydHkoJ3gnLCB7YTogMX0pO1xuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgneCcsIHthOiAxfSk7XG4gICAqXG4gICAqIFRoZSB0YXJnZXQncyBlbnVtZXJhYmxlIGFuZCBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGFyZSBhbHdheXMgaW5jbHVkZWRcbiAgICogaW4gdGhlIHNlYXJjaC4gQnkgZGVmYXVsdCwgYm90aCBvd24gYW5kIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGFyZSBpbmNsdWRlZC5cbiAgICogQWRkIGAub3duYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBleGNsdWRlIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGZyb20gdGhlXG4gICAqIHNlYXJjaC5cbiAgICpcbiAgICogICAgIE9iamVjdC5wcm90b3R5cGUuYiA9IDI7XG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLm93bi5wcm9wZXJ0eSgnYScpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5vd24ucHJvcGVydHkoJ2EnLCAxKTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2InKTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5oYXZlLm93bi5wcm9wZXJ0eSgnYicpO1xuICAgKlxuICAgKiBgLmRlZXBgIGFuZCBgLm93bmAgY2FuIGJlIGNvbWJpbmVkLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5oYXZlLmRlZXAub3duLnByb3BlcnR5KCd4Jywge2E6IDF9KTtcbiAgICpcbiAgICogQWRkIGAubmVzdGVkYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBlbmFibGUgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiB3aGVuXG4gICAqIHJlZmVyZW5jaW5nIG5lc3RlZCBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiB7YjogWyd4JywgJ3knXX19KS50by5oYXZlLm5lc3RlZC5wcm9wZXJ0eSgnYS5iWzFdJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbJ3gnLCAneSddfX0pLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KCdhLmJbMV0nLCAneScpO1xuICAgKlxuICAgKiBJZiBgLmAgb3IgYFtdYCBhcmUgcGFydCBvZiBhbiBhY3R1YWwgcHJvcGVydHkgbmFtZSwgdGhleSBjYW4gYmUgZXNjYXBlZCBieVxuICAgKiBhZGRpbmcgdHdvIGJhY2tzbGFzaGVzIGJlZm9yZSB0aGVtLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHsnLmEnOiB7J1tiXSc6ICd4J319KS50by5oYXZlLm5lc3RlZC5wcm9wZXJ0eSgnXFxcXC5hLlxcXFxbYlxcXFxdJyk7XG4gICAqXG4gICAqIGAuZGVlcGAgYW5kIGAubmVzdGVkYCBjYW4gYmUgY29tYmluZWQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbe2M6IDN9XX19KVxuICAgKiAgICAgICAudG8uaGF2ZS5kZWVwLm5lc3RlZC5wcm9wZXJ0eSgnYS5iWzBdJywge2M6IDN9KTtcbiAgICpcbiAgICogYC5vd25gIGFuZCBgLm5lc3RlZGAgY2Fubm90IGJlIGNvbWJpbmVkLlxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnByb3BlcnR5YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5oYXZlLnByb3BlcnR5KCdiJyk7XG4gICAqXG4gICAqIEhvd2V2ZXIsIGl0J3MgZGFuZ2Vyb3VzIHRvIG5lZ2F0ZSBgLnByb3BlcnR5YCB3aGVuIHByb3ZpZGluZyBgdmFsYC4gVGhlXG4gICAqIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnMgYnkgYXNzZXJ0aW5nIHRoYXQgdGhlXG4gICAqIHRhcmdldCBlaXRoZXIgZG9lc24ndCBoYXZlIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4ga2V5IGBuYW1lYCwgb3IgdGhhdCBpdFxuICAgKiBkb2VzIGhhdmUgYSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBrZXkgYG5hbWVgIGJ1dCBpdHMgdmFsdWUgaXNuJ3QgZXF1YWwgdG9cbiAgICogdGhlIGdpdmVuIGB2YWxgLiBJdCdzIG9mdGVuIGJlc3QgdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3NcbiAgICogZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzbid0IGV4cGVjdGVkIHRvIGhhdmUgYSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBrZXlcbiAgICogYG5hbWVgLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YjogMn0pLnRvLm5vdC5oYXZlLnByb3BlcnR5KCdhJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2I6IDJ9KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgnYScsIDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGV4cGVjdGVkIHRvIGhhdmUgYSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBrZXkgYG5hbWVgLFxuICAgKiBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHByb3BlcnR5IGhhcyBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlclxuICAgKiB0aGFuIGFzc2VydGluZyB0aGF0IGl0IGRvZXNuJ3QgaGF2ZSBvbmUgb2YgbWFueSB1bmV4cGVjdGVkIHZhbHVlcy5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogM30pLnRvLmhhdmUucHJvcGVydHkoJ2EnLCAzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogM30pLnRvLm5vdC5oYXZlLnByb3BlcnR5KCdhJywgMSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLnByb3BlcnR5YCBjaGFuZ2VzIHRoZSB0YXJnZXQgb2YgYW55IGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluXG4gICAqIHRvIGJlIHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgZnJvbSB0aGUgb3JpZ2luYWwgdGFyZ2V0IG9iamVjdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2EnKS50aGF0LmlzLmEoJ251bWJlcicpO1xuICAgKlxuICAgKiBgLnByb3BlcnR5YCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyBgdmFsYCwgb25seSB1c2UgdGhlXG4gICAqIHNlY29uZCBmb3JtLlxuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2EnLCAyLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5wcm9wZXJ0eSgnYScsIDIpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmhhdmUucHJvcGVydHkoJ2InKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5wcm9wZXJ0eSgnYicsIHVuZGVmaW5lZCwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKlxuICAgKiBUaGUgYWJvdmUgYXNzZXJ0aW9uIGlzbid0IHRoZSBzYW1lIHRoaW5nIGFzIG5vdCBwcm92aWRpbmcgYHZhbGAuIEluc3RlYWQsXG4gICAqIGl0J3MgYXNzZXJ0aW5nIHRoYXQgdGhlIHRhcmdldCBvYmplY3QgaGFzIGEgYGJgIHByb3BlcnR5IHRoYXQncyBlcXVhbCB0b1xuICAgKiBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogVGhlIGFzc2VydGlvbnMgYC5vd25Qcm9wZXJ0eWAgYW5kIGAuaGF2ZU93blByb3BlcnR5YCBjYW4gYmUgdXNlZFxuICAgKiBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLm93bi5wcm9wZXJ0eWAuXG4gICAqXG4gICAqIEBuYW1lIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbCAob3B0aW9uYWwpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAcmV0dXJucyB2YWx1ZSBvZiBwcm9wZXJ0eSBmb3IgY2hhaW5pbmdcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0UHJvcGVydHkgKG5hbWUsIHZhbCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG5cbiAgICB2YXIgaXNOZXN0ZWQgPSBmbGFnKHRoaXMsICduZXN0ZWQnKVxuICAgICAgLCBpc093biA9IGZsYWcodGhpcywgJ293bicpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBuYW1lVHlwZSA9IHR5cGVvZiBuYW1lO1xuXG4gICAgZmxhZ01zZyA9IGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyA6ICcnO1xuXG4gICAgaWYgKGlzTmVzdGVkKSB7XG4gICAgICBpZiAobmFtZVR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICBmbGFnTXNnICsgJ3RoZSBhcmd1bWVudCB0byBwcm9wZXJ0eSBtdXN0IGJlIGEgc3RyaW5nIHdoZW4gdXNpbmcgbmVzdGVkIHN5bnRheCcsXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIHNzZmlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5hbWVUeXBlICE9PSAnc3RyaW5nJyAmJiBuYW1lVHlwZSAhPT0gJ251bWJlcicgJiYgbmFtZVR5cGUgIT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICBmbGFnTXNnICsgJ3RoZSBhcmd1bWVudCB0byBwcm9wZXJ0eSBtdXN0IGJlIGEgc3RyaW5nLCBudW1iZXIsIG9yIHN5bWJvbCcsXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIHNzZmlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNOZXN0ZWQgJiYgaXNPd24pIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgZmxhZ01zZyArICdUaGUgXCJuZXN0ZWRcIiBhbmQgXCJvd25cIiBmbGFncyBjYW5ub3QgYmUgY29tYmluZWQuJyxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBzc2ZpXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgZmxhZ01zZyArICdUYXJnZXQgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLicsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgc3NmaVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgaXNEZWVwID0gZmxhZyh0aGlzLCAnZGVlcCcpXG4gICAgICAsIG5lZ2F0ZSA9IGZsYWcodGhpcywgJ25lZ2F0ZScpXG4gICAgICAsIHBhdGhJbmZvID0gaXNOZXN0ZWQgPyBfLmdldFBhdGhJbmZvKG9iaiwgbmFtZSkgOiBudWxsXG4gICAgICAsIHZhbHVlID0gaXNOZXN0ZWQgPyBwYXRoSW5mby52YWx1ZSA6IG9ialtuYW1lXTtcblxuICAgIHZhciBkZXNjcmlwdG9yID0gJyc7XG4gICAgaWYgKGlzRGVlcCkgZGVzY3JpcHRvciArPSAnZGVlcCAnO1xuICAgIGlmIChpc093bikgZGVzY3JpcHRvciArPSAnb3duICc7XG4gICAgaWYgKGlzTmVzdGVkKSBkZXNjcmlwdG9yICs9ICduZXN0ZWQgJztcbiAgICBkZXNjcmlwdG9yICs9ICdwcm9wZXJ0eSAnO1xuXG4gICAgdmFyIGhhc1Byb3BlcnR5O1xuICAgIGlmIChpc093bikgaGFzUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBuYW1lKTtcbiAgICBlbHNlIGlmIChpc05lc3RlZCkgaGFzUHJvcGVydHkgPSBwYXRoSW5mby5leGlzdHM7XG4gICAgZWxzZSBoYXNQcm9wZXJ0eSA9IF8uaGFzUHJvcGVydHkob2JqLCBuYW1lKTtcblxuICAgIC8vIFdoZW4gcGVyZm9ybWluZyBhIG5lZ2F0ZWQgYXNzZXJ0aW9uIGZvciBib3RoIG5hbWUgYW5kIHZhbCwgbWVyZWx5IGhhdmluZ1xuICAgIC8vIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBpc24ndCBlbm91Z2ggdG8gY2F1c2UgdGhlIGFzc2VydGlvbiB0b1xuICAgIC8vIGZhaWwuIEl0IG11c3QgYm90aCBoYXZlIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gbmFtZSwgYW5kIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHRoYXQgcHJvcGVydHkgbXVzdCBlcXVhbCB0aGUgZ2l2ZW4gdmFsLiBUaGVyZWZvcmUsIHNraXAgdGhpcyBhc3NlcnRpb24gaW5cbiAgICAvLyBmYXZvciBvZiB0aGUgbmV4dC5cbiAgICBpZiAoIW5lZ2F0ZSB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBoYXNQcm9wZXJ0eVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgJyArIGRlc2NyaXB0b3IgKyBfLmluc3BlY3QobmFtZSlcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgaGF2ZSAnICsgZGVzY3JpcHRvciArIF8uaW5zcGVjdChuYW1lKSk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBoYXNQcm9wZXJ0eSAmJiAoaXNEZWVwID8gXy5lcWwodmFsLCB2YWx1ZSkgOiB2YWwgPT09IHZhbHVlKVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgJyArIGRlc2NyaXB0b3IgKyBfLmluc3BlY3QobmFtZSkgKyAnIG9mICN7ZXhwfSwgYnV0IGdvdCAje2FjdH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgJyArIGRlc2NyaXB0b3IgKyBfLmluc3BlY3QobmFtZSkgKyAnIG9mICN7YWN0fSdcbiAgICAgICAgLCB2YWxcbiAgICAgICAgLCB2YWx1ZVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmbGFnKHRoaXMsICdvYmplY3QnLCB2YWx1ZSk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdwcm9wZXJ0eScsIGFzc2VydFByb3BlcnR5KTtcblxuICBmdW5jdGlvbiBhc3NlcnRPd25Qcm9wZXJ0eSAobmFtZSwgdmFsdWUsIG1zZykge1xuICAgIGZsYWcodGhpcywgJ293bicsIHRydWUpO1xuICAgIGFzc2VydFByb3BlcnR5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdvd25Qcm9wZXJ0eScsIGFzc2VydE93blByb3BlcnR5KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnaGF2ZU93blByb3BlcnR5JywgYXNzZXJ0T3duUHJvcGVydHkpO1xuXG4gIC8qKlxuICAgKiAjIyMgLm93blByb3BlcnR5RGVzY3JpcHRvcihuYW1lWywgZGVzY3JpcHRvclssIG1zZ11dKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBoYXMgaXRzIG93biBwcm9wZXJ0eSBkZXNjcmlwdG9yIHdpdGggdGhlIGdpdmVuIGtleVxuICAgKiBgbmFtZWAuIEVudW1lcmFibGUgYW5kIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgYXJlIGluY2x1ZGVkIGluIHRoZVxuICAgKiBzZWFyY2guXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYScpO1xuICAgKlxuICAgKiBXaGVuIGBkZXNjcmlwdG9yYCBpcyBwcm92aWRlZCwgYC5vd25Qcm9wZXJ0eURlc2NyaXB0b3JgIGFsc28gYXNzZXJ0cyB0aGF0XG4gICAqIHRoZSBwcm9wZXJ0eSdzIGRlc2NyaXB0b3IgaXMgZGVlcGx5IGVxdWFsIHRvIHRoZSBnaXZlbiBgZGVzY3JpcHRvcmAuIFNlZVxuICAgKiB0aGUgYGRlZXAtZXFsYCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnLCB7XG4gICAqICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAqICAgICAgIHZhbHVlOiAxLFxuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAub3duUHJvcGVydHlEZXNjcmlwdG9yYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYicpO1xuICAgKlxuICAgKiBIb3dldmVyLCBpdCdzIGRhbmdlcm91cyB0byBuZWdhdGUgYC5vd25Qcm9wZXJ0eURlc2NyaXB0b3JgIHdoZW4gcHJvdmlkaW5nXG4gICAqIGEgYGRlc2NyaXB0b3JgLiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9ucyBieVxuICAgKiBhc3NlcnRpbmcgdGhhdCB0aGUgdGFyZ2V0IGVpdGhlciBkb2Vzbid0IGhhdmUgYSBwcm9wZXJ0eSBkZXNjcmlwdG9yIHdpdGhcbiAgICogdGhlIGdpdmVuIGtleSBgbmFtZWAsIG9yIHRoYXQgaXQgZG9lcyBoYXZlIGEgcHJvcGVydHkgZGVzY3JpcHRvciB3aXRoIHRoZVxuICAgKiBnaXZlbiBrZXkgYG5hbWVgIGJ1dCBpdHMgbm90IGRlZXBseSBlcXVhbCB0byB0aGUgZ2l2ZW4gYGRlc2NyaXB0b3JgLiBJdCdzXG4gICAqIG9mdGVuIGJlc3QgdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3MgZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuXG4gICAqIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzbid0IGV4cGVjdGVkIHRvIGhhdmUgYSBwcm9wZXJ0eSBkZXNjcmlwdG9yIHdpdGggdGhlIGdpdmVuXG4gICAqIGtleSBgbmFtZWAsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgZXhhY3RseSB0aGF0LlxuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YjogMn0pLnRvLm5vdC5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYScpO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2I6IDJ9KS50by5ub3QuaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnLCB7XG4gICAqICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAqICAgICAgIHZhbHVlOiAxLFxuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBleHBlY3RlZCB0byBoYXZlIGEgcHJvcGVydHkgZGVzY3JpcHRvciB3aXRoIHRoZSBnaXZlblxuICAgKiBrZXkgYG5hbWVgLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHByb3BlcnR5IGhhcyBpdHMgZXhwZWN0ZWRcbiAgICogZGVzY3JpcHRvciwgcmF0aGVyIHRoYW4gYXNzZXJ0aW5nIHRoYXQgaXQgZG9lc24ndCBoYXZlIG9uZSBvZiBtYW55XG4gICAqIHVuZXhwZWN0ZWQgZGVzY3JpcHRvcnMuXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAzfSkudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnLCB7XG4gICAqICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAqICAgICAgIHZhbHVlOiAzLFxuICAgKiAgICAgfSk7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogM30pLnRvLm5vdC5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYScsIHtcbiAgICogICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICogICAgICAgdmFsdWU6IDEsXG4gICAqICAgICB9KTtcbiAgICpcbiAgICogYC5vd25Qcm9wZXJ0eURlc2NyaXB0b3JgIGNoYW5nZXMgdGhlIHRhcmdldCBvZiBhbnkgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvd1xuICAgKiBpbiB0aGUgY2hhaW4gdG8gYmUgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZyb20gdGhlIG9yaWdpbmFsXG4gICAqIHRhcmdldCBvYmplY3QuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYScpXG4gICAqICAgICAgIC50aGF0Lmhhcy5wcm9wZXJ0eSgnZW51bWVyYWJsZScsIHRydWUpO1xuICAgKlxuICAgKiBgLm93blByb3BlcnR5RGVzY3JpcHRvcmAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhXG4gICAqIGN1c3RvbSBlcnJvciBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzb1xuICAgKiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLiBXaGVuIG5vdCBwcm92aWRpbmdcbiAgICogYGRlc2NyaXB0b3JgLCBvbmx5IHVzZSB0aGUgc2Vjb25kIGZvcm0uXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnLCB7XG4gICAqICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAqICAgICAgIHZhbHVlOiAyLFxuICAgKiAgICAgfSwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYScsIHtcbiAgICogICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICogICAgICAgdmFsdWU6IDIsXG4gICAqICAgICB9KTtcbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2InKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSlcbiAgICogICAgICAgLnRvLmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdiJywgdW5kZWZpbmVkLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqXG4gICAqIFRoZSBhYm92ZSBhc3NlcnRpb24gaXNuJ3QgdGhlIHNhbWUgdGhpbmcgYXMgbm90IHByb3ZpZGluZyBgZGVzY3JpcHRvcmAuXG4gICAqIEluc3RlYWQsIGl0J3MgYXNzZXJ0aW5nIHRoYXQgdGhlIHRhcmdldCBvYmplY3QgaGFzIGEgYGJgIHByb3BlcnR5XG4gICAqIGRlc2NyaXB0b3IgdGhhdCdzIGRlZXBseSBlcXVhbCB0byBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogVGhlIGFsaWFzIGAuaGF2ZU93blByb3BlcnR5RGVzY3JpcHRvcmAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGhcbiAgICogYC5vd25Qcm9wZXJ0eURlc2NyaXB0b3JgLlxuICAgKlxuICAgKiBAbmFtZSBvd25Qcm9wZXJ0eURlc2NyaXB0b3JcbiAgICogQGFsaWFzIGhhdmVPd25Qcm9wZXJ0eURlc2NyaXB0b3JcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IGRlc2NyaXB0b3IgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0T3duUHJvcGVydHlEZXNjcmlwdG9yIChuYW1lLCBkZXNjcmlwdG9yLCBtc2cpIHtcbiAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICBtc2cgPSBkZXNjcmlwdG9yO1xuICAgICAgZGVzY3JpcHRvciA9IG51bGw7XG4gICAgfVxuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcbiAgICB2YXIgYWN0dWFsRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0KG9iaiksIG5hbWUpO1xuICAgIGlmIChhY3R1YWxEZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IpIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIF8uZXFsKGRlc2NyaXB0b3IsIGFjdHVhbERlc2NyaXB0b3IpXG4gICAgICAgICwgJ2V4cGVjdGVkIHRoZSBvd24gcHJvcGVydHkgZGVzY3JpcHRvciBmb3IgJyArIF8uaW5zcGVjdChuYW1lKSArICcgb24gI3t0aGlzfSB0byBtYXRjaCAnICsgXy5pbnNwZWN0KGRlc2NyaXB0b3IpICsgJywgZ290ICcgKyBfLmluc3BlY3QoYWN0dWFsRGVzY3JpcHRvcilcbiAgICAgICAgLCAnZXhwZWN0ZWQgdGhlIG93biBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciAnICsgXy5pbnNwZWN0KG5hbWUpICsgJyBvbiAje3RoaXN9IHRvIG5vdCBtYXRjaCAnICsgXy5pbnNwZWN0KGRlc2NyaXB0b3IpXG4gICAgICAgICwgZGVzY3JpcHRvclxuICAgICAgICAsIGFjdHVhbERlc2NyaXB0b3JcbiAgICAgICAgLCB0cnVlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBhY3R1YWxEZXNjcmlwdG9yXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhbiBvd24gcHJvcGVydHkgZGVzY3JpcHRvciBmb3IgJyArIF8uaW5zcGVjdChuYW1lKVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBoYXZlIGFuIG93biBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciAnICsgXy5pbnNwZWN0KG5hbWUpXG4gICAgICApO1xuICAgIH1cbiAgICBmbGFnKHRoaXMsICdvYmplY3QnLCBhY3R1YWxEZXNjcmlwdG9yKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ293blByb3BlcnR5RGVzY3JpcHRvcicsIGFzc2VydE93blByb3BlcnR5RGVzY3JpcHRvcik7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2hhdmVPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBhc3NlcnRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmxlbmd0aE9mKG5bLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCdzIGBsZW5ndGhgIG9yIGBzaXplYCBpcyBlcXVhbCB0byB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAqIGBuYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YoMyk7XG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7XG4gICAqICAgICBleHBlY3QobmV3IFNldChbMSwgMiwgM10pKS50by5oYXZlLmxlbmd0aE9mKDMpO1xuICAgKiAgICAgZXhwZWN0KG5ldyBNYXAoW1snYScsIDFdLCBbJ2InLCAyXSwgWydjJywgM11dKSkudG8uaGF2ZS5sZW5ndGhPZigzKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5sZW5ndGhPZmAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkXG4gICAqIHZhbHVlLCByYXRoZXIgdGhhbiBub3QgZXF1YWwgdG8gb25lIG9mIG1hbnkgdW5leHBlY3RlZCB2YWx1ZXMuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLm5vdC5oYXZlLmxlbmd0aE9mKDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5sZW5ndGhPZmAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigyLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5sZW5ndGhPZigyKTtcbiAgICpcbiAgICogYC5sZW5ndGhPZmAgY2FuIGFsc28gYmUgdXNlZCBhcyBhIGxhbmd1YWdlIGNoYWluLCBjYXVzaW5nIGFsbCBgLmFib3ZlYCxcbiAgICogYC5iZWxvd2AsIGAubGVhc3RgLCBgLm1vc3RgLCBhbmQgYC53aXRoaW5gIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlXG4gICAqIGNoYWluIHRvIHVzZSB0aGUgdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgYXMgdGhlIHRhcmdldC4gSG93ZXZlciwgaXQnc1xuICAgKiBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQncyBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBlcXVhbCB0byBpdHNcbiAgICogZXhwZWN0ZWQgbGVuZ3RoLCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgdGhhdCBpdHMgYGxlbmd0aGAgcHJvcGVydHkgZmFsbHNcbiAgICogd2l0aGluIHNvbWUgcmFuZ2Ugb2YgdmFsdWVzLlxuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YoMyk7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YuYWJvdmUoMik7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mLmJlbG93KDQpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5hdC5sZWFzdCgzKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YuYXQubW9zdCgzKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2Yud2l0aGluKDIsNCk7XG4gICAqXG4gICAqIER1ZSB0byBhIGNvbXBhdGliaWxpdHkgaXNzdWUsIHRoZSBhbGlhcyBgLmxlbmd0aGAgY2FuJ3QgYmUgY2hhaW5lZCBkaXJlY3RseVxuICAgKiBvZmYgb2YgYW4gdW5pbnZva2VkIG1ldGhvZCBzdWNoIGFzIGAuYWAuIFRoZXJlZm9yZSwgYC5sZW5ndGhgIGNhbid0IGJlIHVzZWRcbiAgICogaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5sZW5ndGhPZmAgaW4gZXZlcnkgc2l0dWF0aW9uLiBJdCdzIHJlY29tbWVuZGVkIHRvXG4gICAqIGFsd2F5cyB1c2UgYC5sZW5ndGhPZmAgaW5zdGVhZCBvZiBgLmxlbmd0aGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmEubGVuZ3RoKDMpOyAvLyBpbmNvbXBhdGlibGU7IHRocm93cyBlcnJvclxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5hLmxlbmd0aE9mKDMpOyAgLy8gcGFzc2VzIGFzIGV4cGVjdGVkXG4gICAqXG4gICAqIEBuYW1lIGxlbmd0aE9mXG4gICAqIEBhbGlhcyBsZW5ndGhcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydExlbmd0aENoYWluICgpIHtcbiAgICBmbGFnKHRoaXMsICdkb0xlbmd0aCcsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0TGVuZ3RoIChuLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgb2JqVHlwZSA9IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpXG4gICAgICAsIGRlc2NyaXB0b3IgPSAnbGVuZ3RoJ1xuICAgICAgLCBpdGVtc0NvdW50O1xuXG4gICAgc3dpdGNoIChvYmpUeXBlKSB7XG4gICAgICBjYXNlICdtYXAnOlxuICAgICAgY2FzZSAnc2V0JzpcbiAgICAgICAgZGVzY3JpcHRvciA9ICdzaXplJztcbiAgICAgICAgaXRlbXNDb3VudCA9IG9iai5zaXplO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KCdsZW5ndGgnKTtcbiAgICAgICAgaXRlbXNDb3VudCA9IG9iai5sZW5ndGg7XG4gICAgfVxuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIGl0ZW1zQ291bnQgPT0gblxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgJyArIGRlc2NyaXB0b3IgKyAnIG9mICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgYSAnICsgZGVzY3JpcHRvciArICcgb2YgI3thY3R9J1xuICAgICAgLCBuXG4gICAgICAsIGl0ZW1zQ291bnRcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZENoYWluYWJsZU1ldGhvZCgnbGVuZ3RoJywgYXNzZXJ0TGVuZ3RoLCBhc3NlcnRMZW5ndGhDaGFpbik7XG4gIEFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2xlbmd0aE9mJywgYXNzZXJ0TGVuZ3RoLCBhc3NlcnRMZW5ndGhDaGFpbik7XG5cbiAgLyoqXG4gICAqICMjIyAubWF0Y2gocmVbLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBtYXRjaGVzIHRoZSBnaXZlbiByZWd1bGFyIGV4cHJlc3Npb24gYHJlYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJykudG8ubWF0Y2goL15mb28vKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5tYXRjaGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicpLnRvLm5vdC5tYXRjaCgvdGFjby8pO1xuICAgKlxuICAgKiBgLm1hdGNoYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2VcbiAgICogdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZVxuICAgKiBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicpLnRvLm1hdGNoKC90YWNvLywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KCdmb29iYXInLCAnbm9vbyB3aHkgZmFpbD8/JykudG8ubWF0Y2goL3RhY28vKTtcbiAgICpcbiAgICogVGhlIGFsaWFzIGAubWF0Y2hlc2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5tYXRjaGAuXG4gICAqXG4gICAqIEBuYW1lIG1hdGNoXG4gICAqIEBhbGlhcyBtYXRjaGVzXG4gICAqIEBwYXJhbSB7UmVnRXhwfSByZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGZ1bmN0aW9uIGFzc2VydE1hdGNoKHJlLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHJlLmV4ZWMob2JqKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBtYXRjaCAnICsgcmVcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gbm90IHRvIG1hdGNoICcgKyByZVxuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdtYXRjaCcsIGFzc2VydE1hdGNoKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnbWF0Y2hlcycsIGFzc2VydE1hdGNoKTtcblxuICAvKipcbiAgICogIyMjIC5zdHJpbmcoc3RyWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgc3RyaW5nIGNvbnRhaW5zIHRoZSBnaXZlbiBzdWJzdHJpbmcgYHN0cmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicpLnRvLmhhdmUuc3RyaW5nKCdiYXInKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5zdHJpbmdgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5ub3QuaGF2ZS5zdHJpbmcoJ3RhY28nKTtcbiAgICpcbiAgICogYC5zdHJpbmdgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJykudG8uaGF2ZS5zdHJpbmcoJ3RhY28nLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicsICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLnN0cmluZygndGFjbycpO1xuICAgKlxuICAgKiBAbmFtZSBzdHJpbmdcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnc3RyaW5nJywgZnVuY3Rpb24gKHN0ciwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKTtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnc3RyaW5nJyk7XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgfm9iai5pbmRleE9mKHN0cilcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gY29udGFpbiAnICsgXy5pbnNwZWN0KHN0cilcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGNvbnRhaW4gJyArIF8uaW5zcGVjdChzdHIpXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAua2V5cyhrZXkxWywga2V5MlssIC4uLl1dKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBvYmplY3QsIGFycmF5LCBtYXAsIG9yIHNldCBoYXMgdGhlIGdpdmVuIGtleXMuIE9ubHlcbiAgICogdGhlIHRhcmdldCdzIG93biBpbmhlcml0ZWQgcHJvcGVydGllcyBhcmUgaW5jbHVkZWQgaW4gdGhlIHNlYXJjaC5cbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGFuIG9iamVjdCBvciBhcnJheSwga2V5cyBjYW4gYmUgcHJvdmlkZWQgYXMgb25lIG9yIG1vcmVcbiAgICogc3RyaW5nIGFyZ3VtZW50cywgYSBzaW5nbGUgYXJyYXkgYXJndW1lbnQsIG9yIGEgc2luZ2xlIG9iamVjdCBhcmd1bWVudC4gSW5cbiAgICogdGhlIGxhdHRlciBjYXNlLCBvbmx5IHRoZSBrZXlzIGluIHRoZSBnaXZlbiBvYmplY3QgbWF0dGVyOyB0aGUgdmFsdWVzIGFyZVxuICAgKiBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8uaGF2ZS5hbGwua2V5cygnYScsICdiJyk7XG4gICAqICAgICBleHBlY3QoWyd4JywgJ3knXSkudG8uaGF2ZS5hbGwua2V5cygwLCAxKTtcbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUuYWxsLmtleXMoWydhJywgJ2InXSk7XG4gICAqICAgICBleHBlY3QoWyd4JywgJ3knXSkudG8uaGF2ZS5hbGwua2V5cyhbMCwgMV0pO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8uaGF2ZS5hbGwua2V5cyh7YTogNCwgYjogNX0pOyAvLyBpZ25vcmUgNCBhbmQgNVxuICAgKiAgICAgZXhwZWN0KFsneCcsICd5J10pLnRvLmhhdmUuYWxsLmtleXMoezA6IDQsIDE6IDV9KTsgLy8gaWdub3JlIDQgYW5kIDVcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGEgbWFwIG9yIHNldCwgZWFjaCBrZXkgbXVzdCBiZSBwcm92aWRlZCBhcyBhIHNlcGFyYXRlXG4gICAqIGFyZ3VtZW50LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KG5ldyBNYXAoW1snYScsIDFdLCBbJ2InLCAyXV0pKS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFsnYScsICdiJ10pKS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogQmVjYXVzZSBgLmtleXNgIGRvZXMgZGlmZmVyZW50IHRoaW5ncyBiYXNlZCBvbiB0aGUgdGFyZ2V0J3MgdHlwZSwgaXQnc1xuICAgKiBpbXBvcnRhbnQgdG8gY2hlY2sgdGhlIHRhcmdldCdzIHR5cGUgYmVmb3JlIHVzaW5nIGAua2V5c2AuIFNlZSB0aGUgYC5hYCBkb2NcbiAgICogZm9yIGluZm8gb24gdGVzdGluZyBhIHRhcmdldCdzIHR5cGUuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5iZS5hbignb2JqZWN0JykudGhhdC5oYXMuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBzdHJpY3QgKGA9PT1gKSBlcXVhbGl0eSBpcyB1c2VkIHRvIGNvbXBhcmUga2V5cyBvZiBtYXBzIGFuZFxuICAgKiBzZXRzLiBBZGQgYC5kZWVwYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byB1c2UgZGVlcCBlcXVhbGl0eSBpbnN0ZWFkLiBTZWVcbiAgICogdGhlIGBkZWVwLWVxbGAgcHJvamVjdCBwYWdlIGZvciBpbmZvIG9uIHRoZSBkZWVwIGVxdWFsaXR5IGFsZ29yaXRobTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBzZXQgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBoYXMga2V5IGB7YTogMX1gXG4gICAqICAgICBleHBlY3QobmV3IFNldChbe2E6IDF9XSkpLnRvLmhhdmUuYWxsLmRlZXAua2V5cyhbe2E6IDF9XSk7XG4gICAqICAgICBleHBlY3QobmV3IFNldChbe2E6IDF9XSkpLnRvLm5vdC5oYXZlLmFsbC5rZXlzKFt7YTogMX1dKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIHRhcmdldCBtdXN0IGhhdmUgYWxsIG9mIHRoZSBnaXZlbiBrZXlzIGFuZCBubyBtb3JlLiBBZGRcbiAgICogYC5hbnlgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG9ubHkgcmVxdWlyZSB0aGF0IHRoZSB0YXJnZXQgaGF2ZSBhdCBsZWFzdFxuICAgKiBvbmUgb2YgdGhlIGdpdmVuIGtleXMuIEFsc28sIGFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlXG4gICAqIGAua2V5c2AuIEl0J3Mgb2Z0ZW4gYmVzdCB0byBhZGQgYC5hbnlgIHdoZW4gbmVnYXRpbmcgYC5rZXlzYCwgYW5kIHRvIHVzZVxuICAgKiBgLmFsbGAgd2hlbiBhc3NlcnRpbmcgYC5rZXlzYCB3aXRob3V0IG5lZ2F0aW9uLlxuICAgKlxuICAgKiBXaGVuIG5lZ2F0aW5nIGAua2V5c2AsIGAuYW55YCBpcyBwcmVmZXJyZWQgYmVjYXVzZSBgLm5vdC5hbnkua2V5c2AgYXNzZXJ0c1xuICAgKiBleGFjdGx5IHdoYXQncyBleHBlY3RlZCBvZiB0aGUgb3V0cHV0LCB3aGVyZWFzIGAubm90LmFsbC5rZXlzYCBjcmVhdGVzXG4gICAqIHVuY2VydGFpbiBleHBlY3RhdGlvbnMuXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZDsgYXNzZXJ0cyB0aGF0IHRhcmdldCBkb2Vzbid0IGhhdmUgYW55IG9mIHRoZSBnaXZlbiBrZXlzXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5ub3QuaGF2ZS5hbnkua2V5cygnYycsICdkJyk7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWQ7IGFzc2VydHMgdGhhdCB0YXJnZXQgZG9lc24ndCBoYXZlIGFsbCBvZiB0aGUgZ2l2ZW5cbiAgICogICAgIC8vIGtleXMgYnV0IG1heSBvciBtYXkgbm90IGhhdmUgc29tZSBvZiB0aGVtXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5ub3QuaGF2ZS5hbGwua2V5cygnYycsICdkJyk7XG4gICAqXG4gICAqIFdoZW4gYXNzZXJ0aW5nIGAua2V5c2Agd2l0aG91dCBuZWdhdGlvbiwgYC5hbGxgIGlzIHByZWZlcnJlZCBiZWNhdXNlXG4gICAqIGAuYWxsLmtleXNgIGFzc2VydHMgZXhhY3RseSB3aGF0J3MgZXhwZWN0ZWQgb2YgdGhlIG91dHB1dCwgd2hlcmVhc1xuICAgKiBgLmFueS5rZXlzYCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnMuXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZDsgYXNzZXJ0cyB0aGF0IHRhcmdldCBoYXMgYWxsIHRoZSBnaXZlbiBrZXlzXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZDsgYXNzZXJ0cyB0aGF0IHRhcmdldCBoYXMgYXQgbGVhc3Qgb25lIG9mIHRoZSBnaXZlblxuICAgKiAgICAgLy8ga2V5cyBidXQgbWF5IG9yIG1heSBub3QgaGF2ZSBtb3JlIG9mIHRoZW1cbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUuYW55LmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBOb3RlIHRoYXQgYC5hbGxgIGlzIHVzZWQgYnkgZGVmYXVsdCB3aGVuIG5laXRoZXIgYC5hbGxgIG5vciBgLmFueWAgYXBwZWFyXG4gICAqIGVhcmxpZXIgaW4gdGhlIGNoYWluLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYWRkIGAuYWxsYCBhbnl3YXkgYmVjYXVzZVxuICAgKiBpdCBpbXByb3ZlcyByZWFkYWJpbGl0eS5cbiAgICpcbiAgICogICAgIC8vIEJvdGggYXNzZXJ0aW9ucyBhcmUgaWRlbnRpY2FsXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUua2V5cygnYScsICdiJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5pbmNsdWRlYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byByZXF1aXJlIHRoYXQgdGhlIHRhcmdldCdzIGtleXMgYmUgYVxuICAgKiBzdXBlcnNldCBvZiB0aGUgZXhwZWN0ZWQga2V5cywgcmF0aGVyIHRoYW4gaWRlbnRpY2FsIHNldHMuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0J3Mga2V5cyBhcmUgYSBzdXBlcnNldCBvZiBbJ2EnLCAnYiddIGJ1dCBub3QgaWRlbnRpY2FsXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDIsIGM6IDN9KS50by5pbmNsdWRlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMiwgYzogM30pLnRvLm5vdC5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogSG93ZXZlciwgaWYgYC5hbnlgIGFuZCBgLmluY2x1ZGVgIGFyZSBjb21iaW5lZCwgb25seSB0aGUgYC5hbnlgIHRha2VzXG4gICAqIGVmZmVjdC4gVGhlIGAuaW5jbHVkZWAgaXMgaWdub3JlZCBpbiB0aGlzIGNhc2UuXG4gICAqXG4gICAqICAgICAvLyBCb3RoIGFzc2VydGlvbnMgYXJlIGlkZW50aWNhbFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5hbnkua2V5cygnYScsICdiJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5pbmNsdWRlLmFueS5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLmtleSgnYicpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5rZXlgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAua2V5c2AuXG4gICAqXG4gICAqIEBuYW1lIGtleXNcbiAgICogQGFsaWFzIGtleVxuICAgKiBAcGFyYW0gey4uLlN0cmluZ3xBcnJheXxPYmplY3R9IGtleXNcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0S2V5cyAoa2V5cykge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iailcbiAgICAgICwga2V5c1R5cGUgPSBfLnR5cGUoa2V5cylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBpc0RlZXAgPSBmbGFnKHRoaXMsICdkZWVwJylcbiAgICAgICwgc3RyXG4gICAgICAsIGRlZXBTdHIgPSAnJ1xuICAgICAgLCBhY3R1YWxcbiAgICAgICwgb2sgPSB0cnVlXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJyk7XG5cbiAgICBmbGFnTXNnID0gZmxhZ01zZyA/IGZsYWdNc2cgKyAnOiAnIDogJyc7XG4gICAgdmFyIG1peGVkQXJnc01zZyA9IGZsYWdNc2cgKyAnd2hlbiB0ZXN0aW5nIGtleXMgYWdhaW5zdCBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgeW91IG11c3QgZ2l2ZSBhIHNpbmdsZSBBcnJheXxPYmplY3R8U3RyaW5nIGFyZ3VtZW50IG9yIG11bHRpcGxlIFN0cmluZyBhcmd1bWVudHMnO1xuXG4gICAgaWYgKG9ialR5cGUgPT09ICdNYXAnIHx8IG9ialR5cGUgPT09ICdTZXQnKSB7XG4gICAgICBkZWVwU3RyID0gaXNEZWVwID8gJ2RlZXBseSAnIDogJyc7XG4gICAgICBhY3R1YWwgPSBbXTtcblxuICAgICAgLy8gTWFwIGFuZCBTZXQgJy5rZXlzJyBhcmVuJ3Qgc3VwcG9ydGVkIGluIElFIDExLiBUaGVyZWZvcmUsIHVzZSAuZm9yRWFjaC5cbiAgICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGtleSkgeyBhY3R1YWwucHVzaChrZXkpIH0pO1xuXG4gICAgICBpZiAoa2V5c1R5cGUgIT09ICdBcnJheScpIHtcbiAgICAgICAga2V5cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdHVhbCA9IF8uZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMob2JqKTtcblxuICAgICAgc3dpdGNoIChrZXlzVHlwZSkge1xuICAgICAgICBjYXNlICdBcnJheSc6XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IobWl4ZWRBcmdzTXNnLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnT2JqZWN0JzpcbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihtaXhlZEFyZ3NNc2csIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhrZXlzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBrZXlzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgLy8gT25seSBzdHJpbmdpZnkgbm9uLVN5bWJvbHMgYmVjYXVzZSBTeW1ib2xzIHdvdWxkIGJlY29tZSBcIlN5bWJvbCgpXCJcbiAgICAgIGtleXMgPSBrZXlzLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3ltYm9sJyA/IHZhbCA6IFN0cmluZyh2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFrZXlzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKGZsYWdNc2cgKyAna2V5cyByZXF1aXJlZCcsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgdmFyIGxlbiA9IGtleXMubGVuZ3RoXG4gICAgICAsIGFueSA9IGZsYWcodGhpcywgJ2FueScpXG4gICAgICAsIGFsbCA9IGZsYWcodGhpcywgJ2FsbCcpXG4gICAgICAsIGV4cGVjdGVkID0ga2V5cztcblxuICAgIGlmICghYW55ICYmICFhbGwpIHtcbiAgICAgIGFsbCA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gSGFzIGFueVxuICAgIGlmIChhbnkpIHtcbiAgICAgIG9rID0gZXhwZWN0ZWQuc29tZShmdW5jdGlvbihleHBlY3RlZEtleSkge1xuICAgICAgICByZXR1cm4gYWN0dWFsLnNvbWUoZnVuY3Rpb24oYWN0dWFsS2V5KSB7XG4gICAgICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIF8uZXFsKGV4cGVjdGVkS2V5LCBhY3R1YWxLZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZXhwZWN0ZWRLZXkgPT09IGFjdHVhbEtleTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gSGFzIGFsbFxuICAgIGlmIChhbGwpIHtcbiAgICAgIG9rID0gZXhwZWN0ZWQuZXZlcnkoZnVuY3Rpb24oZXhwZWN0ZWRLZXkpIHtcbiAgICAgICAgcmV0dXJuIGFjdHVhbC5zb21lKGZ1bmN0aW9uKGFjdHVhbEtleSkge1xuICAgICAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgICAgIHJldHVybiBfLmVxbChleHBlY3RlZEtleSwgYWN0dWFsS2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGV4cGVjdGVkS2V5ID09PSBhY3R1YWxLZXk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWZsYWcodGhpcywgJ2NvbnRhaW5zJykpIHtcbiAgICAgICAgb2sgPSBvayAmJiBrZXlzLmxlbmd0aCA9PSBhY3R1YWwubGVuZ3RoO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEtleSBzdHJpbmdcbiAgICBpZiAobGVuID4gMSkge1xuICAgICAga2V5cyA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gXy5pbnNwZWN0KGtleSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBsYXN0ID0ga2V5cy5wb3AoKTtcbiAgICAgIGlmIChhbGwpIHtcbiAgICAgICAgc3RyID0ga2V5cy5qb2luKCcsICcpICsgJywgYW5kICcgKyBsYXN0O1xuICAgICAgfVxuICAgICAgaWYgKGFueSkge1xuICAgICAgICBzdHIgPSBrZXlzLmpvaW4oJywgJykgKyAnLCBvciAnICsgbGFzdDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gXy5pbnNwZWN0KGtleXNbMF0pO1xuICAgIH1cblxuICAgIC8vIEZvcm1cbiAgICBzdHIgPSAobGVuID4gMSA/ICdrZXlzICcgOiAna2V5ICcpICsgc3RyO1xuXG4gICAgLy8gSGF2ZSAvIGluY2x1ZGVcbiAgICBzdHIgPSAoZmxhZyh0aGlzLCAnY29udGFpbnMnKSA/ICdjb250YWluICcgOiAnaGF2ZSAnKSArIHN0cjtcblxuICAgIC8vIEFzc2VydGlvblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBva1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byAnICsgZGVlcFN0ciArIHN0clxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgJyArIGRlZXBTdHIgKyBzdHJcbiAgICAgICwgZXhwZWN0ZWQuc2xpY2UoMCkuc29ydChfLmNvbXBhcmVCeUluc3BlY3QpXG4gICAgICAsIGFjdHVhbC5zb3J0KF8uY29tcGFyZUJ5SW5zcGVjdClcbiAgICAgICwgdHJ1ZVxuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdrZXlzJywgYXNzZXJ0S2V5cyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2tleScsIGFzc2VydEtleXMpO1xuXG4gIC8qKlxuICAgKiAjIyMgLnRocm93KFtlcnJvckxpa2VdLCBbZXJyTXNnTWF0Y2hlcl0sIFttc2ddKVxuICAgKlxuICAgKiBXaGVuIG5vIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIGAudGhyb3dgIGludm9rZXMgdGhlIHRhcmdldCBmdW5jdGlvbiBhbmRcbiAgICogYXNzZXJ0cyB0aGF0IGFuIGVycm9yIGlzIHRocm93bi5cbiAgICpcbiAgICogICAgIHZhciBiYWRGbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSWxsZWdhbCBzYWxtb24hJyk7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KCk7XG4gICAqXG4gICAqIFdoZW4gb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkLCBhbmQgaXQncyBhbiBlcnJvciBjb25zdHJ1Y3RvciwgYC50aHJvd2BcbiAgICogaW52b2tlcyB0aGUgdGFyZ2V0IGZ1bmN0aW9uIGFuZCBhc3NlcnRzIHRoYXQgYW4gZXJyb3IgaXMgdGhyb3duIHRoYXQncyBhblxuICAgKiBpbnN0YW5jZSBvZiB0aGF0IGVycm9yIGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coVHlwZUVycm9yKTtcbiAgICpcbiAgICogV2hlbiBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQsIGFuZCBpdCdzIGFuIGVycm9yIGluc3RhbmNlLCBgLnRocm93YCBpbnZva2VzXG4gICAqIHRoZSB0YXJnZXQgZnVuY3Rpb24gYW5kIGFzc2VydHMgdGhhdCBhbiBlcnJvciBpcyB0aHJvd24gdGhhdCdzIHN0cmljdGx5XG4gICAqIChgPT09YCkgZXF1YWwgdG8gdGhhdCBlcnJvciBpbnN0YW5jZS5cbiAgICpcbiAgICogICAgIHZhciBlcnIgPSBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTtcbiAgICogICAgIHZhciBiYWRGbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgZXJyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdyhlcnIpO1xuICAgKlxuICAgKiBXaGVuIG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCwgYW5kIGl0J3MgYSBzdHJpbmcsIGAudGhyb3dgIGludm9rZXMgdGhlXG4gICAqIHRhcmdldCBmdW5jdGlvbiBhbmQgYXNzZXJ0cyB0aGF0IGFuIGVycm9yIGlzIHRocm93biB3aXRoIGEgbWVzc2FnZSB0aGF0XG4gICAqIGNvbnRhaW5zIHRoYXQgc3RyaW5nLlxuICAgKlxuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coJ3NhbG1vbicpO1xuICAgKlxuICAgKiBXaGVuIG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCwgYW5kIGl0J3MgYSByZWd1bGFyIGV4cHJlc3Npb24sIGAudGhyb3dgXG4gICAqIGludm9rZXMgdGhlIHRhcmdldCBmdW5jdGlvbiBhbmQgYXNzZXJ0cyB0aGF0IGFuIGVycm9yIGlzIHRocm93biB3aXRoIGFcbiAgICogbWVzc2FnZSB0aGF0IG1hdGNoZXMgdGhhdCByZWd1bGFyIGV4cHJlc3Npb24uXG4gICAqXG4gICAqICAgICB2YXIgYmFkRm4gPSBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdygvc2FsbW9uLyk7XG4gICAqXG4gICAqIFdoZW4gdHdvIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIGFuZCB0aGUgZmlyc3QgaXMgYW4gZXJyb3IgaW5zdGFuY2Ugb3JcbiAgICogY29uc3RydWN0b3IsIGFuZCB0aGUgc2Vjb25kIGlzIGEgc3RyaW5nIG9yIHJlZ3VsYXIgZXhwcmVzc2lvbiwgYC50aHJvd2BcbiAgICogaW52b2tlcyB0aGUgZnVuY3Rpb24gYW5kIGFzc2VydHMgdGhhdCBhbiBlcnJvciBpcyB0aHJvd24gdGhhdCBmdWxmaWxscyBib3RoXG4gICAqIGNvbmRpdGlvbnMgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKlxuICAgKiAgICAgdmFyIGVyciA9IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpO1xuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBlcnI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KFR5cGVFcnJvciwgJ3NhbG1vbicpO1xuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdyhUeXBlRXJyb3IsIC9zYWxtb24vKTtcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coZXJyLCAnc2FsbW9uJyk7XG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KGVyciwgL3NhbG1vbi8pO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnRocm93YC5cbiAgICpcbiAgICogICAgIHZhciBnb29kRm4gPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChnb29kRm4pLnRvLm5vdC50aHJvdygpO1xuICAgKlxuICAgKiBIb3dldmVyLCBpdCdzIGRhbmdlcm91cyB0byBuZWdhdGUgYC50aHJvd2Agd2hlbiBwcm92aWRpbmcgYW55IGFyZ3VtZW50cy5cbiAgICogVGhlIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnMgYnkgYXNzZXJ0aW5nIHRoYXQgdGhlXG4gICAqIHRhcmdldCBlaXRoZXIgZG9lc24ndCB0aHJvdyBhbiBlcnJvciwgb3IgdGhhdCBpdCB0aHJvd3MgYW4gZXJyb3IgYnV0IG9mIGFcbiAgICogZGlmZmVyZW50IHR5cGUgdGhhbiB0aGUgZ2l2ZW4gdHlwZSwgb3IgdGhhdCBpdCB0aHJvd3MgYW4gZXJyb3Igb2YgdGhlIGdpdmVuXG4gICAqIHR5cGUgYnV0IHdpdGggYSBtZXNzYWdlIHRoYXQgZG9lc24ndCBpbmNsdWRlIHRoZSBnaXZlbiBzdHJpbmcuIEl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBpZGVudGlmeSB0aGUgZXhhY3Qgb3V0cHV0IHRoYXQncyBleHBlY3RlZCwgYW5kIHRoZW4gd3JpdGUgYW5cbiAgICogYXNzZXJ0aW9uIHRoYXQgb25seSBhY2NlcHRzIHRoYXQgZXhhY3Qgb3V0cHV0LlxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXNuJ3QgZXhwZWN0ZWQgdG8gdGhyb3cgYW4gZXJyb3IsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnRcbiAgICogZXhhY3RseSB0aGF0LlxuICAgKlxuICAgKiAgICAgdmFyIGdvb2RGbiA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGdvb2RGbikudG8ubm90LnRocm93KCk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoZ29vZEZuKS50by5ub3QudGhyb3coUmVmZXJlbmNlRXJyb3IsICd4Jyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgZXhwZWN0ZWQgdG8gdGhyb3cgYW4gZXJyb3IsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnRcbiAgICogdGhhdCB0aGUgZXJyb3IgaXMgb2YgaXRzIGV4cGVjdGVkIHR5cGUsIGFuZCBoYXMgYSBtZXNzYWdlIHRoYXQgaW5jbHVkZXMgYW5cbiAgICogZXhwZWN0ZWQgc3RyaW5nLCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgdGhhdCBpdCBkb2Vzbid0IGhhdmUgb25lIG9mIG1hbnlcbiAgICogdW5leHBlY3RlZCB0eXBlcywgYW5kIGRvZXNuJ3QgaGF2ZSBhIG1lc3NhZ2UgdGhhdCBpbmNsdWRlcyBzb21lIHN0cmluZy5cbiAgICpcbiAgICogICAgIHZhciBiYWRGbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSWxsZWdhbCBzYWxtb24hJyk7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KFR5cGVFcnJvciwgJ3NhbG1vbicpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by5ub3QudGhyb3coUmVmZXJlbmNlRXJyb3IsICd4Jyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLnRocm93YCBjaGFuZ2VzIHRoZSB0YXJnZXQgb2YgYW55IGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvXG4gICAqIGJlIHRoZSBlcnJvciBvYmplY3QgdGhhdCdzIHRocm93bi5cbiAgICpcbiAgICogICAgIHZhciBlcnIgPSBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTtcbiAgICogICAgIGVyci5jb2RlID0gNDI7XG4gICAqICAgICB2YXIgYmFkRm4gPSBmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coVHlwZUVycm9yKS53aXRoLnByb3BlcnR5KCdjb2RlJywgNDIpO1xuICAgKlxuICAgKiBgLnRocm93YCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2VcbiAgICogdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZVxuICAgKiBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyB0d28gYXJndW1lbnRzLCBhbHdheXMgdXNlXG4gICAqIHRoZSBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIHZhciBnb29kRm4gPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChnb29kRm4pLnRvLnRocm93KFR5cGVFcnJvciwgJ3gnLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoZ29vZEZuLCAnbm9vbyB3aHkgZmFpbD8/JykudG8udGhyb3coKTtcbiAgICpcbiAgICogRHVlIHRvIGxpbWl0YXRpb25zIGluIEVTNSwgYC50aHJvd2AgbWF5IG5vdCBhbHdheXMgd29yayBhcyBleHBlY3RlZCB3aGVuXG4gICAqIHVzaW5nIGEgdHJhbnNwaWxlciBzdWNoIGFzIEJhYmVsIG9yIFR5cGVTY3JpcHQuIEluIHBhcnRpY3VsYXIsIGl0IG1heVxuICAgKiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cyB3aGVuIHN1YmNsYXNzaW5nIHRoZSBidWlsdC1pbiBgRXJyb3JgIG9iamVjdCBhbmRcbiAgICogdGhlbiBwYXNzaW5nIHRoZSBzdWJjbGFzc2VkIGNvbnN0cnVjdG9yIHRvIGAudGhyb3dgLiBTZWUgeW91ciB0cmFuc3BpbGVyJ3NcbiAgICogZG9jcyBmb3IgZGV0YWlsczpcbiAgICpcbiAgICogLSAoW0JhYmVsXShodHRwczovL2JhYmVsanMuaW8vZG9jcy91c2FnZS9jYXZlYXRzLyNjbGFzc2VzKSlcbiAgICogLSAoW1R5cGVTY3JpcHRdKGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC93aWtpL0JyZWFraW5nLUNoYW5nZXMjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrKSlcbiAgICpcbiAgICogQmV3YXJlIG9mIHNvbWUgY29tbW9uIG1pc3Rha2VzIHdoZW4gdXNpbmcgdGhlIGB0aHJvd2AgYXNzZXJ0aW9uLiBPbmUgY29tbW9uXG4gICAqIG1pc3Rha2UgaXMgdG8gYWNjaWRlbnRhbGx5IGludm9rZSB0aGUgZnVuY3Rpb24geW91cnNlbGYgaW5zdGVhZCBvZiBsZXR0aW5nXG4gICAqIHRoZSBgdGhyb3dgIGFzc2VydGlvbiBpbnZva2UgdGhlIGZ1bmN0aW9uIGZvciB5b3UuIEZvciBleGFtcGxlLCB3aGVuXG4gICAqIHRlc3RpbmcgaWYgYSBmdW5jdGlvbiBuYW1lZCBgZm5gIHRocm93cywgcHJvdmlkZSBgZm5gIGluc3RlYWQgb2YgYGZuKClgIGFzXG4gICAqIHRoZSB0YXJnZXQgZm9yIHRoZSBhc3NlcnRpb24uXG4gICAqXG4gICAqICAgICBleHBlY3QoZm4pLnRvLnRocm93KCk7ICAgICAvLyBHb29kISBUZXN0cyBgZm5gIGFzIGRlc2lyZWRcbiAgICogICAgIGV4cGVjdChmbigpKS50by50aHJvdygpOyAgIC8vIEJhZCEgVGVzdHMgcmVzdWx0IG9mIGBmbigpYCwgbm90IGBmbmBcbiAgICpcbiAgICogSWYgeW91IG5lZWQgdG8gYXNzZXJ0IHRoYXQgeW91ciBmdW5jdGlvbiBgZm5gIHRocm93cyB3aGVuIHBhc3NlZCBjZXJ0YWluXG4gICAqIGFyZ3VtZW50cywgdGhlbiB3cmFwIGEgY2FsbCB0byBgZm5gIGluc2lkZSBvZiBhbm90aGVyIGZ1bmN0aW9uLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZ1bmN0aW9uICgpIHsgZm4oNDIpOyB9KS50by50aHJvdygpOyAgLy8gRnVuY3Rpb24gZXhwcmVzc2lvblxuICAgKiAgICAgZXhwZWN0KCgpID0+IGZuKDQyKSkudG8udGhyb3coKTsgICAgICAgICAgICAgLy8gRVM2IGFycm93IGZ1bmN0aW9uXG4gICAqXG4gICAqIEFub3RoZXIgY29tbW9uIG1pc3Rha2UgaXMgdG8gcHJvdmlkZSBhbiBvYmplY3QgbWV0aG9kIChvciBhbnkgc3RhbmQtYWxvbmVcbiAgICogZnVuY3Rpb24gdGhhdCByZWxpZXMgb24gYHRoaXNgKSBhcyB0aGUgdGFyZ2V0IG9mIHRoZSBhc3NlcnRpb24uIERvaW5nIHNvIGlzXG4gICAqIHByb2JsZW1hdGljIGJlY2F1c2UgdGhlIGB0aGlzYCBjb250ZXh0IHdpbGwgYmUgbG9zdCB3aGVuIHRoZSBmdW5jdGlvbiBpc1xuICAgKiBpbnZva2VkIGJ5IGAudGhyb3dgOyB0aGVyZSdzIG5vIHdheSBmb3IgaXQgdG8ga25vdyB3aGF0IGB0aGlzYCBpcyBzdXBwb3NlZFxuICAgKiB0byBiZS4gVGhlcmUgYXJlIHR3byB3YXlzIGFyb3VuZCB0aGlzIHByb2JsZW0uIE9uZSBzb2x1dGlvbiBpcyB0byB3cmFwIHRoZVxuICAgKiBtZXRob2Qgb3IgZnVuY3Rpb24gY2FsbCBpbnNpZGUgb2YgYW5vdGhlciBmdW5jdGlvbi4gQW5vdGhlciBzb2x1dGlvbiBpcyB0b1xuICAgKiB1c2UgYGJpbmRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZ1bmN0aW9uICgpIHsgY2F0Lm1lb3coKTsgfSkudG8udGhyb3coKTsgIC8vIEZ1bmN0aW9uIGV4cHJlc3Npb25cbiAgICogICAgIGV4cGVjdCgoKSA9PiBjYXQubWVvdygpKS50by50aHJvdygpOyAgICAgICAgICAgICAvLyBFUzYgYXJyb3cgZnVuY3Rpb25cbiAgICogICAgIGV4cGVjdChjYXQubWVvdy5iaW5kKGNhdCkpLnRvLnRocm93KCk7ICAgICAgICAgICAvLyBCaW5kXG4gICAqXG4gICAqIEZpbmFsbHksIGl0J3Mgd29ydGggbWVudGlvbmluZyB0aGF0IGl0J3MgYSBiZXN0IHByYWN0aWNlIGluIEphdmFTY3JpcHQgdG9cbiAgICogb25seSB0aHJvdyBgRXJyb3JgIGFuZCBkZXJpdmF0aXZlcyBvZiBgRXJyb3JgIHN1Y2ggYXMgYFJlZmVyZW5jZUVycm9yYCxcbiAgICogYFR5cGVFcnJvcmAsIGFuZCB1c2VyLWRlZmluZWQgb2JqZWN0cyB0aGF0IGV4dGVuZCBgRXJyb3JgLiBObyBvdGhlciB0eXBlIG9mXG4gICAqIHZhbHVlIHdpbGwgZ2VuZXJhdGUgYSBzdGFjayB0cmFjZSB3aGVuIGluaXRpYWxpemVkLiBXaXRoIHRoYXQgc2FpZCwgdGhlXG4gICAqIGB0aHJvd2AgYXNzZXJ0aW9uIGRvZXMgdGVjaG5pY2FsbHkgc3VwcG9ydCBhbnkgdHlwZSBvZiB2YWx1ZSBiZWluZyB0aHJvd24sXG4gICAqIG5vdCBqdXN0IGBFcnJvcmAgYW5kIGl0cyBkZXJpdmF0aXZlcy5cbiAgICpcbiAgICogVGhlIGFsaWFzZXMgYC50aHJvd3NgIGFuZCBgLlRocm93YCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aFxuICAgKiBgLnRocm93YC5cbiAgICpcbiAgICogQG5hbWUgdGhyb3dcbiAgICogQGFsaWFzIHRocm93c1xuICAgKiBAYWxpYXMgVGhyb3dcbiAgICogQHBhcmFtIHtFcnJvcnxFcnJvckNvbnN0cnVjdG9yfSBlcnJvckxpa2VcbiAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBlcnJNc2dNYXRjaGVyIGVycm9yIG1lc3NhZ2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjRXJyb3JfdHlwZXNcbiAgICogQHJldHVybnMgZXJyb3IgZm9yIGNoYWluaW5nIChudWxsIGlmIG5vIGVycm9yKVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRUaHJvd3MgKGVycm9yTGlrZSwgZXJyTXNnTWF0Y2hlciwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBuZWdhdGUgPSBmbGFnKHRoaXMsICduZWdhdGUnKSB8fCBmYWxzZTtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnZnVuY3Rpb24nKTtcblxuICAgIGlmIChlcnJvckxpa2UgaW5zdGFuY2VvZiBSZWdFeHAgfHwgdHlwZW9mIGVycm9yTGlrZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVyck1zZ01hdGNoZXIgPSBlcnJvckxpa2U7XG4gICAgICBlcnJvckxpa2UgPSBudWxsO1xuICAgIH1cblxuICAgIHZhciBjYXVnaHRFcnI7XG4gICAgdHJ5IHtcbiAgICAgIG9iaigpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY2F1Z2h0RXJyID0gZXJyO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGhhdmUgdGhlIG5lZ2F0ZSBmbGFnIGVuYWJsZWQgYW5kIGF0IGxlYXN0IG9uZSB2YWxpZCBhcmd1bWVudCBpdCBtZWFucyB3ZSBkbyBleHBlY3QgYW4gZXJyb3JcbiAgICAvLyBidXQgd2Ugd2FudCBpdCB0byBtYXRjaCBhIGdpdmVuIHNldCBvZiBjcml0ZXJpYVxuICAgIHZhciBldmVyeUFyZ0lzVW5kZWZpbmVkID0gZXJyb3JMaWtlID09PSB1bmRlZmluZWQgJiYgZXJyTXNnTWF0Y2hlciA9PT0gdW5kZWZpbmVkO1xuXG4gICAgLy8gSWYgd2UndmUgZ290IHRoZSBuZWdhdGUgZmxhZyBlbmFibGVkIGFuZCBib3RoIGFyZ3MsIHdlIHNob3VsZCBvbmx5IGZhaWwgaWYgYm90aCBhcmVuJ3QgY29tcGF0aWJsZVxuICAgIC8vIFNlZSBJc3N1ZSAjNTUxIGFuZCBQUiAjNjgzQEdpdEh1YlxuICAgIHZhciBldmVyeUFyZ0lzRGVmaW5lZCA9IEJvb2xlYW4oZXJyb3JMaWtlICYmIGVyck1zZ01hdGNoZXIpO1xuICAgIHZhciBlcnJvckxpa2VGYWlsID0gZmFsc2U7XG4gICAgdmFyIGVyck1zZ01hdGNoZXJGYWlsID0gZmFsc2U7XG5cbiAgICAvLyBDaGVja2luZyBpZiBlcnJvciB3YXMgdGhyb3duXG4gICAgaWYgKGV2ZXJ5QXJnSXNVbmRlZmluZWQgfHwgIWV2ZXJ5QXJnSXNVbmRlZmluZWQgJiYgIW5lZ2F0ZSkge1xuICAgICAgLy8gV2UgbmVlZCB0aGlzIHRvIGRpc3BsYXkgcmVzdWx0cyBjb3JyZWN0bHkgYWNjb3JkaW5nIHRvIHRoZWlyIHR5cGVzXG4gICAgICB2YXIgZXJyb3JMaWtlU3RyaW5nID0gJ2FuIGVycm9yJztcbiAgICAgIGlmIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBlcnJvckxpa2VTdHJpbmcgPSAnI3tleHB9JztcbiAgICAgIH0gZWxzZSBpZiAoZXJyb3JMaWtlKSB7XG4gICAgICAgIGVycm9yTGlrZVN0cmluZyA9IF8uY2hlY2tFcnJvci5nZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgY2F1Z2h0RXJyXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gdGhyb3cgJyArIGVycm9yTGlrZVN0cmluZ1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCB0aHJvdyBhbiBlcnJvciBidXQgI3thY3R9IHdhcyB0aHJvd24nXG4gICAgICAgICwgZXJyb3JMaWtlICYmIGVycm9yTGlrZS50b1N0cmluZygpXG4gICAgICAgICwgKGNhdWdodEVyciBpbnN0YW5jZW9mIEVycm9yID9cbiAgICAgICAgICAgIGNhdWdodEVyci50b1N0cmluZygpIDogKHR5cGVvZiBjYXVnaHRFcnIgPT09ICdzdHJpbmcnID8gY2F1Z2h0RXJyIDogY2F1Z2h0RXJyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrRXJyb3IuZ2V0Q29uc3RydWN0b3JOYW1lKGNhdWdodEVycikpKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3JMaWtlICYmIGNhdWdodEVycikge1xuICAgICAgLy8gV2Ugc2hvdWxkIGNvbXBhcmUgaW5zdGFuY2VzIG9ubHkgaWYgYGVycm9yTGlrZWAgaXMgYW4gaW5zdGFuY2Ugb2YgYEVycm9yYFxuICAgICAgaWYgKGVycm9yTGlrZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHZhciBpc0NvbXBhdGlibGVJbnN0YW5jZSA9IF8uY2hlY2tFcnJvci5jb21wYXRpYmxlSW5zdGFuY2UoY2F1Z2h0RXJyLCBlcnJvckxpa2UpO1xuXG4gICAgICAgIGlmIChpc0NvbXBhdGlibGVJbnN0YW5jZSA9PT0gbmVnYXRlKSB7XG4gICAgICAgICAgLy8gVGhlc2UgY2hlY2tzIHdlcmUgY3JlYXRlZCB0byBlbnN1cmUgd2Ugd29uJ3QgZmFpbCB0b28gc29vbiB3aGVuIHdlJ3ZlIGdvdCBib3RoIGFyZ3MgYW5kIGEgbmVnYXRlXG4gICAgICAgICAgLy8gU2VlIElzc3VlICM1NTEgYW5kIFBSICM2ODNAR2l0SHViXG4gICAgICAgICAgaWYgKGV2ZXJ5QXJnSXNEZWZpbmVkICYmIG5lZ2F0ZSkge1xuICAgICAgICAgICAgZXJyb3JMaWtlRmFpbCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgICAgICAgIG5lZ2F0ZVxuICAgICAgICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIHRocm93ICN7ZXhwfSBidXQgI3thY3R9IHdhcyB0aHJvd24nXG4gICAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IHRocm93ICN7ZXhwfScgKyAoY2F1Z2h0RXJyICYmICFuZWdhdGUgPyAnIGJ1dCAje2FjdH0gd2FzIHRocm93bicgOiAnJylcbiAgICAgICAgICAgICAgLCBlcnJvckxpa2UudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAsIGNhdWdodEVyci50b1N0cmluZygpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXNDb21wYXRpYmxlQ29uc3RydWN0b3IgPSBfLmNoZWNrRXJyb3IuY29tcGF0aWJsZUNvbnN0cnVjdG9yKGNhdWdodEVyciwgZXJyb3JMaWtlKTtcbiAgICAgIGlmIChpc0NvbXBhdGlibGVDb25zdHJ1Y3RvciA9PT0gbmVnYXRlKSB7XG4gICAgICAgIGlmIChldmVyeUFyZ0lzRGVmaW5lZCAmJiBuZWdhdGUpIHtcbiAgICAgICAgICAgIGVycm9yTGlrZUZhaWwgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgICAgICBuZWdhdGVcbiAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gdGhyb3cgI3tleHB9IGJ1dCAje2FjdH0gd2FzIHRocm93bidcbiAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IHRocm93ICN7ZXhwfScgKyAoY2F1Z2h0RXJyID8gJyBidXQgI3thY3R9IHdhcyB0aHJvd24nIDogJycpXG4gICAgICAgICAgICAsIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yTGlrZS50b1N0cmluZygpIDogZXJyb3JMaWtlICYmIF8uY2hlY2tFcnJvci5nZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKSlcbiAgICAgICAgICAgICwgKGNhdWdodEVyciBpbnN0YW5jZW9mIEVycm9yID8gY2F1Z2h0RXJyLnRvU3RyaW5nKCkgOiBjYXVnaHRFcnIgJiYgXy5jaGVja0Vycm9yLmdldENvbnN0cnVjdG9yTmFtZShjYXVnaHRFcnIpKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2F1Z2h0RXJyICYmIGVyck1zZ01hdGNoZXIgIT09IHVuZGVmaW5lZCAmJiBlcnJNc2dNYXRjaGVyICE9PSBudWxsKSB7XG4gICAgICAvLyBIZXJlIHdlIGNoZWNrIGNvbXBhdGlibGUgbWVzc2FnZXNcbiAgICAgIHZhciBwbGFjZWhvbGRlciA9ICdpbmNsdWRpbmcnO1xuICAgICAgaWYgKGVyck1zZ01hdGNoZXIgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcGxhY2Vob2xkZXIgPSAnbWF0Y2hpbmcnXG4gICAgICB9XG5cbiAgICAgIHZhciBpc0NvbXBhdGlibGVNZXNzYWdlID0gXy5jaGVja0Vycm9yLmNvbXBhdGlibGVNZXNzYWdlKGNhdWdodEVyciwgZXJyTXNnTWF0Y2hlcik7XG4gICAgICBpZiAoaXNDb21wYXRpYmxlTWVzc2FnZSA9PT0gbmVnYXRlKSB7XG4gICAgICAgIGlmIChldmVyeUFyZ0lzRGVmaW5lZCAmJiBuZWdhdGUpIHtcbiAgICAgICAgICAgIGVyck1zZ01hdGNoZXJGYWlsID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICAgIG5lZ2F0ZVxuICAgICAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byB0aHJvdyBlcnJvciAnICsgcGxhY2Vob2xkZXIgKyAnICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gdGhyb3cgZXJyb3Igbm90ICcgKyBwbGFjZWhvbGRlciArICcgI3tleHB9J1xuICAgICAgICAgICAgLCAgZXJyTXNnTWF0Y2hlclxuICAgICAgICAgICAgLCAgXy5jaGVja0Vycm9yLmdldE1lc3NhZ2UoY2F1Z2h0RXJyKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBib3RoIGFzc2VydGlvbnMgZmFpbGVkIGFuZCBib3RoIHNob3VsZCd2ZSBtYXRjaGVkIHdlIHRocm93IGFuIGVycm9yXG4gICAgaWYgKGVycm9yTGlrZUZhaWwgJiYgZXJyTXNnTWF0Y2hlckZhaWwpIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBuZWdhdGVcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byB0aHJvdyAje2V4cH0gYnV0ICN7YWN0fSB3YXMgdGhyb3duJ1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCB0aHJvdyAje2V4cH0nICsgKGNhdWdodEVyciA/ICcgYnV0ICN7YWN0fSB3YXMgdGhyb3duJyA6ICcnKVxuICAgICAgICAsIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yTGlrZS50b1N0cmluZygpIDogZXJyb3JMaWtlICYmIF8uY2hlY2tFcnJvci5nZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKSlcbiAgICAgICAgLCAoY2F1Z2h0RXJyIGluc3RhbmNlb2YgRXJyb3IgPyBjYXVnaHRFcnIudG9TdHJpbmcoKSA6IGNhdWdodEVyciAmJiBfLmNoZWNrRXJyb3IuZ2V0Q29uc3RydWN0b3JOYW1lKGNhdWdodEVycikpXG4gICAgICApO1xuICAgIH1cblxuICAgIGZsYWcodGhpcywgJ29iamVjdCcsIGNhdWdodEVycik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgndGhyb3cnLCBhc3NlcnRUaHJvd3MpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCd0aHJvd3MnLCBhc3NlcnRUaHJvd3MpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdUaHJvdycsIGFzc2VydFRocm93cyk7XG5cbiAgLyoqXG4gICAqICMjIyAucmVzcG9uZFRvKG1ldGhvZFssIG1zZ10pXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIG5vbi1mdW5jdGlvbiBvYmplY3QsIGAucmVzcG9uZFRvYCBhc3NlcnRzIHRoYXQgdGhlXG4gICAqIHRhcmdldCBoYXMgYSBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBgbWV0aG9kYC4gVGhlIG1ldGhvZCBjYW4gYmUgb3duIG9yXG4gICAqIGluaGVyaXRlZCwgYW5kIGl0IGNhbiBiZSBlbnVtZXJhYmxlIG9yIG5vbi1lbnVtZXJhYmxlLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gQ2F0ICgpIHt9XG4gICAqICAgICBDYXQucHJvdG90eXBlLm1lb3cgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgQ2F0KCkpLnRvLnJlc3BvbmRUbygnbWVvdycpO1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBmdW5jdGlvbiwgYC5yZXNwb25kVG9gIGFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0J3NcbiAgICogYHByb3RvdHlwZWAgcHJvcGVydHkgaGFzIGEgbWV0aG9kIHdpdGggdGhlIGdpdmVuIG5hbWUgYG1ldGhvZGAuIEFnYWluLCB0aGVcbiAgICogbWV0aG9kIGNhbiBiZSBvd24gb3IgaW5oZXJpdGVkLCBhbmQgaXQgY2FuIGJlIGVudW1lcmFibGUgb3Igbm9uLWVudW1lcmFibGUuXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBDYXQgKCkge31cbiAgICogICAgIENhdC5wcm90b3R5cGUubWVvdyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KENhdCkudG8ucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIEFkZCBgLml0c2VsZmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gZm9yY2UgYC5yZXNwb25kVG9gIHRvIHRyZWF0IHRoZVxuICAgKiB0YXJnZXQgYXMgYSBub24tZnVuY3Rpb24gb2JqZWN0LCBldmVuIGlmIGl0J3MgYSBmdW5jdGlvbi4gVGh1cywgaXQgYXNzZXJ0c1xuICAgKiB0aGF0IHRoZSB0YXJnZXQgaGFzIGEgbWV0aG9kIHdpdGggdGhlIGdpdmVuIG5hbWUgYG1ldGhvZGAsIHJhdGhlciB0aGFuXG4gICAqIGFzc2VydGluZyB0aGF0IHRoZSB0YXJnZXQncyBgcHJvdG90eXBlYCBwcm9wZXJ0eSBoYXMgYSBtZXRob2Qgd2l0aCB0aGVcbiAgICogZ2l2ZW4gbmFtZSBgbWV0aG9kYC5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIENhdCAoKSB7fVxuICAgKiAgICAgQ2F0LnByb3RvdHlwZS5tZW93ID0gZnVuY3Rpb24gKCkge307XG4gICAqICAgICBDYXQuaGlzcyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KENhdCkuaXRzZWxmLnRvLnJlc3BvbmRUbygnaGlzcycpLmJ1dC5ub3QucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIFdoZW4gbm90IGFkZGluZyBgLml0c2VsZmAsIGl0J3MgaW1wb3J0YW50IHRvIGNoZWNrIHRoZSB0YXJnZXQncyB0eXBlIGJlZm9yZVxuICAgKiB1c2luZyBgLnJlc3BvbmRUb2AuIFNlZSB0aGUgYC5hYCBkb2MgZm9yIGluZm8gb24gY2hlY2tpbmcgYSB0YXJnZXQncyB0eXBlLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gQ2F0ICgpIHt9XG4gICAqICAgICBDYXQucHJvdG90eXBlLm1lb3cgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgQ2F0KCkpLnRvLmJlLmFuKCdvYmplY3QnKS50aGF0LnJlc3BvbmRzVG8oJ21lb3cnKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5yZXNwb25kVG9gLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gRG9nICgpIHt9XG4gICAqICAgICBEb2cucHJvdG90eXBlLmJhcmsgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgRG9nKCkpLnRvLm5vdC5yZXNwb25kVG8oJ21lb3cnKTtcbiAgICpcbiAgICogYC5yZXNwb25kVG9gIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7fSkudG8ucmVzcG9uZFRvKCdtZW93JywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KHt9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8ucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLnJlc3BvbmRzVG9gIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAucmVzcG9uZFRvYC5cbiAgICpcbiAgICogQG5hbWUgcmVzcG9uZFRvXG4gICAqIEBhbGlhcyByZXNwb25kc1RvXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJlc3BvbmRUbyAobWV0aG9kLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgaXRzZWxmID0gZmxhZyh0aGlzLCAnaXRzZWxmJylcbiAgICAgICwgY29udGV4dCA9ICgnZnVuY3Rpb24nID09PSB0eXBlb2Ygb2JqICYmICFpdHNlbGYpXG4gICAgICAgID8gb2JqLnByb3RvdHlwZVttZXRob2RdXG4gICAgICAgIDogb2JqW21ldGhvZF07XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGNvbnRleHRcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gcmVzcG9uZCB0byAnICsgXy5pbnNwZWN0KG1ldGhvZClcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IHJlc3BvbmQgdG8gJyArIF8uaW5zcGVjdChtZXRob2QpXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3Jlc3BvbmRUbycsIHJlc3BvbmRUbyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3Jlc3BvbmRzVG8nLCByZXNwb25kVG8pO1xuXG4gIC8qKlxuICAgKiAjIyMgLml0c2VsZlxuICAgKlxuICAgKiBGb3JjZXMgYWxsIGAucmVzcG9uZFRvYCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byBiZWhhdmUgYXMgaWZcbiAgICogdGhlIHRhcmdldCBpcyBhIG5vbi1mdW5jdGlvbiBvYmplY3QsIGV2ZW4gaWYgaXQncyBhIGZ1bmN0aW9uLiBUaHVzLCBpdFxuICAgKiBjYXVzZXMgYC5yZXNwb25kVG9gIHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaGFzIGEgbWV0aG9kIHdpdGggdGhlIGdpdmVuXG4gICAqIG5hbWUsIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IHRoZSB0YXJnZXQncyBgcHJvdG90eXBlYCBwcm9wZXJ0eSBoYXMgYVxuICAgKiBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIENhdCAoKSB7fVxuICAgKiAgICAgQ2F0LnByb3RvdHlwZS5tZW93ID0gZnVuY3Rpb24gKCkge307XG4gICAqICAgICBDYXQuaGlzcyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KENhdCkuaXRzZWxmLnRvLnJlc3BvbmRUbygnaGlzcycpLmJ1dC5ub3QucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIEBuYW1lIGl0c2VsZlxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2l0c2VsZicsIGZ1bmN0aW9uICgpIHtcbiAgICBmbGFnKHRoaXMsICdpdHNlbGYnLCB0cnVlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuc2F0aXNmeShtYXRjaGVyWywgbXNnXSlcbiAgICpcbiAgICogSW52b2tlcyB0aGUgZ2l2ZW4gYG1hdGNoZXJgIGZ1bmN0aW9uIHdpdGggdGhlIHRhcmdldCBiZWluZyBwYXNzZWQgYXMgdGhlXG4gICAqIGZpcnN0IGFyZ3VtZW50LCBhbmQgYXNzZXJ0cyB0aGF0IHRoZSB2YWx1ZSByZXR1cm5lZCBpcyB0cnV0aHkuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uc2F0aXNmeShmdW5jdGlvbihudW0pIHtcbiAgICogICAgICAgcmV0dXJuIG51bSA+IDA7XG4gICAqICAgICB9KTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5zYXRpc2Z5YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3Quc2F0aXNmeShmdW5jdGlvbihudW0pIHtcbiAgICogICAgICAgcmV0dXJuIG51bSA+IDI7XG4gICAqICAgICB9KTtcbiAgICpcbiAgICogYC5zYXRpc2Z5YCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uc2F0aXNmeShmdW5jdGlvbihudW0pIHtcbiAgICogICAgICAgcmV0dXJuIG51bSA+IDI7XG4gICAqICAgICB9LCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqXG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLnNhdGlzZnkoZnVuY3Rpb24obnVtKSB7XG4gICAqICAgICAgIHJldHVybiBudW0gPiAyO1xuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLnNhdGlzZmllc2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5zYXRpc2Z5YC5cbiAgICpcbiAgICogQG5hbWUgc2F0aXNmeVxuICAgKiBAYWxpYXMgc2F0aXNmaWVzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1hdGNoZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHNhdGlzZnkgKG1hdGNoZXIsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcbiAgICB2YXIgcmVzdWx0ID0gbWF0Y2hlcihvYmopO1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICByZXN1bHRcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gc2F0aXNmeSAnICsgXy5vYmpEaXNwbGF5KG1hdGNoZXIpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBzYXRpc2Z5JyArIF8ub2JqRGlzcGxheShtYXRjaGVyKVxuICAgICAgLCBmbGFnKHRoaXMsICduZWdhdGUnKSA/IGZhbHNlIDogdHJ1ZVxuICAgICAgLCByZXN1bHRcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnc2F0aXNmeScsIHNhdGlzZnkpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdzYXRpc2ZpZXMnLCBzYXRpc2Z5KTtcblxuICAvKipcbiAgICogIyMjIC5jbG9zZVRvKGV4cGVjdGVkLCBkZWx0YVssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyIHRoYXQncyB3aXRoaW4gYSBnaXZlbiArLy0gYGRlbHRhYCByYW5nZVxuICAgKiBvZiB0aGUgZ2l2ZW4gbnVtYmVyIGBleHBlY3RlZGAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGVcbiAgICogdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMS41KS50by5lcXVhbCgxLjUpO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMS41KS50by5iZS5jbG9zZVRvKDEsIDAuNSk7XG4gICAqICAgICBleHBlY3QoMS41KS50by5iZS5jbG9zZVRvKDIsIDAuNSk7XG4gICAqICAgICBleHBlY3QoMS41KS50by5iZS5jbG9zZVRvKDEsIDEpO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmNsb3NlVG9gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEuNSkudG8uZXF1YWwoMS41KTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxLjUpLnRvLm5vdC5iZS5jbG9zZVRvKDMsIDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5jbG9zZVRvYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMS41KS50by5iZS5jbG9zZVRvKDMsIDEsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgxLjUsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5jbG9zZVRvKDMsIDEpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5hcHByb3hpbWF0ZWx5YCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmNsb3NlVG9gLlxuICAgKlxuICAgKiBAbmFtZSBjbG9zZVRvXG4gICAqIEBhbGlhcyBhcHByb3hpbWF0ZWx5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVsdGFcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNsb3NlVG8oZXhwZWN0ZWQsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuXG4gICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ251bWJlcicpO1xuICAgIGlmICh0eXBlb2YgZXhwZWN0ZWQgIT09ICdudW1iZXInIHx8IHR5cGVvZiBkZWx0YSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICBmbGFnTXNnICsgJ3RoZSBhcmd1bWVudHMgdG8gY2xvc2VUbyBvciBhcHByb3hpbWF0ZWx5IG11c3QgYmUgbnVtYmVycycsXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIHNzZmlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIE1hdGguYWJzKG9iaiAtIGV4cGVjdGVkKSA8PSBkZWx0YVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBjbG9zZSB0byAnICsgZXhwZWN0ZWQgKyAnICsvLSAnICsgZGVsdGFcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gbm90IHRvIGJlIGNsb3NlIHRvICcgKyBleHBlY3RlZCArICcgKy8tICcgKyBkZWx0YVxuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdjbG9zZVRvJywgY2xvc2VUbyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2FwcHJveGltYXRlbHknLCBjbG9zZVRvKTtcblxuICAvLyBOb3RlOiBEdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGlmIHRlc3RpbmcgZm9yIGluY2x1c2lvbiBpbnN0ZWFkIG9mIHNhbWVuZXNzLlxuICBmdW5jdGlvbiBpc1N1YnNldE9mKHN1YnNldCwgc3VwZXJzZXQsIGNtcCwgY29udGFpbnMsIG9yZGVyZWQpIHtcbiAgICBpZiAoIWNvbnRhaW5zKSB7XG4gICAgICBpZiAoc3Vic2V0Lmxlbmd0aCAhPT0gc3VwZXJzZXQubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBzdXBlcnNldCA9IHN1cGVyc2V0LnNsaWNlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnNldC5ldmVyeShmdW5jdGlvbihlbGVtLCBpZHgpIHtcbiAgICAgIGlmIChvcmRlcmVkKSByZXR1cm4gY21wID8gY21wKGVsZW0sIHN1cGVyc2V0W2lkeF0pIDogZWxlbSA9PT0gc3VwZXJzZXRbaWR4XTtcblxuICAgICAgaWYgKCFjbXApIHtcbiAgICAgICAgdmFyIG1hdGNoSWR4ID0gc3VwZXJzZXQuaW5kZXhPZihlbGVtKTtcbiAgICAgICAgaWYgKG1hdGNoSWR4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIC8vIFJlbW92ZSBtYXRjaCBmcm9tIHN1cGVyc2V0IHNvIG5vdCBjb3VudGVkIHR3aWNlIGlmIGR1cGxpY2F0ZSBpbiBzdWJzZXQuXG4gICAgICAgIGlmICghY29udGFpbnMpIHN1cGVyc2V0LnNwbGljZShtYXRjaElkeCwgMSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3VwZXJzZXQuc29tZShmdW5jdGlvbihlbGVtMiwgbWF0Y2hJZHgpIHtcbiAgICAgICAgaWYgKCFjbXAoZWxlbSwgZWxlbTIpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgLy8gUmVtb3ZlIG1hdGNoIGZyb20gc3VwZXJzZXQgc28gbm90IGNvdW50ZWQgdHdpY2UgaWYgZHVwbGljYXRlIGluIHN1YnNldC5cbiAgICAgICAgaWYgKCFjb250YWlucykgc3VwZXJzZXQuc3BsaWNlKG1hdGNoSWR4LCAxKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm1lbWJlcnMoc2V0WywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgYXJyYXkgaGFzIHRoZSBzYW1lIG1lbWJlcnMgYXMgdGhlIGdpdmVuIGFycmF5XG4gICAqIGBzZXRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5tZW1iZXJzKFsyLCAxLCAzXSk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDJdKS50by5oYXZlLm1lbWJlcnMoWzIsIDEsIDJdKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgbWVtYmVycyBhcmUgY29tcGFyZWQgdXNpbmcgc3RyaWN0IChgPT09YCkgZXF1YWxpdHkuIEFkZCBgLmRlZXBgXG4gICAqIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIHVzZSBkZWVwIGVxdWFsaXR5IGluc3RlYWQuIFNlZSB0aGUgYGRlZXAtZXFsYFxuICAgKiBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaGFzIG1lbWJlciBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5oYXZlLmRlZXAubWVtYmVycyhbe2E6IDF9XSk7XG4gICAqICAgICBleHBlY3QoW3thOiAxfV0pLnRvLm5vdC5oYXZlLm1lbWJlcnMoW3thOiAxfV0pO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBvcmRlciBkb2Vzbid0IG1hdHRlci4gQWRkIGAub3JkZXJlZGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG9cbiAgICogcmVxdWlyZSB0aGF0IG1lbWJlcnMgYXBwZWFyIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5vcmRlcmVkLm1lbWJlcnMoWzEsIDIsIDNdKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubWVtYmVycyhbMiwgMSwgM10pXG4gICAqICAgICAgIC5idXQubm90Lm9yZGVyZWQubWVtYmVycyhbMiwgMSwgM10pO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBib3RoIGFycmF5cyBtdXN0IGJlIHRoZSBzYW1lIHNpemUuIEFkZCBgLmluY2x1ZGVgIGVhcmxpZXIgaW5cbiAgICogdGhlIGNoYWluIHRvIHJlcXVpcmUgdGhhdCB0aGUgdGFyZ2V0J3MgbWVtYmVycyBiZSBhIHN1cGVyc2V0IG9mIHRoZVxuICAgKiBleHBlY3RlZCBtZW1iZXJzLiBOb3RlIHRoYXQgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBpbiB0aGUgc3Vic2V0IHdoZW5cbiAgICogYC5pbmNsdWRlYCBpcyBhZGRlZC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBhcnJheSBpcyBhIHN1cGVyc2V0IG9mIFsxLCAyXSBidXQgbm90IGlkZW50aWNhbFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaW5jbHVkZS5tZW1iZXJzKFsxLCAyXSk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5ub3QuaGF2ZS5tZW1iZXJzKFsxLCAyXSk7XG4gICAqXG4gICAqICAgICAvLyBEdXBsaWNhdGVzIGluIHRoZSBzdWJzZXQgYXJlIGlnbm9yZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmluY2x1ZGUubWVtYmVycyhbMSwgMiwgMiwgMl0pO1xuICAgKlxuICAgKiBgLmRlZXBgLCBgLm9yZGVyZWRgLCBhbmQgYC5pbmNsdWRlYCBjYW4gYWxsIGJlIGNvbWJpbmVkLiBIb3dldmVyLCBpZlxuICAgKiBgLmluY2x1ZGVgIGFuZCBgLm9yZGVyZWRgIGFyZSBjb21iaW5lZCwgdGhlIG9yZGVyaW5nIGJlZ2lucyBhdCB0aGUgc3RhcnQgb2ZcbiAgICogYm90aCBhcnJheXMuXG4gICAqXG4gICAqICAgICBleHBlY3QoW3thOiAxfSwge2I6IDJ9LCB7YzogM31dKVxuICAgKiAgICAgICAudG8uaW5jbHVkZS5kZWVwLm9yZGVyZWQubWVtYmVycyhbe2E6IDF9LCB7YjogMn1dKVxuICAgKiAgICAgICAuYnV0Lm5vdC5pbmNsdWRlLmRlZXAub3JkZXJlZC5tZW1iZXJzKFt7YjogMn0sIHtjOiAzfV0pO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLm1lbWJlcnNgLiBIb3dldmVyLCBpdCdzXG4gICAqIGRhbmdlcm91cyB0byBkbyBzby4gVGhlIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnNcbiAgICogYnkgYXNzZXJ0aW5nIHRoYXQgdGhlIHRhcmdldCBhcnJheSBkb2Vzbid0IGhhdmUgYWxsIG9mIHRoZSBzYW1lIG1lbWJlcnMgYXNcbiAgICogdGhlIGdpdmVuIGFycmF5IGBzZXRgIGJ1dCBtYXkgb3IgbWF5IG5vdCBoYXZlIHNvbWUgb2YgdGhlbS4gSXQncyBvZnRlbiBiZXN0XG4gICAqIHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhbiBhc3NlcnRpb25cbiAgICogdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5ub3QuaW5jbHVkZSgzKS5hbmQubm90LmluY2x1ZGUoNCk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5ub3QuaGF2ZS5tZW1iZXJzKFszLCA0XSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLm1lbWJlcnNgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMl0pLnRvLmhhdmUubWVtYmVycyhbMSwgMiwgM10sICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdChbMSwgMl0sICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLm1lbWJlcnMoWzEsIDIsIDNdKTtcbiAgICpcbiAgICogQG5hbWUgbWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzZXRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ21lbWJlcnMnLCBmdW5jdGlvbiAoc3Vic2V0LCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuXG4gICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmJlLmFuKCdhcnJheScpO1xuICAgIG5ldyBBc3NlcnRpb24oc3Vic2V0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5iZS5hbignYXJyYXknKTtcblxuICAgIHZhciBjb250YWlucyA9IGZsYWcodGhpcywgJ2NvbnRhaW5zJyk7XG4gICAgdmFyIG9yZGVyZWQgPSBmbGFnKHRoaXMsICdvcmRlcmVkJyk7XG5cbiAgICB2YXIgc3ViamVjdCwgZmFpbE1zZywgZmFpbE5lZ2F0ZU1zZztcblxuICAgIGlmIChjb250YWlucykge1xuICAgICAgc3ViamVjdCA9IG9yZGVyZWQgPyAnYW4gb3JkZXJlZCBzdXBlcnNldCcgOiAnYSBzdXBlcnNldCc7XG4gICAgICBmYWlsTXNnID0gJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgJyArIHN1YmplY3QgKyAnIG9mICN7ZXhwfSc7XG4gICAgICBmYWlsTmVnYXRlTXNnID0gJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGJlICcgKyBzdWJqZWN0ICsgJyBvZiAje2V4cH0nO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJqZWN0ID0gb3JkZXJlZCA/ICdvcmRlcmVkIG1lbWJlcnMnIDogJ21lbWJlcnMnO1xuICAgICAgZmFpbE1zZyA9ICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgdGhlIHNhbWUgJyArIHN1YmplY3QgKyAnIGFzICN7ZXhwfSc7XG4gICAgICBmYWlsTmVnYXRlTXNnID0gJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgdGhlIHNhbWUgJyArIHN1YmplY3QgKyAnIGFzICN7ZXhwfSc7XG4gICAgfVxuXG4gICAgdmFyIGNtcCA9IGZsYWcodGhpcywgJ2RlZXAnKSA/IF8uZXFsIDogdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIGlzU3Vic2V0T2Yoc3Vic2V0LCBvYmosIGNtcCwgY29udGFpbnMsIG9yZGVyZWQpXG4gICAgICAsIGZhaWxNc2dcbiAgICAgICwgZmFpbE5lZ2F0ZU1zZ1xuICAgICAgLCBzdWJzZXRcbiAgICAgICwgb2JqXG4gICAgICAsIHRydWVcbiAgICApO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5vbmVPZihsaXN0WywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgYSBtZW1iZXIgb2YgdGhlIGdpdmVuIGFycmF5IGBsaXN0YC4gSG93ZXZlcixcbiAgICogaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLm9uZU9mKFsxLCAyLCAzXSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBDb21wYXJpc29ucyBhcmUgcGVyZm9ybWVkIHVzaW5nIHN0cmljdCAoYD09PWApIGVxdWFsaXR5LlxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLm9uZU9mYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3QuYmUub25lT2YoWzIsIDMsIDRdKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAub25lT2ZgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5vbmVPZihbMiwgMywgNF0sICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgxLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUub25lT2YoWzIsIDMsIDRdKTtcbiAgICpcbiAgICogQG5hbWUgb25lT2ZcbiAgICogQHBhcmFtIHtBcnJheTwqPn0gbGlzdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gb25lT2YgKGxpc3QsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBleHBlY3RlZCA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKTtcbiAgICBuZXcgQXNzZXJ0aW9uKGxpc3QsIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmJlLmFuKCdhcnJheScpO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIGxpc3QuaW5kZXhPZihleHBlY3RlZCkgPiAtMVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBvbmUgb2YgI3tleHB9J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgb25lIG9mICN7ZXhwfSdcbiAgICAgICwgbGlzdFxuICAgICAgLCBleHBlY3RlZFxuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdvbmVPZicsIG9uZU9mKTtcblxuICAvKipcbiAgICogIyMjIC5jaGFuZ2Uoc3ViamVjdFssIHByb3BbLCBtc2ddXSlcbiAgICpcbiAgICogV2hlbiBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQsIGAuY2hhbmdlYCBhc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGZ1bmN0aW9uXG4gICAqIGBzdWJqZWN0YCByZXR1cm5zIGEgZGlmZmVyZW50IHZhbHVlIHdoZW4gaXQncyBpbnZva2VkIGJlZm9yZSB0aGUgdGFyZ2V0XG4gICAqIGZ1bmN0aW9uIGNvbXBhcmVkIHRvIHdoZW4gaXQncyBpbnZva2VkIGFmdGVyd2FyZC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0XG4gICAqIHRvIGFzc2VydCB0aGF0IGBzdWJqZWN0YCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqICAgICB2YXIgZG90cyA9ICcnXG4gICAqICAgICAgICwgYWRkRG90ID0gZnVuY3Rpb24gKCkgeyBkb3RzICs9ICcuJzsgfVxuICAgKiAgICAgICAsIGdldERvdHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBkb3RzOyB9O1xuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChnZXREb3RzKCkpLnRvLmVxdWFsKCcnKTtcbiAgICogICAgIGFkZERvdCgpO1xuICAgKiAgICAgZXhwZWN0KGdldERvdHMoKSkudG8uZXF1YWwoJy4nKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGFkZERvdCkudG8uY2hhbmdlKGdldERvdHMpO1xuICAgKlxuICAgKiBXaGVuIHR3byBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCBgLmNoYW5nZWAgYXNzZXJ0cyB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogZ2l2ZW4gb2JqZWN0IGBzdWJqZWN0YCdzIGBwcm9wYCBwcm9wZXJ0eSBpcyBkaWZmZXJlbnQgYmVmb3JlIGludm9raW5nIHRoZVxuICAgKiB0YXJnZXQgZnVuY3Rpb24gY29tcGFyZWQgdG8gYWZ0ZXJ3YXJkLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge2RvdHM6ICcnfVxuICAgKiAgICAgICAsIGFkZERvdCA9IGZ1bmN0aW9uICgpIHsgbXlPYmouZG90cyArPSAnLic7IH07XG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KG15T2JqKS50by5oYXZlLnByb3BlcnR5KCdkb3RzJywgJycpO1xuICAgKiAgICAgYWRkRG90KCk7XG4gICAqICAgICBleHBlY3QobXlPYmopLnRvLmhhdmUucHJvcGVydHkoJ2RvdHMnLCAnLicpO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkRG90KS50by5jaGFuZ2UobXlPYmosICdkb3RzJyk7XG4gICAqXG4gICAqIFN0cmljdCAoYD09PWApIGVxdWFsaXR5IGlzIHVzZWQgdG8gY29tcGFyZSBiZWZvcmUgYW5kIGFmdGVyIHZhbHVlcy5cbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5jaGFuZ2VgLlxuICAgKlxuICAgKiAgICAgdmFyIGRvdHMgPSAnJ1xuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxuICAgKiAgICAgICAsIGdldERvdHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBkb3RzOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLm5vdC5jaGFuZ2UoZ2V0RG90cyk7XG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7ZG90czogJyd9XG4gICAqICAgICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLm5vdC5jaGFuZ2UobXlPYmosICdkb3RzJyk7XG4gICAqXG4gICAqIGAuY2hhbmdlYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyB0d28gYXJndW1lbnRzLCBhbHdheXNcbiAgICogdXNlIHRoZSBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHtkb3RzOiAnJ31cbiAgICogICAgICAgLCBhZGREb3QgPSBmdW5jdGlvbiAoKSB7IG15T2JqLmRvdHMgKz0gJy4nOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZERvdCkudG8ubm90LmNoYW5nZShteU9iaiwgJ2RvdHMnLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqXG4gICAqICAgICB2YXIgZG90cyA9ICcnXG4gICAqICAgICAgICwgYWRkRG90ID0gZnVuY3Rpb24gKCkgeyBkb3RzICs9ICcuJzsgfVxuICAgKiAgICAgICAsIGdldERvdHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBkb3RzOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZERvdCwgJ25vb28gd2h5IGZhaWw/PycpLnRvLm5vdC5jaGFuZ2UoZ2V0RG90cyk7XG4gICAqXG4gICAqIGAuY2hhbmdlYCBhbHNvIGNhdXNlcyBhbGwgYC5ieWAgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4gdG9cbiAgICogYXNzZXJ0IGhvdyBtdWNoIGEgbnVtZXJpYyBzdWJqZWN0IHdhcyBpbmNyZWFzZWQgb3IgZGVjcmVhc2VkIGJ5LiBIb3dldmVyLFxuICAgKiBpdCdzIGRhbmdlcm91cyB0byB1c2UgYC5jaGFuZ2UuYnlgLiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXNcbiAgICogdW5jZXJ0YWluIGV4cGVjdGF0aW9ucyBieSBhc3NlcnRpbmcgdGhhdCB0aGUgc3ViamVjdCBlaXRoZXIgaW5jcmVhc2VzIGJ5XG4gICAqIHRoZSBnaXZlbiBkZWx0YSwgb3IgdGhhdCBpdCBkZWNyZWFzZXMgYnkgdGhlIGdpdmVuIGRlbHRhLiBJdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3MgZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuIGFzc2VydGlvblxuICAgKiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5jaGFuZ2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmRlY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmNoYW5nZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogVGhlIGFsaWFzIGAuY2hhbmdlc2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5jaGFuZ2VgLlxuICAgKlxuICAgKiBAbmFtZSBjaGFuZ2VcbiAgICogQGFsaWFzIGNoYW5nZXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN1YmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3AgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRDaGFuZ2VzIChzdWJqZWN0LCBwcm9wLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgZm4gPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgbmV3IEFzc2VydGlvbihmbiwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnZnVuY3Rpb24nKTtcblxuICAgIHZhciBpbml0aWFsO1xuICAgIGlmICghcHJvcCkge1xuICAgICAgbmV3IEFzc2VydGlvbihzdWJqZWN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdmdW5jdGlvbicpO1xuICAgICAgaW5pdGlhbCA9IHN1YmplY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3IEFzc2VydGlvbihzdWJqZWN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KHByb3ApO1xuICAgICAgaW5pdGlhbCA9IHN1YmplY3RbcHJvcF07XG4gICAgfVxuXG4gICAgZm4oKTtcblxuICAgIHZhciBmaW5hbCA9IHByb3AgPT09IHVuZGVmaW5lZCB8fCBwcm9wID09PSBudWxsID8gc3ViamVjdCgpIDogc3ViamVjdFtwcm9wXTtcbiAgICB2YXIgbXNnT2JqID0gcHJvcCA9PT0gdW5kZWZpbmVkIHx8IHByb3AgPT09IG51bGwgPyBpbml0aWFsIDogJy4nICsgcHJvcDtcblxuICAgIC8vIFRoaXMgZ2V0cyBmbGFnZ2VkIGJlY2F1c2Ugb2YgdGhlIC5ieShkZWx0YSkgYXNzZXJ0aW9uXG4gICAgZmxhZyh0aGlzLCAnZGVsdGFNc2dPYmonLCBtc2dPYmopO1xuICAgIGZsYWcodGhpcywgJ2luaXRpYWxEZWx0YVZhbHVlJywgaW5pdGlhbCk7XG4gICAgZmxhZyh0aGlzLCAnZmluYWxEZWx0YVZhbHVlJywgZmluYWwpO1xuICAgIGZsYWcodGhpcywgJ2RlbHRhQmVoYXZpb3InLCAnY2hhbmdlJyk7XG4gICAgZmxhZyh0aGlzLCAncmVhbERlbHRhJywgZmluYWwgIT09IGluaXRpYWwpO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBpbml0aWFsICE9PSBmaW5hbFxuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gY2hhbmdlJ1xuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gbm90IGNoYW5nZSdcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnY2hhbmdlJywgYXNzZXJ0Q2hhbmdlcyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2NoYW5nZXMnLCBhc3NlcnRDaGFuZ2VzKTtcblxuICAvKipcbiAgICogIyMjIC5pbmNyZWFzZShzdWJqZWN0WywgcHJvcFssIG1zZ11dKVxuICAgKlxuICAgKiBXaGVuIG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCwgYC5pbmNyZWFzZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBmdW5jdGlvblxuICAgKiBgc3ViamVjdGAgcmV0dXJucyBhIGdyZWF0ZXIgbnVtYmVyIHdoZW4gaXQncyBpbnZva2VkIGFmdGVyIGludm9raW5nIHRoZVxuICAgKiB0YXJnZXQgZnVuY3Rpb24gY29tcGFyZWQgdG8gd2hlbiBpdCdzIGludm9rZWQgYmVmb3JlaGFuZC4gYC5pbmNyZWFzZWAgYWxzb1xuICAgKiBjYXVzZXMgYWxsIGAuYnlgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIGFzc2VydCBob3cgbXVjaFxuICAgKiBncmVhdGVyIG9mIGEgbnVtYmVyIGlzIHJldHVybmVkLiBJdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHJldHVyblxuICAgKiB2YWx1ZSBpbmNyZWFzZWQgYnkgdGhlIGV4cGVjdGVkIGFtb3VudCwgcmF0aGVyIHRoYW4gYXNzZXJ0aW5nIGl0IGluY3JlYXNlZFxuICAgKiBieSBhbnkgYW1vdW50LlxuICAgKlxuICAgKiAgICAgdmFyIHZhbCA9IDFcbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IHZhbCArPSAyOyB9XG4gICAqICAgICAgICwgZ2V0VmFsID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uaW5jcmVhc2UoZ2V0VmFsKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKGdldFZhbCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBXaGVuIHR3byBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCBgLmluY3JlYXNlYCBhc3NlcnRzIHRoYXQgdGhlIHZhbHVlIG9mIHRoZVxuICAgKiBnaXZlbiBvYmplY3QgYHN1YmplY3RgJ3MgYHByb3BgIHByb3BlcnR5IGlzIGdyZWF0ZXIgYWZ0ZXIgaW52b2tpbmcgdGhlXG4gICAqIHRhcmdldCBmdW5jdGlvbiBjb21wYXJlZCB0byBiZWZvcmVoYW5kLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCArPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uaW5jcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmluY3JlYXNlYC4gSG93ZXZlciwgaXQnc1xuICAgKiBkYW5nZXJvdXMgdG8gZG8gc28uIFRoZSBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zXG4gICAqIGJ5IGFzc2VydGluZyB0aGF0IHRoZSBzdWJqZWN0IGVpdGhlciBkZWNyZWFzZXMsIG9yIHRoYXQgaXQgc3RheXMgdGhlIHNhbWUuXG4gICAqIEl0J3Mgb2Z0ZW4gYmVzdCB0byBpZGVudGlmeSB0aGUgZXhhY3Qgb3V0cHV0IHRoYXQncyBleHBlY3RlZCwgYW5kIHRoZW5cbiAgICogd3JpdGUgYW4gYXNzZXJ0aW9uIHRoYXQgb25seSBhY2NlcHRzIHRoYXQgZXhhY3Qgb3V0cHV0LlxuICAgKlxuICAgKiBXaGVuIHRoZSBzdWJqZWN0IGlzIGV4cGVjdGVkIHRvIGRlY3JlYXNlLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgaXRcbiAgICogZGVjcmVhc2VkIGJ5IHRoZSBleHBlY3RlZCBhbW91bnQuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8ubm90LmluY3JlYXNlKG15T2JqLCAndmFsJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBXaGVuIHRoZSBzdWJqZWN0IGlzIGV4cGVjdGVkIHRvIHN0YXkgdGhlIHNhbWUsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnRcbiAgICogZXhhY3RseSB0aGF0LlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBub29wID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3Qobm9vcCkudG8ubm90LmNoYW5nZShteU9iaiwgJ3ZhbCcpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLm5vdC5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5pbmNyZWFzZWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLiBXaGVuIG5vdCBwcm92aWRpbmcgdHdvIGFyZ3VtZW50cywgYWx3YXlzXG4gICAqIHVzZSB0aGUgc2Vjb25kIGZvcm0uXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICpcbiAgICogICAgIHZhciB2YWwgPSAxXG4gICAqICAgICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9XG4gICAqICAgICAgICwgZ2V0VmFsID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3AsICdub29vIHdoeSBmYWlsPz8nKS50by5pbmNyZWFzZShnZXRWYWwpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5pbmNyZWFzZXNgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuaW5jcmVhc2VgLlxuICAgKlxuICAgKiBAbmFtZSBpbmNyZWFzZVxuICAgKiBAYWxpYXMgaW5jcmVhc2VzXG4gICAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzdWJqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0SW5jcmVhc2VzIChzdWJqZWN0LCBwcm9wLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgZm4gPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgbmV3IEFzc2VydGlvbihmbiwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnZnVuY3Rpb24nKTtcblxuICAgIHZhciBpbml0aWFsO1xuICAgIGlmICghcHJvcCkge1xuICAgICAgbmV3IEFzc2VydGlvbihzdWJqZWN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdmdW5jdGlvbicpO1xuICAgICAgaW5pdGlhbCA9IHN1YmplY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3IEFzc2VydGlvbihzdWJqZWN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KHByb3ApO1xuICAgICAgaW5pdGlhbCA9IHN1YmplY3RbcHJvcF07XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlclxuICAgIG5ldyBBc3NlcnRpb24oaW5pdGlhbCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnbnVtYmVyJyk7XG5cbiAgICBmbigpO1xuXG4gICAgdmFyIGZpbmFsID0gcHJvcCA9PT0gdW5kZWZpbmVkIHx8IHByb3AgPT09IG51bGwgPyBzdWJqZWN0KCkgOiBzdWJqZWN0W3Byb3BdO1xuICAgIHZhciBtc2dPYmogPSBwcm9wID09PSB1bmRlZmluZWQgfHwgcHJvcCA9PT0gbnVsbCA/IGluaXRpYWwgOiAnLicgKyBwcm9wO1xuXG4gICAgZmxhZyh0aGlzLCAnZGVsdGFNc2dPYmonLCBtc2dPYmopO1xuICAgIGZsYWcodGhpcywgJ2luaXRpYWxEZWx0YVZhbHVlJywgaW5pdGlhbCk7XG4gICAgZmxhZyh0aGlzLCAnZmluYWxEZWx0YVZhbHVlJywgZmluYWwpO1xuICAgIGZsYWcodGhpcywgJ2RlbHRhQmVoYXZpb3InLCAnaW5jcmVhc2UnKTtcbiAgICBmbGFnKHRoaXMsICdyZWFsRGVsdGEnLCBmaW5hbCAtIGluaXRpYWwpO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBmaW5hbCAtIGluaXRpYWwgPiAwXG4gICAgICAsICdleHBlY3RlZCAnICsgbXNnT2JqICsgJyB0byBpbmNyZWFzZSdcbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvIG5vdCBpbmNyZWFzZSdcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnaW5jcmVhc2UnLCBhc3NlcnRJbmNyZWFzZXMpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdpbmNyZWFzZXMnLCBhc3NlcnRJbmNyZWFzZXMpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlY3JlYXNlKHN1YmplY3RbLCBwcm9wWywgbXNnXV0pXG4gICAqXG4gICAqIFdoZW4gb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkLCBgLmRlY3JlYXNlYCBhc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGZ1bmN0aW9uXG4gICAqIGBzdWJqZWN0YCByZXR1cm5zIGEgbGVzc2VyIG51bWJlciB3aGVuIGl0J3MgaW52b2tlZCBhZnRlciBpbnZva2luZyB0aGVcbiAgICogdGFyZ2V0IGZ1bmN0aW9uIGNvbXBhcmVkIHRvIHdoZW4gaXQncyBpbnZva2VkIGJlZm9yZWhhbmQuIGAuZGVjcmVhc2VgIGFsc29cbiAgICogY2F1c2VzIGFsbCBgLmJ5YCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byBhc3NlcnQgaG93IG11Y2hcbiAgICogbGVzc2VyIG9mIGEgbnVtYmVyIGlzIHJldHVybmVkLiBJdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHJldHVyblxuICAgKiB2YWx1ZSBkZWNyZWFzZWQgYnkgdGhlIGV4cGVjdGVkIGFtb3VudCwgcmF0aGVyIHRoYW4gYXNzZXJ0aW5nIGl0IGRlY3JlYXNlZFxuICAgKiBieSBhbnkgYW1vdW50LlxuICAgKlxuICAgKiAgICAgdmFyIHZhbCA9IDFcbiAgICogICAgICAgLCBzdWJ0cmFjdFR3byA9IGZ1bmN0aW9uICgpIHsgdmFsIC09IDI7IH1cbiAgICogICAgICAgLCBnZXRWYWwgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWw7IH07XG4gICAqXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmRlY3JlYXNlKGdldFZhbCkuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmRlY3JlYXNlKGdldFZhbCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBXaGVuIHR3byBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCBgLmRlY3JlYXNlYCBhc3NlcnRzIHRoYXQgdGhlIHZhbHVlIG9mIHRoZVxuICAgKiBnaXZlbiBvYmplY3QgYHN1YmplY3RgJ3MgYHByb3BgIHByb3BlcnR5IGlzIGxlc3NlciBhZnRlciBpbnZva2luZyB0aGVcbiAgICogdGFyZ2V0IGZ1bmN0aW9uIGNvbXBhcmVkIHRvIGJlZm9yZWhhbmQuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UobXlPYmosICd2YWwnKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZGVjcmVhc2VgLiBIb3dldmVyLCBpdCdzXG4gICAqIGRhbmdlcm91cyB0byBkbyBzby4gVGhlIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnNcbiAgICogYnkgYXNzZXJ0aW5nIHRoYXQgdGhlIHN1YmplY3QgZWl0aGVyIGluY3JlYXNlcywgb3IgdGhhdCBpdCBzdGF5cyB0aGUgc2FtZS5cbiAgICogSXQncyBvZnRlbiBiZXN0IHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlblxuICAgKiB3cml0ZSBhbiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqIFdoZW4gdGhlIHN1YmplY3QgaXMgZXhwZWN0ZWQgdG8gaW5jcmVhc2UsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCBpdFxuICAgKiBpbmNyZWFzZWQgYnkgdGhlIGV4cGVjdGVkIGFtb3VudC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5ub3QuZGVjcmVhc2UobXlPYmosICd2YWwnKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdGhlIHN1YmplY3QgaXMgZXhwZWN0ZWQgdG8gc3RheSB0aGUgc2FtZSwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydFxuICAgKiBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wKS50by5ub3QuY2hhbmdlKG15T2JqLCAndmFsJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qobm9vcCkudG8ubm90LmRlY3JlYXNlKG15T2JqLCAndmFsJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmRlY3JlYXNlYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyB0d28gYXJndW1lbnRzLCBhbHdheXNcbiAgICogdXNlIHRoZSBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLmRlY3JlYXNlKG15T2JqLCAndmFsJywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKlxuICAgKiAgICAgdmFyIHZhbCA9IDFcbiAgICogICAgICAgLCBub29wID0gZnVuY3Rpb24gKCkge31cbiAgICogICAgICAgLCBnZXRWYWwgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWw7IH07XG4gICAqXG4gICAqICAgICBleHBlY3Qobm9vcCwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmRlY3JlYXNlKGdldFZhbCk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmRlY3JlYXNlc2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5kZWNyZWFzZWAuXG4gICAqXG4gICAqIEBuYW1lIGRlY3JlYXNlXG4gICAqIEBhbGlhcyBkZWNyZWFzZXNcbiAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHN1YmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3AgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnREZWNyZWFzZXMgKHN1YmplY3QsIHByb3AsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBmbiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKTtcbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdmdW5jdGlvbicpO1xuXG4gICAgdmFyIGluaXRpYWw7XG4gICAgaWYgKCFwcm9wKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHN1YmplY3QsIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ2Z1bmN0aW9uJyk7XG4gICAgICBpbml0aWFsID0gc3ViamVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHN1YmplY3QsIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkocHJvcCk7XG4gICAgICBpbml0aWFsID0gc3ViamVjdFtwcm9wXTtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyXG4gICAgbmV3IEFzc2VydGlvbihpbml0aWFsLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdudW1iZXInKTtcblxuICAgIGZuKCk7XG5cbiAgICB2YXIgZmluYWwgPSBwcm9wID09PSB1bmRlZmluZWQgfHwgcHJvcCA9PT0gbnVsbCA/IHN1YmplY3QoKSA6IHN1YmplY3RbcHJvcF07XG4gICAgdmFyIG1zZ09iaiA9IHByb3AgPT09IHVuZGVmaW5lZCB8fCBwcm9wID09PSBudWxsID8gaW5pdGlhbCA6ICcuJyArIHByb3A7XG5cbiAgICBmbGFnKHRoaXMsICdkZWx0YU1zZ09iaicsIG1zZ09iaik7XG4gICAgZmxhZyh0aGlzLCAnaW5pdGlhbERlbHRhVmFsdWUnLCBpbml0aWFsKTtcbiAgICBmbGFnKHRoaXMsICdmaW5hbERlbHRhVmFsdWUnLCBmaW5hbCk7XG4gICAgZmxhZyh0aGlzLCAnZGVsdGFCZWhhdmlvcicsICdkZWNyZWFzZScpO1xuICAgIGZsYWcodGhpcywgJ3JlYWxEZWx0YScsIGluaXRpYWwgLSBmaW5hbCk7XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGZpbmFsIC0gaW5pdGlhbCA8IDBcbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvIGRlY3JlYXNlJ1xuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gbm90IGRlY3JlYXNlJ1xuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdkZWNyZWFzZScsIGFzc2VydERlY3JlYXNlcyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2RlY3JlYXNlcycsIGFzc2VydERlY3JlYXNlcyk7XG5cbiAgLyoqXG4gICAqICMjIyAuYnkoZGVsdGFbLCBtc2ddKVxuICAgKlxuICAgKiBXaGVuIGZvbGxvd2luZyBhbiBgLmluY3JlYXNlYCBhc3NlcnRpb24gaW4gdGhlIGNoYWluLCBgLmJ5YCBhc3NlcnRzIHRoYXRcbiAgICogdGhlIHN1YmplY3Qgb2YgdGhlIGAuaW5jcmVhc2VgIGFzc2VydGlvbiBpbmNyZWFzZWQgYnkgdGhlIGdpdmVuIGBkZWx0YWAuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIGFkZFR3byA9IGZ1bmN0aW9uICgpIHsgbXlPYmoudmFsICs9IDI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpO1xuICAgKlxuICAgKiBXaGVuIGZvbGxvd2luZyBhIGAuZGVjcmVhc2VgIGFzc2VydGlvbiBpbiB0aGUgY2hhaW4sIGAuYnlgIGFzc2VydHMgdGhhdCB0aGVcbiAgICogc3ViamVjdCBvZiB0aGUgYC5kZWNyZWFzZWAgYXNzZXJ0aW9uIGRlY3JlYXNlZCBieSB0aGUgZ2l2ZW4gYGRlbHRhYC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgc3VidHJhY3RUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCAtPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpO1xuICAgKlxuICAgKiBXaGVuIGZvbGxvd2luZyBhIGAuY2hhbmdlYCBhc3NlcnRpb24gaW4gdGhlIGNoYWluLCBgLmJ5YCBhc3NlcnRzIHRoYXQgdGhlXG4gICAqIHN1YmplY3Qgb2YgdGhlIGAuY2hhbmdlYCBhc3NlcnRpb24gZWl0aGVyIGluY3JlYXNlZCBvciBkZWNyZWFzZWQgYnkgdGhlXG4gICAqIGdpdmVuIGBkZWx0YWAuIEhvd2V2ZXIsIGl0J3MgZGFuZ2Vyb3VzIHRvIHVzZSBgLmNoYW5nZS5ieWAuIFRoZSBwcm9ibGVtIGlzXG4gICAqIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zLiBJdCdzIG9mdGVuIGJlc3QgdG8gaWRlbnRpZnkgdGhlXG4gICAqIGV4YWN0IG91dHB1dCB0aGF0J3MgZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0c1xuICAgKiB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5jaGFuZ2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmRlY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmNoYW5nZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5ieWAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdFxuICAgKiB0byBhc3NlcnQgdGhhdCB0aGUgc3ViamVjdCBjaGFuZ2VkIGJ5IGl0cyBleHBlY3RlZCBkZWx0YSwgcmF0aGVyIHRoYW5cbiAgICogYXNzZXJ0aW5nIHRoYXQgaXQgZGlkbid0IGNoYW5nZSBieSBvbmUgb2YgY291bnRsZXNzIHVuZXhwZWN0ZWQgZGVsdGFzLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCArPSAyOyB9O1xuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnV0Lm5vdC5ieSgzKTtcbiAgICpcbiAgICogYC5ieWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlIHRvXG4gICAqIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kXG4gICAqIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCArPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uaW5jcmVhc2UobXlPYmosICd2YWwnKS5ieSgzLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoYWRkVHdvLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaW5jcmVhc2UobXlPYmosICd2YWwnKS5ieSgzKTtcbiAgICpcbiAgICogQG5hbWUgYnlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnREZWx0YShkZWx0YSwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG5cbiAgICB2YXIgbXNnT2JqID0gZmxhZyh0aGlzLCAnZGVsdGFNc2dPYmonKTtcbiAgICB2YXIgaW5pdGlhbCA9IGZsYWcodGhpcywgJ2luaXRpYWxEZWx0YVZhbHVlJyk7XG4gICAgdmFyIGZpbmFsID0gZmxhZyh0aGlzLCAnZmluYWxEZWx0YVZhbHVlJyk7XG4gICAgdmFyIGJlaGF2aW9yID0gZmxhZyh0aGlzLCAnZGVsdGFCZWhhdmlvcicpO1xuICAgIHZhciByZWFsRGVsdGEgPSBmbGFnKHRoaXMsICdyZWFsRGVsdGEnKTtcblxuICAgIHZhciBleHByZXNzaW9uO1xuICAgIGlmIChiZWhhdmlvciA9PT0gJ2NoYW5nZScpIHtcbiAgICAgIGV4cHJlc3Npb24gPSBNYXRoLmFicyhmaW5hbCAtIGluaXRpYWwpID09PSBNYXRoLmFicyhkZWx0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cHJlc3Npb24gPSByZWFsRGVsdGEgPT09IE1hdGguYWJzKGRlbHRhKTtcbiAgICB9XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGV4cHJlc3Npb25cbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvICcgKyBiZWhhdmlvciArICcgYnkgJyArIGRlbHRhXG4gICAgICAsICdleHBlY3RlZCAnICsgbXNnT2JqICsgJyB0byBub3QgJyArIGJlaGF2aW9yICsgJyBieSAnICsgZGVsdGFcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnYnknLCBhc3NlcnREZWx0YSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZXh0ZW5zaWJsZVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBleHRlbnNpYmxlLCB3aGljaCBtZWFucyB0aGF0IG5ldyBwcm9wZXJ0aWVzIGNhblxuICAgKiBiZSBhZGRlZCB0byBpdC4gUHJpbWl0aXZlcyBhcmUgbmV2ZXIgZXh0ZW5zaWJsZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmJlLmV4dGVuc2libGU7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZXh0ZW5zaWJsZWAuXG4gICAqXG4gICAqICAgICB2YXIgbm9uRXh0ZW5zaWJsZU9iamVjdCA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSlcbiAgICogICAgICAgLCBzZWFsZWRPYmplY3QgPSBPYmplY3Quc2VhbCh7fSlcbiAgICogICAgICAgLCBmcm96ZW5PYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub25FeHRlbnNpYmxlT2JqZWN0KS50by5ub3QuYmUuZXh0ZW5zaWJsZTtcbiAgICogICAgIGV4cGVjdChzZWFsZWRPYmplY3QpLnRvLm5vdC5iZS5leHRlbnNpYmxlO1xuICAgKiAgICAgZXhwZWN0KGZyb3plbk9iamVjdCkudG8ubm90LmJlLmV4dGVuc2libGU7XG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLmV4dGVuc2libGU7XG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmV4dGVuc2libGU7XG4gICAqXG4gICAqIEBuYW1lIGV4dGVuc2libGVcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdleHRlbnNpYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpO1xuXG4gICAgLy8gSW4gRVM1LCBpZiB0aGUgYXJndW1lbnQgdG8gdGhpcyBtZXRob2QgaXMgYSBwcmltaXRpdmUsIHRoZW4gaXQgd2lsbCBjYXVzZSBhIFR5cGVFcnJvci5cbiAgICAvLyBJbiBFUzYsIGEgbm9uLW9iamVjdCBhcmd1bWVudCB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2FzIGEgbm9uLWV4dGVuc2libGUgb3JkaW5hcnkgb2JqZWN0LCBzaW1wbHkgcmV0dXJuIGZhbHNlLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc0V4dGVuc2libGVcbiAgICAvLyBUaGUgZm9sbG93aW5nIHByb3ZpZGVzIEVTNiBiZWhhdmlvciBmb3IgRVM1IGVudmlyb25tZW50cy5cblxuICAgIHZhciBpc0V4dGVuc2libGUgPSBvYmogPT09IE9iamVjdChvYmopICYmIE9iamVjdC5pc0V4dGVuc2libGUob2JqKTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgaXNFeHRlbnNpYmxlXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGV4dGVuc2libGUnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBleHRlbnNpYmxlJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLnNlYWxlZFxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBzZWFsZWQsIHdoaWNoIG1lYW5zIHRoYXQgbmV3IHByb3BlcnRpZXMgY2FuJ3QgYmVcbiAgICogYWRkZWQgdG8gaXQsIGFuZCBpdHMgZXhpc3RpbmcgcHJvcGVydGllcyBjYW4ndCBiZSByZWNvbmZpZ3VyZWQgb3IgZGVsZXRlZC5cbiAgICogSG93ZXZlciwgaXQncyBwb3NzaWJsZSB0aGF0IGl0cyBleGlzdGluZyBwcm9wZXJ0aWVzIGNhbiBzdGlsbCBiZSByZWFzc2lnbmVkXG4gICAqIHRvIGRpZmZlcmVudCB2YWx1ZXMuIFByaW1pdGl2ZXMgYXJlIGFsd2F5cyBzZWFsZWQuXG4gICAqXG4gICAqICAgICB2YXIgc2VhbGVkT2JqZWN0ID0gT2JqZWN0LnNlYWwoe30pO1xuICAgKiAgICAgdmFyIGZyb3plbk9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHNlYWxlZE9iamVjdCkudG8uYmUuc2VhbGVkO1xuICAgKiAgICAgZXhwZWN0KGZyb3plbk9iamVjdCkudG8uYmUuc2VhbGVkO1xuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLnNlYWxlZDtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5zZWFsZWRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmJlLnNlYWxlZDtcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5zZWFsZWQ7XG4gICAqXG4gICAqIEBuYW1lIHNlYWxlZFxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ3NlYWxlZCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcblxuICAgIC8vIEluIEVTNSwgaWYgdGhlIGFyZ3VtZW50IHRvIHRoaXMgbWV0aG9kIGlzIGEgcHJpbWl0aXZlLCB0aGVuIGl0IHdpbGwgY2F1c2UgYSBUeXBlRXJyb3IuXG4gICAgLy8gSW4gRVM2LCBhIG5vbi1vYmplY3QgYXJndW1lbnQgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdhcyBhIHNlYWxlZCBvcmRpbmFyeSBvYmplY3QsIHNpbXBseSByZXR1cm4gdHJ1ZS5cbiAgICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzU2VhbGVkXG4gICAgLy8gVGhlIGZvbGxvd2luZyBwcm92aWRlcyBFUzYgYmVoYXZpb3IgZm9yIEVTNSBlbnZpcm9ubWVudHMuXG5cbiAgICB2YXIgaXNTZWFsZWQgPSBvYmogPT09IE9iamVjdChvYmopID8gT2JqZWN0LmlzU2VhbGVkKG9iaikgOiB0cnVlO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBpc1NlYWxlZFxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBzZWFsZWQnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBzZWFsZWQnXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZnJvemVuXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGZyb3plbiwgd2hpY2ggbWVhbnMgdGhhdCBuZXcgcHJvcGVydGllcyBjYW4ndCBiZVxuICAgKiBhZGRlZCB0byBpdCwgYW5kIGl0cyBleGlzdGluZyBwcm9wZXJ0aWVzIGNhbid0IGJlIHJlYXNzaWduZWQgdG8gZGlmZmVyZW50XG4gICAqIHZhbHVlcywgcmVjb25maWd1cmVkLCBvciBkZWxldGVkLiBQcmltaXRpdmVzIGFyZSBhbHdheXMgZnJvemVuLlxuICAgKlxuICAgKiAgICAgdmFyIGZyb3plbk9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGZyb3plbk9iamVjdCkudG8uYmUuZnJvemVuO1xuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmZyb3plbjtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5mcm96ZW5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmJlLmZyb3plbjtcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5mcm96ZW47XG4gICAqXG4gICAqIEBuYW1lIGZyb3plblxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2Zyb3plbicsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcblxuICAgIC8vIEluIEVTNSwgaWYgdGhlIGFyZ3VtZW50IHRvIHRoaXMgbWV0aG9kIGlzIGEgcHJpbWl0aXZlLCB0aGVuIGl0IHdpbGwgY2F1c2UgYSBUeXBlRXJyb3IuXG4gICAgLy8gSW4gRVM2LCBhIG5vbi1vYmplY3QgYXJndW1lbnQgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdhcyBhIGZyb3plbiBvcmRpbmFyeSBvYmplY3QsIHNpbXBseSByZXR1cm4gdHJ1ZS5cbiAgICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzRnJvemVuXG4gICAgLy8gVGhlIGZvbGxvd2luZyBwcm92aWRlcyBFUzYgYmVoYXZpb3IgZm9yIEVTNSBlbnZpcm9ubWVudHMuXG5cbiAgICB2YXIgaXNGcm96ZW4gPSBvYmogPT09IE9iamVjdChvYmopID8gT2JqZWN0LmlzRnJvemVuKG9iaikgOiB0cnVlO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBpc0Zyb3plblxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBmcm96ZW4nXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBmcm96ZW4nXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZmluaXRlXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyLCBhbmQgaXNuJ3QgYE5hTmAgb3IgcG9zaXRpdmUvbmVnYXRpdmVcbiAgICogYEluZmluaXR5YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5maW5pdGU7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZmluaXRlYC4gSG93ZXZlciwgaXQnc1xuICAgKiBkYW5nZXJvdXMgdG8gZG8gc28uIFRoZSBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zXG4gICAqIGJ5IGFzc2VydGluZyB0aGF0IHRoZSBzdWJqZWN0IGVpdGhlciBpc24ndCBhIG51bWJlciwgb3IgdGhhdCBpdCdzIGBOYU5gLCBvclxuICAgKiB0aGF0IGl0J3MgcG9zaXRpdmUgYEluZmluaXR5YCwgb3IgdGhhdCBpdCdzIG5lZ2F0aXZlIGBJbmZpbml0eWAuIEl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBpZGVudGlmeSB0aGUgZXhhY3Qgb3V0cHV0IHRoYXQncyBleHBlY3RlZCwgYW5kIHRoZW4gd3JpdGUgYW5cbiAgICogYXNzZXJ0aW9uIHRoYXQgb25seSBhY2NlcHRzIHRoYXQgZXhhY3Qgb3V0cHV0LlxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXNuJ3QgZXhwZWN0ZWQgdG8gYmUgYSBudW1iZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnRcbiAgICogdGhhdCBpdCdzIHRoZSBleHBlY3RlZCB0eXBlLCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgdGhhdCBpdCBpc24ndCBvbmUgb2ZcbiAgICogbWFueSB1bmV4cGVjdGVkIHR5cGVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5iZS5hKCdzdHJpbmcnKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8ubm90LmJlLmZpbml0ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBleHBlY3RlZCB0byBiZSBgTmFOYCwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCBleGFjdGx5XG4gICAqIHRoYXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoTmFOKS50by5iZS5OYU47IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoTmFOKS50by5ub3QuYmUuZmluaXRlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGV4cGVjdGVkIHRvIGJlIHBvc2l0aXZlIGluZmluaXR5LCBpdCdzIG9mdGVuIGJlc3QgdG9cbiAgICogYXNzZXJ0IGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIGV4cGVjdChJbmZpbml0eSkudG8uZXF1YWwoSW5maW5pdHkpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KEluZmluaXR5KS50by5ub3QuYmUuZmluaXRlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGV4cGVjdGVkIHRvIGJlIG5lZ2F0aXZlIGluZmluaXR5LCBpdCdzIG9mdGVuIGJlc3QgdG9cbiAgICogYXNzZXJ0IGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgtSW5maW5pdHkpLnRvLmVxdWFsKC1JbmZpbml0eSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoLUluZmluaXR5KS50by5ub3QuYmUuZmluaXRlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJywgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmZpbml0ZTtcbiAgICpcbiAgICogQG5hbWUgZmluaXRlXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnZmluaXRlJywgZnVuY3Rpb24obXNnKSB7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHR5cGVvZiBvYmogPT09ICdudW1iZXInICYmIGlzRmluaXRlKG9iailcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYSBmaW5pdGUgbnVtYmVyJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgYSBmaW5pdGUgbnVtYmVyJ1xuICAgICk7XG4gIH0pO1xufTtcbiIsIi8qIVxuICogY2hhaVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNoYWksIHV0aWwpIHtcbiAgLyohXG4gICAqIENoYWkgZGVwZW5kZW5jaWVzLlxuICAgKi9cblxuICB2YXIgQXNzZXJ0aW9uID0gY2hhaS5Bc3NlcnRpb25cbiAgICAsIGZsYWcgPSB1dGlsLmZsYWc7XG5cbiAgLyohXG4gICAqIE1vZHVsZSBleHBvcnQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiAjIyMgYXNzZXJ0KGV4cHJlc3Npb24sIG1lc3NhZ2UpXG4gICAqXG4gICAqIFdyaXRlIHlvdXIgb3duIHRlc3QgZXhwcmVzc2lvbnMuXG4gICAqXG4gICAqICAgICBhc3NlcnQoJ2ZvbycgIT09ICdiYXInLCAnZm9vIGlzIG5vdCBiYXInKTtcbiAgICogICAgIGFzc2VydChBcnJheS5pc0FycmF5KFtdKSwgJ2VtcHR5IGFycmF5cyBhcmUgYXJyYXlzJyk7XG4gICAqXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cHJlc3Npb24gdG8gdGVzdCBmb3IgdHJ1dGhpbmVzc1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSB0byBkaXNwbGF5IG9uIGVycm9yXG4gICAqIEBuYW1lIGFzc2VydFxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICB2YXIgYXNzZXJ0ID0gY2hhaS5hc3NlcnQgPSBmdW5jdGlvbiAoZXhwcmVzcywgZXJybXNnKSB7XG4gICAgdmFyIHRlc3QgPSBuZXcgQXNzZXJ0aW9uKG51bGwsIG51bGwsIGNoYWkuYXNzZXJ0LCB0cnVlKTtcbiAgICB0ZXN0LmFzc2VydChcbiAgICAgICAgZXhwcmVzc1xuICAgICAgLCBlcnJtc2dcbiAgICAgICwgJ1sgbmVnYXRpb24gbWVzc2FnZSB1bmF2YWlsYWJsZSBdJ1xuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZmFpbChbbWVzc2FnZV0pXG4gICAqICMjIyAuZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0sIFtvcGVyYXRvcl0pXG4gICAqXG4gICAqIFRocm93IGEgZmFpbHVyZS4gTm9kZS5qcyBgYXNzZXJ0YCBtb2R1bGUtY29tcGF0aWJsZS5cbiAgICpcbiAgICogICAgIGFzc2VydC5mYWlsKCk7XG4gICAqICAgICBhc3NlcnQuZmFpbChcImN1c3RvbSBlcnJvciBtZXNzYWdlXCIpO1xuICAgKiAgICAgYXNzZXJ0LmZhaWwoMSwgMik7XG4gICAqICAgICBhc3NlcnQuZmFpbCgxLCAyLCBcImN1c3RvbSBlcnJvciBtZXNzYWdlXCIpO1xuICAgKiAgICAgYXNzZXJ0LmZhaWwoMSwgMiwgXCJjdXN0b20gZXJyb3IgbWVzc2FnZVwiLCBcIj5cIik7XG4gICAqICAgICBhc3NlcnQuZmFpbCgxLCAyLCB1bmRlZmluZWQsIFwiPlwiKTtcbiAgICpcbiAgICogQG5hbWUgZmFpbFxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wZXJhdG9yXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5mYWlsID0gZnVuY3Rpb24gKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsIG9wZXJhdG9yKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAgIC8vIENvbXBseSB3aXRoIE5vZGUncyBmYWlsKFttZXNzYWdlXSkgaW50ZXJmYWNlXG5cbiAgICAgICAgbWVzc2FnZSA9IGFjdHVhbDtcbiAgICAgICAgYWN0dWFsID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIG1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdhc3NlcnQuZmFpbCgpJztcbiAgICB0aHJvdyBuZXcgY2hhaS5Bc3NlcnRpb25FcnJvcihtZXNzYWdlLCB7XG4gICAgICAgIGFjdHVhbDogYWN0dWFsXG4gICAgICAsIGV4cGVjdGVkOiBleHBlY3RlZFxuICAgICAgLCBvcGVyYXRvcjogb3BlcmF0b3JcbiAgICB9LCBhc3NlcnQuZmFpbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNPayhvYmplY3QsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIHRydXRoeS5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc09rKCdldmVyeXRoaW5nJywgJ2V2ZXJ5dGhpbmcgaXMgb2snKTtcbiAgICogICAgIGFzc2VydC5pc09rKGZhbHNlLCAndGhpcyB3aWxsIGZhaWwnKTtcbiAgICpcbiAgICogQG5hbWUgaXNPa1xuICAgKiBAYWxpYXMgb2tcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0IHRvIHRlc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzT2sgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNPaywgdHJ1ZSkuaXMub2s7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RPayhvYmplY3QsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIGZhbHN5LlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzTm90T2soJ2V2ZXJ5dGhpbmcnLCAndGhpcyB3aWxsIGZhaWwnKTtcbiAgICogICAgIGFzc2VydC5pc05vdE9rKGZhbHNlLCAndGhpcyB3aWxsIHBhc3MnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RPa1xuICAgKiBAYWxpYXMgbm90T2tcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0IHRvIHRlc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90T2sgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RPaywgdHJ1ZSkuaXMubm90Lm9rO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBub24tc3RyaWN0IGVxdWFsaXR5IChgPT1gKSBvZiBgYWN0dWFsYCBhbmQgYGV4cGVjdGVkYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5lcXVhbCgzLCAnMycsICc9PSBjb2VyY2VzIHZhbHVlcyB0byBzdHJpbmdzJyk7XG4gICAqXG4gICAqIEBuYW1lIGVxdWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGFjdHVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZXF1YWwgPSBmdW5jdGlvbiAoYWN0LCBleHAsIG1zZykge1xuICAgIHZhciB0ZXN0ID0gbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0LmVxdWFsLCB0cnVlKTtcblxuICAgIHRlc3QuYXNzZXJ0KFxuICAgICAgICBleHAgPT0gZmxhZyh0ZXN0LCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gZXF1YWwgI3tleHB9J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgZXF1YWwgI3thY3R9J1xuICAgICAgLCBleHBcbiAgICAgICwgYWN0XG4gICAgICAsIHRydWVcbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBub24tc3RyaWN0IGluZXF1YWxpdHkgKGAhPWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEVxdWFsKDMsIDQsICd0aGVzZSBudW1iZXJzIGFyZSBub3QgZXF1YWwnKTtcbiAgICpcbiAgICogQG5hbWUgbm90RXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RFcXVhbCA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgbXNnKSB7XG4gICAgdmFyIHRlc3QgPSBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQubm90RXF1YWwsIHRydWUpO1xuXG4gICAgdGVzdC5hc3NlcnQoXG4gICAgICAgIGV4cCAhPSBmbGFnKHRlc3QsICdvYmplY3QnKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgZXF1YWwgI3tleHB9J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBlcXVhbCAje2FjdH0nXG4gICAgICAsIGV4cFxuICAgICAgLCBhY3RcbiAgICAgICwgdHJ1ZVxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHN0cmljdCBlcXVhbGl0eSAoYD09PWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKHRydWUsIHRydWUsICd0aGVzZSBib29sZWFucyBhcmUgc3RyaWN0bHkgZXF1YWwnKTtcbiAgICpcbiAgICogQG5hbWUgc3RyaWN0RXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5zdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0LnN0cmljdEVxdWFsLCB0cnVlKS50by5lcXVhbChleHApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBzdHJpY3QgaW5lcXVhbGl0eSAoYCE9PWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKDMsICczJywgJ25vIGNvZXJjaW9uIGZvciBzdHJpY3QgZXF1YWxpdHknKTtcbiAgICpcbiAgICogQG5hbWUgbm90U3RyaWN0RXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsLCB0cnVlKS50by5ub3QuZXF1YWwoZXhwKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYGFjdHVhbGAgaXMgZGVlcGx5IGVxdWFsIHRvIGBleHBlY3RlZGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZGVlcEVxdWFsKHsgdGVhOiAnZ3JlZW4nIH0sIHsgdGVhOiAnZ3JlZW4nIH0pO1xuICAgKlxuICAgKiBAbmFtZSBkZWVwRXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhbGlhcyBkZWVwU3RyaWN0RXF1YWxcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCA9IGFzc2VydC5kZWVwU3RyaWN0RXF1YWwgPSBmdW5jdGlvbiAoYWN0LCBleHAsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oYWN0LCBtc2csIGFzc2VydC5kZWVwRXF1YWwsIHRydWUpLnRvLmVxbChleHApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydCB0aGF0IGBhY3R1YWxgIGlzIG5vdCBkZWVwbHkgZXF1YWwgdG8gYGV4cGVjdGVkYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3REZWVwRXF1YWwoeyB0ZWE6ICdncmVlbicgfSwgeyB0ZWE6ICdqYXNtaW5lJyB9KTtcbiAgICpcbiAgICogQG5hbWUgbm90RGVlcEVxdWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGFjdHVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RGVlcEVxdWFsID0gZnVuY3Rpb24gKGFjdCwgZXhwLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQubm90RGVlcEVxdWFsLCB0cnVlKS50by5ub3QuZXFsKGV4cCk7XG4gIH07XG5cbiAgIC8qKlxuICAgKiAjIyMgLmlzQWJvdmUodmFsdWVUb0NoZWNrLCB2YWx1ZVRvQmVBYm92ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIGB2YWx1ZVRvQ2hlY2tgIGlzIHN0cmljdGx5IGdyZWF0ZXIgdGhhbiAoPikgYHZhbHVlVG9CZUFib3ZlYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0Fib3ZlKDUsIDIsICc1IGlzIHN0cmljdGx5IGdyZWF0ZXIgdGhhbiAyJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQWJvdmVcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0NoZWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9CZUFib3ZlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0Fib3ZlID0gZnVuY3Rpb24gKHZhbCwgYWJ2LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNBYm92ZSwgdHJ1ZSkudG8uYmUuYWJvdmUoYWJ2KTtcbiAgfTtcblxuICAgLyoqXG4gICAqICMjIyAuaXNBdExlYXN0KHZhbHVlVG9DaGVjaywgdmFsdWVUb0JlQXRMZWFzdCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIGB2YWx1ZVRvQ2hlY2tgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAoPj0pIGB2YWx1ZVRvQmVBdExlYXN0YC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0F0TGVhc3QoNSwgMiwgJzUgaXMgZ3JlYXRlciBvciBlcXVhbCB0byAyJyk7XG4gICAqICAgICBhc3NlcnQuaXNBdExlYXN0KDMsIDMsICczIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdG8gMycpO1xuICAgKlxuICAgKiBAbmFtZSBpc0F0TGVhc3RcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0NoZWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9CZUF0TGVhc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQXRMZWFzdCA9IGZ1bmN0aW9uICh2YWwsIGF0bHN0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNBdExlYXN0LCB0cnVlKS50by5iZS5sZWFzdChhdGxzdCk7XG4gIH07XG5cbiAgIC8qKlxuICAgKiAjIyMgLmlzQmVsb3codmFsdWVUb0NoZWNrLCB2YWx1ZVRvQmVCZWxvdywgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIGB2YWx1ZVRvQ2hlY2tgIGlzIHN0cmljdGx5IGxlc3MgdGhhbiAoPCkgYHZhbHVlVG9CZUJlbG93YC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0JlbG93KDMsIDYsICczIGlzIHN0cmljdGx5IGxlc3MgdGhhbiA2Jyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQmVsb3dcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0NoZWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9CZUJlbG93XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0JlbG93ID0gZnVuY3Rpb24gKHZhbCwgYmx3LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNCZWxvdywgdHJ1ZSkudG8uYmUuYmVsb3coYmx3KTtcbiAgfTtcblxuICAgLyoqXG4gICAqICMjIyAuaXNBdE1vc3QodmFsdWVUb0NoZWNrLCB2YWx1ZVRvQmVBdE1vc3QsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBgdmFsdWVUb0NoZWNrYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gKDw9KSBgdmFsdWVUb0JlQXRNb3N0YC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0F0TW9zdCgzLCA2LCAnMyBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gNicpO1xuICAgKiAgICAgYXNzZXJ0LmlzQXRNb3N0KDQsIDQsICc0IGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byA0Jyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQXRNb3N0XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9DaGVja1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVRvQmVBdE1vc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQXRNb3N0ID0gZnVuY3Rpb24gKHZhbCwgYXRtc3QsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0F0TW9zdCwgdHJ1ZSkudG8uYmUubW9zdChhdG1zdCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNUcnVlKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIHRydWUuXG4gICAqXG4gICAqICAgICB2YXIgdGVhU2VydmVkID0gdHJ1ZTtcbiAgICogICAgIGFzc2VydC5pc1RydWUodGVhU2VydmVkLCAndGhlIHRlYSBoYXMgYmVlbiBzZXJ2ZWQnKTtcbiAgICpcbiAgICogQG5hbWUgaXNUcnVlXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc1RydWUgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNUcnVlLCB0cnVlKS5pc1sndHJ1ZSddO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90VHJ1ZSh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBub3QgdHJ1ZS5cbiAgICpcbiAgICogICAgIHZhciB0ZWEgPSAndGFzdHkgY2hhaSc7XG4gICAqICAgICBhc3NlcnQuaXNOb3RUcnVlKHRlYSwgJ2dyZWF0LCB0aW1lIGZvciB0ZWEhJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90VHJ1ZVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RUcnVlID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90VHJ1ZSwgdHJ1ZSkudG8ubm90LmVxdWFsKHRydWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzRmFsc2UodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgZmFsc2UuXG4gICAqXG4gICAqICAgICB2YXIgdGVhU2VydmVkID0gZmFsc2U7XG4gICAqICAgICBhc3NlcnQuaXNGYWxzZSh0ZWFTZXJ2ZWQsICdubyB0ZWEgeWV0PyBobW0uLi4nKTtcbiAgICpcbiAgICogQG5hbWUgaXNGYWxzZVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNGYWxzZSA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0ZhbHNlLCB0cnVlKS5pc1snZmFsc2UnXTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdEZhbHNlKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIG5vdCBmYWxzZS5cbiAgICpcbiAgICogICAgIHZhciB0ZWEgPSAndGFzdHkgY2hhaSc7XG4gICAqICAgICBhc3NlcnQuaXNOb3RGYWxzZSh0ZWEsICdncmVhdCwgdGltZSBmb3IgdGVhIScpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEZhbHNlXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEZhbHNlID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90RmFsc2UsIHRydWUpLnRvLm5vdC5lcXVhbChmYWxzZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOdWxsKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIG51bGwuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOdWxsKGVyciwgJ3RoZXJlIHdhcyBubyBlcnJvcicpO1xuICAgKlxuICAgKiBAbmFtZSBpc051bGxcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTnVsbCA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc051bGwsIHRydWUpLnRvLmVxdWFsKG51bGwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90TnVsbCh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBub3QgbnVsbC5cbiAgICpcbiAgICogICAgIHZhciB0ZWEgPSAndGFzdHkgY2hhaSc7XG4gICAqICAgICBhc3NlcnQuaXNOb3ROdWxsKHRlYSwgJ2dyZWF0LCB0aW1lIGZvciB0ZWEhJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90TnVsbFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3ROdWxsID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90TnVsbCwgdHJ1ZSkudG8ubm90LmVxdWFsKG51bGwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTmFOXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB2YWx1ZSBpcyBOYU4uXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOYU4oTmFOLCAnTmFOIGlzIE5hTicpO1xuICAgKlxuICAgKiBAbmFtZSBpc05hTlxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOYU4gPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOYU4sIHRydWUpLnRvLmJlLk5hTjtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdE5hTlxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdmFsdWUgaXMgbm90IE5hTi5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdE5hTig0LCAnNCBpcyBub3QgTmFOJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90TmFOXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBhc3NlcnQuaXNOb3ROYU4gPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3ROYU4sIHRydWUpLm5vdC50by5iZS5OYU47XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZXhpc3RzXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIG5laXRoZXIgYG51bGxgIG5vciBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIHZhciBmb28gPSAnaGknO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0LmV4aXN0cyhmb28sICdmb28gaXMgbmVpdGhlciBgbnVsbGAgbm9yIGB1bmRlZmluZWRgJyk7XG4gICAqXG4gICAqIEBuYW1lIGV4aXN0c1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZXhpc3RzID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmV4aXN0cywgdHJ1ZSkudG8uZXhpc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RXhpc3RzXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGVpdGhlciBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqICAgICB2YXIgYmFyID0gbnVsbFxuICAgKiAgICAgICAsIGJhejtcbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RFeGlzdHMoYmFyKTtcbiAgICogICAgIGFzc2VydC5ub3RFeGlzdHMoYmF6LCAnYmF6IGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICAgKlxuICAgKiBAbmFtZSBub3RFeGlzdHNcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdEV4aXN0cyA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5ub3RFeGlzdHMsIHRydWUpLnRvLm5vdC5leGlzdDtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc1VuZGVmaW5lZCh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIHZhciB0ZWE7XG4gICAqICAgICBhc3NlcnQuaXNVbmRlZmluZWQodGVhLCAnbm8gdGVhIGRlZmluZWQnKTtcbiAgICpcbiAgICogQG5hbWUgaXNVbmRlZmluZWRcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzVW5kZWZpbmVkID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzVW5kZWZpbmVkLCB0cnVlKS50by5lcXVhbCh1bmRlZmluZWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzRGVmaW5lZCh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBub3QgYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqICAgICB2YXIgdGVhID0gJ2N1cCBvZiBjaGFpJztcbiAgICogICAgIGFzc2VydC5pc0RlZmluZWQodGVhLCAndGVhIGhhcyBiZWVuIGRlZmluZWQnKTtcbiAgICpcbiAgICogQG5hbWUgaXNEZWZpbmVkXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0RlZmluZWQgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNEZWZpbmVkLCB0cnVlKS50by5ub3QuZXF1YWwodW5kZWZpbmVkKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc0Z1bmN0aW9uKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGEgZnVuY3Rpb24uXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBzZXJ2ZVRlYSgpIHsgcmV0dXJuICdjdXAgb2YgdGVhJzsgfTtcbiAgICogICAgIGFzc2VydC5pc0Z1bmN0aW9uKHNlcnZlVGVhLCAnZ3JlYXQsIHdlIGNhbiBoYXZlIHRlYSBub3cnKTtcbiAgICpcbiAgICogQG5hbWUgaXNGdW5jdGlvblxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0Z1bmN0aW9uLCB0cnVlKS50by5iZS5hKCdmdW5jdGlvbicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90RnVuY3Rpb24odmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgX25vdF8gYSBmdW5jdGlvbi5cbiAgICpcbiAgICogICAgIHZhciBzZXJ2ZVRlYSA9IFsgJ2hlYXQnLCAncG91cicsICdzaXAnIF07XG4gICAqICAgICBhc3NlcnQuaXNOb3RGdW5jdGlvbihzZXJ2ZVRlYSwgJ2dyZWF0LCB3ZSBoYXZlIGxpc3RlZCB0aGUgc3RlcHMnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RGdW5jdGlvblxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdEZ1bmN0aW9uLCB0cnVlKS50by5ub3QuYmUuYSgnZnVuY3Rpb24nKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc09iamVjdCh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhbiBvYmplY3Qgb2YgdHlwZSAnT2JqZWN0JyAoYXMgcmV2ZWFsZWQgYnkgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgKS5cbiAgICogX1RoZSBhc3NlcnRpb24gZG9lcyBub3QgbWF0Y2ggc3ViY2xhc3NlZCBvYmplY3RzLl9cbiAgICpcbiAgICogICAgIHZhciBzZWxlY3Rpb24gPSB7IG5hbWU6ICdDaGFpJywgc2VydmU6ICd3aXRoIHNwaWNlcycgfTtcbiAgICogICAgIGFzc2VydC5pc09iamVjdChzZWxlY3Rpb24sICd0ZWEgc2VsZWN0aW9uIGlzIGFuIG9iamVjdCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc09iamVjdFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNPYmplY3QgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNPYmplY3QsIHRydWUpLnRvLmJlLmEoJ29iamVjdCcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90T2JqZWN0KHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIF9ub3RfIGFuIG9iamVjdCBvZiB0eXBlICdPYmplY3QnIChhcyByZXZlYWxlZCBieSBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2ApLlxuICAgKlxuICAgKiAgICAgdmFyIHNlbGVjdGlvbiA9ICdjaGFpJ1xuICAgKiAgICAgYXNzZXJ0LmlzTm90T2JqZWN0KHNlbGVjdGlvbiwgJ3RlYSBzZWxlY3Rpb24gaXMgbm90IGFuIG9iamVjdCcpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90T2JqZWN0KG51bGwsICdudWxsIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RPYmplY3RcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90T2JqZWN0ID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90T2JqZWN0LCB0cnVlKS50by5ub3QuYmUuYSgnb2JqZWN0Jyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNBcnJheSh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhbiBhcnJheS5cbiAgICpcbiAgICogICAgIHZhciBtZW51ID0gWyAnZ3JlZW4nLCAnY2hhaScsICdvb2xvbmcnIF07XG4gICAqICAgICBhc3NlcnQuaXNBcnJheShtZW51LCAnd2hhdCBraW5kIG9mIHRlYSBkbyB3ZSB3YW50PycpO1xuICAgKlxuICAgKiBAbmFtZSBpc0FycmF5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0FycmF5ID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzQXJyYXksIHRydWUpLnRvLmJlLmFuKCdhcnJheScpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90QXJyYXkodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgX25vdF8gYW4gYXJyYXkuXG4gICAqXG4gICAqICAgICB2YXIgbWVudSA9ICdncmVlbnxjaGFpfG9vbG9uZyc7XG4gICAqICAgICBhc3NlcnQuaXNOb3RBcnJheShtZW51LCAnd2hhdCBraW5kIG9mIHRlYSBkbyB3ZSB3YW50PycpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEFycmF5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEFycmF5ID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90QXJyYXksIHRydWUpLnRvLm5vdC5iZS5hbignYXJyYXknKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc1N0cmluZyh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhIHN0cmluZy5cbiAgICpcbiAgICogICAgIHZhciB0ZWFPcmRlciA9ICdjaGFpJztcbiAgICogICAgIGFzc2VydC5pc1N0cmluZyh0ZWFPcmRlciwgJ29yZGVyIHBsYWNlZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc1N0cmluZ1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNTdHJpbmcgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNTdHJpbmcsIHRydWUpLnRvLmJlLmEoJ3N0cmluZycpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90U3RyaW5nKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIF9ub3RfIGEgc3RyaW5nLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYU9yZGVyID0gNDtcbiAgICogICAgIGFzc2VydC5pc05vdFN0cmluZyh0ZWFPcmRlciwgJ29yZGVyIHBsYWNlZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdFN0cmluZ1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RTdHJpbmcgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RTdHJpbmcsIHRydWUpLnRvLm5vdC5iZS5hKCdzdHJpbmcnKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc051bWJlcih2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhIG51bWJlci5cbiAgICpcbiAgICogICAgIHZhciBjdXBzID0gMjtcbiAgICogICAgIGFzc2VydC5pc051bWJlcihjdXBzLCAnaG93IG1hbnkgY3VwcycpO1xuICAgKlxuICAgKiBAbmFtZSBpc051bWJlclxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTnVtYmVyID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTnVtYmVyLCB0cnVlKS50by5iZS5hKCdudW1iZXInKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdE51bWJlcih2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBfbm90XyBhIG51bWJlci5cbiAgICpcbiAgICogICAgIHZhciBjdXBzID0gJzIgY3VwcyBwbGVhc2UnO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90TnVtYmVyKGN1cHMsICdob3cgbWFueSBjdXBzJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90TnVtYmVyXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdE51bWJlciA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdE51bWJlciwgdHJ1ZSkudG8ubm90LmJlLmEoJ251bWJlcicpO1xuICB9O1xuXG4gICAvKipcbiAgICogIyMjIC5pc0Zpbml0ZSh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIuIFVubGlrZSBgLmlzTnVtYmVyYCwgdGhpcyB3aWxsIGZhaWwgZm9yIGBOYU5gIGFuZCBgSW5maW5pdHlgLlxuICAgKlxuICAgKiAgICAgdmFyIGN1cHMgPSAyO1xuICAgKiAgICAgYXNzZXJ0LmlzRmluaXRlKGN1cHMsICdob3cgbWFueSBjdXBzJyk7XG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNGaW5pdGUoTmFOKTsgLy8gdGhyb3dzXG4gICAqXG4gICAqIEBuYW1lIGlzRmluaXRlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNGaW5pdGUgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNGaW5pdGUsIHRydWUpLnRvLmJlLmZpbml0ZTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc0Jvb2xlYW4odmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgYSBib29sZWFuLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYVJlYWR5ID0gdHJ1ZVxuICAgKiAgICAgICAsIHRlYVNlcnZlZCA9IGZhbHNlO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzQm9vbGVhbih0ZWFSZWFkeSwgJ2lzIHRoZSB0ZWEgcmVhZHknKTtcbiAgICogICAgIGFzc2VydC5pc0Jvb2xlYW4odGVhU2VydmVkLCAnaGFzIHRlYSBiZWVuIHNlcnZlZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc0Jvb2xlYW5cbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQm9vbGVhbiA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0Jvb2xlYW4sIHRydWUpLnRvLmJlLmEoJ2Jvb2xlYW4nKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdEJvb2xlYW4odmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgX25vdF8gYSBib29sZWFuLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYVJlYWR5ID0gJ3llcCdcbiAgICogICAgICAgLCB0ZWFTZXJ2ZWQgPSAnbm9wZSc7XG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOb3RCb29sZWFuKHRlYVJlYWR5LCAnaXMgdGhlIHRlYSByZWFkeScpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90Qm9vbGVhbih0ZWFTZXJ2ZWQsICdoYXMgdGVhIGJlZW4gc2VydmVkJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90Qm9vbGVhblxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RCb29sZWFuID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90Qm9vbGVhbiwgdHJ1ZSkudG8ubm90LmJlLmEoJ2Jvb2xlYW4nKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC50eXBlT2YodmFsdWUsIG5hbWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAncyB0eXBlIGlzIGBuYW1lYCwgYXMgZGV0ZXJtaW5lZCBieVxuICAgKiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAqXG4gICAqICAgICBhc3NlcnQudHlwZU9mKHsgdGVhOiAnY2hhaScgfSwgJ29iamVjdCcsICd3ZSBoYXZlIGFuIG9iamVjdCcpO1xuICAgKiAgICAgYXNzZXJ0LnR5cGVPZihbJ2NoYWknLCAnamFzbWluZSddLCAnYXJyYXknLCAnd2UgaGF2ZSBhbiBhcnJheScpO1xuICAgKiAgICAgYXNzZXJ0LnR5cGVPZigndGVhJywgJ3N0cmluZycsICd3ZSBoYXZlIGEgc3RyaW5nJyk7XG4gICAqICAgICBhc3NlcnQudHlwZU9mKC90ZWEvLCAncmVnZXhwJywgJ3dlIGhhdmUgYSByZWd1bGFyIGV4cHJlc3Npb24nKTtcbiAgICogICAgIGFzc2VydC50eXBlT2YobnVsbCwgJ251bGwnLCAnd2UgaGF2ZSBhIG51bGwnKTtcbiAgICogICAgIGFzc2VydC50eXBlT2YodW5kZWZpbmVkLCAndW5kZWZpbmVkJywgJ3dlIGhhdmUgYW4gdW5kZWZpbmVkJyk7XG4gICAqXG4gICAqIEBuYW1lIHR5cGVPZlxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQudHlwZU9mID0gZnVuY3Rpb24gKHZhbCwgdHlwZSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LnR5cGVPZiwgdHJ1ZSkudG8uYmUuYSh0eXBlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RUeXBlT2YodmFsdWUsIG5hbWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAncyB0eXBlIGlzIF9ub3RfIGBuYW1lYCwgYXMgZGV0ZXJtaW5lZCBieVxuICAgKiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90VHlwZU9mKCd0ZWEnLCAnbnVtYmVyJywgJ3N0cmluZ3MgYXJlIG5vdCBudW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdFR5cGVPZlxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZW9mIG5hbWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFR5cGVPZiA9IGZ1bmN0aW9uICh2YWwsIHR5cGUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5ub3RUeXBlT2YsIHRydWUpLnRvLm5vdC5iZS5hKHR5cGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmluc3RhbmNlT2Yob2JqZWN0LCBjb25zdHJ1Y3RvciwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhbiBpbnN0YW5jZSBvZiBgY29uc3RydWN0b3JgLlxuICAgKlxuICAgKiAgICAgdmFyIFRlYSA9IGZ1bmN0aW9uIChuYW1lKSB7IHRoaXMubmFtZSA9IG5hbWU7IH1cbiAgICogICAgICAgLCBjaGFpID0gbmV3IFRlYSgnY2hhaScpO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0Lmluc3RhbmNlT2YoY2hhaSwgVGVhLCAnY2hhaSBpcyBhbiBpbnN0YW5jZSBvZiB0ZWEnKTtcbiAgICpcbiAgICogQG5hbWUgaW5zdGFuY2VPZlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7Q29uc3RydWN0b3J9IGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbnN0YW5jZU9mID0gZnVuY3Rpb24gKHZhbCwgdHlwZSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0Lmluc3RhbmNlT2YsIHRydWUpLnRvLmJlLmluc3RhbmNlT2YodHlwZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90SW5zdGFuY2VPZihvYmplY3QsIGNvbnN0cnVjdG9yLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgYHZhbHVlYCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgYGNvbnN0cnVjdG9yYC5cbiAgICpcbiAgICogICAgIHZhciBUZWEgPSBmdW5jdGlvbiAobmFtZSkgeyB0aGlzLm5hbWUgPSBuYW1lOyB9XG4gICAqICAgICAgICwgY2hhaSA9IG5ldyBTdHJpbmcoJ2NoYWknKTtcbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbnN0YW5jZU9mKGNoYWksIFRlYSwgJ2NoYWkgaXMgbm90IGFuIGluc3RhbmNlIG9mIHRlYScpO1xuICAgKlxuICAgKiBAbmFtZSBub3RJbnN0YW5jZU9mXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdEluc3RhbmNlT2YgPSBmdW5jdGlvbiAodmFsLCB0eXBlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQubm90SW5zdGFuY2VPZiwgdHJ1ZSlcbiAgICAgIC50by5ub3QuYmUuaW5zdGFuY2VPZih0eXBlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBoYXlzdGFja2AgaW5jbHVkZXMgYG5lZWRsZWAuIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGVcbiAgICogaW5jbHVzaW9uIG9mIGEgdmFsdWUgaW4gYW4gYXJyYXksIGEgc3Vic3RyaW5nIGluIGEgc3RyaW5nLCBvciBhIHN1YnNldCBvZlxuICAgKiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pbmNsdWRlKFsxLDIsM10sIDIsICdhcnJheSBjb250YWlucyB2YWx1ZScpO1xuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGUoJ2Zvb2JhcicsICdmb28nLCAnc3RyaW5nIGNvbnRhaW5zIHN1YnN0cmluZycpO1xuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGUoeyBmb286ICdiYXInLCBoZWxsbzogJ3VuaXZlcnNlJyB9LCB7IGZvbzogJ2JhcicgfSwgJ29iamVjdCBjb250YWlucyBwcm9wZXJ0eScpO1xuICAgKlxuICAgKiBTdHJpY3QgZXF1YWxpdHkgKD09PSkgaXMgdXNlZC4gV2hlbiBhc3NlcnRpbmcgdGhlIGluY2x1c2lvbiBvZiBhIHZhbHVlIGluXG4gICAqIGFuIGFycmF5LCB0aGUgYXJyYXkgaXMgc2VhcmNoZWQgZm9yIGFuIGVsZW1lbnQgdGhhdCdzIHN0cmljdGx5IGVxdWFsIHRvIHRoZVxuICAgKiBnaXZlbiB2YWx1ZS4gV2hlbiBhc3NlcnRpbmcgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBvYmplY3QsIHRoZSBvYmplY3RcbiAgICogaXMgc2VhcmNoZWQgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSBrZXlzLCBjaGVja2luZyB0aGF0IGVhY2ggb25lIGlzIHByZXNlbnRcbiAgICogYW5kIHN0cmljdGx5IGVxdWFsIHRvIHRoZSBnaXZlbiBwcm9wZXJ0eSB2YWx1ZS4gRm9yIGluc3RhbmNlOlxuICAgKlxuICAgKiAgICAgdmFyIG9iajEgPSB7YTogMX1cbiAgICogICAgICAgLCBvYmoyID0ge2I6IDJ9O1xuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGUoW29iajEsIG9iajJdLCBvYmoxKTtcbiAgICogICAgIGFzc2VydC5pbmNsdWRlKHtmb286IG9iajEsIGJhcjogb2JqMn0sIHtmb286IG9iajF9KTtcbiAgICogICAgIGFzc2VydC5pbmNsdWRlKHtmb286IG9iajEsIGJhcjogb2JqMn0sIHtmb286IG9iajEsIGJhcjogb2JqMn0pO1xuICAgKlxuICAgKiBAbmFtZSBpbmNsdWRlXG4gICAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge01peGVkfSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmluY2x1ZGUgPSBmdW5jdGlvbiAoZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5pbmNsdWRlLCB0cnVlKS5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90SW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgaGF5c3RhY2tgIGRvZXMgbm90IGluY2x1ZGUgYG5lZWRsZWAuIENhbiBiZSB1c2VkIHRvIGFzc2VydFxuICAgKiB0aGUgYWJzZW5jZSBvZiBhIHZhbHVlIGluIGFuIGFycmF5LCBhIHN1YnN0cmluZyBpbiBhIHN0cmluZywgb3IgYSBzdWJzZXQgb2ZcbiAgICogcHJvcGVydGllcyBpbiBhbiBvYmplY3QuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90SW5jbHVkZShbMSwyLDNdLCA0LCBcImFycmF5IGRvZXNuJ3QgY29udGFpbiB2YWx1ZVwiKTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKCdmb29iYXInLCAnYmF6JywgXCJzdHJpbmcgZG9lc24ndCBjb250YWluIHN1YnN0cmluZ1wiKTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKHsgZm9vOiAnYmFyJywgaGVsbG86ICd1bml2ZXJzZScgfSwgeyBmb286ICdiYXonIH0sICdvYmplY3QgZG9lc24ndCBjb250YWluIHByb3BlcnR5Jyk7XG4gICAqXG4gICAqIFN0cmljdCBlcXVhbGl0eSAoPT09KSBpcyB1c2VkLiBXaGVuIGFzc2VydGluZyB0aGUgYWJzZW5jZSBvZiBhIHZhbHVlIGluIGFuXG4gICAqIGFycmF5LCB0aGUgYXJyYXkgaXMgc2VhcmNoZWQgdG8gY29uZmlybSB0aGUgYWJzZW5jZSBvZiBhbiBlbGVtZW50IHRoYXQnc1xuICAgKiBzdHJpY3RseSBlcXVhbCB0byB0aGUgZ2l2ZW4gdmFsdWUuIFdoZW4gYXNzZXJ0aW5nIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW5cbiAgICogYW4gb2JqZWN0LCB0aGUgb2JqZWN0IGlzIHNlYXJjaGVkIHRvIGNvbmZpcm0gdGhhdCBhdCBsZWFzdCBvbmUgb2YgdGhlIGdpdmVuXG4gICAqIHByb3BlcnR5IGtleXMgaXMgZWl0aGVyIG5vdCBwcmVzZW50IG9yIG5vdCBzdHJpY3RseSBlcXVhbCB0byB0aGUgZ2l2ZW5cbiAgICogcHJvcGVydHkgdmFsdWUuIEZvciBpbnN0YW5jZTpcbiAgICpcbiAgICogICAgIHZhciBvYmoxID0ge2E6IDF9XG4gICAqICAgICAgICwgb2JqMiA9IHtiOiAyfTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKFtvYmoxLCBvYmoyXSwge2E6IDF9KTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKHtmb286IG9iajEsIGJhcjogb2JqMn0sIHtmb286IHthOiAxfX0pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGUoe2Zvbzogb2JqMSwgYmFyOiBvYmoyfSwge2Zvbzogb2JqMSwgYmFyOiB7YjogMn19KTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZVxuICAgKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtNaXhlZH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RJbmNsdWRlID0gZnVuY3Rpb24gKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90SW5jbHVkZSwgdHJ1ZSkubm90LmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgaGF5c3RhY2tgIGluY2x1ZGVzIGBuZWVkbGVgLiBDYW4gYmUgdXNlZCB0byBhc3NlcnQgdGhlXG4gICAqIGluY2x1c2lvbiBvZiBhIHZhbHVlIGluIGFuIGFycmF5IG9yIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gb2JqZWN0LlxuICAgKiBEZWVwIGVxdWFsaXR5IGlzIHVzZWQuXG4gICAqXG4gICAqICAgICB2YXIgb2JqMSA9IHthOiAxfVxuICAgKiAgICAgICAsIG9iajIgPSB7YjogMn07XG4gICAqICAgICBhc3NlcnQuZGVlcEluY2x1ZGUoW29iajEsIG9iajJdLCB7YTogMX0pO1xuICAgKiAgICAgYXNzZXJ0LmRlZXBJbmNsdWRlKHtmb286IG9iajEsIGJhcjogb2JqMn0sIHtmb286IHthOiAxfX0pO1xuICAgKiAgICAgYXNzZXJ0LmRlZXBJbmNsdWRlKHtmb286IG9iajEsIGJhcjogb2JqMn0sIHtmb286IHthOiAxfSwgYmFyOiB7YjogMn19KTtcbiAgICpcbiAgICogQG5hbWUgZGVlcEluY2x1ZGVcbiAgICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVlcEluY2x1ZGUgPSBmdW5jdGlvbiAoZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5kZWVwSW5jbHVkZSwgdHJ1ZSkuZGVlcC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RGVlcEluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYGhheXN0YWNrYCBkb2VzIG5vdCBpbmNsdWRlIGBuZWVkbGVgLiBDYW4gYmUgdXNlZCB0byBhc3NlcnRcbiAgICogdGhlIGFic2VuY2Ugb2YgYSB2YWx1ZSBpbiBhbiBhcnJheSBvciBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdC5cbiAgICogRGVlcCBlcXVhbGl0eSBpcyB1c2VkLlxuICAgKlxuICAgKiAgICAgdmFyIG9iajEgPSB7YTogMX1cbiAgICogICAgICAgLCBvYmoyID0ge2I6IDJ9O1xuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBJbmNsdWRlKFtvYmoxLCBvYmoyXSwge2E6IDl9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwSW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiB7YTogOX19KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwSW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiB7YTogMX0sIGJhcjoge2I6IDl9fSk7XG4gICAqXG4gICAqIEBuYW1lIG5vdERlZXBJbmNsdWRlXG4gICAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge01peGVkfSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdERlZXBJbmNsdWRlID0gZnVuY3Rpb24gKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90RGVlcEluY2x1ZGUsIHRydWUpLm5vdC5kZWVwLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5uZXN0ZWRJbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0ICdoYXlzdGFjaycgaW5jbHVkZXMgJ25lZWRsZScuXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgaW5jbHVzaW9uIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW5cbiAgICogb2JqZWN0LlxuICAgKiBFbmFibGVzIHRoZSB1c2Ugb2YgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBmb3IgcmVmZXJlbmNpbmcgbmVzdGVkXG4gICAqIHByb3BlcnRpZXMuXG4gICAqICdbXScgYW5kICcuJyBpbiBwcm9wZXJ0eSBuYW1lcyBjYW4gYmUgZXNjYXBlZCB1c2luZyBkb3VibGUgYmFja3NsYXNoZXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQubmVzdGVkSW5jbHVkZSh7Jy5hJzogeydiJzogJ3gnfX0sIHsnXFxcXC5hLltiXSc6ICd4J30pO1xuICAgKiAgICAgYXNzZXJ0Lm5lc3RlZEluY2x1ZGUoeydhJzogeydbYl0nOiAneCd9fSwgeydhLlxcXFxbYlxcXFxdJzogJ3gnfSk7XG4gICAqXG4gICAqIEBuYW1lIG5lc3RlZEluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5lc3RlZEluY2x1ZGUgPSBmdW5jdGlvbiAoZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5uZXN0ZWRJbmNsdWRlLCB0cnVlKS5uZXN0ZWQuaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE5lc3RlZEluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBkb2VzIG5vdCBpbmNsdWRlICduZWVkbGUnLlxuICAgKiBDYW4gYmUgdXNlZCB0byBhc3NlcnQgdGhlIGFic2VuY2Ugb2YgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhblxuICAgKiBvYmplY3QuXG4gICAqIEVuYWJsZXMgdGhlIHVzZSBvZiBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciByZWZlcmVuY2luZyBuZXN0ZWRcbiAgICogcHJvcGVydGllcy5cbiAgICogJ1tdJyBhbmQgJy4nIGluIHByb3BlcnR5IG5hbWVzIGNhbiBiZSBlc2NhcGVkIHVzaW5nIGRvdWJsZSBiYWNrc2xhc2hlcy5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3ROZXN0ZWRJbmNsdWRlKHsnLmEnOiB7J2InOiAneCd9fSwgeydcXFxcLmEuYic6ICd5J30pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdE5lc3RlZEluY2x1ZGUoeydhJzogeydbYl0nOiAneCd9fSwgeydhLlxcXFxbYlxcXFxdJzogJ3knfSk7XG4gICAqXG4gICAqIEBuYW1lIG5vdE5lc3RlZEluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdE5lc3RlZEluY2x1ZGUgPSBmdW5jdGlvbiAoZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5ub3ROZXN0ZWRJbmNsdWRlLCB0cnVlKVxuICAgICAgLm5vdC5uZXN0ZWQuaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBOZXN0ZWRJbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0ICdoYXlzdGFjaycgaW5jbHVkZXMgJ25lZWRsZScuXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgaW5jbHVzaW9uIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW5cbiAgICogb2JqZWN0IHdoaWxlIGNoZWNraW5nIGZvciBkZWVwIGVxdWFsaXR5LlxuICAgKiBFbmFibGVzIHRoZSB1c2Ugb2YgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBmb3IgcmVmZXJlbmNpbmcgbmVzdGVkXG4gICAqIHByb3BlcnRpZXMuXG4gICAqICdbXScgYW5kICcuJyBpbiBwcm9wZXJ0eSBuYW1lcyBjYW4gYmUgZXNjYXBlZCB1c2luZyBkb3VibGUgYmFja3NsYXNoZXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZGVlcE5lc3RlZEluY2x1ZGUoe2E6IHtiOiBbe3g6IDF9XX19LCB7J2EuYlswXSc6IHt4OiAxfX0pO1xuICAgKiAgICAgYXNzZXJ0LmRlZXBOZXN0ZWRJbmNsdWRlKHsnLmEnOiB7J1tiXSc6IHt4OiAxfX19LCB7J1xcXFwuYS5cXFxcW2JcXFxcXSc6IHt4OiAxfX0pO1xuICAgKlxuICAgKiBAbmFtZSBkZWVwTmVzdGVkSW5jbHVkZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtPYmplY3R9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVlcE5lc3RlZEluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0LmRlZXBOZXN0ZWRJbmNsdWRlLCB0cnVlKVxuICAgICAgLmRlZXAubmVzdGVkLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3REZWVwTmVzdGVkSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCAnaGF5c3RhY2snIGRvZXMgbm90IGluY2x1ZGUgJ25lZWRsZScuXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgYWJzZW5jZSBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuXG4gICAqIG9iamVjdCB3aGlsZSBjaGVja2luZyBmb3IgZGVlcCBlcXVhbGl0eS5cbiAgICogRW5hYmxlcyB0aGUgdXNlIG9mIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yIHJlZmVyZW5jaW5nIG5lc3RlZFxuICAgKiBwcm9wZXJ0aWVzLlxuICAgKiAnW10nIGFuZCAnLicgaW4gcHJvcGVydHkgbmFtZXMgY2FuIGJlIGVzY2FwZWQgdXNpbmcgZG91YmxlIGJhY2tzbGFzaGVzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBOZXN0ZWRJbmNsdWRlKHthOiB7YjogW3t4OiAxfV19fSwgeydhLmJbMF0nOiB7eTogMX19KVxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBOZXN0ZWRJbmNsdWRlKHsnLmEnOiB7J1tiXSc6IHt4OiAxfX19LCB7J1xcXFwuYS5cXFxcW2JcXFxcXSc6IHt5OiAyfX0pO1xuICAgKlxuICAgKiBAbmFtZSBub3REZWVwTmVzdGVkSW5jbHVkZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtPYmplY3R9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RGVlcE5lc3RlZEluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm5vdERlZXBOZXN0ZWRJbmNsdWRlLCB0cnVlKVxuICAgICAgLm5vdC5kZWVwLm5lc3RlZC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAub3duSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCAnaGF5c3RhY2snIGluY2x1ZGVzICduZWVkbGUnLlxuICAgKiBDYW4gYmUgdXNlZCB0byBhc3NlcnQgdGhlIGluY2x1c2lvbiBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuXG4gICAqIG9iamVjdCB3aGlsZSBpZ25vcmluZyBpbmhlcml0ZWQgcHJvcGVydGllcy5cbiAgICpcbiAgICogICAgIGFzc2VydC5vd25JbmNsdWRlKHsgYTogMSB9LCB7IGE6IDEgfSk7XG4gICAqXG4gICAqIEBuYW1lIG93bkluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm93bkluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm93bkluY2x1ZGUsIHRydWUpLm93bi5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90T3duSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCAnaGF5c3RhY2snIGluY2x1ZGVzICduZWVkbGUnLlxuICAgKiBDYW4gYmUgdXNlZCB0byBhc3NlcnQgdGhlIGFic2VuY2Ugb2YgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhblxuICAgKiBvYmplY3Qgd2hpbGUgaWdub3JpbmcgaW5oZXJpdGVkIHByb3BlcnRpZXMuXG4gICAqXG4gICAqICAgICBPYmplY3QucHJvdG90eXBlLmIgPSAyO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdE93bkluY2x1ZGUoeyBhOiAxIH0sIHsgYjogMiB9KTtcbiAgICpcbiAgICogQG5hbWUgbm90T3duSW5jbHVkZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtPYmplY3R9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90T3duSW5jbHVkZSA9IGZ1bmN0aW9uKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90T3duSW5jbHVkZSwgdHJ1ZSkubm90Lm93bi5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZGVlcE93bkluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBpbmNsdWRlcyAnbmVlZGxlJy5cbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBpbmNsdXNpb24gb2YgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhblxuICAgKiBvYmplY3Qgd2hpbGUgaWdub3JpbmcgaW5oZXJpdGVkIHByb3BlcnRpZXMgYW5kIGNoZWNraW5nIGZvciBkZWVwIGVxdWFsaXR5LlxuICAgKlxuICAgKiAgICAgIGFzc2VydC5kZWVwT3duSW5jbHVkZSh7YToge2I6IDJ9fSwge2E6IHtiOiAyfX0pO1xuICAgKlxuICAgKiBAbmFtZSBkZWVwT3duSW5jbHVkZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtPYmplY3R9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVlcE93bkluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0LmRlZXBPd25JbmNsdWRlLCB0cnVlKVxuICAgICAgLmRlZXAub3duLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAgLyoqXG4gICAqICMjIyAubm90RGVlcE93bkluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBpbmNsdWRlcyAnbmVlZGxlJy5cbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBhYnNlbmNlIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW5cbiAgICogb2JqZWN0IHdoaWxlIGlnbm9yaW5nIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGFuZCBjaGVja2luZyBmb3IgZGVlcCBlcXVhbGl0eS5cbiAgICpcbiAgICogICAgICBhc3NlcnQubm90RGVlcE93bkluY2x1ZGUoe2E6IHtiOiAyfX0sIHthOiB7YzogM319KTtcbiAgICpcbiAgICogQG5hbWUgbm90RGVlcE93bkluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdERlZXBPd25JbmNsdWRlID0gZnVuY3Rpb24oZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5ub3REZWVwT3duSW5jbHVkZSwgdHJ1ZSlcbiAgICAgIC5ub3QuZGVlcC5vd24uaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm1hdGNoKHZhbHVlLCByZWdleHAsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgbWF0Y2hlcyB0aGUgcmVndWxhciBleHByZXNzaW9uIGByZWdleHBgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm1hdGNoKCdmb29iYXInLCAvXmZvby8sICdyZWdleHAgbWF0Y2hlcycpO1xuICAgKlxuICAgKiBAbmFtZSBtYXRjaFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5tYXRjaCA9IGZ1bmN0aW9uIChleHAsIHJlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubWF0Y2gsIHRydWUpLnRvLm1hdGNoKHJlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RNYXRjaCh2YWx1ZSwgcmVnZXhwLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGRvZXMgbm90IG1hdGNoIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYHJlZ2V4cGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90TWF0Y2goJ2Zvb2JhcicsIC9eZm9vLywgJ3JlZ2V4cCBkb2VzIG5vdCBtYXRjaCcpO1xuICAgKlxuICAgKiBAbmFtZSBub3RNYXRjaFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RNYXRjaCA9IGZ1bmN0aW9uIChleHAsIHJlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90TWF0Y2gsIHRydWUpLnRvLm5vdC5tYXRjaChyZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAucHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lZCBieVxuICAgKiBgcHJvcGVydHlgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnByb3BlcnR5KHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYScpO1xuICAgKiAgICAgYXNzZXJ0LnByb3BlcnR5KHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RvU3RyaW5nJyk7XG4gICAqXG4gICAqIEBuYW1lIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5wcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3AsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5wcm9wZXJ0eSwgdHJ1ZSkudG8uaGF2ZS5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVkXG4gICAqIGJ5IGBwcm9wZXJ0eWAuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90UHJvcGVydHkoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAnY29mZmVlJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdFByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3AsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3RQcm9wZXJ0eSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5wcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lZCBieVxuICAgKiBgcHJvcGVydHlgIHdpdGggYSB2YWx1ZSBnaXZlbiBieSBgdmFsdWVgLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrXG4gICAqICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnByb3BlcnR5VmFsKHsgdGVhOiAnaXMgZ29vZCcgfSwgJ3RlYScsICdpcyBnb29kJyk7XG4gICAqXG4gICAqIEBuYW1lIHByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5wcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LnByb3BlcnR5VmFsLCB0cnVlKVxuICAgICAgLnRvLmhhdmUucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBfbm90XyBoYXZlIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lZFxuICAgKiBieSBgcHJvcGVydHlgIHdpdGggdmFsdWUgZ2l2ZW4gYnkgYHZhbHVlYC4gVXNlcyBhIHN0cmljdCBlcXVhbGl0eSBjaGVja1xuICAgKiAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RQcm9wZXJ0eVZhbCh7IHRlYTogJ2lzIGdvb2QnIH0sICd0ZWEnLCAnaXMgYmFkJyk7XG4gICAqICAgICBhc3NlcnQubm90UHJvcGVydHlWYWwoeyB0ZWE6ICdpcyBnb29kJyB9LCAnY29mZmVlJywgJ2lzIGdvb2QnKTtcbiAgICpcbiAgICogQG5hbWUgbm90UHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubm90UHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZWQgYnlcbiAgICogYHByb3BlcnR5YCB3aXRoIGEgdmFsdWUgZ2l2ZW4gYnkgYHZhbHVlYC4gVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqXG4gICAqICAgICBhc3NlcnQuZGVlcFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICd0ZWEnLCB7IGdyZWVuOiAnbWF0Y2hhJyB9KTtcbiAgICpcbiAgICogQG5hbWUgZGVlcFByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kZWVwUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5kZWVwUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5kZWVwLnByb3BlcnR5KHByb3AsIHZhbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RGVlcFByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVkXG4gICAqIGJ5IGBwcm9wZXJ0eWAgd2l0aCB2YWx1ZSBnaXZlbiBieSBgdmFsdWVgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3REZWVwUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ3RlYScsIHsgYmxhY2s6ICdtYXRjaGEnIH0pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBQcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfSB9LCAndGVhJywgeyBncmVlbjogJ29vbG9uZycgfSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICdjb2ZmZWUnLCB7IGdyZWVuOiAnbWF0Y2hhJyB9KTtcbiAgICpcbiAgICogQG5hbWUgbm90RGVlcFByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3REZWVwUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3REZWVwUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuZGVlcC5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm93blByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgLiBJbmhlcml0ZWRcbiAgICogcHJvcGVydGllcyBhcmVuJ3QgY2hlY2tlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5vd25Qcm9wZXJ0eSh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfX0sICd0ZWEnKTtcbiAgICpcbiAgICogQG5hbWUgb3duUHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm93blByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm93blByb3BlcnR5LCB0cnVlKVxuICAgICAgLnRvLmhhdmUub3duLnByb3BlcnR5KHByb3ApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE93blByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieVxuICAgKiBgcHJvcGVydHlgLiBJbmhlcml0ZWQgcHJvcGVydGllcyBhcmVuJ3QgY2hlY2tlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RPd25Qcm9wZXJ0eSh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfX0sICdjb2ZmZWUnKTtcbiAgICogICAgIGFzc2VydC5ub3RPd25Qcm9wZXJ0eSh7fSwgJ3RvU3RyaW5nJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdE93blByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RPd25Qcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3AsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3RPd25Qcm9wZXJ0eSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5vd24ucHJvcGVydHkocHJvcCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAub3duUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgIGFuZCBhIHZhbHVlXG4gICAqIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBgdmFsdWVgLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKiBJbmhlcml0ZWQgcHJvcGVydGllcyBhcmVuJ3QgY2hlY2tlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5vd25Qcm9wZXJ0eVZhbCh7IGNvZmZlZTogJ2lzIGdvb2QnfSwgJ2NvZmZlZScsICdpcyBnb29kJyk7XG4gICAqXG4gICAqIEBuYW1lIG93blByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5vd25Qcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbHVlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQub3duUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5vd24ucHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE93blByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBkaXJlY3QgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YFxuICAgKiB3aXRoIGEgdmFsdWUgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIGB2YWx1ZWAuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2tcbiAgICogKD09PSkuIEluaGVyaXRlZCBwcm9wZXJ0aWVzIGFyZW4ndCBjaGVja2VkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdE93blByb3BlcnR5VmFsKHsgdGVhOiAnaXMgYmV0dGVyJ30sICd0ZWEnLCAnaXMgd29yc2UnKTtcbiAgICogICAgIGFzc2VydC5ub3RPd25Qcm9wZXJ0eVZhbCh7fSwgJ3RvU3RyaW5nJywgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdE93blByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RPd25Qcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbHVlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubm90T3duUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUub3duLnByb3BlcnR5KHByb3AsIHZhbHVlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwT3duUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgIGFuZCBhIHZhbHVlXG4gICAqIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBgdmFsdWVgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay4gSW5oZXJpdGVkXG4gICAqIHByb3BlcnRpZXMgYXJlbid0IGNoZWNrZWQuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZGVlcE93blByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICd0ZWEnLCB7IGdyZWVuOiAnbWF0Y2hhJyB9KTtcbiAgICpcbiAgICogQG5hbWUgZGVlcE93blByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kZWVwT3duUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWx1ZSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRlZXBPd25Qcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLmRlZXAub3duLnByb3BlcnR5KHByb3AsIHZhbHVlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3REZWVwT3duUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgXG4gICAqIHdpdGggYSB2YWx1ZSBlcXVhbCB0byB0aGUgcHJvdmlkZWQgYHZhbHVlYC4gVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqIEluaGVyaXRlZCBwcm9wZXJ0aWVzIGFyZW4ndCBjaGVja2VkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBPd25Qcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfSB9LCAndGVhJywgeyBibGFjazogJ21hdGNoYScgfSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcE93blByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICd0ZWEnLCB7IGdyZWVuOiAnb29sb25nJyB9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwT3duUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ2NvZmZlZScsIHsgZ3JlZW46ICdtYXRjaGEnIH0pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBPd25Qcm9wZXJ0eVZhbCh7fSwgJ3RvU3RyaW5nJywgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdERlZXBPd25Qcm9wZXJ0eVZhbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RGVlcE93blByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsdWUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3REZWVwT3duUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuZGVlcC5vd24ucHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5lc3RlZFByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZWQgYnlcbiAgICogYHByb3BlcnR5YCwgd2hpY2ggY2FuIGJlIGEgc3RyaW5nIHVzaW5nIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yXG4gICAqIG5lc3RlZCByZWZlcmVuY2UuXG4gICAqXG4gICAqICAgICBhc3NlcnQubmVzdGVkUHJvcGVydHkoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAndGVhLmdyZWVuJyk7XG4gICAqXG4gICAqIEBuYW1lIG5lc3RlZFByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5uZXN0ZWRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3AsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5uZXN0ZWRQcm9wZXJ0eSwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLm5lc3RlZC5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3ROZXN0ZWRQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgLCB3aGljaFxuICAgKiBjYW4gYmUgYSBzdHJpbmcgdXNpbmcgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBmb3IgbmVzdGVkIHJlZmVyZW5jZS4gVGhlXG4gICAqIHByb3BlcnR5IGNhbm5vdCBleGlzdCBvbiB0aGUgb2JqZWN0IG5vciBhbnl3aGVyZSBpbiBpdHMgcHJvdG90eXBlIGNoYWluLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5KHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYS5vb2xvbmcnKTtcbiAgICpcbiAgICogQG5hbWUgbm90TmVzdGVkUHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5LCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLm5lc3RlZC5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5uZXN0ZWRQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YCB3aXRoIHZhbHVlIGdpdmVuXG4gICAqIGJ5IGB2YWx1ZWAuIGBwcm9wZXJ0eWAgY2FuIHVzZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciBuZXN0ZWRcbiAgICogcmVmZXJlbmNlLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5lc3RlZFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYS5ncmVlbicsICdtYXRjaGEnKTtcbiAgICpcbiAgICogQG5hbWUgbmVzdGVkUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5lc3RlZFByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubmVzdGVkUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5uZXN0ZWQucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3ROZXN0ZWRQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBfbm90XyBoYXZlIGEgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YCB3aXRoXG4gICAqIHZhbHVlIGdpdmVuIGJ5IGB2YWx1ZWAuIGBwcm9wZXJ0eWAgY2FuIHVzZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvclxuICAgKiBuZXN0ZWQgcmVmZXJlbmNlLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYS5ncmVlbicsICdrb25hY2hhJyk7XG4gICAqICAgICBhc3NlcnQubm90TmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAnY29mZmVlLmdyZWVuJywgJ21hdGNoYScpO1xuICAgKlxuICAgKiBAbmFtZSBub3ROZXN0ZWRQcm9wZXJ0eVZhbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90TmVzdGVkUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3ROZXN0ZWRQcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5uZXN0ZWQucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwTmVzdGVkUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIHByb3BlcnR5IG5hbWVkIGJ5IGBwcm9wZXJ0eWAgd2l0aCBhIHZhbHVlIGdpdmVuXG4gICAqIGJ5IGB2YWx1ZWAuIGBwcm9wZXJ0eWAgY2FuIHVzZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciBuZXN0ZWRcbiAgICogcmVmZXJlbmNlLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5kZWVwTmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46IHsgbWF0Y2hhOiAneXVtJyB9IH0gfSwgJ3RlYS5ncmVlbicsIHsgbWF0Y2hhOiAneXVtJyB9KTtcbiAgICpcbiAgICogQG5hbWUgZGVlcE5lc3RlZFByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kZWVwTmVzdGVkUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5kZWVwTmVzdGVkUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5kZWVwLm5lc3RlZC5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdERlZXBOZXN0ZWRQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBfbm90XyBoYXZlIGEgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YCB3aXRoXG4gICAqIHZhbHVlIGdpdmVuIGJ5IGB2YWx1ZWAuIGBwcm9wZXJ0eWAgY2FuIHVzZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvclxuICAgKiBuZXN0ZWQgcmVmZXJlbmNlLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3REZWVwTmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46IHsgbWF0Y2hhOiAneXVtJyB9IH0gfSwgJ3RlYS5ncmVlbicsIHsgb29sb25nOiAneXVtJyB9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwTmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46IHsgbWF0Y2hhOiAneXVtJyB9IH0gfSwgJ3RlYS5ncmVlbicsIHsgbWF0Y2hhOiAneXVjaycgfSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcE5lc3RlZFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiB7IG1hdGNoYTogJ3l1bScgfSB9IH0sICd0ZWEuYmxhY2snLCB7IG1hdGNoYTogJ3l1bScgfSk7XG4gICAqXG4gICAqIEBuYW1lIG5vdERlZXBOZXN0ZWRQcm9wZXJ0eVZhbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RGVlcE5lc3RlZFByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubm90RGVlcE5lc3RlZFByb3BlcnR5VmFsLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLmRlZXAubmVzdGVkLnByb3BlcnR5KHByb3AsIHZhbCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5sZW5ndGhPZihvYmplY3QsIGxlbmd0aCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgYGxlbmd0aGAgb3IgYHNpemVgIHdpdGggdGhlIGV4cGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lmxlbmd0aE9mKFsxLDIsM10sIDMsICdhcnJheSBoYXMgbGVuZ3RoIG9mIDMnKTtcbiAgICogICAgIGFzc2VydC5sZW5ndGhPZignZm9vYmFyJywgNiwgJ3N0cmluZyBoYXMgbGVuZ3RoIG9mIDYnKTtcbiAgICogICAgIGFzc2VydC5sZW5ndGhPZihuZXcgU2V0KFsxLDIsM10pLCAzLCAnc2V0IGhhcyBzaXplIG9mIDMnKTtcbiAgICogICAgIGFzc2VydC5sZW5ndGhPZihuZXcgTWFwKFtbJ2EnLDFdLFsnYicsMl0sWydjJywzXV0pLCAzLCAnbWFwIGhhcyBzaXplIG9mIDMnKTtcbiAgICpcbiAgICogQG5hbWUgbGVuZ3RoT2ZcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGhcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lmxlbmd0aE9mID0gZnVuY3Rpb24gKGV4cCwgbGVuLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubGVuZ3RoT2YsIHRydWUpLnRvLmhhdmUubGVuZ3RoT2YobGVuKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5oYXNBbnlLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYXQgbGVhc3Qgb25lIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lmhhc0FueUtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCBbJ2ZvbycsICdpRG9udEV4aXN0JywgJ2JheiddKTtcbiAgICogICAgIGFzc2VydC5oYXNBbnlLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwge2ZvbzogMzAsIGlEb250RXhpc3Q6IDk5LCBiYXo6IDEzMzd9KTtcbiAgICogICAgIGFzc2VydC5oYXNBbnlLZXlzKG5ldyBNYXAoW1t7Zm9vOiAxfSwgJ2JhciddLCBbJ2tleScsICd2YWx1ZSddXSksIFt7Zm9vOiAxfSwgJ2tleSddKTtcbiAgICogICAgIGFzc2VydC5oYXNBbnlLZXlzKG5ldyBTZXQoW3tmb286ICdiYXInfSwgJ2Fub3RoZXJLZXknXSksIFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10pO1xuICAgKlxuICAgKiBAbmFtZSBoYXNBbnlLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaGFzQW55S2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5oYXNBbnlLZXlzLCB0cnVlKS50by5oYXZlLmFueS5rZXlzKGtleXMpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaGFzQWxsS2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGFsbCBhbmQgb25seSBhbGwgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaGFzQWxsS2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIFsnZm9vJywgJ2JhcicsICdiYXonXSk7XG4gICAqICAgICBhc3NlcnQuaGFzQWxsS2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIHtmb286IDMwLCBiYXI6IDk5LCBiYXo6IDEzMzddKTtcbiAgICogICAgIGFzc2VydC5oYXNBbGxLZXlzKG5ldyBNYXAoW1t7Zm9vOiAxfSwgJ2JhciddLCBbJ2tleScsICd2YWx1ZSddXSksIFt7Zm9vOiAxfSwgJ2tleSddKTtcbiAgICogICAgIGFzc2VydC5oYXNBbGxLZXlzKG5ldyBTZXQoW3tmb286ICdiYXInfSwgJ2Fub3RoZXJLZXknXSwgW3tmb286ICdiYXInfSwgJ2Fub3RoZXJLZXknXSk7XG4gICAqXG4gICAqIEBuYW1lIGhhc0FsbEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nW119IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lmhhc0FsbEtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaGFzQWxsS2V5cywgdHJ1ZSkudG8uaGF2ZS5hbGwua2V5cyhrZXlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmNvbnRhaW5zQWxsS2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGFsbCBvZiB0aGUgYGtleXNgIHByb3ZpZGVkIGJ1dCBtYXkgaGF2ZSBtb3JlIGtleXMgbm90IGxpc3RlZC5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwgWydmb28nLCAnYmF6J10pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIFsnZm9vJywgJ2JhcicsICdiYXonXSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwge2ZvbzogMzAsIGJhejogMTMzN30pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIHtmb286IDMwLCBiYXI6IDk5LCBiYXo6IDEzMzd9KTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMobmV3IE1hcChbW3tmb286IDF9LCAnYmFyJ10sIFsna2V5JywgJ3ZhbHVlJ11dKSwgW3tmb286IDF9XSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxLZXlzKG5ldyBNYXAoW1t7Zm9vOiAxfSwgJ2JhciddLCBbJ2tleScsICd2YWx1ZSddXSksIFt7Zm9vOiAxfSwgJ2tleSddKTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMobmV3IFNldChbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddLCBbe2ZvbzogJ2Jhcid9XSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxLZXlzKG5ldyBTZXQoW3tmb286ICdiYXInfSwgJ2Fub3RoZXJLZXknXSwgW3tmb286ICdiYXInfSwgJ2Fub3RoZXJLZXknXSk7XG4gICAqXG4gICAqIEBuYW1lIGNvbnRhaW5zQWxsS2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmdbXX0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuY29udGFpbnNBbGxLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cywgdHJ1ZSlcbiAgICAgIC50by5jb250YWluLmFsbC5rZXlzKGtleXMpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuZG9lc05vdEhhdmVBbnlLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgbm9uZSBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFueUtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCBbJ29uZScsICd0d28nLCAnZXhhbXBsZSddKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFueUtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCB7b25lOiAxLCB0d286IDIsIGV4YW1wbGU6ICdmb28nfSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlLZXlzKG5ldyBNYXAoW1t7Zm9vOiAxfSwgJ2JhciddLCBbJ2tleScsICd2YWx1ZSddXSksIFt7b25lOiAndHdvJ30sICdleGFtcGxlJ10pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55S2V5cyhuZXcgU2V0KFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10sIFt7b25lOiAndHdvJ30sICdleGFtcGxlJ10pO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90SGF2ZUFueUtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nW119IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55S2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5kb2VzTm90SGF2ZUFueUtleXMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuYW55LmtleXMoa2V5cyk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kb2VzTm90SGF2ZUFsbEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgbm90IGhhdmUgYXQgbGVhc3Qgb25lIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsS2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIFsnb25lJywgJ3R3bycsICdleGFtcGxlJ10pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsS2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIHtvbmU6IDEsIHR3bzogMiwgZXhhbXBsZTogJ2Zvbyd9KTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbEtleXMobmV3IE1hcChbW3tmb286IDF9LCAnYmFyJ10sIFsna2V5JywgJ3ZhbHVlJ11dKSwgW3tvbmU6ICd0d28nfSwgJ2V4YW1wbGUnXSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbGxLZXlzKG5ldyBTZXQoW3tmb286ICdiYXInfSwgJ2Fub3RoZXJLZXknXSwgW3tvbmU6ICd0d28nfSwgJ2V4YW1wbGUnXSk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RIYXZlQWxsS2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmdbXX0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdEhhdmVBbGxLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsS2V5cywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5hbGwua2V5cyhrZXlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmhhc0FueURlZXBLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYXQgbGVhc3Qgb25lIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFNpbmNlIFNldHMgYW5kIE1hcHMgY2FuIGhhdmUgb2JqZWN0cyBhcyBrZXlzIHlvdSBjYW4gdXNlIHRoaXMgYXNzZXJ0aW9uIHRvIHBlcmZvcm1cbiAgICogYSBkZWVwIGNvbXBhcmlzb24uXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lmhhc0FueURlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbMSwgMl1dKSwge29uZTogJ29uZSd9KTtcbiAgICogICAgIGFzc2VydC5oYXNBbnlEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgWzEsIDJdXSksIFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueURlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbe3R3bzogJ3R3byd9LCAndmFsdWVUd28nXV0pLCBbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKTtcbiAgICogICAgIGFzc2VydC5oYXNBbnlEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCB7b25lOiAnb25lJ30pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueURlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIFt7b25lOiAnb25lJ30sIHt0aHJlZTogJ3RocmVlJ31dKTtcbiAgICogICAgIGFzc2VydC5oYXNBbnlEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCBbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKTtcbiAgICpcbiAgICogQG5hbWUgZG9lc05vdEhhdmVBbGxLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaGFzQW55RGVlcEtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaGFzQW55RGVlcEtleXMsIHRydWUpXG4gICAgICAudG8uaGF2ZS5hbnkuZGVlcC5rZXlzKGtleXMpO1xuICB9XG5cbiAvKipcbiAgICogIyMjIC5oYXNBbGxEZWVwS2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGFsbCBhbmQgb25seSBhbGwgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogU2luY2UgU2V0cyBhbmQgTWFwcyBjYW4gaGF2ZSBvYmplY3RzIGFzIGtleXMgeW91IGNhbiB1c2UgdGhpcyBhc3NlcnRpb24gdG8gcGVyZm9ybVxuICAgKiBhIGRlZXAgY29tcGFyaXNvbi5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaGFzQWxsRGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ11dKSwge29uZTogJ29uZSd9KTtcbiAgICogICAgIGFzc2VydC5oYXNBbGxEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgW3t0d286ICd0d28nfSwgJ3ZhbHVlVHdvJ11dKSwgW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSk7XG4gICAqICAgICBhc3NlcnQuaGFzQWxsRGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9XSksIHtvbmU6ICdvbmUnfSk7XG4gICAqICAgICBhc3NlcnQuaGFzQWxsRGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwgW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSk7XG4gICAqXG4gICAqIEBuYW1lIGhhc0FsbERlZXBLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaGFzQWxsRGVlcEtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaGFzQWxsRGVlcEtleXMsIHRydWUpXG4gICAgICAudG8uaGF2ZS5hbGwuZGVlcC5rZXlzKGtleXMpO1xuICB9XG5cbiAvKipcbiAgICogIyMjIC5jb250YWluc0FsbERlZXBLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBjb250YWlucyBhbGwgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogU2luY2UgU2V0cyBhbmQgTWFwcyBjYW4gaGF2ZSBvYmplY3RzIGFzIGtleXMgeW91IGNhbiB1c2UgdGhpcyBhc3NlcnRpb24gdG8gcGVyZm9ybVxuICAgKiBhIGRlZXAgY29tcGFyaXNvbi5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgWzEsIDJdXSksIHtvbmU6ICdvbmUnfSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgW3t0d286ICd0d28nfSwgJ3ZhbHVlVHdvJ11dKSwgW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCB7b25lOiAnb25lJ30pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsRGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwgW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSk7XG4gICAqXG4gICAqIEBuYW1lIGNvbnRhaW5zQWxsRGVlcEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5jb250YWluc0FsbERlZXBLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmNvbnRhaW5zQWxsRGVlcEtleXMsIHRydWUpXG4gICAgICAudG8uY29udGFpbi5hbGwuZGVlcC5rZXlzKGtleXMpO1xuICB9XG5cbiAvKipcbiAgICogIyMjIC5kb2VzTm90SGF2ZUFueURlZXBLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgbm9uZSBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBTaW5jZSBTZXRzIGFuZCBNYXBzIGNhbiBoYXZlIG9iamVjdHMgYXMga2V5cyB5b3UgY2FuIHVzZSB0aGlzIGFzc2VydGlvbiB0byBwZXJmb3JtXG4gICAqIGEgZGVlcCBjb21wYXJpc29uLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFueURlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbMSwgMl1dKSwge3RoaXNEb2VzTm90OiAnZXhpc3QnfSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgW3t0d286ICd0d28nfSwgJ3ZhbHVlVHdvJ11dKSwgW3t0d2VudHk6ICd0d2VudHknfSwge2ZpZnR5OiAnZmlmdHknfV0pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55RGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwge3R3ZW50eTogJ3R3ZW50eSd9KTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFueURlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIFt7dHdlbnR5OiAndHdlbnR5J30sIHtmaWZ0eTogJ2ZpZnR5J31dKTtcbiAgICpcbiAgICogQG5hbWUgZG9lc05vdEhhdmVBbnlEZWVwS2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55RGVlcEtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuZG9lc05vdEhhdmVBbnlEZWVwS2V5cywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5hbnkuZGVlcC5rZXlzKGtleXMpO1xuICB9XG5cbiAvKipcbiAgICogIyMjIC5kb2VzTm90SGF2ZUFsbERlZXBLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIG5vdCBoYXZlIGF0IGxlYXN0IG9uZSBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBTaW5jZSBTZXRzIGFuZCBNYXBzIGNhbiBoYXZlIG9iamVjdHMgYXMga2V5cyB5b3UgY2FuIHVzZSB0aGlzIGFzc2VydGlvbiB0byBwZXJmb3JtXG4gICAqIGEgZGVlcCBjb21wYXJpc29uLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbERlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbMSwgMl1dKSwge3RoaXNEb2VzTm90OiAnZXhpc3QnfSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbGxEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgW3t0d286ICd0d28nfSwgJ3ZhbHVlVHdvJ11dKSwgW3t0d2VudHk6ICd0d2VudHknfSwge29uZTogJ29uZSd9XSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbGxEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCB7dHdlbnR5OiAndHdlbnR5J30pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsRGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwgW3tvbmU6ICdvbmUnfSwge2ZpZnR5OiAnZmlmdHknfV0pO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90SGF2ZUFsbERlZXBLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdEhhdmVBbGxEZWVwS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5kb2VzTm90SGF2ZUFsbERlZXBLZXlzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLmFsbC5kZWVwLmtleXMoa2V5cyk7XG4gIH1cblxuIC8qKlxuICAgKiAjIyMgLnRocm93cyhmbiwgW2Vycm9yTGlrZS9zdHJpbmcvcmVnZXhwXSwgW3N0cmluZy9yZWdleHBdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIElmIGBlcnJvckxpa2VgIGlzIGFuIGBFcnJvcmAgY29uc3RydWN0b3IsIGFzc2VydHMgdGhhdCBgZm5gIHdpbGwgdGhyb3cgYW4gZXJyb3IgdGhhdCBpcyBhblxuICAgKiBpbnN0YW5jZSBvZiBgZXJyb3JMaWtlYC5cbiAgICogSWYgYGVycm9yTGlrZWAgaXMgYW4gYEVycm9yYCBpbnN0YW5jZSwgYXNzZXJ0cyB0aGF0IHRoZSBlcnJvciB0aHJvd24gaXMgdGhlIHNhbWVcbiAgICogaW5zdGFuY2UgYXMgYGVycm9yTGlrZWAuXG4gICAqIElmIGBlcnJNc2dNYXRjaGVyYCBpcyBwcm92aWRlZCwgaXQgYWxzbyBhc3NlcnRzIHRoYXQgdGhlIGVycm9yIHRocm93biB3aWxsIGhhdmUgYVxuICAgKiBtZXNzYWdlIG1hdGNoaW5nIGBlcnJNc2dNYXRjaGVyYC5cbiAgICpcbiAgICogICAgIGFzc2VydC50aHJvd3MoZm4sICdFcnJvciB0aHJvd24gbXVzdCBoYXZlIHRoaXMgbXNnJyk7XG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCAvRXJyb3IgdGhyb3duIG11c3QgaGF2ZSBhIG1zZyB0aGF0IG1hdGNoZXMgdGhpcy8pO1xuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgUmVmZXJlbmNlRXJyb3IpO1xuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgZXJyb3JJbnN0YW5jZSk7XG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCBSZWZlcmVuY2VFcnJvciwgJ0Vycm9yIHRocm93biBtdXN0IGJlIGEgUmVmZXJlbmNlRXJyb3IgYW5kIGhhdmUgdGhpcyBtc2cnKTtcbiAgICogICAgIGFzc2VydC50aHJvd3MoZm4sIGVycm9ySW5zdGFuY2UsICdFcnJvciB0aHJvd24gbXVzdCBiZSB0aGUgc2FtZSBlcnJvckluc3RhbmNlIGFuZCBoYXZlIHRoaXMgbXNnJyk7XG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCBSZWZlcmVuY2VFcnJvciwgL0Vycm9yIHRocm93biBtdXN0IGJlIGEgUmVmZXJlbmNlRXJyb3IgYW5kIG1hdGNoIHRoaXMvKTtcbiAgICogICAgIGFzc2VydC50aHJvd3MoZm4sIGVycm9ySW5zdGFuY2UsIC9FcnJvciB0aHJvd24gbXVzdCBiZSB0aGUgc2FtZSBlcnJvckluc3RhbmNlIGFuZCBtYXRjaCB0aGlzLyk7XG4gICAqXG4gICAqIEBuYW1lIHRocm93c1xuICAgKiBAYWxpYXMgdGhyb3dcbiAgICogQGFsaWFzIFRocm93XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gICAqIEBwYXJhbSB7RXJyb3JDb25zdHJ1Y3RvcnxFcnJvcn0gZXJyb3JMaWtlXG4gICAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ30gZXJyTXNnTWF0Y2hlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Vycm9yI0Vycm9yX3R5cGVzXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC50aHJvd3MgPSBmdW5jdGlvbiAoZm4sIGVycm9yTGlrZSwgZXJyTXNnTWF0Y2hlciwgbXNnKSB7XG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgZXJyb3JMaWtlIHx8IGVycm9yTGlrZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgZXJyTXNnTWF0Y2hlciA9IGVycm9yTGlrZTtcbiAgICAgIGVycm9yTGlrZSA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGFzc2VydEVyciA9IG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LnRocm93cywgdHJ1ZSlcbiAgICAgIC50by50aHJvdyhlcnJvckxpa2UsIGVyck1zZ01hdGNoZXIpO1xuICAgIHJldHVybiBmbGFnKGFzc2VydEVyciwgJ29iamVjdCcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3RUaHJvdyhmbiwgW2Vycm9yTGlrZS9zdHJpbmcvcmVnZXhwXSwgW3N0cmluZy9yZWdleHBdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIElmIGBlcnJvckxpa2VgIGlzIGFuIGBFcnJvcmAgY29uc3RydWN0b3IsIGFzc2VydHMgdGhhdCBgZm5gIHdpbGwgX25vdF8gdGhyb3cgYW4gZXJyb3IgdGhhdCBpcyBhblxuICAgKiBpbnN0YW5jZSBvZiBgZXJyb3JMaWtlYC5cbiAgICogSWYgYGVycm9yTGlrZWAgaXMgYW4gYEVycm9yYCBpbnN0YW5jZSwgYXNzZXJ0cyB0aGF0IHRoZSBlcnJvciB0aHJvd24gaXMgX25vdF8gdGhlIHNhbWVcbiAgICogaW5zdGFuY2UgYXMgYGVycm9yTGlrZWAuXG4gICAqIElmIGBlcnJNc2dNYXRjaGVyYCBpcyBwcm92aWRlZCwgaXQgYWxzbyBhc3NlcnRzIHRoYXQgdGhlIGVycm9yIHRocm93biB3aWxsIF9ub3RfIGhhdmUgYVxuICAgKiBtZXNzYWdlIG1hdGNoaW5nIGBlcnJNc2dNYXRjaGVyYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sICdBbnkgRXJyb3IgdGhyb3duIG11c3Qgbm90IGhhdmUgdGhpcyBtZXNzYWdlJyk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCAvQW55IEVycm9yIHRocm93biBtdXN0IG5vdCBtYXRjaCB0aGlzLyk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCBFcnJvcik7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCBlcnJvckluc3RhbmNlKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIEVycm9yLCAnRXJyb3IgbXVzdCBub3QgaGF2ZSB0aGlzIG1lc3NhZ2UnKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIGVycm9ySW5zdGFuY2UsICdFcnJvciBtdXN0IG5vdCBoYXZlIHRoaXMgbWVzc2FnZScpO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RUaHJvdyhmbiwgRXJyb3IsIC9FcnJvciBtdXN0IG5vdCBtYXRjaCB0aGlzLyk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCBlcnJvckluc3RhbmNlLCAvRXJyb3IgbXVzdCBub3QgbWF0Y2ggdGhpcy8pO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90VGhyb3dcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICogQHBhcmFtIHtFcnJvckNvbnN0cnVjdG9yfSBlcnJvckxpa2VcbiAgICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBlcnJNc2dNYXRjaGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjRXJyb3JfdHlwZXNcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3RUaHJvdyA9IGZ1bmN0aW9uIChmbiwgZXJyb3JMaWtlLCBlcnJNc2dNYXRjaGVyLCBtc2cpIHtcbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBlcnJvckxpa2UgfHwgZXJyb3JMaWtlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBlcnJNc2dNYXRjaGVyID0gZXJyb3JMaWtlO1xuICAgICAgZXJyb3JMaWtlID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kb2VzTm90VGhyb3csIHRydWUpXG4gICAgICAudG8ubm90LnRocm93KGVycm9yTGlrZSwgZXJyTXNnTWF0Y2hlcik7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAub3BlcmF0b3IodmFsMSwgb3BlcmF0b3IsIHZhbDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQ29tcGFyZXMgdHdvIHZhbHVlcyB1c2luZyBgb3BlcmF0b3JgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm9wZXJhdG9yKDEsICc8JywgMiwgJ2V2ZXJ5dGhpbmcgaXMgb2snKTtcbiAgICogICAgIGFzc2VydC5vcGVyYXRvcigxLCAnPicsIDIsICd0aGlzIHdpbGwgZmFpbCcpO1xuICAgKlxuICAgKiBAbmFtZSBvcGVyYXRvclxuICAgKiBAcGFyYW0ge01peGVkfSB2YWwxXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcGVyYXRvclxuICAgKiBAcGFyYW0ge01peGVkfSB2YWwyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5vcGVyYXRvciA9IGZ1bmN0aW9uICh2YWwsIG9wZXJhdG9yLCB2YWwyLCBtc2cpIHtcbiAgICB2YXIgb2s7XG4gICAgc3dpdGNoKG9wZXJhdG9yKSB7XG4gICAgICBjYXNlICc9PSc6XG4gICAgICAgIG9rID0gdmFsID09IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnPT09JzpcbiAgICAgICAgb2sgPSB2YWwgPT09IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnPic6XG4gICAgICAgIG9rID0gdmFsID4gdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc+PSc6XG4gICAgICAgIG9rID0gdmFsID49IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnPCc6XG4gICAgICAgIG9rID0gdmFsIDwgdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc8PSc6XG4gICAgICAgIG9rID0gdmFsIDw9IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnIT0nOlxuICAgICAgICBvayA9IHZhbCAhPSB2YWwyO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyE9PSc6XG4gICAgICAgIG9rID0gdmFsICE9PSB2YWwyO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG1zZyA9IG1zZyA/IG1zZyArICc6ICcgOiBtc2c7XG4gICAgICAgIHRocm93IG5ldyBjaGFpLkFzc2VydGlvbkVycm9yKFxuICAgICAgICAgIG1zZyArICdJbnZhbGlkIG9wZXJhdG9yIFwiJyArIG9wZXJhdG9yICsgJ1wiJyxcbiAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgYXNzZXJ0Lm9wZXJhdG9yXG4gICAgICAgICk7XG4gICAgfVxuICAgIHZhciB0ZXN0ID0gbmV3IEFzc2VydGlvbihvaywgbXNnLCBhc3NlcnQub3BlcmF0b3IsIHRydWUpO1xuICAgIHRlc3QuYXNzZXJ0KFxuICAgICAgICB0cnVlID09PSBmbGFnKHRlc3QsICdvYmplY3QnKVxuICAgICAgLCAnZXhwZWN0ZWQgJyArIHV0aWwuaW5zcGVjdCh2YWwpICsgJyB0byBiZSAnICsgb3BlcmF0b3IgKyAnICcgKyB1dGlsLmluc3BlY3QodmFsMilcbiAgICAgICwgJ2V4cGVjdGVkICcgKyB1dGlsLmluc3BlY3QodmFsKSArICcgdG8gbm90IGJlICcgKyBvcGVyYXRvciArICcgJyArIHV0aWwuaW5zcGVjdCh2YWwyKSApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmNsb3NlVG8oYWN0dWFsLCBleHBlY3RlZCwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgYGV4cGVjdGVkYCwgdG8gd2l0aGluIGEgKy8tIGBkZWx0YWAgcmFuZ2UuXG4gICAqXG4gICAqICAgICBhc3NlcnQuY2xvc2VUbygxLjUsIDEsIDAuNSwgJ251bWJlcnMgYXJlIGNsb3NlJyk7XG4gICAqXG4gICAqIEBuYW1lIGNsb3NlVG9cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGFjdHVhbFxuICAgKiBAcGFyYW0ge051bWJlcn0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5jbG9zZVRvID0gZnVuY3Rpb24gKGFjdCwgZXhwLCBkZWx0YSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0LmNsb3NlVG8sIHRydWUpLnRvLmJlLmNsb3NlVG8oZXhwLCBkZWx0YSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuYXBwcm94aW1hdGVseShhY3R1YWwsIGV4cGVjdGVkLCBkZWx0YSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCBgZXhwZWN0ZWRgLCB0byB3aXRoaW4gYSArLy0gYGRlbHRhYCByYW5nZS5cbiAgICpcbiAgICogICAgIGFzc2VydC5hcHByb3hpbWF0ZWx5KDEuNSwgMSwgMC41LCAnbnVtYmVycyBhcmUgY2xvc2UnKTtcbiAgICpcbiAgICogQG5hbWUgYXBwcm94aW1hdGVseVxuICAgKiBAcGFyYW0ge051bWJlcn0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVsdGFcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmFwcHJveGltYXRlbHkgPSBmdW5jdGlvbiAoYWN0LCBleHAsIGRlbHRhLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQuYXBwcm94aW1hdGVseSwgdHJ1ZSlcbiAgICAgIC50by5iZS5hcHByb3hpbWF0ZWx5KGV4cCwgZGVsdGEpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLnNhbWVNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiBhbnkgb3JkZXIuIFVzZXMgYVxuICAgKiBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQuc2FtZU1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgMiwgMSwgMyBdLCAnc2FtZSBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIHNhbWVNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuc2FtZU1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5zYW1lTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5oYXZlLnNhbWUubWVtYmVycyhzZXQyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFNhbWVNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGRvbid0IGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiBhbnkgb3JkZXIuXG4gICAqIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90U2FtZU1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgNSwgMSwgMyBdLCAnbm90IHNhbWUgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBub3RTYW1lTWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQxXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFNhbWVNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQubm90U2FtZU1lbWJlcnMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuc2FtZS5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuc2FtZURlZXBNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiBhbnkgb3JkZXIuIFVzZXMgYVxuICAgKiBkZWVwIGVxdWFsaXR5IGNoZWNrLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnNhbWVEZWVwTWVtYmVycyhbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyBjOiAzIH0gXSwgW3sgYjogMiB9LCB7IGE6IDEgfSwgeyBjOiAzIH1dLCAnc2FtZSBkZWVwIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgc2FtZURlZXBNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuc2FtZURlZXBNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQuc2FtZURlZXBNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuc2FtZS5kZWVwLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RTYW1lRGVlcE1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgZG9uJ3QgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIGFueSBvcmRlci5cbiAgICogVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90U2FtZURlZXBNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbeyBiOiAyIH0sIHsgYTogMSB9LCB7IGY6IDUgfV0sICdub3Qgc2FtZSBkZWVwIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90U2FtZURlZXBNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90U2FtZURlZXBNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQubm90U2FtZURlZXBNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLnNhbWUuZGVlcC5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuc2FtZU9yZGVyZWRNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICogVXNlcyBhIHN0cmljdCBlcXVhbGl0eSBjaGVjayAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5zYW1lT3JkZXJlZE1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgMSwgMiwgMyBdLCAnc2FtZSBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgc2FtZU9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuc2FtZU9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQuc2FtZU9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuc2FtZS5vcmRlcmVkLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RTYW1lT3JkZXJlZE1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgZG9uJ3QgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIHRoZSBzYW1lXG4gICAqIG9yZGVyLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdFNhbWVPcmRlcmVkTWVtYmVycyhbIDEsIDIsIDMgXSwgWyAyLCAxLCAzIF0sICdub3Qgc2FtZSBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90U2FtZU9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90U2FtZU9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQubm90U2FtZU9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLnNhbWUub3JkZXJlZC5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuc2FtZURlZXBPcmRlcmVkTWVtYmVycyhzZXQxLCBzZXQyLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc2V0MWAgYW5kIGBzZXQyYCBoYXZlIHRoZSBzYW1lIG1lbWJlcnMgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAqIFVzZXMgYSBkZWVwIGVxdWFsaXR5IGNoZWNrLlxuICAgKlxuICAgKiBhc3NlcnQuc2FtZURlZXBPcmRlcmVkTWVtYmVycyhbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyBjOiAzIH0gXSwgWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sICdzYW1lIGRlZXAgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIHNhbWVEZWVwT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5zYW1lRGVlcE9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQuc2FtZURlZXBPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5oYXZlLnNhbWUuZGVlcC5vcmRlcmVkLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGRvbid0IGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiB0aGUgc2FtZVxuICAgKiBvcmRlci4gVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqXG4gICAqIGFzc2VydC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyB6OiA1IH0gXSwgJ25vdCBzYW1lIGRlZXAgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqIGFzc2VydC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYjogMiB9LCB7IGE6IDEgfSwgeyBjOiAzIH0gXSwgJ25vdCBzYW1lIGRlZXAgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdFNhbWVEZWVwT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQubm90U2FtZURlZXBPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5zYW1lLmRlZXAub3JkZXJlZC5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jbHVkZU1lbWJlcnMoc3VwZXJzZXQsIHN1YnNldCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHN1YnNldGAgaXMgaW5jbHVkZWQgaW4gYHN1cGVyc2V0YCBpbiBhbnkgb3JkZXIuIFVzZXMgYVxuICAgKiBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuIER1cGxpY2F0ZXMgYXJlIGlnbm9yZWQuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaW5jbHVkZU1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgMiwgMSwgMiBdLCAnaW5jbHVkZSBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIGluY2x1ZGVNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jbHVkZU1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQuaW5jbHVkZU1lbWJlcnMsIHRydWUpXG4gICAgICAudG8uaW5jbHVkZS5tZW1iZXJzKHN1YnNldCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RJbmNsdWRlTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpc24ndCBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIGFueSBvcmRlci4gVXNlcyBhXG4gICAqIHN0cmljdCBlcXVhbGl0eSBjaGVjayAoPT09KS4gRHVwbGljYXRlcyBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlTWVtYmVycyhbIDEsIDIsIDMgXSwgWyA1LCAxIF0sICdub3QgaW5jbHVkZSBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdEluY2x1ZGVNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5jbHVkZU1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQubm90SW5jbHVkZU1lbWJlcnMsIHRydWUpXG4gICAgICAudG8ubm90LmluY2x1ZGUubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jbHVkZURlZXBNZW1iZXJzKHN1cGVyc2V0LCBzdWJzZXQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzdWJzZXRgIGlzIGluY2x1ZGVkIGluIGBzdXBlcnNldGAgaW4gYW55IG9yZGVyLiBVc2VzIGEgZGVlcFxuICAgKiBlcXVhbGl0eSBjaGVjay4gRHVwbGljYXRlcyBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pbmNsdWRlRGVlcE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBiOiAyIH0sIHsgYTogMSB9LCB7IGI6IDIgfSBdLCAnaW5jbHVkZSBkZWVwIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgaW5jbHVkZURlZXBNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jbHVkZURlZXBNZW1iZXJzID0gZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc3VwZXJzZXQsIG1zZywgYXNzZXJ0LmluY2x1ZGVEZWVwTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5pbmNsdWRlLmRlZXAubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAubm90SW5jbHVkZURlZXBNZW1iZXJzKHN1cGVyc2V0LCBzdWJzZXQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzdWJzZXRgIGlzbid0IGluY2x1ZGVkIGluIGBzdXBlcnNldGAgaW4gYW55IG9yZGVyLiBVc2VzIGFcbiAgICogZGVlcCBlcXVhbGl0eSBjaGVjay4gRHVwbGljYXRlcyBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlRGVlcE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBiOiAyIH0sIHsgZjogNSB9IF0sICdub3QgaW5jbHVkZSBkZWVwIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZURlZXBNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5jbHVkZURlZXBNZW1iZXJzID0gZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc3VwZXJzZXQsIG1zZywgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jbHVkZS5kZWVwLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmluY2x1ZGVPcmRlcmVkTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpcyBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIHRoZSBzYW1lIG9yZGVyXG4gICAqIGJlZ2lubmluZyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50IGluIGBzdXBlcnNldGAuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHlcbiAgICogY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaW5jbHVkZU9yZGVyZWRNZW1iZXJzKFsgMSwgMiwgMyBdLCBbIDEsIDIgXSwgJ2luY2x1ZGUgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIGluY2x1ZGVPcmRlcmVkTWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzdXBlcnNldFxuICAgKiBAcGFyYW0ge0FycmF5fSBzdWJzZXRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmluY2x1ZGVPcmRlcmVkTWVtYmVycyA9IGZ1bmN0aW9uIChzdXBlcnNldCwgc3Vic2V0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1cGVyc2V0LCBtc2csIGFzc2VydC5pbmNsdWRlT3JkZXJlZE1lbWJlcnMsIHRydWUpXG4gICAgICAudG8uaW5jbHVkZS5vcmRlcmVkLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdEluY2x1ZGVPcmRlcmVkTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpc24ndCBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIHRoZSBzYW1lIG9yZGVyXG4gICAqIGJlZ2lubmluZyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50IGluIGBzdXBlcnNldGAuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHlcbiAgICogY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzKFsgMSwgMiwgMyBdLCBbIDIsIDEgXSwgJ25vdCBpbmNsdWRlIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGVPcmRlcmVkTWVtYmVycyhbIDEsIDIsIDMgXSwgWyAyLCAzIF0sICdub3QgaW5jbHVkZSBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc3VwZXJzZXQsIG1zZywgYXNzZXJ0Lm5vdEluY2x1ZGVPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jbHVkZS5vcmRlcmVkLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoc3VwZXJzZXQsIHN1YnNldCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHN1YnNldGAgaXMgaW5jbHVkZWQgaW4gYHN1cGVyc2V0YCBpbiB0aGUgc2FtZSBvcmRlclxuICAgKiBiZWdpbm5pbmcgd2l0aCB0aGUgZmlyc3QgZWxlbWVudCBpbiBgc3VwZXJzZXRgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eVxuICAgKiBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5pbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYTogMSB9LCB7IGI6IDIgfSBdLCAnaW5jbHVkZSBkZWVwIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBpbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycyA9IGZ1bmN0aW9uIChzdXBlcnNldCwgc3Vic2V0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1cGVyc2V0LCBtc2csIGFzc2VydC5pbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmluY2x1ZGUuZGVlcC5vcmRlcmVkLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdEluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoc3VwZXJzZXQsIHN1YnNldCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHN1YnNldGAgaXNuJ3QgaW5jbHVkZWQgaW4gYHN1cGVyc2V0YCBpbiB0aGUgc2FtZSBvcmRlclxuICAgKiBiZWdpbm5pbmcgd2l0aCB0aGUgZmlyc3QgZWxlbWVudCBpbiBgc3VwZXJzZXRgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eVxuICAgKiBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYTogMSB9LCB7IGY6IDUgfSBdLCAnbm90IGluY2x1ZGUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYjogMiB9LCB7IGE6IDEgfSBdLCAnbm90IGluY2x1ZGUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYjogMiB9LCB7IGM6IDMgfSBdLCAnbm90IGluY2x1ZGUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZURlZXBPcmRlcmVkTWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzdXBlcnNldFxuICAgKiBAcGFyYW0ge0FycmF5fSBzdWJzZXRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQubm90SW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jbHVkZS5kZWVwLm9yZGVyZWQubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAub25lT2YoaW5MaXN0LCBsaXN0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBub24tb2JqZWN0LCBub24tYXJyYXkgdmFsdWUgYGluTGlzdGAgYXBwZWFycyBpbiB0aGUgZmxhdCBhcnJheSBgbGlzdGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQub25lT2YoMSwgWyAyLCAxIF0sICdOb3QgZm91bmQgaW4gbGlzdCcpO1xuICAgKlxuICAgKiBAbmFtZSBvbmVPZlxuICAgKiBAcGFyYW0geyp9IGluTGlzdFxuICAgKiBAcGFyYW0ge0FycmF5PCo+fSBsaXN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5vbmVPZiA9IGZ1bmN0aW9uIChpbkxpc3QsIGxpc3QsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oaW5MaXN0LCBtc2csIGFzc2VydC5vbmVPZiwgdHJ1ZSkudG8uYmUub25lT2YobGlzdCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5jaGFuZ2VzKGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGNoYW5nZXMgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCA9IDIyIH07XG4gICAqICAgICBhc3NlcnQuY2hhbmdlcyhmbiwgb2JqLCAndmFsJyk7XG4gICAqXG4gICAqIEBuYW1lIGNoYW5nZXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5jaGFuZ2VzID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1zZyA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5jaGFuZ2VzLCB0cnVlKS50by5jaGFuZ2Uob2JqLCBwcm9wKTtcbiAgfVxuXG4gICAvKipcbiAgICogIyMjIC5jaGFuZ2VzQnkoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIGRlbHRhLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGNoYW5nZXMgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgYnkgYW4gYW1vdW50IChkZWx0YSkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCArPSAyIH07XG4gICAqICAgICBhc3NlcnQuY2hhbmdlc0J5KGZuLCBvYmosICd2YWwnLCAyKTtcbiAgICpcbiAgICogQG5hbWUgY2hhbmdlc0J5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYW5nZSBhbW91bnQgKGRlbHRhKVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5jaGFuZ2VzQnkgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgZGVsdGEsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0bXBNc2cgPSBkZWx0YTtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIG1zZyA9IHRtcE1zZztcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmNoYW5nZXNCeSwgdHJ1ZSlcbiAgICAgIC50by5jaGFuZ2Uob2JqLCBwcm9wKS5ieShkZWx0YSk7XG4gIH1cblxuICAgLyoqXG4gICAqICMjIyAuZG9lc05vdENoYW5nZShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgY29uc29sZS5sb2coJ2ZvbycpOyB9O1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RDaGFuZ2UoZm4sIG9iaiwgJ3ZhbCcpO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90Q2hhbmdlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdENoYW5nZSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtc2cgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRvZXNOb3RDaGFuZ2UsIHRydWUpXG4gICAgICAudG8ubm90LmNoYW5nZShvYmosIHByb3ApO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuY2hhbmdlc0J1dE5vdEJ5KGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBkZWx0YSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgb3Igb2YgYSBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKVxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgKz0gMTAgfTtcbiAgICogICAgIGFzc2VydC5jaGFuZ2VzQnV0Tm90QnkoZm4sIG9iaiwgJ3ZhbCcsIDUpO1xuICAgKlxuICAgKiBAbmFtZSBjaGFuZ2VzQnV0Tm90QnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmNoYW5nZXNCdXROb3RCeSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBkZWx0YSwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHRtcE1zZyA9IGRlbHRhO1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgbXNnID0gdG1wTXNnO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuY2hhbmdlc0J1dE5vdEJ5LCB0cnVlKVxuICAgICAgLnRvLmNoYW5nZShvYmosIHByb3ApLmJ1dC5ub3QuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jcmVhc2VzKGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGluY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5LlxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSAxMyB9O1xuICAgKiAgICAgYXNzZXJ0LmluY3JlYXNlcyhmbiwgb2JqLCAndmFsJyk7XG4gICAqXG4gICAqIEBuYW1lIGluY3JlYXNlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmluY3JlYXNlcyA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtc2cgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmluY3JlYXNlcywgdHJ1ZSlcbiAgICAgIC50by5pbmNyZWFzZShvYmosIHByb3ApO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jcmVhc2VzQnkoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIGRlbHRhLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGluY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5IG9yIGEgZnVuY3Rpb24ncyByZXR1cm4gdmFsdWUgYnkgYW4gYW1vdW50IChkZWx0YSkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCArPSAxMCB9O1xuICAgKiAgICAgYXNzZXJ0LmluY3JlYXNlc0J5KGZuLCBvYmosICd2YWwnLCAxMCk7XG4gICAqXG4gICAqIEBuYW1lIGluY3JlYXNlc0J5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYW5nZSBhbW91bnQgKGRlbHRhKVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbmNyZWFzZXNCeSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBkZWx0YSwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHRtcE1zZyA9IGRlbHRhO1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgbXNnID0gdG1wTXNnO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuaW5jcmVhc2VzQnksIHRydWUpXG4gICAgICAudG8uaW5jcmVhc2Uob2JqLCBwcm9wKS5ieShkZWx0YSk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kb2VzTm90SW5jcmVhc2UoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZG9lcyBub3QgaW5jcmVhc2UgYSBudW1lcmljIG9iamVjdCBwcm9wZXJ0eS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsID0gOCB9O1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RJbmNyZWFzZShmbiwgb2JqLCAndmFsJyk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RJbmNyZWFzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3RJbmNyZWFzZSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtc2cgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRvZXNOb3RJbmNyZWFzZSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jcmVhc2Uob2JqLCBwcm9wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmluY3JlYXNlc0J1dE5vdEJ5KGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRvZXMgbm90IGluY3JlYXNlIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkgb3IgZnVuY3Rpb24ncyByZXR1cm4gdmFsdWUgYnkgYW4gYW1vdW50IChkZWx0YSkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCA9IDE1IH07XG4gICAqICAgICBhc3NlcnQuaW5jcmVhc2VzQnV0Tm90QnkoZm4sIG9iaiwgJ3ZhbCcsIDEwKTtcbiAgICpcbiAgICogQG5hbWUgaW5jcmVhc2VzQnV0Tm90QnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmluY3JlYXNlc0J1dE5vdEJ5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5pbmNyZWFzZXNCdXROb3RCeSwgdHJ1ZSlcbiAgICAgIC50by5pbmNyZWFzZShvYmosIHByb3ApLmJ1dC5ub3QuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuZGVjcmVhc2VzKGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRlY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5LlxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSA1IH07XG4gICAqICAgICBhc3NlcnQuZGVjcmVhc2VzKGZuLCBvYmosICd2YWwnKTtcbiAgICpcbiAgICogQG5hbWUgZGVjcmVhc2VzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVjcmVhc2VzID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1zZyA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuZGVjcmVhc2VzLCB0cnVlKVxuICAgICAgLnRvLmRlY3JlYXNlKG9iaiwgcHJvcCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kZWNyZWFzZXNCeShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZGVjcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkgb3IgYSBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKVxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgLT0gNSB9O1xuICAgKiAgICAgYXNzZXJ0LmRlY3JlYXNlc0J5KGZuLCBvYmosICd2YWwnLCA1KTtcbiAgICpcbiAgICogQG5hbWUgZGVjcmVhc2VzQnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlY3JlYXNlc0J5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kZWNyZWFzZXNCeSwgdHJ1ZSlcbiAgICAgIC50by5kZWNyZWFzZShvYmosIHByb3ApLmJ5KGRlbHRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3REZWNyZWFzZShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkb2VzIG5vdCBkZWNyZWFzZXMgYSBudW1lcmljIG9iamVjdCBwcm9wZXJ0eS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsID0gMTUgfTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90RGVjcmVhc2UoZm4sIG9iaiwgJ3ZhbCcpO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90RGVjcmVhc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kb2VzTm90RGVjcmVhc2UgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbXNnID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kb2VzTm90RGVjcmVhc2UsIHRydWUpXG4gICAgICAudG8ubm90LmRlY3JlYXNlKG9iaiwgcHJvcCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kb2VzTm90RGVjcmVhc2VCeShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZG9lcyBub3QgZGVjcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkgb3IgYSBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKVxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSA1IH07XG4gICAqICAgICBhc3NlcnQuZG9lc05vdERlY3JlYXNlQnkoZm4sIG9iaiwgJ3ZhbCcsIDEpO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90RGVjcmVhc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3REZWNyZWFzZUJ5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuZG9lc05vdERlY3JlYXNlQnksIHRydWUpXG4gICAgICAudG8ubm90LmRlY3JlYXNlKG9iaiwgcHJvcCkuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuZGVjcmVhc2VzQnV0Tm90QnkoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIGRlbHRhLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRvZXMgbm90IGRlY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5IG9yIGEgZnVuY3Rpb24ncyByZXR1cm4gdmFsdWUgYnkgYW4gYW1vdW50IChkZWx0YSlcbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsID0gNSB9O1xuICAgKiAgICAgYXNzZXJ0LmRlY3JlYXNlc0J1dE5vdEJ5KGZuLCBvYmosICd2YWwnLCAxKTtcbiAgICpcbiAgICogQG5hbWUgZGVjcmVhc2VzQnV0Tm90QnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlY3JlYXNlc0J1dE5vdEJ5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kZWNyZWFzZXNCdXROb3RCeSwgdHJ1ZSlcbiAgICAgIC50by5kZWNyZWFzZShvYmosIHByb3ApLmJ1dC5ub3QuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyohXG4gICAqICMjIyAuaWZFcnJvcihvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgaWYgdmFsdWUgaXMgbm90IGEgZmFsc2UgdmFsdWUsIGFuZCB0aHJvd3MgaWYgaXQgaXMgYSB0cnVlIHZhbHVlLlxuICAgKiBUaGlzIGlzIGFkZGVkIHRvIGFsbG93IGZvciBjaGFpIHRvIGJlIGEgZHJvcC1pbiByZXBsYWNlbWVudCBmb3IgTm9kZSdzXG4gICAqIGFzc2VydCBjbGFzcy5cbiAgICpcbiAgICogICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0kgYW0gYSBjdXN0b20gZXJyb3InKTtcbiAgICogICAgIGFzc2VydC5pZkVycm9yKGVycik7IC8vIFJldGhyb3dzIGVyciFcbiAgICpcbiAgICogQG5hbWUgaWZFcnJvclxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pZkVycm9yID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRocm93KHZhbCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzRXh0ZW5zaWJsZShvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBleHRlbnNpYmxlIChjYW4gaGF2ZSBuZXcgcHJvcGVydGllcyBhZGRlZCB0byBpdCkuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNFeHRlbnNpYmxlKHt9KTtcbiAgICpcbiAgICogQG5hbWUgaXNFeHRlbnNpYmxlXG4gICAqIEBhbGlhcyBleHRlbnNpYmxlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNFeHRlbnNpYmxlID0gZnVuY3Rpb24gKG9iaiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmlzRXh0ZW5zaWJsZSwgdHJ1ZSkudG8uYmUuZXh0ZW5zaWJsZTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdEV4dGVuc2libGUob2JqZWN0KVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaXMgX25vdF8gZXh0ZW5zaWJsZS5cbiAgICpcbiAgICogICAgIHZhciBub25FeHRlbnNpYmxlT2JqZWN0ID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KTtcbiAgICogICAgIHZhciBzZWFsZWRPYmplY3QgPSBPYmplY3Quc2VhbCh7fSk7XG4gICAqICAgICB2YXIgZnJvemVuT2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOb3RFeHRlbnNpYmxlKG5vbkV4dGVuc2libGVPYmplY3QpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90RXh0ZW5zaWJsZShzZWFsZWRPYmplY3QpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90RXh0ZW5zaWJsZShmcm96ZW5PYmplY3QpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEV4dGVuc2libGVcbiAgICogQGFsaWFzIG5vdEV4dGVuc2libGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEV4dGVuc2libGUgPSBmdW5jdGlvbiAob2JqLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaXNOb3RFeHRlbnNpYmxlLCB0cnVlKS50by5ub3QuYmUuZXh0ZW5zaWJsZTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc1NlYWxlZChvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBzZWFsZWQgKGNhbm5vdCBoYXZlIG5ldyBwcm9wZXJ0aWVzIGFkZGVkIHRvIGl0XG4gICAqIGFuZCBpdHMgZXhpc3RpbmcgcHJvcGVydGllcyBjYW5ub3QgYmUgcmVtb3ZlZCkuXG4gICAqXG4gICAqICAgICB2YXIgc2VhbGVkT2JqZWN0ID0gT2JqZWN0LnNlYWwoe30pO1xuICAgKiAgICAgdmFyIGZyb3plbk9iamVjdCA9IE9iamVjdC5zZWFsKHt9KTtcbiAgICpcbiAgICogICAgIGFzc2VydC5pc1NlYWxlZChzZWFsZWRPYmplY3QpO1xuICAgKiAgICAgYXNzZXJ0LmlzU2VhbGVkKGZyb3plbk9iamVjdCk7XG4gICAqXG4gICAqIEBuYW1lIGlzU2VhbGVkXG4gICAqIEBhbGlhcyBzZWFsZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc1NlYWxlZCA9IGZ1bmN0aW9uIChvYmosIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5pc1NlYWxlZCwgdHJ1ZSkudG8uYmUuc2VhbGVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90U2VhbGVkKG9iamVjdClcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIF9ub3RfIHNlYWxlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdFNlYWxlZCh7fSk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90U2VhbGVkXG4gICAqIEBhbGlhcyBub3RTZWFsZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdFNlYWxlZCA9IGZ1bmN0aW9uIChvYmosIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5pc05vdFNlYWxlZCwgdHJ1ZSkudG8ubm90LmJlLnNlYWxlZDtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc0Zyb3plbihvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBmcm96ZW4gKGNhbm5vdCBoYXZlIG5ldyBwcm9wZXJ0aWVzIGFkZGVkIHRvIGl0XG4gICAqIGFuZCBpdHMgZXhpc3RpbmcgcHJvcGVydGllcyBjYW5ub3QgYmUgbW9kaWZpZWQpLlxuICAgKlxuICAgKiAgICAgdmFyIGZyb3plbk9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuICAgKiAgICAgYXNzZXJ0LmZyb3plbihmcm96ZW5PYmplY3QpO1xuICAgKlxuICAgKiBAbmFtZSBpc0Zyb3plblxuICAgKiBAYWxpYXMgZnJvemVuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNGcm96ZW4gPSBmdW5jdGlvbiAob2JqLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaXNGcm96ZW4sIHRydWUpLnRvLmJlLmZyb3plbjtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdEZyb3plbihvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBfbm90XyBmcm96ZW4uXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOb3RGcm96ZW4oe30pO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEZyb3plblxuICAgKiBAYWxpYXMgbm90RnJvemVuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RGcm96ZW4gPSBmdW5jdGlvbiAob2JqLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaXNOb3RGcm96ZW4sIHRydWUpLnRvLm5vdC5iZS5mcm96ZW47XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNFbXB0eSh0YXJnZXQpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGRvZXMgbm90IGNvbnRhaW4gYW55IHZhbHVlcy5cbiAgICogRm9yIGFycmF5cyBhbmQgc3RyaW5ncywgaXQgY2hlY2tzIHRoZSBgbGVuZ3RoYCBwcm9wZXJ0eS5cbiAgICogRm9yIGBNYXBgIGFuZCBgU2V0YCBpbnN0YW5jZXMsIGl0IGNoZWNrcyB0aGUgYHNpemVgIHByb3BlcnR5LlxuICAgKiBGb3Igbm9uLWZ1bmN0aW9uIG9iamVjdHMsIGl0IGdldHMgdGhlIGNvdW50IG9mIG93blxuICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzRW1wdHkoW10pO1xuICAgKiAgICAgYXNzZXJ0LmlzRW1wdHkoJycpO1xuICAgKiAgICAgYXNzZXJ0LmlzRW1wdHkobmV3IE1hcCk7XG4gICAqICAgICBhc3NlcnQuaXNFbXB0eSh7fSk7XG4gICAqXG4gICAqIEBuYW1lIGlzRW1wdHlcbiAgICogQGFsaWFzIGVtcHR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fFN0cmluZ3xNYXB8U2V0fSB0YXJnZXRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzRW1wdHksIHRydWUpLnRvLmJlLmVtcHR5O1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90RW1wdHkodGFyZ2V0KVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBjb250YWlucyB2YWx1ZXMuXG4gICAqIEZvciBhcnJheXMgYW5kIHN0cmluZ3MsIGl0IGNoZWNrcyB0aGUgYGxlbmd0aGAgcHJvcGVydHkuXG4gICAqIEZvciBgTWFwYCBhbmQgYFNldGAgaW5zdGFuY2VzLCBpdCBjaGVja3MgdGhlIGBzaXplYCBwcm9wZXJ0eS5cbiAgICogRm9yIG5vbi1mdW5jdGlvbiBvYmplY3RzLCBpdCBnZXRzIHRoZSBjb3VudCBvZiBvd25cbiAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdEVtcHR5KFsxLCAyXSk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RFbXB0eSgnMzQnKTtcbiAgICogICAgIGFzc2VydC5pc05vdEVtcHR5KG5ldyBTZXQoWzUsIDZdKSk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RFbXB0eSh7IGtleTogNyB9KTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RFbXB0eVxuICAgKiBAYWxpYXMgbm90RW1wdHlcbiAgICogQHBhcmFtIHtPYmplY3R8QXJyYXl8U3RyaW5nfE1hcHxTZXR9IHRhcmdldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEVtcHR5ID0gZnVuY3Rpb24odmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RFbXB0eSwgdHJ1ZSkudG8ubm90LmJlLmVtcHR5O1xuICB9O1xuXG4gIC8qIVxuICAgKiBBbGlhc2VzLlxuICAgKi9cblxuICAoZnVuY3Rpb24gYWxpYXMobmFtZSwgYXMpe1xuICAgIGFzc2VydFthc10gPSBhc3NlcnRbbmFtZV07XG4gICAgcmV0dXJuIGFsaWFzO1xuICB9KVxuICAoJ2lzT2snLCAnb2snKVxuICAoJ2lzTm90T2snLCAnbm90T2snKVxuICAoJ3Rocm93cycsICd0aHJvdycpXG4gICgndGhyb3dzJywgJ1Rocm93JylcbiAgKCdpc0V4dGVuc2libGUnLCAnZXh0ZW5zaWJsZScpXG4gICgnaXNOb3RFeHRlbnNpYmxlJywgJ25vdEV4dGVuc2libGUnKVxuICAoJ2lzU2VhbGVkJywgJ3NlYWxlZCcpXG4gICgnaXNOb3RTZWFsZWQnLCAnbm90U2VhbGVkJylcbiAgKCdpc0Zyb3plbicsICdmcm96ZW4nKVxuICAoJ2lzTm90RnJvemVuJywgJ25vdEZyb3plbicpXG4gICgnaXNFbXB0eScsICdlbXB0eScpXG4gICgnaXNOb3RFbXB0eScsICdub3RFbXB0eScpO1xufTtcbiIsIi8qIVxuICogY2hhaVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNoYWksIHV0aWwpIHtcbiAgY2hhaS5leHBlY3QgPSBmdW5jdGlvbiAodmFsLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBjaGFpLkFzc2VydGlvbih2YWwsIG1lc3NhZ2UpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmZhaWwoW21lc3NhZ2VdKVxuICAgKiAjIyMgLmZhaWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdLCBbb3BlcmF0b3JdKVxuICAgKlxuICAgKiBUaHJvdyBhIGZhaWx1cmUuXG4gICAqXG4gICAqICAgICBleHBlY3QuZmFpbCgpO1xuICAgKiAgICAgZXhwZWN0LmZhaWwoXCJjdXN0b20gZXJyb3IgbWVzc2FnZVwiKTtcbiAgICogICAgIGV4cGVjdC5mYWlsKDEsIDIpO1xuICAgKiAgICAgZXhwZWN0LmZhaWwoMSwgMiwgXCJjdXN0b20gZXJyb3IgbWVzc2FnZVwiKTtcbiAgICogICAgIGV4cGVjdC5mYWlsKDEsIDIsIFwiY3VzdG9tIGVycm9yIG1lc3NhZ2VcIiwgXCI+XCIpO1xuICAgKiAgICAgZXhwZWN0LmZhaWwoMSwgMiwgdW5kZWZpbmVkLCBcIj5cIik7XG4gICAqXG4gICAqIEBuYW1lIGZhaWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcGVyYXRvclxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBjaGFpLmV4cGVjdC5mYWlsID0gZnVuY3Rpb24gKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsIG9wZXJhdG9yKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBhY3R1YWw7XG4gICAgICAgIGFjdHVhbCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCAnZXhwZWN0LmZhaWwoKSc7XG4gICAgdGhyb3cgbmV3IGNoYWkuQXNzZXJ0aW9uRXJyb3IobWVzc2FnZSwge1xuICAgICAgICBhY3R1YWw6IGFjdHVhbFxuICAgICAgLCBleHBlY3RlZDogZXhwZWN0ZWRcbiAgICAgICwgb3BlcmF0b3I6IG9wZXJhdG9yXG4gICAgfSwgY2hhaS5leHBlY3QuZmFpbCk7XG4gIH07XG59O1xuIiwiLyohXG4gKiBjaGFpXG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY2hhaSwgdXRpbCkge1xuICB2YXIgQXNzZXJ0aW9uID0gY2hhaS5Bc3NlcnRpb247XG5cbiAgZnVuY3Rpb24gbG9hZFNob3VsZCAoKSB7XG4gICAgLy8gZXhwbGljaXRseSBkZWZpbmUgdGhpcyBtZXRob2QgYXMgZnVuY3Rpb24gYXMgdG8gaGF2ZSBpdCdzIG5hbWUgdG8gaW5jbHVkZSBhcyBgc3NmaWBcbiAgICBmdW5jdGlvbiBzaG91bGRHZXR0ZXIoKSB7XG4gICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIFN0cmluZ1xuICAgICAgICAgIHx8IHRoaXMgaW5zdGFuY2VvZiBOdW1iZXJcbiAgICAgICAgICB8fCB0aGlzIGluc3RhbmNlb2YgQm9vbGVhblxuICAgICAgICAgIHx8IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdGhpcyBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgICAgICByZXR1cm4gbmV3IEFzc2VydGlvbih0aGlzLnZhbHVlT2YoKSwgbnVsbCwgc2hvdWxkR2V0dGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgQXNzZXJ0aW9uKHRoaXMsIG51bGwsIHNob3VsZEdldHRlcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNob3VsZFNldHRlcih2YWx1ZSkge1xuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFpanMvY2hhaS9pc3N1ZXMvODY6IHRoaXMgbWFrZXNcbiAgICAgIC8vIGB3aGF0ZXZlci5zaG91bGQgPSBzb21lVmFsdWVgIGFjdHVhbGx5IHNldCBgc29tZVZhbHVlYCwgd2hpY2ggaXNcbiAgICAgIC8vIGVzcGVjaWFsbHkgdXNlZnVsIGZvciBgZ2xvYmFsLnNob3VsZCA9IHJlcXVpcmUoJ2NoYWknKS5zaG91bGQoKWAuXG4gICAgICAvL1xuICAgICAgLy8gTm90ZSB0aGF0IHdlIGhhdmUgdG8gdXNlIFtbRGVmaW5lUHJvcGVydHldXSBpbnN0ZWFkIG9mIFtbUHV0XV1cbiAgICAgIC8vIHNpbmNlIG90aGVyd2lzZSB3ZSB3b3VsZCB0cmlnZ2VyIHRoaXMgdmVyeSBzZXR0ZXIhXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Nob3VsZCcsIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gbW9kaWZ5IE9iamVjdC5wcm90b3R5cGUgdG8gaGF2ZSBgc2hvdWxkYFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QucHJvdG90eXBlLCAnc2hvdWxkJywge1xuICAgICAgc2V0OiBzaG91bGRTZXR0ZXJcbiAgICAgICwgZ2V0OiBzaG91bGRHZXR0ZXJcbiAgICAgICwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG5cbiAgICB2YXIgc2hvdWxkID0ge307XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLmZhaWwoW21lc3NhZ2VdKVxuICAgICAqICMjIyAuZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0sIFtvcGVyYXRvcl0pXG4gICAgICpcbiAgICAgKiBUaHJvdyBhIGZhaWx1cmUuXG4gICAgICpcbiAgICAgKiAgICAgc2hvdWxkLmZhaWwoKTtcbiAgICAgKiAgICAgc2hvdWxkLmZhaWwoXCJjdXN0b20gZXJyb3IgbWVzc2FnZVwiKTtcbiAgICAgKiAgICAgc2hvdWxkLmZhaWwoMSwgMik7XG4gICAgICogICAgIHNob3VsZC5mYWlsKDEsIDIsIFwiY3VzdG9tIGVycm9yIG1lc3NhZ2VcIik7XG4gICAgICogICAgIHNob3VsZC5mYWlsKDEsIDIsIFwiY3VzdG9tIGVycm9yIG1lc3NhZ2VcIiwgXCI+XCIpO1xuICAgICAqICAgICBzaG91bGQuZmFpbCgxLCAyLCB1bmRlZmluZWQsIFwiPlwiKTtcbiAgICAgKlxuICAgICAqXG4gICAgICogQG5hbWUgZmFpbFxuICAgICAqIEBwYXJhbSB7TWl4ZWR9IGFjdHVhbFxuICAgICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3BlcmF0b3JcbiAgICAgKiBAbmFtZXNwYWNlIEJERFxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG5cbiAgICBzaG91bGQuZmFpbCA9IGZ1bmN0aW9uIChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvcikge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgbWVzc2FnZSA9IGFjdHVhbDtcbiAgICAgICAgICBhY3R1YWwgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdzaG91bGQuZmFpbCgpJztcbiAgICAgIHRocm93IG5ldyBjaGFpLkFzc2VydGlvbkVycm9yKG1lc3NhZ2UsIHtcbiAgICAgICAgICBhY3R1YWw6IGFjdHVhbFxuICAgICAgICAsIGV4cGVjdGVkOiBleHBlY3RlZFxuICAgICAgICAsIG9wZXJhdG9yOiBvcGVyYXRvclxuICAgICAgfSwgc2hvdWxkLmZhaWwpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLmVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICAgKlxuICAgICAqIEFzc2VydHMgbm9uLXN0cmljdCBlcXVhbGl0eSAoYD09YCkgb2YgYGFjdHVhbGAgYW5kIGBleHBlY3RlZGAuXG4gICAgICpcbiAgICAgKiAgICAgc2hvdWxkLmVxdWFsKDMsICczJywgJz09IGNvZXJjZXMgdmFsdWVzIHRvIHN0cmluZ3MnKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIGVxdWFsXG4gICAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5lcXVhbCA9IGZ1bmN0aW9uICh2YWwxLCB2YWwyLCBtc2cpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24odmFsMSwgbXNnKS50by5lcXVhbCh2YWwyKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogIyMjIC50aHJvdyhmdW5jdGlvbiwgW2NvbnN0cnVjdG9yL3N0cmluZy9yZWdleHBdLCBbc3RyaW5nL3JlZ2V4cF0sIFttZXNzYWdlXSlcbiAgICAgKlxuICAgICAqIEFzc2VydHMgdGhhdCBgZnVuY3Rpb25gIHdpbGwgdGhyb3cgYW4gZXJyb3IgdGhhdCBpcyBhbiBpbnN0YW5jZSBvZlxuICAgICAqIGBjb25zdHJ1Y3RvcmAsIG9yIGFsdGVybmF0ZWx5IHRoYXQgaXQgd2lsbCB0aHJvdyBhbiBlcnJvciB3aXRoIG1lc3NhZ2VcbiAgICAgKiBtYXRjaGluZyBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqICAgICBzaG91bGQudGhyb3coZm4sICdmdW5jdGlvbiB0aHJvd3MgYSByZWZlcmVuY2UgZXJyb3InKTtcbiAgICAgKiAgICAgc2hvdWxkLnRocm93KGZuLCAvZnVuY3Rpb24gdGhyb3dzIGEgcmVmZXJlbmNlIGVycm9yLyk7XG4gICAgICogICAgIHNob3VsZC50aHJvdyhmbiwgUmVmZXJlbmNlRXJyb3IpO1xuICAgICAqICAgICBzaG91bGQudGhyb3coZm4sIFJlZmVyZW5jZUVycm9yLCAnZnVuY3Rpb24gdGhyb3dzIGEgcmVmZXJlbmNlIGVycm9yJyk7XG4gICAgICogICAgIHNob3VsZC50aHJvdyhmbiwgUmVmZXJlbmNlRXJyb3IsIC9mdW5jdGlvbiB0aHJvd3MgYSByZWZlcmVuY2UgZXJyb3IvKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIHRocm93XG4gICAgICogQGFsaWFzIFRocm93XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Vycm9yQ29uc3RydWN0b3J9IGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4cFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNFcnJvcl90eXBlc1xuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5UaHJvdyA9IGZ1bmN0aW9uIChmbiwgZXJydCwgZXJycywgbXNnKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2cpLnRvLlRocm93KGVycnQsIGVycnMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLmV4aXN0XG4gICAgICpcbiAgICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBuZWl0aGVyIGBudWxsYCBub3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiAgICAgdmFyIGZvbyA9ICdoaSc7XG4gICAgICpcbiAgICAgKiAgICAgc2hvdWxkLmV4aXN0KGZvbywgJ2ZvbyBleGlzdHMnKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIGV4aXN0XG4gICAgICogQG5hbWVzcGFjZSBTaG91bGRcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLmV4aXN0ID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnKS50by5leGlzdDtcbiAgICB9XG5cbiAgICAvLyBuZWdhdGlvblxuICAgIHNob3VsZC5ub3QgPSB7fVxuXG4gICAgLyoqXG4gICAgICogIyMjIC5ub3QuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgICAqXG4gICAgICogQXNzZXJ0cyBub24tc3RyaWN0IGluZXF1YWxpdHkgKGAhPWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgICAqXG4gICAgICogICAgIHNob3VsZC5ub3QuZXF1YWwoMywgNCwgJ3RoZXNlIG51bWJlcnMgYXJlIG5vdCBlcXVhbCcpO1xuICAgICAqXG4gICAgICogQG5hbWUgbm90LmVxdWFsXG4gICAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5ub3QuZXF1YWwgPSBmdW5jdGlvbiAodmFsMSwgdmFsMiwgbXNnKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHZhbDEsIG1zZykudG8ubm90LmVxdWFsKHZhbDIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLnRocm93KGZ1bmN0aW9uLCBbY29uc3RydWN0b3IvcmVnZXhwXSwgW21lc3NhZ2VdKVxuICAgICAqXG4gICAgICogQXNzZXJ0cyB0aGF0IGBmdW5jdGlvbmAgd2lsbCBfbm90XyB0aHJvdyBhbiBlcnJvciB0aGF0IGlzIGFuIGluc3RhbmNlIG9mXG4gICAgICogYGNvbnN0cnVjdG9yYCwgb3IgYWx0ZXJuYXRlbHkgdGhhdCBpdCB3aWxsIG5vdCB0aHJvdyBhbiBlcnJvciB3aXRoIG1lc3NhZ2VcbiAgICAgKiBtYXRjaGluZyBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqICAgICBzaG91bGQubm90LnRocm93KGZuLCBFcnJvciwgJ2Z1bmN0aW9uIGRvZXMgbm90IHRocm93Jyk7XG4gICAgICpcbiAgICAgKiBAbmFtZSBub3QudGhyb3dcbiAgICAgKiBAYWxpYXMgbm90LlRocm93XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Vycm9yQ29uc3RydWN0b3J9IGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4cFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNFcnJvcl90eXBlc1xuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5ub3QuVGhyb3cgPSBmdW5jdGlvbiAoZm4sIGVycnQsIGVycnMsIG1zZykge1xuICAgICAgbmV3IEFzc2VydGlvbihmbiwgbXNnKS50by5ub3QuVGhyb3coZXJydCwgZXJycyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICMjIyAubm90LmV4aXN0XG4gICAgICpcbiAgICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBuZWl0aGVyIGBudWxsYCBub3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiAgICAgdmFyIGJhciA9IG51bGw7XG4gICAgICpcbiAgICAgKiAgICAgc2hvdWxkLm5vdC5leGlzdChiYXIsICdiYXIgZG9lcyBub3QgZXhpc3QnKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIG5vdC5leGlzdFxuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5ub3QuZXhpc3QgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2cpLnRvLm5vdC5leGlzdDtcbiAgICB9XG5cbiAgICBzaG91bGRbJ3Rocm93J10gPSBzaG91bGRbJ1Rocm93J107XG4gICAgc2hvdWxkLm5vdFsndGhyb3cnXSA9IHNob3VsZC5ub3RbJ1Rocm93J107XG5cbiAgICByZXR1cm4gc2hvdWxkO1xuICB9O1xuXG4gIGNoYWkuc2hvdWxkID0gbG9hZFNob3VsZDtcbiAgY2hhaS5TaG91bGQgPSBsb2FkU2hvdWxkO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGFkZENoYWluaW5nTWV0aG9kIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgYWRkTGVuZ3RoR3VhcmQgPSByZXF1aXJlKCcuL2FkZExlbmd0aEd1YXJkJyk7XG52YXIgY2hhaSA9IHJlcXVpcmUoJy4uLy4uL2NoYWknKTtcbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJyk7XG52YXIgcHJveGlmeSA9IHJlcXVpcmUoJy4vcHJveGlmeScpO1xudmFyIHRyYW5zZmVyRmxhZ3MgPSByZXF1aXJlKCcuL3RyYW5zZmVyRmxhZ3MnKTtcblxuLyohXG4gKiBNb2R1bGUgdmFyaWFibGVzXG4gKi9cblxuLy8gQ2hlY2sgd2hldGhlciBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBpcyBzdXBwb3J0ZWRcbnZhciBjYW5TZXRQcm90b3R5cGUgPSB0eXBlb2YgT2JqZWN0LnNldFByb3RvdHlwZU9mID09PSAnZnVuY3Rpb24nO1xuXG4vLyBXaXRob3V0IGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIHN1cHBvcnQsIHRoaXMgbW9kdWxlIHdpbGwgbmVlZCB0byBhZGQgcHJvcGVydGllcyB0byBhIGZ1bmN0aW9uLlxuLy8gSG93ZXZlciwgc29tZSBvZiBmdW5jdGlvbnMnIG93biBwcm9wcyBhcmUgbm90IGNvbmZpZ3VyYWJsZSBhbmQgc2hvdWxkIGJlIHNraXBwZWQuXG52YXIgdGVzdEZuID0gZnVuY3Rpb24oKSB7fTtcbnZhciBleGNsdWRlTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0Rm4pLmZpbHRlcihmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGVzdEZuLCBuYW1lKTtcblxuICAvLyBOb3RlOiBQaGFudG9tSlMgMS54IGluY2x1ZGVzIGBjYWxsZWVgIGFzIG9uZSBvZiBgdGVzdEZuYCdzIG93biBwcm9wZXJ0aWVzLFxuICAvLyBidXQgdGhlbiByZXR1cm5zIGB1bmRlZmluZWRgIGFzIHRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciBgY2FsbGVlYC4gQXMgYVxuICAvLyB3b3JrYXJvdW5kLCB3ZSBwZXJmb3JtIGFuIG90aGVyd2lzZSB1bm5lY2Vzc2FyeSB0eXBlLWNoZWNrIGZvciBgcHJvcERlc2NgLFxuICAvLyBhbmQgdGhlbiBmaWx0ZXIgaXQgb3V0IGlmIGl0J3Mgbm90IGFuIG9iamVjdCBhcyBpdCBzaG91bGQgYmUuXG4gIGlmICh0eXBlb2YgcHJvcERlc2MgIT09ICdvYmplY3QnKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiAhcHJvcERlc2MuY29uZmlndXJhYmxlO1xufSk7XG5cbi8vIENhY2hlIGBGdW5jdGlvbmAgcHJvcGVydGllc1xudmFyIGNhbGwgID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwsXG4gICAgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8qKlxuICogIyMjIC5hZGRDaGFpbmFibGVNZXRob2QoY3R4LCBuYW1lLCBtZXRob2QsIGNoYWluaW5nQmVoYXZpb3IpXG4gKlxuICogQWRkcyBhIG1ldGhvZCB0byBhbiBvYmplY3QsIHN1Y2ggdGhhdCB0aGUgbWV0aG9kIGNhbiBhbHNvIGJlIGNoYWluZWQuXG4gKlxuICogICAgIHV0aWxzLmFkZENoYWluYWJsZU1ldGhvZChjaGFpLkFzc2VydGlvbi5wcm90b3R5cGUsICdmb28nLCBmdW5jdGlvbiAoc3RyKSB7XG4gKiAgICAgICB2YXIgb2JqID0gdXRpbHMuZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gKiAgICAgICBuZXcgY2hhaS5Bc3NlcnRpb24ob2JqKS50by5iZS5lcXVhbChzdHIpO1xuICogICAgIH0pO1xuICpcbiAqIENhbiBhbHNvIGJlIGFjY2Vzc2VkIGRpcmVjdGx5IGZyb20gYGNoYWkuQXNzZXJ0aW9uYC5cbiAqXG4gKiAgICAgY2hhaS5Bc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdmb28nLCBmbiwgY2hhaW5pbmdCZWhhdmlvcik7XG4gKlxuICogVGhlIHJlc3VsdCBjYW4gdGhlbiBiZSB1c2VkIGFzIGJvdGggYSBtZXRob2QgYXNzZXJ0aW9uLCBleGVjdXRpbmcgYm90aCBgbWV0aG9kYCBhbmRcbiAqIGBjaGFpbmluZ0JlaGF2aW9yYCwgb3IgYXMgYSBsYW5ndWFnZSBjaGFpbiwgd2hpY2ggb25seSBleGVjdXRlcyBgY2hhaW5pbmdCZWhhdmlvcmAuXG4gKlxuICogICAgIGV4cGVjdChmb29TdHIpLnRvLmJlLmZvbygnYmFyJyk7XG4gKiAgICAgZXhwZWN0KGZvb1N0cikudG8uYmUuZm9vLmVxdWFsKCdmb28nKTtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY3R4IG9iamVjdCB0byB3aGljaCB0aGUgbWV0aG9kIGlzIGFkZGVkXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBvZiBtZXRob2QgdG8gYWRkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXRob2QgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgYG5hbWVgLCB3aGVuIGNhbGxlZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2hhaW5pbmdCZWhhdmlvciBmdW5jdGlvbiB0byBiZSBjYWxsZWQgZXZlcnkgdGltZSB0aGUgcHJvcGVydHkgaXMgYWNjZXNzZWRcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGFkZENoYWluYWJsZU1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFkZENoYWluYWJsZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCwgY2hhaW5pbmdCZWhhdmlvcikge1xuICBpZiAodHlwZW9mIGNoYWluaW5nQmVoYXZpb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGFpbmluZ0JlaGF2aW9yID0gZnVuY3Rpb24gKCkgeyB9O1xuICB9XG5cbiAgdmFyIGNoYWluYWJsZUJlaGF2aW9yID0ge1xuICAgICAgbWV0aG9kOiBtZXRob2RcbiAgICAsIGNoYWluaW5nQmVoYXZpb3I6IGNoYWluaW5nQmVoYXZpb3JcbiAgfTtcblxuICAvLyBzYXZlIHRoZSBtZXRob2RzIHNvIHdlIGNhbiBvdmVyd3JpdGUgdGhlbSBsYXRlciwgaWYgd2UgbmVlZCB0by5cbiAgaWYgKCFjdHguX19tZXRob2RzKSB7XG4gICAgY3R4Ll9fbWV0aG9kcyA9IHt9O1xuICB9XG4gIGN0eC5fX21ldGhvZHNbbmFtZV0gPSBjaGFpbmFibGVCZWhhdmlvcjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBuYW1lLFxuICAgIHsgZ2V0OiBmdW5jdGlvbiBjaGFpbmFibGVNZXRob2RHZXR0ZXIoKSB7XG4gICAgICAgIGNoYWluYWJsZUJlaGF2aW9yLmNoYWluaW5nQmVoYXZpb3IuY2FsbCh0aGlzKTtcblxuICAgICAgICB2YXIgY2hhaW5hYmxlTWV0aG9kV3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIHRoZSBgc3NmaWAgZmxhZyB0byBgY2hhaW5hYmxlTWV0aG9kV3JhcHBlcmAgY2F1c2VzIHRoaXNcbiAgICAgICAgICAvLyBmdW5jdGlvbiB0byBiZSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uXG4gICAgICAgICAgLy8gZnJhbWVzIGZyb20gdGhlIHN0YWNrIHRyYWNlIG9mIGEgZmFpbGVkIGFzc2VydGlvbi5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWZcbiAgICAgICAgICAvLyB0aGUgYGxvY2tTc2ZpYCBmbGFnIGlzbid0IHNldC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIHRoaXMgYXNzZXJ0aW9uIGlzIGJlaW5nXG4gICAgICAgICAgLy8gaW52b2tlZCBmcm9tIGluc2lkZSBvZiBhbm90aGVyIGFzc2VydGlvbi4gSW4gdGhpcyBjYXNlLCB0aGUgYHNzZmlgXG4gICAgICAgICAgLy8gZmxhZyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3V0ZXIgYXNzZXJ0aW9uLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gTm90ZSB0aGF0IG92ZXJ3cml0aW5nIGEgY2hhaW5hYmxlIG1ldGhvZCBtZXJlbHkgcmVwbGFjZXMgdGhlIHNhdmVkXG4gICAgICAgICAgLy8gbWV0aG9kcyBpbiBgY3R4Ll9fbWV0aG9kc2AgaW5zdGVhZCBvZiBjb21wbGV0ZWx5IHJlcGxhY2luZyB0aGVcbiAgICAgICAgICAvLyBvdmVyd3JpdHRlbiBhc3NlcnRpb24uIFRoZXJlZm9yZSwgYW4gb3ZlcndyaXRpbmcgYXNzZXJ0aW9uIHdvbid0XG4gICAgICAgICAgLy8gc2V0IHRoZSBgc3NmaWAgb3IgYGxvY2tTc2ZpYCBmbGFncy5cbiAgICAgICAgICBpZiAoIWZsYWcodGhpcywgJ2xvY2tTc2ZpJykpIHtcbiAgICAgICAgICAgIGZsYWcodGhpcywgJ3NzZmknLCBjaGFpbmFibGVNZXRob2RXcmFwcGVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcmVzdWx0ID0gY2hhaW5hYmxlQmVoYXZpb3IubWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgY2hhaS5Bc3NlcnRpb24oKTtcbiAgICAgICAgICB0cmFuc2ZlckZsYWdzKHRoaXMsIG5ld0Fzc2VydGlvbik7XG4gICAgICAgICAgcmV0dXJuIG5ld0Fzc2VydGlvbjtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGRMZW5ndGhHdWFyZChjaGFpbmFibGVNZXRob2RXcmFwcGVyLCBuYW1lLCB0cnVlKTtcblxuICAgICAgICAvLyBVc2UgYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgaWYgYXZhaWxhYmxlXG4gICAgICAgIGlmIChjYW5TZXRQcm90b3R5cGUpIHtcbiAgICAgICAgICAvLyBJbmhlcml0IGFsbCBwcm9wZXJ0aWVzIGZyb20gdGhlIG9iamVjdCBieSByZXBsYWNpbmcgdGhlIGBGdW5jdGlvbmAgcHJvdG90eXBlXG4gICAgICAgICAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgICAgICAgLy8gUmVzdG9yZSB0aGUgYGNhbGxgIGFuZCBgYXBwbHlgIG1ldGhvZHMgZnJvbSBgRnVuY3Rpb25gXG4gICAgICAgICAgcHJvdG90eXBlLmNhbGwgPSBjYWxsO1xuICAgICAgICAgIHByb3RvdHlwZS5hcHBseSA9IGFwcGx5O1xuICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihjaGFpbmFibGVNZXRob2RXcmFwcGVyLCBwcm90b3R5cGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSwgcmVkZWZpbmUgYWxsIHByb3BlcnRpZXMgKHNsb3chKVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgYXNzZXJ0ZXJOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN0eCk7XG4gICAgICAgICAgYXNzZXJ0ZXJOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChhc3NlcnRlck5hbWUpIHtcbiAgICAgICAgICAgIGlmIChleGNsdWRlTmFtZXMuaW5kZXhPZihhc3NlcnRlck5hbWUpICE9PSAtMSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY3R4LCBhc3NlcnRlck5hbWUpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNoYWluYWJsZU1ldGhvZFdyYXBwZXIsIGFzc2VydGVyTmFtZSwgcGQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhbnNmZXJGbGFncyh0aGlzLCBjaGFpbmFibGVNZXRob2RXcmFwcGVyKTtcbiAgICAgICAgcmV0dXJuIHByb3hpZnkoY2hhaW5hYmxlTWV0aG9kV3JhcHBlcik7XG4gICAgICB9XG4gICAgLCBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59O1xuIiwidmFyIGZuTGVuZ3RoRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZnVuY3Rpb24gKCkge30sICdsZW5ndGgnKTtcblxuLyohXG4gKiBDaGFpIC0gYWRkTGVuZ3RoR3VhcmQgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5hZGRMZW5ndGhHdWFyZChmbiwgYXNzZXJ0aW9uTmFtZSwgaXNDaGFpbmFibGUpXG4gKlxuICogRGVmaW5lIGBsZW5ndGhgIGFzIGEgZ2V0dGVyIG9uIHRoZSBnaXZlbiB1bmludm9rZWQgbWV0aG9kIGFzc2VydGlvbi4gVGhlXG4gKiBnZXR0ZXIgYWN0cyBhcyBhIGd1YXJkIGFnYWluc3QgY2hhaW5pbmcgYGxlbmd0aGAgZGlyZWN0bHkgb2ZmIG9mIGFuIHVuaW52b2tlZFxuICogbWV0aG9kIGFzc2VydGlvbiwgd2hpY2ggaXMgYSBwcm9ibGVtIGJlY2F1c2UgaXQgcmVmZXJlbmNlcyBgZnVuY3Rpb25gJ3NcbiAqIGJ1aWx0LWluIGBsZW5ndGhgIHByb3BlcnR5IGluc3RlYWQgb2YgQ2hhaSdzIGBsZW5ndGhgIGFzc2VydGlvbi4gV2hlbiB0aGVcbiAqIGdldHRlciBjYXRjaGVzIHRoZSB1c2VyIG1ha2luZyB0aGlzIG1pc3Rha2UsIGl0IHRocm93cyBhbiBlcnJvciB3aXRoIGFcbiAqIGhlbHBmdWwgbWVzc2FnZS5cbiAqXG4gKiBUaGVyZSBhcmUgdHdvIHdheXMgaW4gd2hpY2ggdGhpcyBtaXN0YWtlIGNhbiBiZSBtYWRlLiBUaGUgZmlyc3Qgd2F5IGlzIGJ5XG4gKiBjaGFpbmluZyB0aGUgYGxlbmd0aGAgYXNzZXJ0aW9uIGRpcmVjdGx5IG9mZiBvZiBhbiB1bmludm9rZWQgY2hhaW5hYmxlXG4gKiBtZXRob2QuIEluIHRoaXMgY2FzZSwgQ2hhaSBzdWdnZXN0cyB0aGF0IHRoZSB1c2VyIHVzZSBgbGVuZ3RoT2ZgIGluc3RlYWQuIFRoZVxuICogc2Vjb25kIHdheSBpcyBieSBjaGFpbmluZyB0aGUgYGxlbmd0aGAgYXNzZXJ0aW9uIGRpcmVjdGx5IG9mZiBvZiBhbiB1bmludm9rZWRcbiAqIG5vbi1jaGFpbmFibGUgbWV0aG9kLiBOb24tY2hhaW5hYmxlIG1ldGhvZHMgbXVzdCBiZSBpbnZva2VkIHByaW9yIHRvXG4gKiBjaGFpbmluZy4gSW4gdGhpcyBjYXNlLCBDaGFpIHN1Z2dlc3RzIHRoYXQgdGhlIHVzZXIgY29uc3VsdCB0aGUgZG9jcyBmb3IgdGhlXG4gKiBnaXZlbiBhc3NlcnRpb24uXG4gKlxuICogSWYgdGhlIGBsZW5ndGhgIHByb3BlcnR5IG9mIGZ1bmN0aW9ucyBpcyB1bmNvbmZpZ3VyYWJsZSwgdGhlbiByZXR1cm4gYGZuYFxuICogd2l0aG91dCBtb2RpZmljYXRpb24uXG4gKlxuICogTm90ZSB0aGF0IGluIEVTNiwgdGhlIGZ1bmN0aW9uJ3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgY29uZmlndXJhYmxlLCBzbyBvbmNlXG4gKiBzdXBwb3J0IGZvciBsZWdhY3kgZW52aXJvbm1lbnRzIGlzIGRyb3BwZWQsIENoYWkncyBgbGVuZ3RoYCBwcm9wZXJ0eSBjYW5cbiAqIHJlcGxhY2UgdGhlIGJ1aWx0LWluIGZ1bmN0aW9uJ3MgYGxlbmd0aGAgcHJvcGVydHksIGFuZCB0aGlzIGxlbmd0aCBndWFyZCB3aWxsXG4gKiBubyBsb25nZXIgYmUgbmVjZXNzYXJ5LiBJbiB0aGUgbWVhbiB0aW1lLCBtYWludGFpbmluZyBjb25zaXN0ZW5jeSBhY3Jvc3MgYWxsXG4gKiBlbnZpcm9ubWVudHMgaXMgdGhlIHByaW9yaXR5LlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge1N0cmluZ30gYXNzZXJ0aW9uTmFtZVxuICogQHBhcmFtIHtCb29sZWFufSBpc0NoYWluYWJsZVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgYWRkTGVuZ3RoR3VhcmRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFkZExlbmd0aEd1YXJkIChmbiwgYXNzZXJ0aW9uTmFtZSwgaXNDaGFpbmFibGUpIHtcbiAgaWYgKCFmbkxlbmd0aERlc2MuY29uZmlndXJhYmxlKSByZXR1cm4gZm47XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnbGVuZ3RoJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQ2hhaW5hYmxlKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIENoYWkgcHJvcGVydHk6ICcgKyBhc3NlcnRpb25OYW1lICsgJy5sZW5ndGguIER1ZScgK1xuICAgICAgICAgICcgdG8gYSBjb21wYXRpYmlsaXR5IGlzc3VlLCBcImxlbmd0aFwiIGNhbm5vdCBkaXJlY3RseSBmb2xsb3cgXCInICtcbiAgICAgICAgICBhc3NlcnRpb25OYW1lICsgJ1wiLiBVc2UgXCInICsgYXNzZXJ0aW9uTmFtZSArICcubGVuZ3RoT2ZcIiBpbnN0ZWFkLicpO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBDaGFpIHByb3BlcnR5OiAnICsgYXNzZXJ0aW9uTmFtZSArICcubGVuZ3RoLiBTZWUnICtcbiAgICAgICAgJyBkb2NzIGZvciBwcm9wZXIgdXNhZ2Ugb2YgXCInICsgYXNzZXJ0aW9uTmFtZSArICdcIi4nKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBmbjtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBhZGRNZXRob2QgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciBhZGRMZW5ndGhHdWFyZCA9IHJlcXVpcmUoJy4vYWRkTGVuZ3RoR3VhcmQnKTtcbnZhciBjaGFpID0gcmVxdWlyZSgnLi4vLi4vY2hhaScpO1xudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcbnZhciBwcm94aWZ5ID0gcmVxdWlyZSgnLi9wcm94aWZ5Jyk7XG52YXIgdHJhbnNmZXJGbGFncyA9IHJlcXVpcmUoJy4vdHJhbnNmZXJGbGFncycpO1xuXG4vKipcbiAqICMjIyAuYWRkTWV0aG9kKGN0eCwgbmFtZSwgbWV0aG9kKVxuICpcbiAqIEFkZHMgYSBtZXRob2QgdG8gdGhlIHByb3RvdHlwZSBvZiBhbiBvYmplY3QuXG4gKlxuICogICAgIHV0aWxzLmFkZE1ldGhvZChjaGFpLkFzc2VydGlvbi5wcm90b3R5cGUsICdmb28nLCBmdW5jdGlvbiAoc3RyKSB7XG4gKiAgICAgICB2YXIgb2JqID0gdXRpbHMuZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gKiAgICAgICBuZXcgY2hhaS5Bc3NlcnRpb24ob2JqKS50by5iZS5lcXVhbChzdHIpO1xuICogICAgIH0pO1xuICpcbiAqIENhbiBhbHNvIGJlIGFjY2Vzc2VkIGRpcmVjdGx5IGZyb20gYGNoYWkuQXNzZXJ0aW9uYC5cbiAqXG4gKiAgICAgY2hhaS5Bc3NlcnRpb24uYWRkTWV0aG9kKCdmb28nLCBmbik7XG4gKlxuICogVGhlbiBjYW4gYmUgdXNlZCBhcyBhbnkgb3RoZXIgYXNzZXJ0aW9uLlxuICpcbiAqICAgICBleHBlY3QoZm9vU3RyKS50by5iZS5mb28oJ2JhcicpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHggb2JqZWN0IHRvIHdoaWNoIHRoZSBtZXRob2QgaXMgYWRkZWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIG1ldGhvZCB0byBhZGRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZCBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciBuYW1lXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBhZGRNZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhZGRNZXRob2QoY3R4LCBuYW1lLCBtZXRob2QpIHtcbiAgdmFyIG1ldGhvZFdyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gU2V0dGluZyB0aGUgYHNzZmlgIGZsYWcgdG8gYG1ldGhvZFdyYXBwZXJgIGNhdXNlcyB0aGlzIGZ1bmN0aW9uIHRvIGJlIHRoZVxuICAgIC8vIHN0YXJ0aW5nIHBvaW50IGZvciByZW1vdmluZyBpbXBsZW1lbnRhdGlvbiBmcmFtZXMgZnJvbSB0aGUgc3RhY2sgdHJhY2Ugb2ZcbiAgICAvLyBhIGZhaWxlZCBhc3NlcnRpb24uXG4gICAgLy9cbiAgICAvLyBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gdXNlIHRoaXMgZnVuY3Rpb24gYXMgdGhlIHN0YXJ0aW5nIHBvaW50IGlmIHRoZVxuICAgIC8vIGBsb2NrU3NmaWAgZmxhZyBpc24ndCBzZXQuXG4gICAgLy9cbiAgICAvLyBJZiB0aGUgYGxvY2tTc2ZpYCBmbGFnIGlzIHNldCwgdGhlbiBlaXRoZXIgdGhpcyBhc3NlcnRpb24gaGFzIGJlZW5cbiAgICAvLyBvdmVyd3JpdHRlbiBieSBhbm90aGVyIGFzc2VydGlvbiwgb3IgdGhpcyBhc3NlcnRpb24gaXMgYmVpbmcgaW52b2tlZCBmcm9tXG4gICAgLy8gaW5zaWRlIG9mIGFub3RoZXIgYXNzZXJ0aW9uLiBJbiB0aGUgZmlyc3QgY2FzZSwgdGhlIGBzc2ZpYCBmbGFnIGhhc1xuICAgIC8vIGFscmVhZHkgYmVlbiBzZXQgYnkgdGhlIG92ZXJ3cml0aW5nIGFzc2VydGlvbi4gSW4gdGhlIHNlY29uZCBjYXNlLCB0aGVcbiAgICAvLyBgc3NmaWAgZmxhZyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3V0ZXIgYXNzZXJ0aW9uLlxuICAgIGlmICghZmxhZyh0aGlzLCAnbG9ja1NzZmknKSkge1xuICAgICAgZmxhZyh0aGlzLCAnc3NmaScsIG1ldGhvZFdyYXBwZXIpO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBtZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpXG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBjaGFpLkFzc2VydGlvbigpO1xuICAgIHRyYW5zZmVyRmxhZ3ModGhpcywgbmV3QXNzZXJ0aW9uKTtcbiAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICB9O1xuXG4gIGFkZExlbmd0aEd1YXJkKG1ldGhvZFdyYXBwZXIsIG5hbWUsIGZhbHNlKTtcbiAgY3R4W25hbWVdID0gcHJveGlmeShtZXRob2RXcmFwcGVyLCBuYW1lKTtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBhZGRQcm9wZXJ0eSB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIGNoYWkgPSByZXF1aXJlKCcuLi8uLi9jaGFpJyk7XG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xudmFyIGlzUHJveHlFbmFibGVkID0gcmVxdWlyZSgnLi9pc1Byb3h5RW5hYmxlZCcpO1xudmFyIHRyYW5zZmVyRmxhZ3MgPSByZXF1aXJlKCcuL3RyYW5zZmVyRmxhZ3MnKTtcblxuLyoqXG4gKiAjIyMgLmFkZFByb3BlcnR5KGN0eCwgbmFtZSwgZ2V0dGVyKVxuICpcbiAqIEFkZHMgYSBwcm9wZXJ0eSB0byB0aGUgcHJvdG90eXBlIG9mIGFuIG9iamVjdC5cbiAqXG4gKiAgICAgdXRpbHMuYWRkUHJvcGVydHkoY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLCAnZm9vJywgZnVuY3Rpb24gKCkge1xuICogICAgICAgdmFyIG9iaiA9IHV0aWxzLmZsYWcodGhpcywgJ29iamVjdCcpO1xuICogICAgICAgbmV3IGNoYWkuQXNzZXJ0aW9uKG9iaikudG8uYmUuaW5zdGFuY2VvZihGb28pO1xuICogICAgIH0pO1xuICpcbiAqIENhbiBhbHNvIGJlIGFjY2Vzc2VkIGRpcmVjdGx5IGZyb20gYGNoYWkuQXNzZXJ0aW9uYC5cbiAqXG4gKiAgICAgY2hhaS5Bc3NlcnRpb24uYWRkUHJvcGVydHkoJ2ZvbycsIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChteUZvbykudG8uYmUuZm9vO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHggb2JqZWN0IHRvIHdoaWNoIHRoZSBwcm9wZXJ0eSBpcyBhZGRlZFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgcHJvcGVydHkgdG8gYWRkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXR0ZXIgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgbmFtZVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgYWRkUHJvcGVydHlcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhZGRQcm9wZXJ0eShjdHgsIG5hbWUsIGdldHRlcikge1xuICBnZXR0ZXIgPSBnZXR0ZXIgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uICgpIHt9IDogZ2V0dGVyO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIG5hbWUsXG4gICAgeyBnZXQ6IGZ1bmN0aW9uIHByb3BlcnR5R2V0dGVyKCkge1xuICAgICAgICAvLyBTZXR0aW5nIHRoZSBgc3NmaWAgZmxhZyB0byBgcHJvcGVydHlHZXR0ZXJgIGNhdXNlcyB0aGlzIGZ1bmN0aW9uIHRvXG4gICAgICAgIC8vIGJlIHRoZSBzdGFydGluZyBwb2ludCBmb3IgcmVtb3ZpbmcgaW1wbGVtZW50YXRpb24gZnJhbWVzIGZyb20gdGhlXG4gICAgICAgIC8vIHN0YWNrIHRyYWNlIG9mIGEgZmFpbGVkIGFzc2VydGlvbi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIHVzZSB0aGlzIGZ1bmN0aW9uIGFzIHRoZSBzdGFydGluZyBwb2ludCBpZlxuICAgICAgICAvLyB0aGUgYGxvY2tTc2ZpYCBmbGFnIGlzbid0IHNldCBhbmQgcHJveHkgcHJvdGVjdGlvbiBpcyBkaXNhYmxlZC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSWYgdGhlIGBsb2NrU3NmaWAgZmxhZyBpcyBzZXQsIHRoZW4gZWl0aGVyIHRoaXMgYXNzZXJ0aW9uIGhhcyBiZWVuXG4gICAgICAgIC8vIG92ZXJ3cml0dGVuIGJ5IGFub3RoZXIgYXNzZXJ0aW9uLCBvciB0aGlzIGFzc2VydGlvbiBpcyBiZWluZyBpbnZva2VkXG4gICAgICAgIC8vIGZyb20gaW5zaWRlIG9mIGFub3RoZXIgYXNzZXJ0aW9uLiBJbiB0aGUgZmlyc3QgY2FzZSwgdGhlIGBzc2ZpYCBmbGFnXG4gICAgICAgIC8vIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdmVyd3JpdGluZyBhc3NlcnRpb24uIEluIHRoZSBzZWNvbmRcbiAgICAgICAgLy8gY2FzZSwgdGhlIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdXRlciBhc3NlcnRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIElmIHByb3h5IHByb3RlY3Rpb24gaXMgZW5hYmxlZCwgdGhlbiB0aGUgYHNzZmlgIGZsYWcgaGFzIGFscmVhZHkgYmVlblxuICAgICAgICAvLyBzZXQgYnkgdGhlIHByb3h5IGdldHRlci5cbiAgICAgICAgaWYgKCFpc1Byb3h5RW5hYmxlZCgpICYmICFmbGFnKHRoaXMsICdsb2NrU3NmaScpKSB7XG4gICAgICAgICAgZmxhZyh0aGlzLCAnc3NmaScsIHByb3BlcnR5R2V0dGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXN1bHQgPSBnZXR0ZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBjaGFpLkFzc2VydGlvbigpO1xuICAgICAgICB0cmFuc2ZlckZsYWdzKHRoaXMsIG5ld0Fzc2VydGlvbik7XG4gICAgICAgIHJldHVybiBuZXdBc3NlcnRpb247XG4gICAgICB9XG4gICAgLCBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gY29tcGFyZUJ5SW5zcGVjdCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE2IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIGluc3BlY3QgPSByZXF1aXJlKCcuL2luc3BlY3QnKTtcblxuLyoqXG4gKiAjIyMgLmNvbXBhcmVCeUluc3BlY3QobWl4ZWQsIG1peGVkKVxuICpcbiAqIFRvIGJlIHVzZWQgYXMgYSBjb21wYXJlRnVuY3Rpb24gd2l0aCBBcnJheS5wcm90b3R5cGUuc29ydC4gQ29tcGFyZXMgZWxlbWVudHNcbiAqIHVzaW5nIGluc3BlY3QgaW5zdGVhZCBvZiBkZWZhdWx0IGJlaGF2aW9yIG9mIHVzaW5nIHRvU3RyaW5nIHNvIHRoYXQgU3ltYm9sc1xuICogYW5kIG9iamVjdHMgd2l0aCBpcnJlZ3VsYXIvbWlzc2luZyB0b1N0cmluZyBjYW4gc3RpbGwgYmUgc29ydGVkIHdpdGhvdXQgYVxuICogVHlwZUVycm9yLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGZpcnN0IGVsZW1lbnQgdG8gY29tcGFyZVxuICogQHBhcmFtIHtNaXhlZH0gc2Vjb25kIGVsZW1lbnQgdG8gY29tcGFyZVxuICogQHJldHVybnMge051bWJlcn0gLTEgaWYgJ2EnIHNob3VsZCBjb21lIGJlZm9yZSAnYic7IG90aGVyd2lzZSAxXG4gKiBAbmFtZSBjb21wYXJlQnlJbnNwZWN0XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tcGFyZUJ5SW5zcGVjdChhLCBiKSB7XG4gIHJldHVybiBpbnNwZWN0KGEpIDwgaW5zcGVjdChiKSA/IC0xIDogMTtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBleHBlY3RUeXBlcyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmV4cGVjdFR5cGVzKG9iaiwgdHlwZXMpXG4gKlxuICogRW5zdXJlcyB0aGF0IHRoZSBvYmplY3QgYmVpbmcgdGVzdGVkIGFnYWluc3QgaXMgb2YgYSB2YWxpZCB0eXBlLlxuICpcbiAqICAgICB1dGlscy5leHBlY3RUeXBlcyh0aGlzLCBbJ2FycmF5JywgJ29iamVjdCcsICdzdHJpbmcnXSk7XG4gKlxuICogQHBhcmFtIHtNaXhlZH0gb2JqIGNvbnN0cnVjdGVkIEFzc2VydGlvblxuICogQHBhcmFtIHtBcnJheX0gdHlwZSBBIGxpc3Qgb2YgYWxsb3dlZCB0eXBlcyBmb3IgdGhpcyBhc3NlcnRpb25cbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGV4cGVjdFR5cGVzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnZhciBBc3NlcnRpb25FcnJvciA9IHJlcXVpcmUoJ2Fzc2VydGlvbi1lcnJvcicpO1xudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcbnZhciB0eXBlID0gcmVxdWlyZSgndHlwZS1kZXRlY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHBlY3RUeXBlcyhvYmosIHR5cGVzKSB7XG4gIHZhciBmbGFnTXNnID0gZmxhZyhvYmosICdtZXNzYWdlJyk7XG4gIHZhciBzc2ZpID0gZmxhZyhvYmosICdzc2ZpJyk7XG5cbiAgZmxhZ01zZyA9IGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyA6ICcnO1xuXG4gIG9iaiA9IGZsYWcob2JqLCAnb2JqZWN0Jyk7XG4gIHR5cGVzID0gdHlwZXMubWFwKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LnRvTG93ZXJDYXNlKCk7IH0pO1xuICB0eXBlcy5zb3J0KCk7XG5cbiAgLy8gVHJhbnNmb3JtcyBbJ2xvcmVtJywgJ2lwc3VtJ10gaW50byAnYSBsb3JlbSwgb3IgYW4gaXBzdW0nXG4gIHZhciBzdHIgPSB0eXBlcy5tYXAoZnVuY3Rpb24gKHQsIGluZGV4KSB7XG4gICAgdmFyIGFydCA9IH5bICdhJywgJ2UnLCAnaScsICdvJywgJ3UnIF0uaW5kZXhPZih0LmNoYXJBdCgwKSkgPyAnYW4nIDogJ2EnO1xuICAgIHZhciBvciA9IHR5cGVzLmxlbmd0aCA+IDEgJiYgaW5kZXggPT09IHR5cGVzLmxlbmd0aCAtIDEgPyAnb3IgJyA6ICcnO1xuICAgIHJldHVybiBvciArIGFydCArICcgJyArIHQ7XG4gIH0pLmpvaW4oJywgJyk7XG5cbiAgdmFyIG9ialR5cGUgPSB0eXBlKG9iaikudG9Mb3dlckNhc2UoKTtcblxuICBpZiAoIXR5cGVzLnNvbWUoZnVuY3Rpb24gKGV4cGVjdGVkKSB7IHJldHVybiBvYmpUeXBlID09PSBleHBlY3RlZDsgfSkpIHtcbiAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICBmbGFnTXNnICsgJ29iamVjdCB0ZXN0ZWQgbXVzdCBiZSAnICsgc3RyICsgJywgYnV0ICcgKyBvYmpUeXBlICsgJyBnaXZlbicsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBzc2ZpXG4gICAgKTtcbiAgfVxufTtcbiIsIi8qIVxuICogQ2hhaSAtIGZsYWcgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5mbGFnKG9iamVjdCwga2V5LCBbdmFsdWVdKVxuICpcbiAqIEdldCBvciBzZXQgYSBmbGFnIHZhbHVlIG9uIGFuIG9iamVjdC4gSWYgYVxuICogdmFsdWUgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSBzZXQsIGVsc2UgaXQgd2lsbFxuICogcmV0dXJuIHRoZSBjdXJyZW50bHkgc2V0IHZhbHVlIG9yIGB1bmRlZmluZWRgIGlmXG4gKiB0aGUgdmFsdWUgaXMgbm90IHNldC5cbiAqXG4gKiAgICAgdXRpbHMuZmxhZyh0aGlzLCAnZm9vJywgJ2JhcicpOyAvLyBzZXR0ZXJcbiAqICAgICB1dGlscy5mbGFnKHRoaXMsICdmb28nKTsgLy8gZ2V0dGVyLCByZXR1cm5zIGBiYXJgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBjb25zdHJ1Y3RlZCBBc3NlcnRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIChvcHRpb25hbClcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGZsYWdcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmxhZyhvYmosIGtleSwgdmFsdWUpIHtcbiAgdmFyIGZsYWdzID0gb2JqLl9fZmxhZ3MgfHwgKG9iai5fX2ZsYWdzID0gT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgZmxhZ3Nba2V5XSA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmbGFnc1trZXldO1xuICB9XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gZ2V0QWN0dWFsIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuZ2V0QWN0dWFsKG9iamVjdCwgW2FjdHVhbF0pXG4gKlxuICogUmV0dXJucyB0aGUgYGFjdHVhbGAgdmFsdWUgZm9yIGFuIEFzc2VydGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IChjb25zdHJ1Y3RlZCBBc3NlcnRpb24pXG4gKiBAcGFyYW0ge0FyZ3VtZW50c30gY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLmFzc2VydCBhcmd1bWVudHNcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldEFjdHVhbFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0QWN0dWFsKG9iaiwgYXJncykge1xuICByZXR1cm4gYXJncy5sZW5ndGggPiA0ID8gYXJnc1s0XSA6IG9iai5fb2JqO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGdldEVudW1lcmFibGVQcm9wZXJ0aWVzIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuZ2V0RW51bWVyYWJsZVByb3BlcnRpZXMob2JqZWN0KVxuICpcbiAqIFRoaXMgYWxsb3dzIHRoZSByZXRyaWV2YWwgb2YgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBhbiBvYmplY3QsXG4gKiBpbmhlcml0ZWQgb3Igbm90LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldEVudW1lcmFibGVQcm9wZXJ0aWVzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0RW51bWVyYWJsZVByb3BlcnRpZXMob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcbiAgICByZXN1bHQucHVzaChuYW1lKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIG1lc3NhZ2UgY29tcG9zaXRpb24gdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG5cbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJylcbiAgLCBnZXRBY3R1YWwgPSByZXF1aXJlKCcuL2dldEFjdHVhbCcpXG4gICwgb2JqRGlzcGxheSA9IHJlcXVpcmUoJy4vb2JqRGlzcGxheScpO1xuXG4vKipcbiAqICMjIyAuZ2V0TWVzc2FnZShvYmplY3QsIG1lc3NhZ2UsIG5lZ2F0ZU1lc3NhZ2UpXG4gKlxuICogQ29uc3RydWN0IHRoZSBlcnJvciBtZXNzYWdlIGJhc2VkIG9uIGZsYWdzXG4gKiBhbmQgdGVtcGxhdGUgdGFncy4gVGVtcGxhdGUgdGFncyB3aWxsIHJldHVyblxuICogYSBzdHJpbmdpZmllZCBpbnNwZWN0aW9uIG9mIHRoZSBvYmplY3QgcmVmZXJlbmNlZC5cbiAqXG4gKiBNZXNzYWdlIHRlbXBsYXRlIHRhZ3M6XG4gKiAtIGAje3RoaXN9YCBjdXJyZW50IGFzc2VydGVkIG9iamVjdFxuICogLSBgI3thY3R9YCBhY3R1YWwgdmFsdWVcbiAqIC0gYCN7ZXhwfWAgZXhwZWN0ZWQgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IChjb25zdHJ1Y3RlZCBBc3NlcnRpb24pXG4gKiBAcGFyYW0ge0FyZ3VtZW50c30gY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLmFzc2VydCBhcmd1bWVudHNcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldE1lc3NhZ2VcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRNZXNzYWdlKG9iaiwgYXJncykge1xuICB2YXIgbmVnYXRlID0gZmxhZyhvYmosICduZWdhdGUnKVxuICAgICwgdmFsID0gZmxhZyhvYmosICdvYmplY3QnKVxuICAgICwgZXhwZWN0ZWQgPSBhcmdzWzNdXG4gICAgLCBhY3R1YWwgPSBnZXRBY3R1YWwob2JqLCBhcmdzKVxuICAgICwgbXNnID0gbmVnYXRlID8gYXJnc1syXSA6IGFyZ3NbMV1cbiAgICAsIGZsYWdNc2cgPSBmbGFnKG9iaiwgJ21lc3NhZ2UnKTtcblxuICBpZih0eXBlb2YgbXNnID09PSBcImZ1bmN0aW9uXCIpIG1zZyA9IG1zZygpO1xuICBtc2cgPSBtc2cgfHwgJyc7XG4gIG1zZyA9IG1zZ1xuICAgIC5yZXBsYWNlKC8jXFx7dGhpc1xcfS9nLCBmdW5jdGlvbiAoKSB7IHJldHVybiBvYmpEaXNwbGF5KHZhbCk7IH0pXG4gICAgLnJlcGxhY2UoLyNcXHthY3RcXH0vZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gb2JqRGlzcGxheShhY3R1YWwpOyB9KVxuICAgIC5yZXBsYWNlKC8jXFx7ZXhwXFx9L2csIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9iakRpc3BsYXkoZXhwZWN0ZWQpOyB9KTtcblxuICByZXR1cm4gZmxhZ01zZyA/IGZsYWdNc2cgKyAnOiAnICsgbXNnIDogbXNnO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGdldE93bkVudW1lcmFibGVQcm9wZXJ0aWVzIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDExLTIwMTYgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scyA9IHJlcXVpcmUoJy4vZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scycpO1xuXG4vKipcbiAqICMjIyAuZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMob2JqZWN0KVxuICpcbiAqIFRoaXMgYWxsb3dzIHRoZSByZXRyaWV2YWwgb2YgZGlyZWN0bHktb3duZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYW4gb2JqZWN0LiBUaGlzIGZ1bmN0aW9uIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIE9iamVjdC5rZXlzIG9ubHlcbiAqIHJldHVybnMgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcywgbm90IGVudW1lcmFibGUgcHJvcGVydHkgc3ltYm9scy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBnZXRPd25FbnVtZXJhYmxlUHJvcGVydGllc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93bkVudW1lcmFibGVQcm9wZXJ0aWVzKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5jb25jYXQoZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scyhvYmopKTtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBnZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDExLTIwMTYgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scyhvYmplY3QpXG4gKlxuICogVGhpcyBhbGxvd3MgdGhlIHJldHJpZXZhbCBvZiBkaXJlY3RseS1vd25lZCBlbnVtZXJhYmxlIHByb3BlcnR5IHN5bWJvbHMgb2YgYW5cbiAqIG9iamVjdC4gVGhpcyBmdW5jdGlvbiBpcyBuZWNlc3NhcnkgYmVjYXVzZSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzXG4gKiByZXR1cm5zIGJvdGggZW51bWVyYWJsZSBhbmQgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgc3ltYm9scy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBnZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scyhvYmopIHtcbiAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gW107XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgc3ltKS5lbnVtZXJhYmxlO1xuICB9KTtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBnZXRQcm9wZXJ0aWVzIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuZ2V0UHJvcGVydGllcyhvYmplY3QpXG4gKlxuICogVGhpcyBhbGxvd3MgdGhlIHJldHJpZXZhbCBvZiBwcm9wZXJ0eSBuYW1lcyBvZiBhbiBvYmplY3QsIGVudW1lcmFibGUgb3Igbm90LFxuICogaW5oZXJpdGVkIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBnZXRQcm9wZXJ0aWVzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UHJvcGVydGllcyhvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iamVjdCk7XG5cbiAgZnVuY3Rpb24gYWRkUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICBpZiAocmVzdWx0LmluZGV4T2YocHJvcGVydHkpID09PSAtMSkge1xuICAgICAgcmVzdWx0LnB1c2gocHJvcGVydHkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpO1xuICB3aGlsZSAocHJvdG8gIT09IG51bGwpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90bykuZm9yRWFjaChhZGRQcm9wZXJ0eSk7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvKiFcbiAqIGNoYWlcbiAqIENvcHlyaWdodChjKSAyMDExIEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBEZXBlbmRlbmNpZXMgdGhhdCBhcmUgdXNlZCBmb3IgbXVsdGlwbGUgZXhwb3J0cyBhcmUgcmVxdWlyZWQgaGVyZSBvbmx5IG9uY2VcbiAqL1xuXG52YXIgcGF0aHZhbCA9IHJlcXVpcmUoJ3BhdGh2YWwnKTtcblxuLyohXG4gKiB0ZXN0IHV0aWxpdHlcbiAqL1xuXG5leHBvcnRzLnRlc3QgPSByZXF1aXJlKCcuL3Rlc3QnKTtcblxuLyohXG4gKiB0eXBlIHV0aWxpdHlcbiAqL1xuXG5leHBvcnRzLnR5cGUgPSByZXF1aXJlKCd0eXBlLWRldGVjdCcpO1xuXG4vKiFcbiAqIGV4cGVjdFR5cGVzIHV0aWxpdHlcbiAqL1xuZXhwb3J0cy5leHBlY3RUeXBlcyA9IHJlcXVpcmUoJy4vZXhwZWN0VHlwZXMnKTtcblxuLyohXG4gKiBtZXNzYWdlIHV0aWxpdHlcbiAqL1xuXG5leHBvcnRzLmdldE1lc3NhZ2UgPSByZXF1aXJlKCcuL2dldE1lc3NhZ2UnKTtcblxuLyohXG4gKiBhY3R1YWwgdXRpbGl0eVxuICovXG5cbmV4cG9ydHMuZ2V0QWN0dWFsID0gcmVxdWlyZSgnLi9nZXRBY3R1YWwnKTtcblxuLyohXG4gKiBJbnNwZWN0IHV0aWxcbiAqL1xuXG5leHBvcnRzLmluc3BlY3QgPSByZXF1aXJlKCcuL2luc3BlY3QnKTtcblxuLyohXG4gKiBPYmplY3QgRGlzcGxheSB1dGlsXG4gKi9cblxuZXhwb3J0cy5vYmpEaXNwbGF5ID0gcmVxdWlyZSgnLi9vYmpEaXNwbGF5Jyk7XG5cbi8qIVxuICogRmxhZyB1dGlsaXR5XG4gKi9cblxuZXhwb3J0cy5mbGFnID0gcmVxdWlyZSgnLi9mbGFnJyk7XG5cbi8qIVxuICogRmxhZyB0cmFuc2ZlcnJpbmcgdXRpbGl0eVxuICovXG5cbmV4cG9ydHMudHJhbnNmZXJGbGFncyA9IHJlcXVpcmUoJy4vdHJhbnNmZXJGbGFncycpO1xuXG4vKiFcbiAqIERlZXAgZXF1YWwgdXRpbGl0eVxuICovXG5cbmV4cG9ydHMuZXFsID0gcmVxdWlyZSgnZGVlcC1lcWwnKTtcblxuLyohXG4gKiBEZWVwIHBhdGggaW5mb1xuICovXG5cbmV4cG9ydHMuZ2V0UGF0aEluZm8gPSBwYXRodmFsLmdldFBhdGhJbmZvO1xuXG4vKiFcbiAqIENoZWNrIGlmIGEgcHJvcGVydHkgZXhpc3RzXG4gKi9cblxuZXhwb3J0cy5oYXNQcm9wZXJ0eSA9IHBhdGh2YWwuaGFzUHJvcGVydHk7XG5cbi8qIVxuICogRnVuY3Rpb24gbmFtZVxuICovXG5cbmV4cG9ydHMuZ2V0TmFtZSA9IHJlcXVpcmUoJ2dldC1mdW5jLW5hbWUnKTtcblxuLyohXG4gKiBhZGQgUHJvcGVydHlcbiAqL1xuXG5leHBvcnRzLmFkZFByb3BlcnR5ID0gcmVxdWlyZSgnLi9hZGRQcm9wZXJ0eScpO1xuXG4vKiFcbiAqIGFkZCBNZXRob2RcbiAqL1xuXG5leHBvcnRzLmFkZE1ldGhvZCA9IHJlcXVpcmUoJy4vYWRkTWV0aG9kJyk7XG5cbi8qIVxuICogb3ZlcndyaXRlIFByb3BlcnR5XG4gKi9cblxuZXhwb3J0cy5vdmVyd3JpdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vb3ZlcndyaXRlUHJvcGVydHknKTtcblxuLyohXG4gKiBvdmVyd3JpdGUgTWV0aG9kXG4gKi9cblxuZXhwb3J0cy5vdmVyd3JpdGVNZXRob2QgPSByZXF1aXJlKCcuL292ZXJ3cml0ZU1ldGhvZCcpO1xuXG4vKiFcbiAqIEFkZCBhIGNoYWluYWJsZSBtZXRob2RcbiAqL1xuXG5leHBvcnRzLmFkZENoYWluYWJsZU1ldGhvZCA9IHJlcXVpcmUoJy4vYWRkQ2hhaW5hYmxlTWV0aG9kJyk7XG5cbi8qIVxuICogT3ZlcndyaXRlIGNoYWluYWJsZSBtZXRob2RcbiAqL1xuXG5leHBvcnRzLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCA9IHJlcXVpcmUoJy4vb3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kJyk7XG5cbi8qIVxuICogQ29tcGFyZSBieSBpbnNwZWN0IG1ldGhvZFxuICovXG5cbmV4cG9ydHMuY29tcGFyZUJ5SW5zcGVjdCA9IHJlcXVpcmUoJy4vY29tcGFyZUJ5SW5zcGVjdCcpO1xuXG4vKiFcbiAqIEdldCBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBzeW1ib2xzIG1ldGhvZFxuICovXG5cbmV4cG9ydHMuZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scyA9IHJlcXVpcmUoJy4vZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scycpO1xuXG4vKiFcbiAqIEdldCBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG1ldGhvZFxuICovXG5cbmV4cG9ydHMuZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuL2dldE93bkVudW1lcmFibGVQcm9wZXJ0aWVzJyk7XG5cbi8qIVxuICogQ2hlY2tzIGVycm9yIGFnYWluc3QgYSBnaXZlbiBzZXQgb2YgY3JpdGVyaWFcbiAqL1xuXG5leHBvcnRzLmNoZWNrRXJyb3IgPSByZXF1aXJlKCdjaGVjay1lcnJvcicpO1xuXG4vKiFcbiAqIFByb3hpZnkgdXRpbFxuICovXG5cbmV4cG9ydHMucHJveGlmeSA9IHJlcXVpcmUoJy4vcHJveGlmeScpO1xuXG4vKiFcbiAqIGFkZExlbmd0aEd1YXJkIHV0aWxcbiAqL1xuXG5leHBvcnRzLmFkZExlbmd0aEd1YXJkID0gcmVxdWlyZSgnLi9hZGRMZW5ndGhHdWFyZCcpO1xuXG4vKiFcbiAqIGlzUHJveHlFbmFibGVkIGhlbHBlclxuICovXG5cbmV4cG9ydHMuaXNQcm94eUVuYWJsZWQgPSByZXF1aXJlKCcuL2lzUHJveHlFbmFibGVkJyk7XG5cbi8qIVxuICogaXNOYU4gbWV0aG9kXG4gKi9cblxuZXhwb3J0cy5pc05hTiA9IHJlcXVpcmUoJy4vaXNOYU4nKTtcbiIsIi8vIFRoaXMgaXMgKGFsbW9zdCkgZGlyZWN0bHkgZnJvbSBOb2RlLmpzIHV0aWxzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvYmxvYi9mOGMzMzVkMGNhZjQ3ZjE2ZDMxNDEzZjg5YWEyOGVkYTM4NzhlM2FhL2xpYi91dGlsLmpzXG5cbnZhciBnZXROYW1lID0gcmVxdWlyZSgnZ2V0LWZ1bmMtbmFtZScpO1xudmFyIGdldFByb3BlcnRpZXMgPSByZXF1aXJlKCcuL2dldFByb3BlcnRpZXMnKTtcbnZhciBnZXRFbnVtZXJhYmxlUHJvcGVydGllcyA9IHJlcXVpcmUoJy4vZ2V0RW51bWVyYWJsZVByb3BlcnRpZXMnKTtcbnZhciBjb25maWcgPSByZXF1aXJlKCcuLi9jb25maWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnNwZWN0O1xuXG4vKipcbiAqICMjIyAuaW5zcGVjdChvYmosIFtzaG93SGlkZGVuXSwgW2RlcHRoXSwgW2NvbG9yc10pXG4gKlxuICogRWNob2VzIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcmllcyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtCb29sZWFufSBzaG93SGlkZGVuIEZsYWcgdGhhdCBzaG93cyBoaWRkZW4gKG5vdCBlbnVtZXJhYmxlKVxuICogICAgcHJvcGVydGllcyBvZiBvYmplY3RzLiBEZWZhdWx0IGlzIGZhbHNlLlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlcHRoIERlcHRoIGluIHdoaWNoIHRvIGRlc2NlbmQgaW4gb2JqZWN0LiBEZWZhdWx0IGlzIDIuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGNvbG9ycyBGbGFnIHRvIHR1cm4gb24gQU5TSSBlc2NhcGUgY29kZXMgdG8gY29sb3IgdGhlXG4gKiAgICBvdXRwdXQuIERlZmF1bHQgaXMgZmFsc2UgKG5vIGNvbG9yaW5nKS5cbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGluc3BlY3RcbiAqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMpIHtcbiAgdmFyIGN0eCA9IHtcbiAgICBzaG93SGlkZGVuOiBzaG93SGlkZGVuLFxuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0cjsgfVxuICB9O1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosICh0eXBlb2YgZGVwdGggPT09ICd1bmRlZmluZWQnID8gMiA6IGRlcHRoKSk7XG59XG5cbi8vIFJldHVybnMgdHJ1ZSBpZiBvYmplY3QgaXMgYSBET00gZWxlbWVudC5cbnZhciBpc0RPTUVsZW1lbnQgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gIGlmICh0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBvYmplY3QgJiZcbiAgICAgIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICAnbm9kZVR5cGUnIGluIG9iamVjdCAmJlxuICAgICAgb2JqZWN0Lm5vZGVUeXBlID09PSAxICYmXG4gICAgICB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJztcbiAgfVxufTtcblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUuaW5zcGVjdCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAodHlwZW9mIHJldCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBJZiB0aGlzIGlzIGEgRE9NIGVsZW1lbnQsIHRyeSB0byBnZXQgdGhlIG91dGVyIEhUTUwuXG4gIGlmIChpc0RPTUVsZW1lbnQodmFsdWUpKSB7XG4gICAgaWYgKCdvdXRlckhUTUwnIGluIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUub3V0ZXJIVE1MO1xuICAgICAgLy8gVGhpcyB2YWx1ZSBkb2VzIG5vdCBoYXZlIGFuIG91dGVySFRNTCBhdHRyaWJ1dGUsXG4gICAgICAvLyAgIGl0IGNvdWxkIHN0aWxsIGJlIGFuIFhNTCBlbGVtZW50XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEF0dGVtcHQgdG8gc2VyaWFsaXplIGl0XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoZG9jdW1lbnQueG1sVmVyc2lvbikge1xuICAgICAgICAgIHZhciB4bWxTZXJpYWxpemVyID0gbmV3IFhNTFNlcmlhbGl6ZXIoKTtcbiAgICAgICAgICByZXR1cm4geG1sU2VyaWFsaXplci5zZXJpYWxpemVUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gRmlyZWZveCAxMS0gZG8gbm90IHN1cHBvcnQgb3V0ZXJIVE1MXG4gICAgICAgICAgLy8gICBJdCBkb2VzLCBob3dldmVyLCBzdXBwb3J0IGlubmVySFRNTFxuICAgICAgICAgIC8vICAgVXNlIHRoZSBmb2xsb3dpbmcgdG8gcmVuZGVyIHRoZSBlbGVtZW50XG4gICAgICAgICAgdmFyIG5zID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG4gICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhucywgJ18nKTtcblxuICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpKTtcbiAgICAgICAgICB2YXIgaHRtbCA9IGNvbnRhaW5lci5pbm5lckhUTUxcbiAgICAgICAgICAgIC5yZXBsYWNlKCc+PCcsICc+JyArIHZhbHVlLmlubmVySFRNTCArICc8Jyk7XG4gICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgIHJldHVybiBodG1sO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gVGhpcyBjb3VsZCBiZSBhIG5vbi1uYXRpdmUgRE9NIGltcGxlbWVudGF0aW9uLFxuICAgICAgICAvLyAgIGNvbnRpbnVlIHdpdGggdGhlIG5vcm1hbCBmbG93OlxuICAgICAgICAvLyAgIHByaW50aW5nIHRoZSBlbGVtZW50IGFzIGlmIGl0IGlzIGFuIG9iamVjdC5cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciB2aXNpYmxlS2V5cyA9IGdldEVudW1lcmFibGVQcm9wZXJ0aWVzKHZhbHVlKTtcbiAgdmFyIGtleXMgPSBjdHguc2hvd0hpZGRlbiA/IGdldFByb3BlcnRpZXModmFsdWUpIDogdmlzaWJsZUtleXM7XG5cbiAgdmFyIG5hbWUsIG5hbWVTdWZmaXg7XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0LlxuICAvLyBJbiBJRSwgZXJyb3JzIGhhdmUgYSBzaW5nbGUgYHN0YWNrYCBwcm9wZXJ0eSwgb3IgaWYgdGhleSBhcmUgdmFuaWxsYSBgRXJyb3JgLFxuICAvLyBhIGBzdGFja2AgcGx1cyBgZGVzY3JpcHRpb25gIHByb3BlcnR5OyBpZ25vcmUgdGhvc2UgZm9yIGNvbnNpc3RlbmN5LlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgfHwgKGlzRXJyb3IodmFsdWUpICYmIChcbiAgICAgIChrZXlzLmxlbmd0aCA9PT0gMSAmJiBrZXlzWzBdID09PSAnc3RhY2snKSB8fFxuICAgICAgKGtleXMubGVuZ3RoID09PSAyICYmIGtleXNbMF0gPT09ICdkZXNjcmlwdGlvbicgJiYga2V5c1sxXSA9PT0gJ3N0YWNrJylcbiAgICAgKSkpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBuYW1lID0gZ2V0TmFtZSh2YWx1ZSk7XG4gICAgICBuYW1lU3VmZml4ID0gbmFtZSA/ICc6ICcgKyBuYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lU3VmZml4ICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJ1xuICAgICwgYXJyYXkgPSBmYWxzZVxuICAgICwgdHlwZWRBcnJheSA9IGZhbHNlXG4gICAgLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIGlmIChpc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgdHlwZWRBcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG5hbWUgPSBnZXROYW1lKHZhbHVlKTtcbiAgICBuYW1lU3VmZml4ID0gbmFtZSA/ICc6ICcgKyBuYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG5hbWVTdWZmaXggKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSBpZiAodHlwZWRBcnJheSkge1xuICAgIHJldHVybiBmb3JtYXRUeXBlZEFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAodmFsdWUgPT09IDAgJiYgKDEvdmFsdWUpID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCctMCcsICdudW1iZXInKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuXG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSh2YWx1ZS50b1N0cmluZygpLCAnc3ltYm9sJyk7XG4gIH1cbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cblxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFR5cGVkQXJyYXkodmFsdWUpIHtcbiAgdmFyIHN0ciA9ICdbICc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7ICsraSkge1xuICAgIGlmIChzdHIubGVuZ3RoID49IGNvbmZpZy50cnVuY2F0ZVRocmVzaG9sZCAtIDcpIHtcbiAgICAgIHN0ciArPSAnLi4uJztcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBzdHIgKz0gdmFsdWVbaV0gKyAnLCAnO1xuICB9XG4gIHN0ciArPSAnIF0nO1xuXG4gIC8vIFJlbW92aW5nIHRyYWlsaW5nIGAsIGAgaWYgdGhlIGFycmF5IHdhcyBub3QgdHJ1bmNhdGVkXG4gIGlmIChzdHIuaW5kZXhPZignLCAgXScpICE9PSAtMSkge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKCcsICBdJywgJyBdJyk7XG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lO1xuICB2YXIgcHJvcERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpO1xuICB2YXIgc3RyO1xuXG4gIGlmIChwcm9wRGVzY3JpcHRvcikge1xuICAgIGlmIChwcm9wRGVzY3JpcHRvci5nZXQpIHtcbiAgICAgIGlmIChwcm9wRGVzY3JpcHRvci5zZXQpIHtcbiAgICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcERlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh2aXNpYmxlS2V5cy5pbmRleE9mKGtleSkgPCAwKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKHZhbHVlW2tleV0pIDwgMCkge1xuICAgICAgaWYgKHJlY3Vyc2VUaW1lcyA9PT0gbnVsbCkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlW2tleV0sIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZVtrZXldLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIHJldHVybiBwcmV2ICsgY3VyLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuZnVuY3Rpb24gaXNUeXBlZEFycmF5KGFyKSB7XG4gIC8vIFVuZm9ydHVuYXRlbHkgdGhlcmUncyBubyB3YXkgdG8gY2hlY2sgaWYgYW4gb2JqZWN0IGlzIGEgVHlwZWRBcnJheVxuICAvLyBXZSBoYXZlIHRvIGNoZWNrIGlmIGl0J3Mgb25lIG9mIHRoZXNlIHR5cGVzXG4gIHJldHVybiAodHlwZW9mIGFyID09PSAnb2JqZWN0JyAmJiAvXFx3K0FycmF5XSQvLnRlc3Qob2JqZWN0VG9TdHJpbmcoYXIpKSk7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpIHx8XG4gICAgICAgICAodHlwZW9mIGFyID09PSAnb2JqZWN0JyAmJiBvYmplY3RUb1N0cmluZyhhcikgPT09ICdbb2JqZWN0IEFycmF5XScpO1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gdHlwZW9mIHJlID09PSAnb2JqZWN0JyAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gdHlwZW9mIGQgPT09ICdvYmplY3QnICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gdHlwZW9mIGUgPT09ICdvYmplY3QnICYmIG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nO1xufVxuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG4iLCIvKiFcbiAqIENoYWkgLSBpc05hTiB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE1IFNha3RoaXByaXlhbiBWYWlyYW1hbmkgPHRoZWNoYXJnaW5ndm9sY2Fub0BnbWFpbC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuaXNOYU4odmFsdWUpXG4gKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBOYU4gb3Igbm90LlxuICpcbiAqICAgICB1dGlscy5pc05hTihOYU4pOyAvLyB0cnVlXG4gKlxuICogQHBhcmFtIHtWYWx1ZX0gVGhlIHZhbHVlIHdoaWNoIGhhcyB0byBiZSBjaGVja2VkIGlmIGl0IGlzIE5hTlxuICogQG5hbWUgaXNOYU5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gIC8vIFJlZmVyIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc25hbi1udW1iZXJcbiAgLy8gc2VjdGlvbidzIE5PVEUuXG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbi8vIElmIEVDTUFTY3JpcHQgNidzIE51bWJlci5pc05hTiBpcyBwcmVzZW50LCBwcmVmZXIgdGhhdC5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzTmFOIHx8IGlzTmFOO1xuIiwidmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xuXG4vKiFcbiAqIENoYWkgLSBpc1Byb3h5RW5hYmxlZCBoZWxwZXJcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuaXNQcm94eUVuYWJsZWQoKVxuICpcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjaGVjayBpZiBDaGFpJ3MgcHJveHkgcHJvdGVjdGlvbiBmZWF0dXJlIGlzIGVuYWJsZWQuIElmXG4gKiBwcm94aWVzIGFyZSB1bnN1cHBvcnRlZCBvciBkaXNhYmxlZCB2aWEgdGhlIHVzZXIncyBDaGFpIGNvbmZpZywgdGhlbiByZXR1cm5cbiAqIGZhbHNlLiBPdGhlcndpc2UsIHJldHVybiB0cnVlLlxuICpcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGlzUHJveHlFbmFibGVkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1Byb3h5RW5hYmxlZCgpIHtcbiAgcmV0dXJuIGNvbmZpZy51c2VQcm94eSAmJlxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCc7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gZmxhZyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIGluc3BlY3QgPSByZXF1aXJlKCcuL2luc3BlY3QnKTtcbnZhciBjb25maWcgPSByZXF1aXJlKCcuLi9jb25maWcnKTtcblxuLyoqXG4gKiAjIyMgLm9iakRpc3BsYXkob2JqZWN0KVxuICpcbiAqIERldGVybWluZXMgaWYgYW4gb2JqZWN0IG9yIGFuIGFycmF5IG1hdGNoZXNcbiAqIGNyaXRlcmlhIHRvIGJlIGluc3BlY3RlZCBpbi1saW5lIGZvciBlcnJvclxuICogbWVzc2FnZXMgb3Igc2hvdWxkIGJlIHRydW5jYXRlZC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBqYXZhc2NyaXB0IG9iamVjdCB0byBpbnNwZWN0XG4gKiBAbmFtZSBvYmpEaXNwbGF5XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gb2JqRGlzcGxheShvYmopIHtcbiAgdmFyIHN0ciA9IGluc3BlY3Qob2JqKVxuICAgICwgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO1xuXG4gIGlmIChjb25maWcudHJ1bmNhdGVUaHJlc2hvbGQgJiYgc3RyLmxlbmd0aCA+PSBjb25maWcudHJ1bmNhdGVUaHJlc2hvbGQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJykge1xuICAgICAgcmV0dXJuICFvYmoubmFtZSB8fCBvYmoubmFtZSA9PT0gJydcbiAgICAgICAgPyAnW0Z1bmN0aW9uXSdcbiAgICAgICAgOiAnW0Z1bmN0aW9uOiAnICsgb2JqLm5hbWUgKyAnXSc7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm4gJ1sgQXJyYXkoJyArIG9iai5sZW5ndGggKyAnKSBdJztcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iailcbiAgICAgICAgLCBrc3RyID0ga2V5cy5sZW5ndGggPiAyXG4gICAgICAgICAgPyBrZXlzLnNwbGljZSgwLCAyKS5qb2luKCcsICcpICsgJywgLi4uJ1xuICAgICAgICAgIDoga2V5cy5qb2luKCcsICcpO1xuICAgICAgcmV0dXJuICd7IE9iamVjdCAoJyArIGtzdHIgKyAnKSB9JztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufTtcbiIsIi8qIVxuICogQ2hhaSAtIG92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIGNoYWkgPSByZXF1aXJlKCcuLi8uLi9jaGFpJyk7XG52YXIgdHJhbnNmZXJGbGFncyA9IHJlcXVpcmUoJy4vdHJhbnNmZXJGbGFncycpO1xuXG4vKipcbiAqICMjIyAub3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kKGN0eCwgbmFtZSwgbWV0aG9kLCBjaGFpbmluZ0JlaGF2aW9yKVxuICpcbiAqIE92ZXJ3cml0ZXMgYW4gYWxyZWFkeSBleGlzdGluZyBjaGFpbmFibGUgbWV0aG9kXG4gKiBhbmQgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBwcmV2aW91cyBmdW5jdGlvbiBvclxuICogcHJvcGVydHkuICBNdXN0IHJldHVybiBmdW5jdGlvbnMgdG8gYmUgdXNlZCBmb3JcbiAqIG5hbWUuXG4gKlxuICogICAgIHV0aWxzLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZChjaGFpLkFzc2VydGlvbi5wcm90b3R5cGUsICdsZW5ndGhPZicsXG4gKiAgICAgICBmdW5jdGlvbiAoX3N1cGVyKSB7XG4gKiAgICAgICB9XG4gKiAgICAgLCBmdW5jdGlvbiAoX3N1cGVyKSB7XG4gKiAgICAgICB9XG4gKiAgICAgKTtcbiAqXG4gKiBDYW4gYWxzbyBiZSBhY2Nlc3NlZCBkaXJlY3RseSBmcm9tIGBjaGFpLkFzc2VydGlvbmAuXG4gKlxuICogICAgIGNoYWkuQXNzZXJ0aW9uLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCgnZm9vJywgZm4sIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChteUZvbykudG8uaGF2ZS5sZW5ndGhPZigzKTtcbiAqICAgICBleHBlY3QobXlGb28pLnRvLmhhdmUubGVuZ3RoT2YuYWJvdmUoMyk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGN0eCBvYmplY3Qgd2hvc2UgbWV0aG9kIC8gcHJvcGVydHkgaXMgdG8gYmUgb3ZlcndyaXR0ZW5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIG1ldGhvZCAvIHByb3BlcnR5IHRvIG92ZXJ3cml0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNoYWluaW5nQmVoYXZpb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgcHJvcGVydHlcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIG92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCwgY2hhaW5pbmdCZWhhdmlvcikge1xuICB2YXIgY2hhaW5hYmxlQmVoYXZpb3IgPSBjdHguX19tZXRob2RzW25hbWVdO1xuXG4gIHZhciBfY2hhaW5pbmdCZWhhdmlvciA9IGNoYWluYWJsZUJlaGF2aW9yLmNoYWluaW5nQmVoYXZpb3I7XG4gIGNoYWluYWJsZUJlaGF2aW9yLmNoYWluaW5nQmVoYXZpb3IgPSBmdW5jdGlvbiBvdmVyd3JpdGluZ0NoYWluYWJsZU1ldGhvZEdldHRlcigpIHtcbiAgICB2YXIgcmVzdWx0ID0gY2hhaW5pbmdCZWhhdmlvcihfY2hhaW5pbmdCZWhhdmlvcikuY2FsbCh0aGlzKTtcbiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBjaGFpLkFzc2VydGlvbigpO1xuICAgIHRyYW5zZmVyRmxhZ3ModGhpcywgbmV3QXNzZXJ0aW9uKTtcbiAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICB9O1xuXG4gIHZhciBfbWV0aG9kID0gY2hhaW5hYmxlQmVoYXZpb3IubWV0aG9kO1xuICBjaGFpbmFibGVCZWhhdmlvci5tZXRob2QgPSBmdW5jdGlvbiBvdmVyd3JpdGluZ0NoYWluYWJsZU1ldGhvZFdyYXBwZXIoKSB7XG4gICAgdmFyIHJlc3VsdCA9IG1ldGhvZChfbWV0aG9kKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgbmV3QXNzZXJ0aW9uID0gbmV3IGNoYWkuQXNzZXJ0aW9uKCk7XG4gICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgIHJldHVybiBuZXdBc3NlcnRpb247XG4gIH07XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gb3ZlcndyaXRlTWV0aG9kIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG52YXIgYWRkTGVuZ3RoR3VhcmQgPSByZXF1aXJlKCcuL2FkZExlbmd0aEd1YXJkJyk7XG52YXIgY2hhaSA9IHJlcXVpcmUoJy4uLy4uL2NoYWknKTtcbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJyk7XG52YXIgcHJveGlmeSA9IHJlcXVpcmUoJy4vcHJveGlmeScpO1xudmFyIHRyYW5zZmVyRmxhZ3MgPSByZXF1aXJlKCcuL3RyYW5zZmVyRmxhZ3MnKTtcblxuLyoqXG4gKiAjIyMgLm92ZXJ3cml0ZU1ldGhvZChjdHgsIG5hbWUsIGZuKVxuICpcbiAqIE92ZXJ3cml0ZXMgYW4gYWxyZWFkeSBleGlzdGluZyBtZXRob2QgYW5kIHByb3ZpZGVzXG4gKiBhY2Nlc3MgdG8gcHJldmlvdXMgZnVuY3Rpb24uIE11c3QgcmV0dXJuIGZ1bmN0aW9uXG4gKiB0byBiZSB1c2VkIGZvciBuYW1lLlxuICpcbiAqICAgICB1dGlscy5vdmVyd3JpdGVNZXRob2QoY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLCAnZXF1YWwnLCBmdW5jdGlvbiAoX3N1cGVyKSB7XG4gKiAgICAgICByZXR1cm4gZnVuY3Rpb24gKHN0cikge1xuICogICAgICAgICB2YXIgb2JqID0gdXRpbHMuZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gKiAgICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBGb28pIHtcbiAqICAgICAgICAgICBuZXcgY2hhaS5Bc3NlcnRpb24ob2JqLnZhbHVlKS50by5lcXVhbChzdHIpO1xuICogICAgICAgICB9IGVsc2Uge1xuICogICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5vdmVyd3JpdGVNZXRob2QoJ2ZvbycsIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChteUZvbykudG8uZXF1YWwoJ2JhcicpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHggb2JqZWN0IHdob3NlIG1ldGhvZCBpcyB0byBiZSBvdmVyd3JpdHRlblxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgbWV0aG9kIHRvIG92ZXJ3cml0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIG92ZXJ3cml0ZU1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG92ZXJ3cml0ZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCkge1xuICB2YXIgX21ldGhvZCA9IGN0eFtuYW1lXVxuICAgICwgX3N1cGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG5hbWUgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgfTtcblxuICBpZiAoX21ldGhvZCAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2YgX21ldGhvZClcbiAgICBfc3VwZXIgPSBfbWV0aG9kO1xuXG4gIHZhciBvdmVyd3JpdGluZ01ldGhvZFdyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gU2V0dGluZyB0aGUgYHNzZmlgIGZsYWcgdG8gYG92ZXJ3cml0aW5nTWV0aG9kV3JhcHBlcmAgY2F1c2VzIHRoaXNcbiAgICAvLyBmdW5jdGlvbiB0byBiZSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uIGZyYW1lcyBmcm9tXG4gICAgLy8gdGhlIHN0YWNrIHRyYWNlIG9mIGEgZmFpbGVkIGFzc2VydGlvbi5cbiAgICAvL1xuICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWYgdGhlXG4gICAgLy8gYGxvY2tTc2ZpYCBmbGFnIGlzbid0IHNldC5cbiAgICAvL1xuICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIGVpdGhlciB0aGlzIGFzc2VydGlvbiBoYXMgYmVlblxuICAgIC8vIG92ZXJ3cml0dGVuIGJ5IGFub3RoZXIgYXNzZXJ0aW9uLCBvciB0aGlzIGFzc2VydGlvbiBpcyBiZWluZyBpbnZva2VkIGZyb21cbiAgICAvLyBpbnNpZGUgb2YgYW5vdGhlciBhc3NlcnRpb24uIEluIHRoZSBmaXJzdCBjYXNlLCB0aGUgYHNzZmlgIGZsYWcgaGFzXG4gICAgLy8gYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLiBJbiB0aGUgc2Vjb25kIGNhc2UsIHRoZVxuICAgIC8vIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdXRlciBhc3NlcnRpb24uXG4gICAgaWYgKCFmbGFnKHRoaXMsICdsb2NrU3NmaScpKSB7XG4gICAgICBmbGFnKHRoaXMsICdzc2ZpJywgb3ZlcndyaXRpbmdNZXRob2RXcmFwcGVyKTtcbiAgICB9XG5cbiAgICAvLyBTZXR0aW5nIHRoZSBgbG9ja1NzZmlgIGZsYWcgdG8gYHRydWVgIHByZXZlbnRzIHRoZSBvdmVyd3JpdHRlbiBhc3NlcnRpb25cbiAgICAvLyBmcm9tIGNoYW5naW5nIHRoZSBgc3NmaWAgZmxhZy4gQnkgdGhpcyBwb2ludCwgdGhlIGBzc2ZpYCBmbGFnIGlzIGFscmVhZHlcbiAgICAvLyBzZXQgdG8gdGhlIGNvcnJlY3Qgc3RhcnRpbmcgcG9pbnQgZm9yIHRoaXMgYXNzZXJ0aW9uLlxuICAgIHZhciBvcmlnTG9ja1NzZmkgPSBmbGFnKHRoaXMsICdsb2NrU3NmaScpO1xuICAgIGZsYWcodGhpcywgJ2xvY2tTc2ZpJywgdHJ1ZSk7XG4gICAgdmFyIHJlc3VsdCA9IG1ldGhvZChfc3VwZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgZmxhZyh0aGlzLCAnbG9ja1NzZmknLCBvcmlnTG9ja1NzZmkpO1xuXG4gICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgY2hhaS5Bc3NlcnRpb24oKTtcbiAgICB0cmFuc2ZlckZsYWdzKHRoaXMsIG5ld0Fzc2VydGlvbik7XG4gICAgcmV0dXJuIG5ld0Fzc2VydGlvbjtcbiAgfVxuXG4gIGFkZExlbmd0aEd1YXJkKG92ZXJ3cml0aW5nTWV0aG9kV3JhcHBlciwgbmFtZSwgZmFsc2UpO1xuICBjdHhbbmFtZV0gPSBwcm94aWZ5KG92ZXJ3cml0aW5nTWV0aG9kV3JhcHBlciwgbmFtZSk7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gb3ZlcndyaXRlUHJvcGVydHkgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciBjaGFpID0gcmVxdWlyZSgnLi4vLi4vY2hhaScpO1xudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcbnZhciBpc1Byb3h5RW5hYmxlZCA9IHJlcXVpcmUoJy4vaXNQcm94eUVuYWJsZWQnKTtcbnZhciB0cmFuc2ZlckZsYWdzID0gcmVxdWlyZSgnLi90cmFuc2ZlckZsYWdzJyk7XG5cbi8qKlxuICogIyMjIC5vdmVyd3JpdGVQcm9wZXJ0eShjdHgsIG5hbWUsIGZuKVxuICpcbiAqIE92ZXJ3cml0ZXMgYW4gYWxyZWFkeSBleGlzdGluZyBwcm9wZXJ0eSBnZXR0ZXIgYW5kIHByb3ZpZGVzXG4gKiBhY2Nlc3MgdG8gcHJldmlvdXMgdmFsdWUuIE11c3QgcmV0dXJuIGZ1bmN0aW9uIHRvIHVzZSBhcyBnZXR0ZXIuXG4gKlxuICogICAgIHV0aWxzLm92ZXJ3cml0ZVByb3BlcnR5KGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZSwgJ29rJywgZnVuY3Rpb24gKF9zdXBlcikge1xuICogICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAqICAgICAgICAgdmFyIG9iaiA9IHV0aWxzLmZsYWcodGhpcywgJ29iamVjdCcpO1xuICogICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgRm9vKSB7XG4gKiAgICAgICAgICAgbmV3IGNoYWkuQXNzZXJ0aW9uKG9iai5uYW1lKS50by5lcXVhbCgnYmFyJyk7XG4gKiAgICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9KTtcbiAqXG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5vdmVyd3JpdGVQcm9wZXJ0eSgnZm9vJywgZm4pO1xuICpcbiAqIFRoZW4gY2FuIGJlIHVzZWQgYXMgYW55IG90aGVyIGFzc2VydGlvbi5cbiAqXG4gKiAgICAgZXhwZWN0KG15Rm9vKS50by5iZS5vaztcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY3R4IG9iamVjdCB3aG9zZSBwcm9wZXJ0eSBpcyB0byBiZSBvdmVyd3JpdHRlblxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgcHJvcGVydHkgdG8gb3ZlcndyaXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXR0ZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZ2V0dGVyIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIG92ZXJ3cml0ZVByb3BlcnR5XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gb3ZlcndyaXRlUHJvcGVydHkoY3R4LCBuYW1lLCBnZXR0ZXIpIHtcbiAgdmFyIF9nZXQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGN0eCwgbmFtZSlcbiAgICAsIF9zdXBlciA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIGlmIChfZ2V0ICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiBfZ2V0LmdldClcbiAgICBfc3VwZXIgPSBfZ2V0LmdldFxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIG5hbWUsXG4gICAgeyBnZXQ6IGZ1bmN0aW9uIG92ZXJ3cml0aW5nUHJvcGVydHlHZXR0ZXIoKSB7XG4gICAgICAgIC8vIFNldHRpbmcgdGhlIGBzc2ZpYCBmbGFnIHRvIGBvdmVyd3JpdGluZ1Byb3BlcnR5R2V0dGVyYCBjYXVzZXMgdGhpc1xuICAgICAgICAvLyBmdW5jdGlvbiB0byBiZSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uIGZyYW1lc1xuICAgICAgICAvLyBmcm9tIHRoZSBzdGFjayB0cmFjZSBvZiBhIGZhaWxlZCBhc3NlcnRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWZcbiAgICAgICAgLy8gdGhlIGBsb2NrU3NmaWAgZmxhZyBpc24ndCBzZXQgYW5kIHByb3h5IHByb3RlY3Rpb24gaXMgZGlzYWJsZWQuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIGVpdGhlciB0aGlzIGFzc2VydGlvbiBoYXMgYmVlblxuICAgICAgICAvLyBvdmVyd3JpdHRlbiBieSBhbm90aGVyIGFzc2VydGlvbiwgb3IgdGhpcyBhc3NlcnRpb24gaXMgYmVpbmcgaW52b2tlZFxuICAgICAgICAvLyBmcm9tIGluc2lkZSBvZiBhbm90aGVyIGFzc2VydGlvbi4gSW4gdGhlIGZpcnN0IGNhc2UsIHRoZSBgc3NmaWAgZmxhZ1xuICAgICAgICAvLyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLiBJbiB0aGUgc2Vjb25kXG4gICAgICAgIC8vIGNhc2UsIHRoZSBgc3NmaWAgZmxhZyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3V0ZXIgYXNzZXJ0aW9uLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiBwcm94eSBwcm90ZWN0aW9uIGlzIGVuYWJsZWQsIHRoZW4gdGhlIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW5cbiAgICAgICAgLy8gc2V0IGJ5IHRoZSBwcm94eSBnZXR0ZXIuXG4gICAgICAgIGlmICghaXNQcm94eUVuYWJsZWQoKSAmJiAhZmxhZyh0aGlzLCAnbG9ja1NzZmknKSkge1xuICAgICAgICAgIGZsYWcodGhpcywgJ3NzZmknLCBvdmVyd3JpdGluZ1Byb3BlcnR5R2V0dGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHRpbmcgdGhlIGBsb2NrU3NmaWAgZmxhZyB0byBgdHJ1ZWAgcHJldmVudHMgdGhlIG92ZXJ3cml0dGVuXG4gICAgICAgIC8vIGFzc2VydGlvbiBmcm9tIGNoYW5naW5nIHRoZSBgc3NmaWAgZmxhZy4gQnkgdGhpcyBwb2ludCwgdGhlIGBzc2ZpYFxuICAgICAgICAvLyBmbGFnIGlzIGFscmVhZHkgc2V0IHRvIHRoZSBjb3JyZWN0IHN0YXJ0aW5nIHBvaW50IGZvciB0aGlzIGFzc2VydGlvbi5cbiAgICAgICAgdmFyIG9yaWdMb2NrU3NmaSA9IGZsYWcodGhpcywgJ2xvY2tTc2ZpJyk7XG4gICAgICAgIGZsYWcodGhpcywgJ2xvY2tTc2ZpJywgdHJ1ZSk7XG4gICAgICAgIHZhciByZXN1bHQgPSBnZXR0ZXIoX3N1cGVyKS5jYWxsKHRoaXMpO1xuICAgICAgICBmbGFnKHRoaXMsICdsb2NrU3NmaScsIG9yaWdMb2NrU3NmaSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgY2hhaS5Bc3NlcnRpb24oKTtcbiAgICAgICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgICAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICAgICAgfVxuICAgICwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufTtcbiIsInZhciBjb25maWcgPSByZXF1aXJlKCcuLi9jb25maWcnKTtcbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJyk7XG52YXIgZ2V0UHJvcGVydGllcyA9IHJlcXVpcmUoJy4vZ2V0UHJvcGVydGllcycpO1xudmFyIGlzUHJveHlFbmFibGVkID0gcmVxdWlyZSgnLi9pc1Byb3h5RW5hYmxlZCcpO1xuXG4vKiFcbiAqIENoYWkgLSBwcm94aWZ5IHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAucHJveGlmeShvYmplY3QpXG4gKlxuICogUmV0dXJuIGEgcHJveHkgb2YgZ2l2ZW4gb2JqZWN0IHRoYXQgdGhyb3dzIGFuIGVycm9yIHdoZW4gYSBub24tZXhpc3RlbnRcbiAqIHByb3BlcnR5IGlzIHJlYWQuIEJ5IGRlZmF1bHQsIHRoZSByb290IGNhdXNlIGlzIGFzc3VtZWQgdG8gYmUgYSBtaXNzcGVsbGVkXG4gKiBwcm9wZXJ0eSwgYW5kIHRodXMgYW4gYXR0ZW1wdCBpcyBtYWRlIHRvIG9mZmVyIGEgcmVhc29uYWJsZSBzdWdnZXN0aW9uIGZyb21cbiAqIHRoZSBsaXN0IG9mIGV4aXN0aW5nIHByb3BlcnRpZXMuIEhvd2V2ZXIsIGlmIGEgbm9uQ2hhaW5hYmxlTWV0aG9kTmFtZSBpc1xuICogcHJvdmlkZWQsIHRoZW4gdGhlIHJvb3QgY2F1c2UgaXMgaW5zdGVhZCBhIGZhaWx1cmUgdG8gaW52b2tlIGEgbm9uLWNoYWluYWJsZVxuICogbWV0aG9kIHByaW9yIHRvIHJlYWRpbmcgdGhlIG5vbi1leGlzdGVudCBwcm9wZXJ0eS5cbiAqXG4gKiBJZiBwcm94aWVzIGFyZSB1bnN1cHBvcnRlZCBvciBkaXNhYmxlZCB2aWEgdGhlIHVzZXIncyBDaGFpIGNvbmZpZywgdGhlblxuICogcmV0dXJuIG9iamVjdCB3aXRob3V0IG1vZGlmaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge1N0cmluZ30gbm9uQ2hhaW5hYmxlTWV0aG9kTmFtZVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgcHJveGlmeVxuICovXG5cbnZhciBidWlsdGlucyA9IFsnX19mbGFncycsICdfX21ldGhvZHMnLCAnX29iaicsICdhc3NlcnQnXTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcm94aWZ5KG9iaiwgbm9uQ2hhaW5hYmxlTWV0aG9kTmFtZSkge1xuICBpZiAoIWlzUHJveHlFbmFibGVkKCkpIHJldHVybiBvYmo7XG5cbiAgcmV0dXJuIG5ldyBQcm94eShvYmosIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIHByb3h5R2V0dGVyKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICAgIC8vIFRoaXMgY2hlY2sgaXMgaGVyZSBiZWNhdXNlIHdlIHNob3VsZCBub3QgdGhyb3cgZXJyb3JzIG9uIFN5bWJvbCBwcm9wZXJ0aWVzXG4gICAgICAvLyBzdWNoIGFzIGBTeW1ib2wudG9TdHJpbmdUYWdgLlxuICAgICAgLy8gVGhlIHZhbHVlcyBmb3Igd2hpY2ggYW4gZXJyb3Igc2hvdWxkIGJlIHRocm93biBjYW4gYmUgY29uZmlndXJlZCB1c2luZ1xuICAgICAgLy8gdGhlIGBjb25maWcucHJveHlFeGNsdWRlZEtleXNgIHNldHRpbmcuXG4gICAgICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgIGNvbmZpZy5wcm94eUV4Y2x1ZGVkS2V5cy5pbmRleE9mKHByb3BlcnR5KSA9PT0gLTEgJiZcbiAgICAgICAgICAhUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgLy8gU3BlY2lhbCBtZXNzYWdlIGZvciBpbnZhbGlkIHByb3BlcnR5IGFjY2VzcyBvZiBub24tY2hhaW5hYmxlIG1ldGhvZHMuXG4gICAgICAgIGlmIChub25DaGFpbmFibGVNZXRob2ROYW1lKSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgQ2hhaSBwcm9wZXJ0eTogJyArIG5vbkNoYWluYWJsZU1ldGhvZE5hbWUgKyAnLicgK1xuICAgICAgICAgICAgcHJvcGVydHkgKyAnLiBTZWUgZG9jcyBmb3IgcHJvcGVyIHVzYWdlIG9mIFwiJyArXG4gICAgICAgICAgICBub25DaGFpbmFibGVNZXRob2ROYW1lICsgJ1wiLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIHByb3BlcnR5IGlzIHJlYXNvbmFibHkgY2xvc2UgdG8gYW4gZXhpc3RpbmcgQ2hhaSBwcm9wZXJ0eSxcbiAgICAgICAgLy8gc3VnZ2VzdCB0aGF0IHByb3BlcnR5IHRvIHRoZSB1c2VyLiBPbmx5IHN1Z2dlc3QgcHJvcGVydGllcyB3aXRoIGFcbiAgICAgICAgLy8gZGlzdGFuY2UgbGVzcyB0aGFuIDQuXG4gICAgICAgIHZhciBzdWdnZXN0aW9uID0gbnVsbDtcbiAgICAgICAgdmFyIHN1Z2dlc3Rpb25EaXN0YW5jZSA9IDQ7XG4gICAgICAgIGdldFByb3BlcnRpZXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSAmJlxuICAgICAgICAgICAgYnVpbHRpbnMuaW5kZXhPZihwcm9wKSA9PT0gLTFcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBkaXN0ID0gc3RyaW5nRGlzdGFuY2VDYXBwZWQoXG4gICAgICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgICAgICBwcm9wLFxuICAgICAgICAgICAgICBzdWdnZXN0aW9uRGlzdGFuY2VcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoZGlzdCA8IHN1Z2dlc3Rpb25EaXN0YW5jZSkge1xuICAgICAgICAgICAgICBzdWdnZXN0aW9uID0gcHJvcDtcbiAgICAgICAgICAgICAgc3VnZ2VzdGlvbkRpc3RhbmNlID0gZGlzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzdWdnZXN0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgQ2hhaSBwcm9wZXJ0eTogJyArIHByb3BlcnR5ICtcbiAgICAgICAgICAgICcuIERpZCB5b3UgbWVhbiBcIicgKyBzdWdnZXN0aW9uICsgJ1wiPycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIENoYWkgcHJvcGVydHk6ICcgKyBwcm9wZXJ0eSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVXNlIHRoaXMgcHJveHkgZ2V0dGVyIGFzIHRoZSBzdGFydGluZyBwb2ludCBmb3IgcmVtb3ZpbmcgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIGZyYW1lcyBmcm9tIHRoZSBzdGFjayB0cmFjZSBvZiBhIGZhaWxlZCBhc3NlcnRpb24uIEZvciBwcm9wZXJ0eVxuICAgICAgLy8gYXNzZXJ0aW9ucywgdGhpcyBwcmV2ZW50cyB0aGUgcHJveHkgZ2V0dGVyIGZyb20gc2hvd2luZyB1cCBpbiB0aGUgc3RhY2tcbiAgICAgIC8vIHRyYWNlIHNpbmNlIGl0J3MgaW52b2tlZCBiZWZvcmUgdGhlIHByb3BlcnR5IGdldHRlci4gRm9yIG1ldGhvZCBhbmRcbiAgICAgIC8vIGNoYWluYWJsZSBtZXRob2QgYXNzZXJ0aW9ucywgdGhpcyBmbGFnIHdpbGwgZW5kIHVwIGdldHRpbmcgY2hhbmdlZCB0b1xuICAgICAgLy8gdGhlIG1ldGhvZCB3cmFwcGVyLCB3aGljaCBpcyBnb29kIHNpbmNlIHRoaXMgZnJhbWUgd2lsbCBubyBsb25nZXIgYmUgaW5cbiAgICAgIC8vIHRoZSBzdGFjayBvbmNlIHRoZSBtZXRob2QgaXMgaW52b2tlZC4gTm90ZSB0aGF0IENoYWkgYnVpbHRpbiBhc3NlcnRpb25cbiAgICAgIC8vIHByb3BlcnRpZXMgc3VjaCBhcyBgX19mbGFnc2AgYXJlIHNraXBwZWQgc2luY2UgdGhpcyBpcyBvbmx5IG1lYW50IHRvXG4gICAgICAvLyBjYXB0dXJlIHRoZSBzdGFydGluZyBwb2ludCBvZiBhbiBhc3NlcnRpb24uIFRoaXMgc3RlcCBpcyBhbHNvIHNraXBwZWRcbiAgICAgIC8vIGlmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aHVzIGluZGljYXRpbmcgdGhhdCB0aGlzIGFzc2VydGlvbiBpc1xuICAgICAgLy8gYmVpbmcgY2FsbGVkIGZyb20gd2l0aGluIGFub3RoZXIgYXNzZXJ0aW9uLiBJbiB0aGF0IGNhc2UsIHRoZSBgc3NmaWBcbiAgICAgIC8vIGZsYWcgaXMgYWxyZWFkeSBzZXQgdG8gdGhlIG91dGVyIGFzc2VydGlvbidzIHN0YXJ0aW5nIHBvaW50LlxuICAgICAgaWYgKGJ1aWx0aW5zLmluZGV4T2YocHJvcGVydHkpID09PSAtMSAmJiAhZmxhZyh0YXJnZXQsICdsb2NrU3NmaScpKSB7XG4gICAgICAgIGZsYWcodGFyZ2V0LCAnc3NmaScsIHByb3h5R2V0dGVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqICMgc3RyaW5nRGlzdGFuY2VDYXBwZWQoc3RyQSwgc3RyQiwgY2FwKVxuICogUmV0dXJuIHRoZSBMZXZlbnNodGVpbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byBzdHJpbmdzLCBidXQgbm8gbW9yZSB0aGFuIGNhcC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJBXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyQlxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlclxuICogQHJldHVybiB7bnVtYmVyfSBtaW4oc3RyaW5nIGRpc3RhbmNlIGJldHdlZW4gc3RyQSBhbmQgc3RyQiwgY2FwKVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3RyaW5nRGlzdGFuY2VDYXBwZWQoc3RyQSwgc3RyQiwgY2FwKSB7XG4gIGlmIChNYXRoLmFicyhzdHJBLmxlbmd0aCAtIHN0ckIubGVuZ3RoKSA+PSBjYXApIHtcbiAgICByZXR1cm4gY2FwO1xuICB9XG5cbiAgdmFyIG1lbW8gPSBbXTtcbiAgLy8gYG1lbW9gIGlzIGEgdHdvLWRpbWVuc2lvbmFsIGFycmF5IGNvbnRhaW5pbmcgZGlzdGFuY2VzLlxuICAvLyBtZW1vW2ldW2pdIGlzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHN0ckEuc2xpY2UoMCwgaSkgYW5kXG4gIC8vIHN0ckIuc2xpY2UoMCwgaikuXG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IHN0ckEubGVuZ3RoOyBpKyspIHtcbiAgICBtZW1vW2ldID0gQXJyYXkoc3RyQi5sZW5ndGggKyAxKS5maWxsKDApO1xuICAgIG1lbW9baV1bMF0gPSBpO1xuICB9XG4gIGZvciAodmFyIGogPSAwOyBqIDwgc3RyQi5sZW5ndGg7IGorKykge1xuICAgIG1lbW9bMF1bal0gPSBqO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gc3RyQS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaCA9IHN0ckEuY2hhckNvZGVBdChpIC0gMSk7XG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gc3RyQi5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKE1hdGguYWJzKGkgLSBqKSA+PSBjYXApIHtcbiAgICAgICAgbWVtb1tpXVtqXSA9IGNhcDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBtZW1vW2ldW2pdID0gTWF0aC5taW4oXG4gICAgICAgIG1lbW9baSAtIDFdW2pdICsgMSxcbiAgICAgICAgbWVtb1tpXVtqIC0gMV0gKyAxLFxuICAgICAgICBtZW1vW2kgLSAxXVtqIC0gMV0gK1xuICAgICAgICAgIChjaCA9PT0gc3RyQi5jaGFyQ29kZUF0KGogLSAxKSA/IDAgOiAxKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWVtb1tzdHJBLmxlbmd0aF1bc3RyQi5sZW5ndGhdO1xufVxuIiwiLyohXG4gKiBDaGFpIC0gdGVzdCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcblxuLyoqXG4gKiAjIyMgLnRlc3Qob2JqZWN0LCBleHByZXNzaW9uKVxuICpcbiAqIFRlc3QgYW5kIG9iamVjdCBmb3IgZXhwcmVzc2lvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IChjb25zdHJ1Y3RlZCBBc3NlcnRpb24pXG4gKiBAcGFyYW0ge0FyZ3VtZW50c30gY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLmFzc2VydCBhcmd1bWVudHNcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIHRlc3RcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRlc3Qob2JqLCBhcmdzKSB7XG4gIHZhciBuZWdhdGUgPSBmbGFnKG9iaiwgJ25lZ2F0ZScpXG4gICAgLCBleHByID0gYXJnc1swXTtcbiAgcmV0dXJuIG5lZ2F0ZSA/ICFleHByIDogZXhwcjtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSB0cmFuc2ZlckZsYWdzIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAudHJhbnNmZXJGbGFncyhhc3NlcnRpb24sIG9iamVjdCwgaW5jbHVkZUFsbCA9IHRydWUpXG4gKlxuICogVHJhbnNmZXIgYWxsIHRoZSBmbGFncyBmb3IgYGFzc2VydGlvbmAgdG8gYG9iamVjdGAuIElmXG4gKiBgaW5jbHVkZUFsbGAgaXMgc2V0IHRvIGBmYWxzZWAsIHRoZW4gdGhlIGJhc2UgQ2hhaVxuICogYXNzZXJ0aW9uIGZsYWdzIChuYW1lbHkgYG9iamVjdGAsIGBzc2ZpYCwgYGxvY2tTc2ZpYCxcbiAqIGFuZCBgbWVzc2FnZWApIHdpbGwgbm90IGJlIHRyYW5zZmVycmVkLlxuICpcbiAqXG4gKiAgICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBBc3NlcnRpb24oKTtcbiAqICAgICB1dGlscy50cmFuc2ZlckZsYWdzKGFzc2VydGlvbiwgbmV3QXNzZXJ0aW9uKTtcbiAqXG4gKiAgICAgdmFyIGFub3RoZXJBc3NlcnRpb24gPSBuZXcgQXNzZXJ0aW9uKG15T2JqKTtcbiAqICAgICB1dGlscy50cmFuc2ZlckZsYWdzKGFzc2VydGlvbiwgYW5vdGhlckFzc2VydGlvbiwgZmFsc2UpO1xuICpcbiAqIEBwYXJhbSB7QXNzZXJ0aW9ufSBhc3NlcnRpb24gdGhlIGFzc2VydGlvbiB0byB0cmFuc2ZlciB0aGUgZmxhZ3MgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCB0aGUgb2JqZWN0IHRvIHRyYW5zZmVyIHRoZSBmbGFncyB0bzsgdXN1YWxseSBhIG5ldyBhc3NlcnRpb25cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaW5jbHVkZUFsbFxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgdHJhbnNmZXJGbGFnc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2ZlckZsYWdzKGFzc2VydGlvbiwgb2JqZWN0LCBpbmNsdWRlQWxsKSB7XG4gIHZhciBmbGFncyA9IGFzc2VydGlvbi5fX2ZsYWdzIHx8IChhc3NlcnRpb24uX19mbGFncyA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG4gIGlmICghb2JqZWN0Ll9fZmxhZ3MpIHtcbiAgICBvYmplY3QuX19mbGFncyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cblxuICBpbmNsdWRlQWxsID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMyA/IGluY2x1ZGVBbGwgOiB0cnVlO1xuXG4gIGZvciAodmFyIGZsYWcgaW4gZmxhZ3MpIHtcbiAgICBpZiAoaW5jbHVkZUFsbCB8fFxuICAgICAgICAoZmxhZyAhPT0gJ29iamVjdCcgJiYgZmxhZyAhPT0gJ3NzZmknICYmIGZsYWcgIT09ICdsb2NrU3NmaScgJiYgZmxhZyAhPSAnbWVzc2FnZScpKSB7XG4gICAgICBvYmplY3QuX19mbGFnc1tmbGFnXSA9IGZsYWdzW2ZsYWddO1xuICAgIH1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogIVxuICogQ2hhaSAtIGNoZWNrRXJyb3IgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNiBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5jaGVja0Vycm9yXG4gKlxuICogQ2hlY2tzIHRoYXQgYW4gZXJyb3IgY29uZm9ybXMgdG8gYSBnaXZlbiBzZXQgb2YgY3JpdGVyaWEgYW5kL29yIHJldHJpZXZlcyBpbmZvcm1hdGlvbiBhYm91dCBpdC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbi8qKlxuICogIyMjIC5jb21wYXRpYmxlSW5zdGFuY2UodGhyb3duLCBlcnJvckxpa2UpXG4gKlxuICogQ2hlY2tzIGlmIHR3byBpbnN0YW5jZXMgYXJlIGNvbXBhdGlibGUgKHN0cmljdCBlcXVhbCkuXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGVycm9yTGlrZSBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRXJyb3IsIGJlY2F1c2UgaW5zdGFuY2VzXG4gKiBjYW4gb25seSBiZSBjb21wYXRpYmxlIGlmIHRoZXkncmUgYm90aCBlcnJvciBpbnN0YW5jZXMuXG4gKlxuICogQG5hbWUgY29tcGF0aWJsZUluc3RhbmNlXG4gKiBAcGFyYW0ge0Vycm9yfSB0aHJvd24gZXJyb3JcbiAqIEBwYXJhbSB7RXJyb3J8RXJyb3JDb25zdHJ1Y3Rvcn0gZXJyb3JMaWtlIG9iamVjdCB0byBjb21wYXJlIGFnYWluc3RcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY29tcGF0aWJsZUluc3RhbmNlKHRocm93biwgZXJyb3JMaWtlKSB7XG4gIHJldHVybiBlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvciAmJiB0aHJvd24gPT09IGVycm9yTGlrZTtcbn1cblxuLyoqXG4gKiAjIyMgLmNvbXBhdGlibGVDb25zdHJ1Y3Rvcih0aHJvd24sIGVycm9yTGlrZSlcbiAqXG4gKiBDaGVja3MgaWYgdHdvIGNvbnN0cnVjdG9ycyBhcmUgY29tcGF0aWJsZS5cbiAqIFRoaXMgZnVuY3Rpb24gY2FuIHJlY2VpdmUgZWl0aGVyIGFuIGVycm9yIGNvbnN0cnVjdG9yIG9yXG4gKiBhbiBlcnJvciBpbnN0YW5jZSBhcyB0aGUgYGVycm9yTGlrZWAgYXJndW1lbnQuXG4gKiBDb25zdHJ1Y3RvcnMgYXJlIGNvbXBhdGlibGUgaWYgdGhleSdyZSB0aGUgc2FtZSBvciBpZiBvbmUgaXNcbiAqIGFuIGluc3RhbmNlIG9mIGFub3RoZXIuXG4gKlxuICogQG5hbWUgY29tcGF0aWJsZUNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0Vycm9yfSB0aHJvd24gZXJyb3JcbiAqIEBwYXJhbSB7RXJyb3J8RXJyb3JDb25zdHJ1Y3Rvcn0gZXJyb3JMaWtlIG9iamVjdCB0byBjb21wYXJlIGFnYWluc3RcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY29tcGF0aWJsZUNvbnN0cnVjdG9yKHRocm93biwgZXJyb3JMaWtlKSB7XG4gIGlmIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIC8vIElmIGBlcnJvckxpa2VgIGlzIGFuIGluc3RhbmNlIG9mIGFueSBlcnJvciB3ZSBjb21wYXJlIHRoZWlyIGNvbnN0cnVjdG9yc1xuICAgIHJldHVybiB0aHJvd24uY29uc3RydWN0b3IgPT09IGVycm9yTGlrZS5jb25zdHJ1Y3RvciB8fCB0aHJvd24gaW5zdGFuY2VvZiBlcnJvckxpa2UuY29uc3RydWN0b3I7XG4gIH0gZWxzZSBpZiAoZXJyb3JMaWtlLnByb3RvdHlwZSBpbnN0YW5jZW9mIEVycm9yIHx8IGVycm9yTGlrZSA9PT0gRXJyb3IpIHtcbiAgICAvLyBJZiBgZXJyb3JMaWtlYCBpcyBhIGNvbnN0cnVjdG9yIHRoYXQgaW5oZXJpdHMgZnJvbSBFcnJvciwgd2UgY29tcGFyZSBgdGhyb3duYCB0byBgZXJyb3JMaWtlYCBkaXJlY3RseVxuICAgIHJldHVybiB0aHJvd24uY29uc3RydWN0b3IgPT09IGVycm9yTGlrZSB8fCB0aHJvd24gaW5zdGFuY2VvZiBlcnJvckxpa2U7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogIyMjIC5jb21wYXRpYmxlTWVzc2FnZSh0aHJvd24sIGVyck1hdGNoZXIpXG4gKlxuICogQ2hlY2tzIGlmIGFuIGVycm9yJ3MgbWVzc2FnZSBpcyBjb21wYXRpYmxlIHdpdGggYSBtYXRjaGVyIChTdHJpbmcgb3IgUmVnRXhwKS5cbiAqIElmIHRoZSBtZXNzYWdlIGNvbnRhaW5zIHRoZSBTdHJpbmcgb3IgcGFzc2VzIHRoZSBSZWdFeHAgdGVzdCxcbiAqIGl0IGlzIGNvbnNpZGVyZWQgY29tcGF0aWJsZS5cbiAqXG4gKiBAbmFtZSBjb21wYXRpYmxlTWVzc2FnZVxuICogQHBhcmFtIHtFcnJvcn0gdGhyb3duIGVycm9yXG4gKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGVyck1hdGNoZXIgdG8gbG9vayBmb3IgaW50byB0aGUgbWVzc2FnZVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjb21wYXRpYmxlTWVzc2FnZSh0aHJvd24sIGVyck1hdGNoZXIpIHtcbiAgdmFyIGNvbXBhcmlzb25TdHJpbmcgPSB0eXBlb2YgdGhyb3duID09PSAnc3RyaW5nJyA/IHRocm93biA6IHRocm93bi5tZXNzYWdlO1xuICBpZiAoZXJyTWF0Y2hlciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiBlcnJNYXRjaGVyLnRlc3QoY29tcGFyaXNvblN0cmluZyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVyck1hdGNoZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGNvbXBhcmlzb25TdHJpbmcuaW5kZXhPZihlcnJNYXRjaGVyKSAhPT0gLTE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbWFnaWMtbnVtYmVyc1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqICMjIyAuZ2V0RnVuY3Rpb25OYW1lKGNvbnN0cnVjdG9yRm4pXG4gKlxuICogUmV0dXJucyB0aGUgbmFtZSBvZiBhIGZ1bmN0aW9uLlxuICogVGhpcyBhbHNvIGluY2x1ZGVzIGEgcG9seWZpbGwgZnVuY3Rpb24gaWYgYGNvbnN0cnVjdG9yRm4ubmFtZWAgaXMgbm90IGRlZmluZWQuXG4gKlxuICogQG5hbWUgZ2V0RnVuY3Rpb25OYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvckZuXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgZnVuY3Rpb25OYW1lTWF0Y2ggPSAvXFxzKmZ1bmN0aW9uKD86XFxzfFxccypcXC9cXCpbXig/OipcXC8pXStcXCpcXC9cXHMqKSooW15cXChcXC9dKykvO1xuZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lKGNvbnN0cnVjdG9yRm4pIHtcbiAgdmFyIG5hbWUgPSAnJztcbiAgaWYgKHR5cGVvZiBjb25zdHJ1Y3RvckZuLm5hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gSGVyZSB3ZSBydW4gYSBwb2x5ZmlsbCBpZiBjb25zdHJ1Y3RvckZuLm5hbWUgaXMgbm90IGRlZmluZWRcbiAgICB2YXIgbWF0Y2ggPSBTdHJpbmcoY29uc3RydWN0b3JGbikubWF0Y2goZnVuY3Rpb25OYW1lTWF0Y2gpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgbmFtZSA9IG1hdGNoWzFdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBuYW1lID0gY29uc3RydWN0b3JGbi5uYW1lO1xuICB9XG5cbiAgcmV0dXJuIG5hbWU7XG59XG5cbi8qKlxuICogIyMjIC5nZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKVxuICpcbiAqIEdldHMgdGhlIGNvbnN0cnVjdG9yIG5hbWUgZm9yIGFuIEVycm9yIGluc3RhbmNlIG9yIGNvbnN0cnVjdG9yIGl0c2VsZi5cbiAqXG4gKiBAbmFtZSBnZXRDb25zdHJ1Y3Rvck5hbWVcbiAqIEBwYXJhbSB7RXJyb3J8RXJyb3JDb25zdHJ1Y3Rvcn0gZXJyb3JMaWtlXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGdldENvbnN0cnVjdG9yTmFtZShlcnJvckxpa2UpIHtcbiAgdmFyIGNvbnN0cnVjdG9yTmFtZSA9IGVycm9yTGlrZTtcbiAgaWYgKGVycm9yTGlrZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgY29uc3RydWN0b3JOYW1lID0gZ2V0RnVuY3Rpb25OYW1lKGVycm9yTGlrZS5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVycm9yTGlrZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIElmIGBlcnJgIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBFcnJvciBpdCBpcyBhbiBlcnJvciBjb25zdHJ1Y3RvciBpdHNlbGYgb3IgYW5vdGhlciBmdW5jdGlvbi5cbiAgICAvLyBJZiB3ZSd2ZSBnb3QgYSBjb21tb24gZnVuY3Rpb24gd2UgZ2V0IGl0cyBuYW1lLCBvdGhlcndpc2Ugd2UgbWF5IG5lZWQgdG8gY3JlYXRlIGEgbmV3IGluc3RhbmNlXG4gICAgLy8gb2YgdGhlIGVycm9yIGp1c3QgaW4gY2FzZSBpdCdzIGEgcG9vcmx5LWNvbnN0cnVjdGVkIGVycm9yLiBQbGVhc2Ugc2VlIGNoYWlqcy9jaGFpL2lzc3Vlcy80NSB0byBrbm93IG1vcmUuXG4gICAgY29uc3RydWN0b3JOYW1lID0gZ2V0RnVuY3Rpb25OYW1lKGVycm9yTGlrZSkudHJpbSgpIHx8XG4gICAgICAgIGdldEZ1bmN0aW9uTmFtZShuZXcgZXJyb3JMaWtlKCkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgfVxuXG4gIHJldHVybiBjb25zdHJ1Y3Rvck5hbWU7XG59XG5cbi8qKlxuICogIyMjIC5nZXRNZXNzYWdlKGVycm9yTGlrZSlcbiAqXG4gKiBHZXRzIHRoZSBlcnJvciBtZXNzYWdlIGZyb20gYW4gZXJyb3IuXG4gKiBJZiBgZXJyYCBpcyBhIFN0cmluZyBpdHNlbGYsIHdlIHJldHVybiBpdC5cbiAqIElmIHRoZSBlcnJvciBoYXMgbm8gbWVzc2FnZSwgd2UgcmV0dXJuIGFuIGVtcHR5IHN0cmluZy5cbiAqXG4gKiBAbmFtZSBnZXRNZXNzYWdlXG4gKiBAcGFyYW0ge0Vycm9yfFN0cmluZ30gZXJyb3JMaWtlXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGdldE1lc3NhZ2UoZXJyb3JMaWtlKSB7XG4gIHZhciBtc2cgPSAnJztcbiAgaWYgKGVycm9yTGlrZSAmJiBlcnJvckxpa2UubWVzc2FnZSkge1xuICAgIG1zZyA9IGVycm9yTGlrZS5tZXNzYWdlO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlcnJvckxpa2UgPT09ICdzdHJpbmcnKSB7XG4gICAgbXNnID0gZXJyb3JMaWtlO1xuICB9XG5cbiAgcmV0dXJuIG1zZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbXBhdGlibGVJbnN0YW5jZTogY29tcGF0aWJsZUluc3RhbmNlLFxuICBjb21wYXRpYmxlQ29uc3RydWN0b3I6IGNvbXBhdGlibGVDb25zdHJ1Y3RvcixcbiAgY29tcGF0aWJsZU1lc3NhZ2U6IGNvbXBhdGlibGVNZXNzYWdlLFxuICBnZXRNZXNzYWdlOiBnZXRNZXNzYWdlLFxuICBnZXRDb25zdHJ1Y3Rvck5hbWU6IGdldENvbnN0cnVjdG9yTmFtZSxcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBnbG9iYWxzIFN5bWJvbDogZmFsc2UsIFVpbnQ4QXJyYXk6IGZhbHNlLCBXZWFrTWFwOiBmYWxzZSAqL1xuLyohXG4gKiBkZWVwLWVxbFxuICogQ29weXJpZ2h0KGMpIDIwMTMgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG52YXIgdHlwZSA9IHJlcXVpcmUoJ3R5cGUtZGV0ZWN0Jyk7XG5mdW5jdGlvbiBGYWtlTWFwKCkge1xuICB0aGlzLl9rZXkgPSAnY2hhaS9kZWVwLWVxbF9fJyArIE1hdGgucmFuZG9tKCkgKyBEYXRlLm5vdygpO1xufVxuXG5GYWtlTWFwLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXRNYXAoa2V5KSB7XG4gICAgcmV0dXJuIGtleVt0aGlzLl9rZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldE1hcChrZXksIHZhbHVlKSB7XG4gICAgaWYgKE9iamVjdC5pc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGtleSwgdGhpcy5fa2V5LCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9LFxufTtcblxudmFyIE1lbW9pemVNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyA/IFdlYWtNYXAgOiBGYWtlTWFwO1xuLyohXG4gKiBDaGVjayB0byBzZWUgaWYgdGhlIE1lbW9pemVNYXAgaGFzIHJlY29yZGVkIGEgcmVzdWx0IG9mIHRoZSB0d28gb3BlcmFuZHNcbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWVtb2l6ZU1hcH0gbWVtb2l6ZU1hcFxuICogQHJldHVybnMge0Jvb2xlYW58bnVsbH0gcmVzdWx0XG4qL1xuZnVuY3Rpb24gbWVtb2l6ZUNvbXBhcmUobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBtZW1vaXplTWFwKSB7XG4gIC8vIFRlY2huaWNhbGx5LCBXZWFrTWFwIGtleXMgY2FuICpvbmx5KiBiZSBvYmplY3RzLCBub3QgcHJpbWl0aXZlcy5cbiAgaWYgKCFtZW1vaXplTWFwIHx8IGlzUHJpbWl0aXZlKGxlZnRIYW5kT3BlcmFuZCkgfHwgaXNQcmltaXRpdmUocmlnaHRIYW5kT3BlcmFuZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgbGVmdEhhbmRNYXAgPSBtZW1vaXplTWFwLmdldChsZWZ0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRNYXApIHtcbiAgICB2YXIgcmVzdWx0ID0gbGVmdEhhbmRNYXAuZ2V0KHJpZ2h0SGFuZE9wZXJhbmQpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKiFcbiAqIFNldCB0aGUgcmVzdWx0IG9mIHRoZSBlcXVhbGl0eSBpbnRvIHRoZSBNZW1vaXplTWFwXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01peGVkfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01lbW9pemVNYXB9IG1lbW9pemVNYXBcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVzdWx0XG4qL1xuZnVuY3Rpb24gbWVtb2l6ZVNldChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG1lbW9pemVNYXAsIHJlc3VsdCkge1xuICAvLyBUZWNobmljYWxseSwgV2Vha01hcCBrZXlzIGNhbiAqb25seSogYmUgb2JqZWN0cywgbm90IHByaW1pdGl2ZXMuXG4gIGlmICghbWVtb2l6ZU1hcCB8fCBpc1ByaW1pdGl2ZShsZWZ0SGFuZE9wZXJhbmQpIHx8IGlzUHJpbWl0aXZlKHJpZ2h0SGFuZE9wZXJhbmQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBsZWZ0SGFuZE1hcCA9IG1lbW9pemVNYXAuZ2V0KGxlZnRIYW5kT3BlcmFuZCk7XG4gIGlmIChsZWZ0SGFuZE1hcCkge1xuICAgIGxlZnRIYW5kTWFwLnNldChyaWdodEhhbmRPcGVyYW5kLCByZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIGxlZnRIYW5kTWFwID0gbmV3IE1lbW9pemVNYXAoKTtcbiAgICBsZWZ0SGFuZE1hcC5zZXQocmlnaHRIYW5kT3BlcmFuZCwgcmVzdWx0KTtcbiAgICBtZW1vaXplTWFwLnNldChsZWZ0SGFuZE9wZXJhbmQsIGxlZnRIYW5kTWFwKTtcbiAgfVxufVxuXG4vKiFcbiAqIFByaW1hcnkgRXhwb3J0XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwRXF1YWw7XG5tb2R1bGUuZXhwb3J0cy5NZW1vaXplTWFwID0gTWVtb2l6ZU1hcDtcblxuLyoqXG4gKiBBc3NlcnQgZGVlcGx5IG5lc3RlZCBzYW1lVmFsdWUgZXF1YWxpdHkgYmV0d2VlbiB0d28gb2JqZWN0cyBvZiBhbnkgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKG9wdGlvbmFsKSBBZGRpdGlvbmFsIG9wdGlvbnNcbiAqIEBwYXJhbSB7QXJyYXl9IFtvcHRpb25zLmNvbXBhcmF0b3JdIChvcHRpb25hbCkgT3ZlcnJpZGUgZGVmYXVsdCBhbGdvcml0aG0sIGRldGVybWluaW5nIGN1c3RvbSBlcXVhbGl0eS5cbiAqIEBwYXJhbSB7QXJyYXl9IFtvcHRpb25zLm1lbW9pemVdIChvcHRpb25hbCkgUHJvdmlkZSBhIGN1c3RvbSBtZW1vaXphdGlvbiBvYmplY3Qgd2hpY2ggd2lsbCBjYWNoZSB0aGUgcmVzdWx0cyBvZlxuICAgIGNvbXBsZXggb2JqZWN0cyBmb3IgYSBzcGVlZCBib29zdC4gQnkgcGFzc2luZyBgZmFsc2VgIHlvdSBjYW4gZGlzYWJsZSBtZW1vaXphdGlvbiwgYnV0IHRoaXMgd2lsbCBjYXVzZSBjaXJjdWxhclxuICAgIHJlZmVyZW5jZXMgdG8gYmxvdyB0aGUgc3RhY2suXG4gKiBAcmV0dXJuIHtCb29sZWFufSBlcXVhbCBtYXRjaFxuICovXG5mdW5jdGlvbiBkZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIC8vIElmIHdlIGhhdmUgYSBjb21wYXJhdG9yLCB3ZSBjYW4ndCBhc3N1bWUgYW55dGhpbmc7IHNvIGJhaWwgdG8gaXRzIGNoZWNrIGZpcnN0LlxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmNvbXBhcmF0b3IpIHtcbiAgICByZXR1cm4gZXh0ZW5zaXZlRGVlcEVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucyk7XG4gIH1cblxuICB2YXIgc2ltcGxlUmVzdWx0ID0gc2ltcGxlRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kKTtcbiAgaWYgKHNpbXBsZVJlc3VsdCAhPT0gbnVsbCkge1xuICAgIHJldHVybiBzaW1wbGVSZXN1bHQ7XG4gIH1cblxuICAvLyBEZWVwZXIgY29tcGFyaXNvbnMgYXJlIHB1c2hlZCB0aHJvdWdoIHRvIGEgbGFyZ2VyIGZ1bmN0aW9uXG4gIHJldHVybiBleHRlbnNpdmVEZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBNYW55IGNvbXBhcmlzb25zIGNhbiBiZSBjYW5jZWxlZCBvdXQgZWFybHkgdmlhIHNpbXBsZSBlcXVhbGl0eSBvciBwcmltaXRpdmUgY2hlY2tzLlxuICogQHBhcmFtIHtNaXhlZH0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01peGVkfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcmV0dXJuIHtCb29sZWFufG51bGx9IGVxdWFsIG1hdGNoXG4gKi9cbmZ1bmN0aW9uIHNpbXBsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCkge1xuICAvLyBFcXVhbCByZWZlcmVuY2VzIChleGNlcHQgZm9yIE51bWJlcnMpIGNhbiBiZSByZXR1cm5lZCBlYXJseVxuICBpZiAobGVmdEhhbmRPcGVyYW5kID09PSByaWdodEhhbmRPcGVyYW5kKSB7XG4gICAgLy8gSGFuZGxlICstMCBjYXNlc1xuICAgIHJldHVybiBsZWZ0SGFuZE9wZXJhbmQgIT09IDAgfHwgMSAvIGxlZnRIYW5kT3BlcmFuZCA9PT0gMSAvIHJpZ2h0SGFuZE9wZXJhbmQ7XG4gIH1cblxuICAvLyBoYW5kbGUgTmFOIGNhc2VzXG4gIGlmIChcbiAgICBsZWZ0SGFuZE9wZXJhbmQgIT09IGxlZnRIYW5kT3BlcmFuZCAmJiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJpZ2h0SGFuZE9wZXJhbmQgIT09IHJpZ2h0SGFuZE9wZXJhbmQgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBBbnl0aGluZyB0aGF0IGlzIG5vdCBhbiAnb2JqZWN0JywgaS5lLiBzeW1ib2xzLCBmdW5jdGlvbnMsIGJvb2xlYW5zLCBudW1iZXJzLFxuICAvLyBzdHJpbmdzLCBhbmQgdW5kZWZpbmVkLCBjYW4gYmUgY29tcGFyZWQgYnkgcmVmZXJlbmNlLlxuICBpZiAoaXNQcmltaXRpdmUobGVmdEhhbmRPcGVyYW5kKSB8fCBpc1ByaW1pdGl2ZShyaWdodEhhbmRPcGVyYW5kKSkge1xuICAgIC8vIEVhc3kgb3V0IGIvYyBpdCB3b3VsZCBoYXZlIHBhc3NlZCB0aGUgZmlyc3QgZXF1YWxpdHkgY2hlY2tcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qIVxuICogVGhlIG1haW4gbG9naWMgb2YgdGhlIGBkZWVwRXF1YWxgIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAob3B0aW9uYWwpIEFkZGl0aW9uYWwgb3B0aW9uc1xuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMuY29tcGFyYXRvcl0gKG9wdGlvbmFsKSBPdmVycmlkZSBkZWZhdWx0IGFsZ29yaXRobSwgZGV0ZXJtaW5pbmcgY3VzdG9tIGVxdWFsaXR5LlxuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMubWVtb2l6ZV0gKG9wdGlvbmFsKSBQcm92aWRlIGEgY3VzdG9tIG1lbW9pemF0aW9uIG9iamVjdCB3aGljaCB3aWxsIGNhY2hlIHRoZSByZXN1bHRzIG9mXG4gICAgY29tcGxleCBvYmplY3RzIGZvciBhIHNwZWVkIGJvb3N0LiBCeSBwYXNzaW5nIGBmYWxzZWAgeW91IGNhbiBkaXNhYmxlIG1lbW9pemF0aW9uLCBidXQgdGhpcyB3aWxsIGNhdXNlIGNpcmN1bGFyXG4gICAgcmVmZXJlbmNlcyB0byBibG93IHRoZSBzdGFjay5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IGVxdWFsIG1hdGNoXG4qL1xuZnVuY3Rpb24gZXh0ZW5zaXZlRGVlcEVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5tZW1vaXplID0gb3B0aW9ucy5tZW1vaXplID09PSBmYWxzZSA/IGZhbHNlIDogb3B0aW9ucy5tZW1vaXplIHx8IG5ldyBNZW1vaXplTWFwKCk7XG4gIHZhciBjb21wYXJhdG9yID0gb3B0aW9ucyAmJiBvcHRpb25zLmNvbXBhcmF0b3I7XG5cbiAgLy8gQ2hlY2sgaWYgYSBtZW1vaXplZCByZXN1bHQgZXhpc3RzLlxuICB2YXIgbWVtb2l6ZVJlc3VsdExlZnQgPSBtZW1vaXplQ29tcGFyZShsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMubWVtb2l6ZSk7XG4gIGlmIChtZW1vaXplUmVzdWx0TGVmdCAhPT0gbnVsbCkge1xuICAgIHJldHVybiBtZW1vaXplUmVzdWx0TGVmdDtcbiAgfVxuICB2YXIgbWVtb2l6ZVJlc3VsdFJpZ2h0ID0gbWVtb2l6ZUNvbXBhcmUocmlnaHRIYW5kT3BlcmFuZCwgbGVmdEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUpO1xuICBpZiAobWVtb2l6ZVJlc3VsdFJpZ2h0ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIG1lbW9pemVSZXN1bHRSaWdodDtcbiAgfVxuXG4gIC8vIElmIGEgY29tcGFyYXRvciBpcyBwcmVzZW50LCB1c2UgaXQuXG4gIGlmIChjb21wYXJhdG9yKSB7XG4gICAgdmFyIGNvbXBhcmF0b3JSZXN1bHQgPSBjb21wYXJhdG9yKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCk7XG4gICAgLy8gQ29tcGFyYXRvcnMgbWF5IHJldHVybiBudWxsLCBpbiB3aGljaCBjYXNlIHdlIHdhbnQgdG8gZ28gYmFjayB0byBkZWZhdWx0IGJlaGF2aW9yLlxuICAgIGlmIChjb21wYXJhdG9yUmVzdWx0ID09PSBmYWxzZSB8fCBjb21wYXJhdG9yUmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICBtZW1vaXplU2V0KGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucy5tZW1vaXplLCBjb21wYXJhdG9yUmVzdWx0KTtcbiAgICAgIHJldHVybiBjb21wYXJhdG9yUmVzdWx0O1xuICAgIH1cbiAgICAvLyBUbyBhbGxvdyBjb21wYXJhdG9ycyB0byBvdmVycmlkZSAqYW55KiBiZWhhdmlvciwgd2UgcmFuIHRoZW0gZmlyc3QuIFNpbmNlIGl0IGRpZG4ndCBkZWNpZGVcbiAgICAvLyB3aGF0IHRvIGRvLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0byByZXR1cm4gdGhlIGJhc2ljIHRlc3RzIGZpcnN0IGJlZm9yZSB3ZSBtb3ZlIG9uLlxuICAgIHZhciBzaW1wbGVSZXN1bHQgPSBzaW1wbGVFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpO1xuICAgIGlmIChzaW1wbGVSZXN1bHQgIT09IG51bGwpIHtcbiAgICAgIC8vIERvbid0IG1lbW9pemUgdGhpcywgaXQgdGFrZXMgbG9uZ2VyIHRvIHNldC9yZXRyaWV2ZSB0aGFuIHRvIGp1c3QgY29tcGFyZS5cbiAgICAgIHJldHVybiBzaW1wbGVSZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxlZnRIYW5kVHlwZSA9IHR5cGUobGVmdEhhbmRPcGVyYW5kKTtcbiAgaWYgKGxlZnRIYW5kVHlwZSAhPT0gdHlwZShyaWdodEhhbmRPcGVyYW5kKSkge1xuICAgIG1lbW9pemVTZXQobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUsIGZhbHNlKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZW1wb3JhcmlseSBzZXQgdGhlIG9wZXJhbmRzIGluIHRoZSBtZW1vaXplIG9iamVjdCB0byBwcmV2ZW50IGJsb3dpbmcgdGhlIHN0YWNrXG4gIG1lbW9pemVTZXQobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUsIHRydWUpO1xuXG4gIHZhciByZXN1bHQgPSBleHRlbnNpdmVEZWVwRXF1YWxCeVR5cGUobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBsZWZ0SGFuZFR5cGUsIG9wdGlvbnMpO1xuICBtZW1vaXplU2V0KGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucy5tZW1vaXplLCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBleHRlbnNpdmVEZWVwRXF1YWxCeVR5cGUobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBsZWZ0SGFuZFR5cGUsIG9wdGlvbnMpIHtcbiAgc3dpdGNoIChsZWZ0SGFuZFR5cGUpIHtcbiAgICBjYXNlICdTdHJpbmcnOlxuICAgIGNhc2UgJ051bWJlcic6XG4gICAgY2FzZSAnQm9vbGVhbic6XG4gICAgY2FzZSAnRGF0ZSc6XG4gICAgICAvLyBJZiB0aGVzZSB0eXBlcyBhcmUgdGhlaXIgaW5zdGFuY2UgdHlwZXMgKGUuZy4gYG5ldyBOdW1iZXJgKSB0aGVuIHJlLWRlZXBFcXVhbCBhZ2FpbnN0IHRoZWlyIHZhbHVlc1xuICAgICAgcmV0dXJuIGRlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmQudmFsdWVPZigpLCByaWdodEhhbmRPcGVyYW5kLnZhbHVlT2YoKSk7XG4gICAgY2FzZSAnUHJvbWlzZSc6XG4gICAgY2FzZSAnU3ltYm9sJzpcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgY2FzZSAnV2Vha01hcCc6XG4gICAgY2FzZSAnV2Vha1NldCc6XG4gICAgY2FzZSAnRXJyb3InOlxuICAgICAgcmV0dXJuIGxlZnRIYW5kT3BlcmFuZCA9PT0gcmlnaHRIYW5kT3BlcmFuZDtcbiAgICBjYXNlICdBcmd1bWVudHMnOlxuICAgIGNhc2UgJ0ludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhDbGFtcGVkQXJyYXknOlxuICAgIGNhc2UgJ0ludDE2QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQxNkFycmF5JzpcbiAgICBjYXNlICdJbnQzMkFycmF5JzpcbiAgICBjYXNlICdVaW50MzJBcnJheSc6XG4gICAgY2FzZSAnRmxvYXQzMkFycmF5JzpcbiAgICBjYXNlICdGbG9hdDY0QXJyYXknOlxuICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgIHJldHVybiBpdGVyYWJsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucyk7XG4gICAgY2FzZSAnUmVnRXhwJzpcbiAgICAgIHJldHVybiByZWdleHBFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpO1xuICAgIGNhc2UgJ0dlbmVyYXRvcic6XG4gICAgICByZXR1cm4gZ2VuZXJhdG9yRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgICBjYXNlICdEYXRhVmlldyc6XG4gICAgICByZXR1cm4gaXRlcmFibGVFcXVhbChuZXcgVWludDhBcnJheShsZWZ0SGFuZE9wZXJhbmQuYnVmZmVyKSwgbmV3IFVpbnQ4QXJyYXkocmlnaHRIYW5kT3BlcmFuZC5idWZmZXIpLCBvcHRpb25zKTtcbiAgICBjYXNlICdBcnJheUJ1ZmZlcic6XG4gICAgICByZXR1cm4gaXRlcmFibGVFcXVhbChuZXcgVWludDhBcnJheShsZWZ0SGFuZE9wZXJhbmQpLCBuZXcgVWludDhBcnJheShyaWdodEhhbmRPcGVyYW5kKSwgb3B0aW9ucyk7XG4gICAgY2FzZSAnU2V0JzpcbiAgICAgIHJldHVybiBlbnRyaWVzRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgICBjYXNlICdNYXAnOlxuICAgICAgcmV0dXJuIGVudHJpZXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gb2JqZWN0RXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgfVxufVxuXG4vKiFcbiAqIENvbXBhcmUgdHdvIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIGVxdWFsaXR5LlxuICpcbiAqIEBwYXJhbSB7UmVnRXhwfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7UmVnRXhwfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuXG5mdW5jdGlvbiByZWdleHBFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpIHtcbiAgcmV0dXJuIGxlZnRIYW5kT3BlcmFuZC50b1N0cmluZygpID09PSByaWdodEhhbmRPcGVyYW5kLnRvU3RyaW5nKCk7XG59XG5cbi8qIVxuICogQ29tcGFyZSB0d28gU2V0cy9NYXBzIGZvciBlcXVhbGl0eS4gRmFzdGVyIHRoYW4gb3RoZXIgZXF1YWxpdHkgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7U2V0fSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7U2V0fSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIChPcHRpb25hbClcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5cbmZ1bmN0aW9uIGVudHJpZXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpIHtcbiAgLy8gSUUxMSBkb2Vzbid0IHN1cHBvcnQgU2V0I2VudHJpZXMgb3IgU2V0I0BAaXRlcmF0b3IsIHNvIHdlIG5lZWQgbWFudWFsbHkgcG9wdWxhdGUgdXNpbmcgU2V0I2ZvckVhY2hcbiAgaWYgKGxlZnRIYW5kT3BlcmFuZC5zaXplICE9PSByaWdodEhhbmRPcGVyYW5kLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGxlZnRIYW5kT3BlcmFuZC5zaXplID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGxlZnRIYW5kSXRlbXMgPSBbXTtcbiAgdmFyIHJpZ2h0SGFuZEl0ZW1zID0gW107XG4gIGxlZnRIYW5kT3BlcmFuZC5mb3JFYWNoKGZ1bmN0aW9uIGdhdGhlckVudHJpZXMoa2V5LCB2YWx1ZSkge1xuICAgIGxlZnRIYW5kSXRlbXMucHVzaChbIGtleSwgdmFsdWUgXSk7XG4gIH0pO1xuICByaWdodEhhbmRPcGVyYW5kLmZvckVhY2goZnVuY3Rpb24gZ2F0aGVyRW50cmllcyhrZXksIHZhbHVlKSB7XG4gICAgcmlnaHRIYW5kSXRlbXMucHVzaChbIGtleSwgdmFsdWUgXSk7XG4gIH0pO1xuICByZXR1cm4gaXRlcmFibGVFcXVhbChsZWZ0SGFuZEl0ZW1zLnNvcnQoKSwgcmlnaHRIYW5kSXRlbXMuc29ydCgpLCBvcHRpb25zKTtcbn1cblxuLyohXG4gKiBTaW1wbGUgZXF1YWxpdHkgZm9yIGZsYXQgaXRlcmFibGUgb2JqZWN0cyBzdWNoIGFzIEFycmF5cywgVHlwZWRBcnJheXMgb3IgTm9kZS5qcyBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7SXRlcmFibGV9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtJdGVyYWJsZX0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAoT3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuXG5mdW5jdGlvbiBpdGVyYWJsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucykge1xuICB2YXIgbGVuZ3RoID0gbGVmdEhhbmRPcGVyYW5kLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCAhPT0gcmlnaHRIYW5kT3BlcmFuZC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpbmRleCA9IC0xO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChkZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kW2luZGV4XSwgcmlnaHRIYW5kT3BlcmFuZFtpbmRleF0sIG9wdGlvbnMpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyohXG4gKiBTaW1wbGUgZXF1YWxpdHkgZm9yIGdlbmVyYXRvciBvYmplY3RzIHN1Y2ggYXMgdGhvc2UgcmV0dXJuZWQgYnkgZ2VuZXJhdG9yIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge0l0ZXJhYmxlfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7SXRlcmFibGV9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKE9wdGlvbmFsKVxuICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gKi9cblxuZnVuY3Rpb24gZ2VuZXJhdG9yRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIHJldHVybiBpdGVyYWJsZUVxdWFsKGdldEdlbmVyYXRvckVudHJpZXMobGVmdEhhbmRPcGVyYW5kKSwgZ2V0R2VuZXJhdG9yRW50cmllcyhyaWdodEhhbmRPcGVyYW5kKSwgb3B0aW9ucyk7XG59XG5cbi8qIVxuICogRGV0ZXJtaW5lIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGFuIEBAaXRlcmF0b3IgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBvYmplY3QgaGFzIGFuIEBAaXRlcmF0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGhhc0l0ZXJhdG9yRnVuY3Rpb24odGFyZ2V0KSB7XG4gIHJldHVybiB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgdGFyZ2V0W1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG59XG5cbi8qIVxuICogR2V0cyBhbGwgaXRlcmF0b3IgZW50cmllcyBmcm9tIHRoZSBnaXZlbiBPYmplY3QuIElmIHRoZSBPYmplY3QgaGFzIG5vIEBAaXRlcmF0b3IgZnVuY3Rpb24sIHJldHVybnMgYW4gZW1wdHkgYXJyYXkuXG4gKiBUaGlzIHdpbGwgY29uc3VtZSB0aGUgaXRlcmF0b3IgLSB3aGljaCBjb3VsZCBoYXZlIHNpZGUgZWZmZWN0cyBkZXBlbmRpbmcgb24gdGhlIEBAaXRlcmF0b3IgaW1wbGVtZW50YXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHJldHVybnMge0FycmF5fSBhbiBhcnJheSBvZiBlbnRyaWVzIGZyb20gdGhlIEBAaXRlcmF0b3IgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JFbnRyaWVzKHRhcmdldCkge1xuICBpZiAoaGFzSXRlcmF0b3JGdW5jdGlvbih0YXJnZXQpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBnZXRHZW5lcmF0b3JFbnRyaWVzKHRhcmdldFtTeW1ib2wuaXRlcmF0b3JdKCkpO1xuICAgIH0gY2F0Y2ggKGl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuXG4vKiFcbiAqIEdldHMgYWxsIGVudHJpZXMgZnJvbSBhIEdlbmVyYXRvci4gVGhpcyB3aWxsIGNvbnN1bWUgdGhlIGdlbmVyYXRvciAtIHdoaWNoIGNvdWxkIGhhdmUgc2lkZSBlZmZlY3RzLlxuICpcbiAqIEBwYXJhbSB7R2VuZXJhdG9yfSB0YXJnZXRcbiAqIEByZXR1cm5zIHtBcnJheX0gYW4gYXJyYXkgb2YgZW50cmllcyBmcm9tIHRoZSBHZW5lcmF0b3IuXG4gKi9cbmZ1bmN0aW9uIGdldEdlbmVyYXRvckVudHJpZXMoZ2VuZXJhdG9yKSB7XG4gIHZhciBnZW5lcmF0b3JSZXN1bHQgPSBnZW5lcmF0b3IubmV4dCgpO1xuICB2YXIgYWNjdW11bGF0b3IgPSBbIGdlbmVyYXRvclJlc3VsdC52YWx1ZSBdO1xuICB3aGlsZSAoZ2VuZXJhdG9yUmVzdWx0LmRvbmUgPT09IGZhbHNlKSB7XG4gICAgZ2VuZXJhdG9yUmVzdWx0ID0gZ2VuZXJhdG9yLm5leHQoKTtcbiAgICBhY2N1bXVsYXRvci5wdXNoKGdlbmVyYXRvclJlc3VsdC52YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuXG4vKiFcbiAqIEdldHMgYWxsIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUga2V5cyBmcm9tIGEgdGFyZ2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAqIEByZXR1cm5zIHtBcnJheX0gYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBrZXlzIGZyb20gdGhlIHRhcmdldC5cbiAqL1xuZnVuY3Rpb24gZ2V0RW51bWVyYWJsZUtleXModGFyZ2V0KSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cblxuLyohXG4gKiBEZXRlcm1pbmVzIGlmIHR3byBvYmplY3RzIGhhdmUgbWF0Y2hpbmcgdmFsdWVzLCBnaXZlbiBhIHNldCBvZiBrZXlzLiBEZWZlcnMgdG8gZGVlcEVxdWFsIGZvciB0aGUgZXF1YWxpdHkgY2hlY2sgb2ZcbiAqIGVhY2gga2V5LiBJZiBhbnkgdmFsdWUgb2YgdGhlIGdpdmVuIGtleSBpcyBub3QgZXF1YWwsIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiBmYWxzZSAoZWFybHkpLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtBcnJheX0ga2V5cyBBbiBhcnJheSBvZiBrZXlzIHRvIGNvbXBhcmUgdGhlIHZhbHVlcyBvZiBsZWZ0SGFuZE9wZXJhbmQgYW5kIHJpZ2h0SGFuZE9wZXJhbmQgYWdhaW5zdFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAoT3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuZnVuY3Rpb24ga2V5c0VxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIGlmIChsZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGRlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmRba2V5c1tpXV0sIHJpZ2h0SGFuZE9wZXJhbmRba2V5c1tpXV0sIG9wdGlvbnMpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyohXG4gKiBSZWN1cnNpdmVseSBjaGVjayB0aGUgZXF1YWxpdHkgb2YgdHdvIE9iamVjdHMuIE9uY2UgYmFzaWMgc2FtZW5lc3MgaGFzIGJlZW4gZXN0YWJsaXNoZWQgaXQgd2lsbCBkZWZlciB0byBgZGVlcEVxdWFsYFxuICogZm9yIGVhY2ggZW51bWVyYWJsZSBrZXkgaW4gdGhlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKE9wdGlvbmFsKVxuICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gKi9cblxuZnVuY3Rpb24gb2JqZWN0RXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIHZhciBsZWZ0SGFuZEtleXMgPSBnZXRFbnVtZXJhYmxlS2V5cyhsZWZ0SGFuZE9wZXJhbmQpO1xuICB2YXIgcmlnaHRIYW5kS2V5cyA9IGdldEVudW1lcmFibGVLZXlzKHJpZ2h0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRLZXlzLmxlbmd0aCAmJiBsZWZ0SGFuZEtleXMubGVuZ3RoID09PSByaWdodEhhbmRLZXlzLmxlbmd0aCkge1xuICAgIGxlZnRIYW5kS2V5cy5zb3J0KCk7XG4gICAgcmlnaHRIYW5kS2V5cy5zb3J0KCk7XG4gICAgaWYgKGl0ZXJhYmxlRXF1YWwobGVmdEhhbmRLZXlzLCByaWdodEhhbmRLZXlzKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGtleXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIGxlZnRIYW5kS2V5cywgb3B0aW9ucyk7XG4gIH1cblxuICB2YXIgbGVmdEhhbmRFbnRyaWVzID0gZ2V0SXRlcmF0b3JFbnRyaWVzKGxlZnRIYW5kT3BlcmFuZCk7XG4gIHZhciByaWdodEhhbmRFbnRyaWVzID0gZ2V0SXRlcmF0b3JFbnRyaWVzKHJpZ2h0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRFbnRyaWVzLmxlbmd0aCAmJiBsZWZ0SGFuZEVudHJpZXMubGVuZ3RoID09PSByaWdodEhhbmRFbnRyaWVzLmxlbmd0aCkge1xuICAgIGxlZnRIYW5kRW50cmllcy5zb3J0KCk7XG4gICAgcmlnaHRIYW5kRW50cmllcy5zb3J0KCk7XG4gICAgcmV0dXJuIGl0ZXJhYmxlRXF1YWwobGVmdEhhbmRFbnRyaWVzLCByaWdodEhhbmRFbnRyaWVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmIChsZWZ0SGFuZEtleXMubGVuZ3RoID09PSAwICYmXG4gICAgICBsZWZ0SGFuZEVudHJpZXMubGVuZ3RoID09PSAwICYmXG4gICAgICByaWdodEhhbmRLZXlzLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgcmlnaHRIYW5kRW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyohXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGFyZ3VtZW50IGlzIGEgcHJpbWl0aXZlLlxuICpcbiAqIFRoaXMgaW50ZW50aW9uYWxseSByZXR1cm5zIHRydWUgZm9yIGFsbCBvYmplY3RzIHRoYXQgY2FuIGJlIGNvbXBhcmVkIGJ5IHJlZmVyZW5jZSxcbiAqIGluY2x1ZGluZyBmdW5jdGlvbnMgYW5kIHN5bWJvbHMuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jztcbn1cbiIsIi8qKlxuICogZXZlbnQtbGl0ZS5qcyAtIExpZ2h0LXdlaWdodCBFdmVudEVtaXR0ZXIgKGxlc3MgdGhhbiAxS0Igd2hlbiBnemlwcGVkKVxuICpcbiAqIEBjb3B5cmlnaHQgWXVzdWtlIEthd2FzYWtpXG4gKiBAbGljZW5zZSBNSVRcbiAqIEBjb25zdHJ1Y3RvclxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20va2F3YW5ldC9ldmVudC1saXRlXG4gKiBAc2VlIGh0dHA6Ly9rYXdhbmV0LmdpdGh1Yi5pby9ldmVudC1saXRlL0V2ZW50TGl0ZS5odG1sXG4gKiBAZXhhbXBsZVxuICogdmFyIEV2ZW50TGl0ZSA9IHJlcXVpcmUoXCJldmVudC1saXRlXCIpO1xuICpcbiAqIGZ1bmN0aW9uIE15Q2xhc3MoKSB7Li4ufSAgICAgICAgICAgICAvLyB5b3VyIGNsYXNzXG4gKlxuICogRXZlbnRMaXRlLm1peGluKE15Q2xhc3MucHJvdG90eXBlKTsgIC8vIGltcG9ydCBldmVudCBtZXRob2RzXG4gKlxuICogdmFyIG9iaiA9IG5ldyBNeUNsYXNzKCk7XG4gKiBvYmoub24oXCJmb29cIiwgZnVuY3Rpb24oKSB7Li4ufSk7ICAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJcbiAqIG9iai5vbmNlKFwiYmFyXCIsIGZ1bmN0aW9uKCkgey4uLn0pOyAgIC8vIGFkZCBvbmUtdGltZSBldmVudCBsaXN0ZW5lclxuICogb2JqLmVtaXQoXCJmb29cIik7ICAgICAgICAgICAgICAgICAgICAgLy8gZGlzcGF0Y2ggZXZlbnRcbiAqIG9iai5lbWl0KFwiYmFyXCIpOyAgICAgICAgICAgICAgICAgICAgIC8vIGRpc3BhdGNoIGFub3RoZXIgZXZlbnRcbiAqIG9iai5vZmYoXCJmb29cIik7ICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBldmVudCBsaXN0ZW5lclxuICovXG5cbmZ1bmN0aW9uIEV2ZW50TGl0ZSgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEV2ZW50TGl0ZSkpIHJldHVybiBuZXcgRXZlbnRMaXRlKCk7XG59XG5cbihmdW5jdGlvbihFdmVudExpdGUpIHtcbiAgLy8gZXhwb3J0IHRoZSBjbGFzcyBmb3Igbm9kZS5qc1xuICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIG1vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBFdmVudExpdGU7XG5cbiAgLy8gcHJvcGVydHkgbmFtZSB0byBob2xkIGxpc3RlbmVyc1xuICB2YXIgTElTVEVORVJTID0gXCJsaXN0ZW5lcnNcIjtcblxuICAvLyBtZXRob2RzIHRvIGV4cG9ydFxuICB2YXIgbWV0aG9kcyA9IHtcbiAgICBvbjogb24sXG4gICAgb25jZTogb25jZSxcbiAgICBvZmY6IG9mZixcbiAgICBlbWl0OiBlbWl0XG4gIH07XG5cbiAgLy8gbWl4aW4gdG8gc2VsZlxuICBtaXhpbihFdmVudExpdGUucHJvdG90eXBlKTtcblxuICAvLyBleHBvcnQgbWl4aW4gZnVuY3Rpb25cbiAgRXZlbnRMaXRlLm1peGluID0gbWl4aW47XG5cbiAgLyoqXG4gICAqIEltcG9ydCBvbigpLCBvbmNlKCksIG9mZigpIGFuZCBlbWl0KCkgbWV0aG9kcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gICAqXG4gICAqIEBmdW5jdGlvbiBFdmVudExpdGUubWl4aW5cbiAgICogQHBhcmFtIHRhcmdldCB7UHJvdG90eXBlfVxuICAgKi9cblxuICBmdW5jdGlvbiBtaXhpbih0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgICAgdGFyZ2V0W2tleV0gPSBtZXRob2RzW2tleV07XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyLlxuICAgKlxuICAgKiBAZnVuY3Rpb24gRXZlbnRMaXRlLnByb3RvdHlwZS5vblxuICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfVxuICAgKiBAcGFyYW0gZnVuYyB7RnVuY3Rpb259XG4gICAqIEByZXR1cm5zIHtFdmVudExpdGV9IFNlbGYgZm9yIG1ldGhvZCBjaGFpbmluZ1xuICAgKi9cblxuICBmdW5jdGlvbiBvbih0eXBlLCBmdW5jKSB7XG4gICAgZ2V0TGlzdGVuZXJzKHRoaXMsIHR5cGUpLnB1c2goZnVuYyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkIG9uZS10aW1lIGV2ZW50IGxpc3RlbmVyLlxuICAgKlxuICAgKiBAZnVuY3Rpb24gRXZlbnRMaXRlLnByb3RvdHlwZS5vbmNlXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBmdW5jIHtGdW5jdGlvbn1cbiAgICogQHJldHVybnMge0V2ZW50TGl0ZX0gU2VsZiBmb3IgbWV0aG9kIGNoYWluaW5nXG4gICAqL1xuXG4gIGZ1bmN0aW9uIG9uY2UodHlwZSwgZnVuYykge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB3cmFwLm9yaWdpbmFsTGlzdGVuZXIgPSBmdW5jO1xuICAgIGdldExpc3RlbmVycyh0aGF0LCB0eXBlKS5wdXNoKHdyYXApO1xuICAgIHJldHVybiB0aGF0O1xuXG4gICAgZnVuY3Rpb24gd3JhcCgpIHtcbiAgICAgIG9mZi5jYWxsKHRoYXQsIHR5cGUsIHdyYXApO1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXIuXG4gICAqXG4gICAqIEBmdW5jdGlvbiBFdmVudExpdGUucHJvdG90eXBlLm9mZlxuICAgKiBAcGFyYW0gW3R5cGVdIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBbZnVuY10ge0Z1bmN0aW9ufVxuICAgKiBAcmV0dXJucyB7RXZlbnRMaXRlfSBTZWxmIGZvciBtZXRob2QgY2hhaW5pbmdcbiAgICovXG5cbiAgZnVuY3Rpb24gb2ZmKHR5cGUsIGZ1bmMpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgdmFyIGxpc3RuZXJzO1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgZGVsZXRlIHRoYXRbTElTVEVORVJTXTtcbiAgICB9IGVsc2UgaWYgKCFmdW5jKSB7XG4gICAgICBsaXN0bmVycyA9IHRoYXRbTElTVEVORVJTXTtcbiAgICAgIGlmIChsaXN0bmVycykge1xuICAgICAgICBkZWxldGUgbGlzdG5lcnNbdHlwZV07XG4gICAgICAgIGlmICghT2JqZWN0LmtleXMobGlzdG5lcnMpLmxlbmd0aCkgcmV0dXJuIG9mZi5jYWxsKHRoYXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0bmVycyA9IGdldExpc3RlbmVycyh0aGF0LCB0eXBlLCB0cnVlKTtcbiAgICAgIGlmIChsaXN0bmVycykge1xuICAgICAgICBsaXN0bmVycyA9IGxpc3RuZXJzLmZpbHRlcihuZSk7XG4gICAgICAgIGlmICghbGlzdG5lcnMubGVuZ3RoKSByZXR1cm4gb2ZmLmNhbGwodGhhdCwgdHlwZSk7XG4gICAgICAgIHRoYXRbTElTVEVORVJTXVt0eXBlXSA9IGxpc3RuZXJzO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhhdDtcblxuICAgIGZ1bmN0aW9uIG5lKHRlc3QpIHtcbiAgICAgIHJldHVybiB0ZXN0ICE9PSBmdW5jICYmIHRlc3Qub3JpZ2luYWxMaXN0ZW5lciAhPT0gZnVuYztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2ggKHRyaWdnZXIpIGFuIGV2ZW50LlxuICAgKlxuICAgKiBAZnVuY3Rpb24gRXZlbnRMaXRlLnByb3RvdHlwZS5lbWl0XG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBbdmFsdWVdIHsqfVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSB3aGVuIGEgbGlzdGVuZXIgcmVjZWl2ZWQgdGhlIGV2ZW50XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVtaXQodHlwZSwgdmFsdWUpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgdmFyIGxpc3RlbmVycyA9IGdldExpc3RlbmVycyh0aGF0LCB0eXBlLCB0cnVlKTtcbiAgICBpZiAoIWxpc3RlbmVycykgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBhcmdsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGlmIChhcmdsZW4gPT09IDEpIHtcbiAgICAgIGxpc3RlbmVycy5mb3JFYWNoKHplcm9hcmcpO1xuICAgIH0gZWxzZSBpZiAoYXJnbGVuID09PSAyKSB7XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaChvbmVhcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaChtb3JlYXJncyk7XG4gICAgfVxuICAgIHJldHVybiAhIWxpc3RlbmVycy5sZW5ndGg7XG5cbiAgICBmdW5jdGlvbiB6ZXJvYXJnKGZ1bmMpIHtcbiAgICAgIGZ1bmMuY2FsbCh0aGF0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVhcmcoZnVuYykge1xuICAgICAgZnVuYy5jYWxsKHRoYXQsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3JlYXJncyhmdW5jKSB7XG4gICAgICBmdW5jLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldExpc3RlbmVycyh0aGF0LCB0eXBlLCByZWFkb25seSkge1xuICAgIGlmIChyZWFkb25seSAmJiAhdGhhdFtMSVNURU5FUlNdKSByZXR1cm47XG4gICAgdmFyIGxpc3RlbmVycyA9IHRoYXRbTElTVEVORVJTXSB8fCAodGhhdFtMSVNURU5FUlNdID0ge30pO1xuICAgIHJldHVybiBsaXN0ZW5lcnNbdHlwZV0gfHwgKGxpc3RlbmVyc1t0eXBlXSA9IFtdKTtcbiAgfVxuXG59KShFdmVudExpdGUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiAhXG4gKiBDaGFpIC0gZ2V0RnVuY05hbWUgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNiBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5nZXRGdW5jTmFtZShjb25zdHJ1Y3RvckZuKVxuICpcbiAqIFJldHVybnMgdGhlIG5hbWUgb2YgYSBmdW5jdGlvbi5cbiAqIFdoZW4gYSBub24tZnVuY3Rpb24gaW5zdGFuY2UgaXMgcGFzc2VkLCByZXR1cm5zIGBudWxsYC5cbiAqIFRoaXMgYWxzbyBpbmNsdWRlcyBhIHBvbHlmaWxsIGZ1bmN0aW9uIGlmIGBhRnVuYy5uYW1lYCBpcyBub3QgZGVmaW5lZC5cbiAqXG4gKiBAbmFtZSBnZXRGdW5jTmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3RcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxudmFyIHRvU3RyaW5nID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmN0aW9uTmFtZU1hdGNoID0gL1xccypmdW5jdGlvbig/Olxcc3xcXHMqXFwvXFwqW14oPzoqXFwvKV0rXFwqXFwvXFxzKikqKFteXFxzXFwoXFwvXSspLztcbmZ1bmN0aW9uIGdldEZ1bmNOYW1lKGFGdW5jKSB7XG4gIGlmICh0eXBlb2YgYUZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBuYW1lID0gJyc7XG4gIGlmICh0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlLm5hbWUgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBhRnVuYy5uYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEhlcmUgd2UgcnVuIGEgcG9seWZpbGwgaWYgRnVuY3Rpb24gZG9lcyBub3Qgc3VwcG9ydCB0aGUgYG5hbWVgIHByb3BlcnR5IGFuZCBpZiBhRnVuYy5uYW1lIGlzIG5vdCBkZWZpbmVkXG4gICAgdmFyIG1hdGNoID0gdG9TdHJpbmcuY2FsbChhRnVuYykubWF0Y2goZnVuY3Rpb25OYW1lTWF0Y2gpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgbmFtZSA9IG1hdGNoWzFdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB3ZSd2ZSBnb3QgYSBgbmFtZWAgcHJvcGVydHkgd2UganVzdCB1c2UgaXRcbiAgICBuYW1lID0gYUZ1bmMubmFtZTtcbiAgfVxuXG4gIHJldHVybiBuYW1lO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEZ1bmNOYW1lO1xuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiLy8gaW50NjQtYnVmZmVyLmpzXG5cbi8qanNoaW50IC1XMDE4ICovIC8vIENvbmZ1c2luZyB1c2Ugb2YgJyEnLlxuLypqc2hpbnQgLVcwMzAgKi8gLy8gRXhwZWN0ZWQgYW4gYXNzaWdubWVudCBvciBmdW5jdGlvbiBjYWxsIGFuZCBpbnN0ZWFkIHNhdyBhbiBleHByZXNzaW9uLlxuLypqc2hpbnQgLVcwOTMgKi8gLy8gRGlkIHlvdSBtZWFuIHRvIHJldHVybiBhIGNvbmRpdGlvbmFsIGluc3RlYWQgb2YgYW4gYXNzaWdubWVudD9cblxudmFyIFVpbnQ2NEJFLCBJbnQ2NEJFLCBVaW50NjRMRSwgSW50NjRMRTtcblxuIWZ1bmN0aW9uKGV4cG9ydHMpIHtcbiAgLy8gY29uc3RhbnRzXG5cbiAgdmFyIFVOREVGSU5FRCA9IFwidW5kZWZpbmVkXCI7XG4gIHZhciBCVUZGRVIgPSAoVU5ERUZJTkVEICE9PSB0eXBlb2YgQnVmZmVyKSAmJiBCdWZmZXI7XG4gIHZhciBVSU5UOEFSUkFZID0gKFVOREVGSU5FRCAhPT0gdHlwZW9mIFVpbnQ4QXJyYXkpICYmIFVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWUJVRkZFUiA9IChVTkRFRklORUQgIT09IHR5cGVvZiBBcnJheUJ1ZmZlcikgJiYgQXJyYXlCdWZmZXI7XG4gIHZhciBaRVJPID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgX2lzQXJyYXk7XG4gIHZhciBCSVQzMiA9IDQyOTQ5NjcyOTY7XG4gIHZhciBCSVQyNCA9IDE2Nzc3MjE2O1xuXG4gIC8vIHN0b3JhZ2UgY2xhc3NcblxuICB2YXIgc3RvcmFnZTsgLy8gQXJyYXk7XG5cbiAgLy8gZ2VuZXJhdGUgY2xhc3Nlc1xuXG4gIFVpbnQ2NEJFID0gZmFjdG9yeShcIlVpbnQ2NEJFXCIsIHRydWUsIHRydWUpO1xuICBJbnQ2NEJFID0gZmFjdG9yeShcIkludDY0QkVcIiwgdHJ1ZSwgZmFsc2UpO1xuICBVaW50NjRMRSA9IGZhY3RvcnkoXCJVaW50NjRMRVwiLCBmYWxzZSwgdHJ1ZSk7XG4gIEludDY0TEUgPSBmYWN0b3J5KFwiSW50NjRMRVwiLCBmYWxzZSwgZmFsc2UpO1xuXG4gIC8vIGNsYXNzIGZhY3RvcnlcblxuICBmdW5jdGlvbiBmYWN0b3J5KG5hbWUsIGJpZ2VuZGlhbiwgdW5zaWduZWQpIHtcbiAgICB2YXIgcG9zSCA9IGJpZ2VuZGlhbiA/IDAgOiA0O1xuICAgIHZhciBwb3NMID0gYmlnZW5kaWFuID8gNCA6IDA7XG4gICAgdmFyIHBvczAgPSBiaWdlbmRpYW4gPyAwIDogMztcbiAgICB2YXIgcG9zMSA9IGJpZ2VuZGlhbiA/IDEgOiAyO1xuICAgIHZhciBwb3MyID0gYmlnZW5kaWFuID8gMiA6IDE7XG4gICAgdmFyIHBvczMgPSBiaWdlbmRpYW4gPyAzIDogMDtcbiAgICB2YXIgZnJvbVBvc2l0aXZlID0gYmlnZW5kaWFuID8gZnJvbVBvc2l0aXZlQkUgOiBmcm9tUG9zaXRpdmVMRTtcbiAgICB2YXIgZnJvbU5lZ2F0aXZlID0gYmlnZW5kaWFuID8gZnJvbU5lZ2F0aXZlQkUgOiBmcm9tTmVnYXRpdmVMRTtcbiAgICB2YXIgcHJvdG8gPSBJbnQ2NC5wcm90b3R5cGU7XG4gICAgdmFyIGlzTmFtZSA9IFwiaXNcIiArIG5hbWU7XG4gICAgdmFyIF9pc0ludDY0ID0gXCJfXCIgKyBpc05hbWU7XG5cbiAgICAvLyBwcm9wZXJ0aWVzXG4gICAgcHJvdG8uYnVmZmVyID0gdm9pZCAwO1xuICAgIHByb3RvLm9mZnNldCA9IDA7XG4gICAgcHJvdG9bX2lzSW50NjRdID0gdHJ1ZTtcblxuICAgIC8vIG1ldGhvZHNcbiAgICBwcm90by50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIHByb3RvLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgcHJvdG8udG9KU09OID0gdG9OdW1iZXI7XG4gICAgcHJvdG8udG9BcnJheSA9IHRvQXJyYXk7XG5cbiAgICAvLyBhZGQgLnRvQnVmZmVyKCkgbWV0aG9kIG9ubHkgd2hlbiBCdWZmZXIgYXZhaWxhYmxlXG4gICAgaWYgKEJVRkZFUikgcHJvdG8udG9CdWZmZXIgPSB0b0J1ZmZlcjtcblxuICAgIC8vIGFkZCAudG9BcnJheUJ1ZmZlcigpIG1ldGhvZCBvbmx5IHdoZW4gVWludDhBcnJheSBhdmFpbGFibGVcbiAgICBpZiAoVUlOVDhBUlJBWSkgcHJvdG8udG9BcnJheUJ1ZmZlciA9IHRvQXJyYXlCdWZmZXI7XG5cbiAgICAvLyBpc1VpbnQ2NEJFLCBpc0ludDY0QkVcbiAgICBJbnQ2NFtpc05hbWVdID0gaXNJbnQ2NDtcblxuICAgIC8vIENvbW1vbkpTXG4gICAgZXhwb3J0c1tuYW1lXSA9IEludDY0O1xuXG4gICAgcmV0dXJuIEludDY0O1xuXG4gICAgLy8gY29uc3RydWN0b3JcbiAgICBmdW5jdGlvbiBJbnQ2NChidWZmZXIsIG9mZnNldCwgdmFsdWUsIHJhZGRpeCkge1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEludDY0KSkgcmV0dXJuIG5ldyBJbnQ2NChidWZmZXIsIG9mZnNldCwgdmFsdWUsIHJhZGRpeCk7XG4gICAgICByZXR1cm4gaW5pdCh0aGlzLCBidWZmZXIsIG9mZnNldCwgdmFsdWUsIHJhZGRpeCk7XG4gICAgfVxuXG4gICAgLy8gaXNVaW50NjRCRSwgaXNJbnQ2NEJFXG4gICAgZnVuY3Rpb24gaXNJbnQ2NChiKSB7XG4gICAgICByZXR1cm4gISEoYiAmJiBiW19pc0ludDY0XSk7XG4gICAgfVxuXG4gICAgLy8gaW5pdGlhbGl6ZXJcbiAgICBmdW5jdGlvbiBpbml0KHRoYXQsIGJ1ZmZlciwgb2Zmc2V0LCB2YWx1ZSwgcmFkZGl4KSB7XG4gICAgICBpZiAoVUlOVDhBUlJBWSAmJiBBUlJBWUJVRkZFUikge1xuICAgICAgICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgQVJSQVlCVUZGRVIpIGJ1ZmZlciA9IG5ldyBVSU5UOEFSUkFZKGJ1ZmZlcik7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFSUkFZQlVGRkVSKSB2YWx1ZSA9IG5ldyBVSU5UOEFSUkFZKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgLy8gSW50NjRCRSgpIHN0eWxlXG4gICAgICBpZiAoIWJ1ZmZlciAmJiAhb2Zmc2V0ICYmICF2YWx1ZSAmJiAhc3RvcmFnZSkge1xuICAgICAgICAvLyBzaG9ydGN1dCB0byBpbml0aWFsaXplIHdpdGggemVyb1xuICAgICAgICB0aGF0LmJ1ZmZlciA9IG5ld0FycmF5KFpFUk8sIDApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEludDY0QkUodmFsdWUsIHJhZGRpeCkgc3R5bGVcbiAgICAgIGlmICghaXNWYWxpZEJ1ZmZlcihidWZmZXIsIG9mZnNldCkpIHtcbiAgICAgICAgdmFyIF9zdG9yYWdlID0gc3RvcmFnZSB8fCBBcnJheTtcbiAgICAgICAgcmFkZGl4ID0gb2Zmc2V0O1xuICAgICAgICB2YWx1ZSA9IGJ1ZmZlcjtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgYnVmZmVyID0gbmV3IF9zdG9yYWdlKDgpO1xuICAgICAgfVxuXG4gICAgICB0aGF0LmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgIHRoYXQub2Zmc2V0ID0gb2Zmc2V0IHw9IDA7XG5cbiAgICAgIC8vIEludDY0QkUoYnVmZmVyLCBvZmZzZXQpIHN0eWxlXG4gICAgICBpZiAoVU5ERUZJTkVEID09PSB0eXBlb2YgdmFsdWUpIHJldHVybjtcblxuICAgICAgLy8gSW50NjRCRShidWZmZXIsIG9mZnNldCwgdmFsdWUsIHJhZGRpeCkgc3R5bGVcbiAgICAgIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgZnJvbVN0cmluZyhidWZmZXIsIG9mZnNldCwgdmFsdWUsIHJhZGRpeCB8fCAxMCk7XG4gICAgICB9IGVsc2UgaWYgKGlzVmFsaWRCdWZmZXIodmFsdWUsIHJhZGRpeCkpIHtcbiAgICAgICAgZnJvbUFycmF5KGJ1ZmZlciwgb2Zmc2V0LCB2YWx1ZSwgcmFkZGl4KTtcbiAgICAgIH0gZWxzZSBpZiAoXCJudW1iZXJcIiA9PT0gdHlwZW9mIHJhZGRpeCkge1xuICAgICAgICB3cml0ZUludDMyKGJ1ZmZlciwgb2Zmc2V0ICsgcG9zSCwgdmFsdWUpOyAvLyBoaWdoXG4gICAgICAgIHdyaXRlSW50MzIoYnVmZmVyLCBvZmZzZXQgKyBwb3NMLCByYWRkaXgpOyAvLyBsb3dcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPiAwKSB7XG4gICAgICAgIGZyb21Qb3NpdGl2ZShidWZmZXIsIG9mZnNldCwgdmFsdWUpOyAvLyBwb3NpdGl2ZVxuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgZnJvbU5lZ2F0aXZlKGJ1ZmZlciwgb2Zmc2V0LCB2YWx1ZSk7IC8vIG5lZ2F0aXZlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmcm9tQXJyYXkoYnVmZmVyLCBvZmZzZXQsIFpFUk8sIDApOyAvLyB6ZXJvLCBOYU4gYW5kIG90aGVyc1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb21TdHJpbmcoYnVmZmVyLCBvZmZzZXQsIHN0ciwgcmFkZGl4KSB7XG4gICAgICB2YXIgcG9zID0gMDtcbiAgICAgIHZhciBsZW4gPSBzdHIubGVuZ3RoO1xuICAgICAgdmFyIGhpZ2ggPSAwO1xuICAgICAgdmFyIGxvdyA9IDA7XG4gICAgICBpZiAoc3RyWzBdID09PSBcIi1cIikgcG9zKys7XG4gICAgICB2YXIgc2lnbiA9IHBvcztcbiAgICAgIHdoaWxlIChwb3MgPCBsZW4pIHtcbiAgICAgICAgdmFyIGNociA9IHBhcnNlSW50KHN0cltwb3MrK10sIHJhZGRpeCk7XG4gICAgICAgIGlmICghKGNociA+PSAwKSkgYnJlYWs7IC8vIE5hTlxuICAgICAgICBsb3cgPSBsb3cgKiByYWRkaXggKyBjaHI7XG4gICAgICAgIGhpZ2ggPSBoaWdoICogcmFkZGl4ICsgTWF0aC5mbG9vcihsb3cgLyBCSVQzMik7XG4gICAgICAgIGxvdyAlPSBCSVQzMjtcbiAgICAgIH1cbiAgICAgIGlmIChzaWduKSB7XG4gICAgICAgIGhpZ2ggPSB+aGlnaDtcbiAgICAgICAgaWYgKGxvdykge1xuICAgICAgICAgIGxvdyA9IEJJVDMyIC0gbG93O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpZ2grKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd3JpdGVJbnQzMihidWZmZXIsIG9mZnNldCArIHBvc0gsIGhpZ2gpO1xuICAgICAgd3JpdGVJbnQzMihidWZmZXIsIG9mZnNldCArIHBvc0wsIGxvdyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9OdW1iZXIoKSB7XG4gICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICB2YXIgaGlnaCA9IHJlYWRJbnQzMihidWZmZXIsIG9mZnNldCArIHBvc0gpO1xuICAgICAgdmFyIGxvdyA9IHJlYWRJbnQzMihidWZmZXIsIG9mZnNldCArIHBvc0wpO1xuICAgICAgaWYgKCF1bnNpZ25lZCkgaGlnaCB8PSAwOyAvLyBhIHRyaWNrIHRvIGdldCBzaWduZWRcbiAgICAgIHJldHVybiBoaWdoID8gKGhpZ2ggKiBCSVQzMiArIGxvdykgOiBsb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcocmFkaXgpIHtcbiAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgIHZhciBoaWdoID0gcmVhZEludDMyKGJ1ZmZlciwgb2Zmc2V0ICsgcG9zSCk7XG4gICAgICB2YXIgbG93ID0gcmVhZEludDMyKGJ1ZmZlciwgb2Zmc2V0ICsgcG9zTCk7XG4gICAgICB2YXIgc3RyID0gXCJcIjtcbiAgICAgIHZhciBzaWduID0gIXVuc2lnbmVkICYmIChoaWdoICYgMHg4MDAwMDAwMCk7XG4gICAgICBpZiAoc2lnbikge1xuICAgICAgICBoaWdoID0gfmhpZ2g7XG4gICAgICAgIGxvdyA9IEJJVDMyIC0gbG93O1xuICAgICAgfVxuICAgICAgcmFkaXggPSByYWRpeCB8fCAxMDtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHZhciBtb2QgPSAoaGlnaCAlIHJhZGl4KSAqIEJJVDMyICsgbG93O1xuICAgICAgICBoaWdoID0gTWF0aC5mbG9vcihoaWdoIC8gcmFkaXgpO1xuICAgICAgICBsb3cgPSBNYXRoLmZsb29yKG1vZCAvIHJhZGl4KTtcbiAgICAgICAgc3RyID0gKG1vZCAlIHJhZGl4KS50b1N0cmluZyhyYWRpeCkgKyBzdHI7XG4gICAgICAgIGlmICghaGlnaCAmJiAhbG93KSBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChzaWduKSB7XG4gICAgICAgIHN0ciA9IFwiLVwiICsgc3RyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cml0ZUludDMyKGJ1ZmZlciwgb2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgYnVmZmVyW29mZnNldCArIHBvczNdID0gdmFsdWUgJiAyNTU7XG4gICAgICB2YWx1ZSA9IHZhbHVlID4+IDg7XG4gICAgICBidWZmZXJbb2Zmc2V0ICsgcG9zMl0gPSB2YWx1ZSAmIDI1NTtcbiAgICAgIHZhbHVlID0gdmFsdWUgPj4gODtcbiAgICAgIGJ1ZmZlcltvZmZzZXQgKyBwb3MxXSA9IHZhbHVlICYgMjU1O1xuICAgICAgdmFsdWUgPSB2YWx1ZSA+PiA4O1xuICAgICAgYnVmZmVyW29mZnNldCArIHBvczBdID0gdmFsdWUgJiAyNTU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhZEludDMyKGJ1ZmZlciwgb2Zmc2V0KSB7XG4gICAgICByZXR1cm4gKGJ1ZmZlcltvZmZzZXQgKyBwb3MwXSAqIEJJVDI0KSArXG4gICAgICAgIChidWZmZXJbb2Zmc2V0ICsgcG9zMV0gPDwgMTYpICtcbiAgICAgICAgKGJ1ZmZlcltvZmZzZXQgKyBwb3MyXSA8PCA4KSArXG4gICAgICAgIGJ1ZmZlcltvZmZzZXQgKyBwb3MzXTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b0FycmF5KHJhdykge1xuICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgc3RvcmFnZSA9IG51bGw7IC8vIEFycmF5XG4gICAgaWYgKHJhdyAhPT0gZmFsc2UgJiYgb2Zmc2V0ID09PSAwICYmIGJ1ZmZlci5sZW5ndGggPT09IDggJiYgaXNBcnJheShidWZmZXIpKSByZXR1cm4gYnVmZmVyO1xuICAgIHJldHVybiBuZXdBcnJheShidWZmZXIsIG9mZnNldCk7XG4gIH1cblxuICBmdW5jdGlvbiB0b0J1ZmZlcihyYXcpIHtcbiAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgIHN0b3JhZ2UgPSBCVUZGRVI7XG4gICAgaWYgKHJhdyAhPT0gZmFsc2UgJiYgb2Zmc2V0ID09PSAwICYmIGJ1ZmZlci5sZW5ndGggPT09IDggJiYgQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIHJldHVybiBidWZmZXI7XG4gICAgdmFyIGRlc3QgPSBuZXcgQlVGRkVSKDgpO1xuICAgIGZyb21BcnJheShkZXN0LCAwLCBidWZmZXIsIG9mZnNldCk7XG4gICAgcmV0dXJuIGRlc3Q7XG4gIH1cblxuICBmdW5jdGlvbiB0b0FycmF5QnVmZmVyKHJhdykge1xuICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgdmFyIGFycmJ1ZiA9IGJ1ZmZlci5idWZmZXI7XG4gICAgc3RvcmFnZSA9IFVJTlQ4QVJSQVk7XG4gICAgaWYgKHJhdyAhPT0gZmFsc2UgJiYgb2Zmc2V0ID09PSAwICYmIChhcnJidWYgaW5zdGFuY2VvZiBBUlJBWUJVRkZFUikgJiYgYXJyYnVmLmJ5dGVMZW5ndGggPT09IDgpIHJldHVybiBhcnJidWY7XG4gICAgdmFyIGRlc3QgPSBuZXcgVUlOVDhBUlJBWSg4KTtcbiAgICBmcm9tQXJyYXkoZGVzdCwgMCwgYnVmZmVyLCBvZmZzZXQpO1xuICAgIHJldHVybiBkZXN0LmJ1ZmZlcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVmFsaWRCdWZmZXIoYnVmZmVyLCBvZmZzZXQpIHtcbiAgICB2YXIgbGVuID0gYnVmZmVyICYmIGJ1ZmZlci5sZW5ndGg7XG4gICAgb2Zmc2V0IHw9IDA7XG4gICAgcmV0dXJuIGxlbiAmJiAob2Zmc2V0ICsgOCA8PSBsZW4pICYmIChcInN0cmluZ1wiICE9PSB0eXBlb2YgYnVmZmVyW29mZnNldF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJvbUFycmF5KGRlc3RidWYsIGRlc3RvZmYsIHNyY2J1Ziwgc3Jjb2ZmKSB7XG4gICAgZGVzdG9mZiB8PSAwO1xuICAgIHNyY29mZiB8PSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XG4gICAgICBkZXN0YnVmW2Rlc3RvZmYrK10gPSBzcmNidWZbc3Jjb2ZmKytdICYgMjU1O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld0FycmF5KGJ1ZmZlciwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGJ1ZmZlciwgb2Zmc2V0LCBvZmZzZXQgKyA4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyb21Qb3NpdGl2ZUJFKGJ1ZmZlciwgb2Zmc2V0LCB2YWx1ZSkge1xuICAgIHZhciBwb3MgPSBvZmZzZXQgKyA4O1xuICAgIHdoaWxlIChwb3MgPiBvZmZzZXQpIHtcbiAgICAgIGJ1ZmZlclstLXBvc10gPSB2YWx1ZSAmIDI1NTtcbiAgICAgIHZhbHVlIC89IDI1NjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmcm9tTmVnYXRpdmVCRShidWZmZXIsIG9mZnNldCwgdmFsdWUpIHtcbiAgICB2YXIgcG9zID0gb2Zmc2V0ICsgODtcbiAgICB2YWx1ZSsrO1xuICAgIHdoaWxlIChwb3MgPiBvZmZzZXQpIHtcbiAgICAgIGJ1ZmZlclstLXBvc10gPSAoKC12YWx1ZSkgJiAyNTUpIF4gMjU1O1xuICAgICAgdmFsdWUgLz0gMjU2O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZyb21Qb3NpdGl2ZUxFKGJ1ZmZlciwgb2Zmc2V0LCB2YWx1ZSkge1xuICAgIHZhciBlbmQgPSBvZmZzZXQgKyA4O1xuICAgIHdoaWxlIChvZmZzZXQgPCBlbmQpIHtcbiAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSB2YWx1ZSAmIDI1NTtcbiAgICAgIHZhbHVlIC89IDI1NjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmcm9tTmVnYXRpdmVMRShidWZmZXIsIG9mZnNldCwgdmFsdWUpIHtcbiAgICB2YXIgZW5kID0gb2Zmc2V0ICsgODtcbiAgICB2YWx1ZSsrO1xuICAgIHdoaWxlIChvZmZzZXQgPCBlbmQpIHtcbiAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSAoKC12YWx1ZSkgJiAyNTUpIF4gMjU1O1xuICAgICAgdmFsdWUgLz0gMjU2O1xuICAgIH1cbiAgfVxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZXRyb2ZveC9pcy1hcnJheVxuICBmdW5jdGlvbiBfaXNBcnJheSh2YWwpIHtcbiAgICByZXR1cm4gISF2YWwgJiYgXCJbb2JqZWN0IEFycmF5XVwiID09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpO1xuICB9XG5cbn0odHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBleHBvcnRzLm5vZGVOYW1lICE9PSAnc3RyaW5nJyA/IGV4cG9ydHMgOiAodGhpcyB8fCB7fSkpO1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIhZnVuY3Rpb24ocixuKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1uKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSxuKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLmpzZXU9bigpOnIuanNldT1uKCl9KHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24ocil7dmFyIG49e307ZnVuY3Rpb24gdChlKXtpZihuW2VdKXJldHVybiBuW2VdLmV4cG9ydHM7dmFyIG89bltlXT17aTplLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHJbZV0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsdCksby5sPSEwLG8uZXhwb3J0c31yZXR1cm4gdC5tPXIsdC5jPW4sdC5kPWZ1bmN0aW9uKHIsbixlKXt0Lm8ocixuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsbix7ZW51bWVyYWJsZTohMCxnZXQ6ZX0pfSx0LnI9ZnVuY3Rpb24ocil7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkocixTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sdC50PWZ1bmN0aW9uKHIsbil7aWYoMSZuJiYocj10KHIpKSw4Jm4pcmV0dXJuIHI7aWYoNCZuJiZcIm9iamVjdFwiPT10eXBlb2YgciYmciYmci5fX2VzTW9kdWxlKXJldHVybiByO3ZhciBlPU9iamVjdC5jcmVhdGUobnVsbCk7aWYodC5yKGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnJ9KSwyJm4mJlwic3RyaW5nXCIhPXR5cGVvZiByKWZvcih2YXIgbyBpbiByKXQuZChlLG8sZnVuY3Rpb24obil7cmV0dXJuIHJbbl19LmJpbmQobnVsbCxvKSk7cmV0dXJuIGV9LHQubj1mdW5jdGlvbihyKXt2YXIgbj1yJiZyLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gci5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiByfTtyZXR1cm4gdC5kKG4sXCJhXCIsbiksbn0sdC5vPWZ1bmN0aW9uKHIsbil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyLG4pfSx0LnA9XCIvVXNlcnMvanVuL1Byb2plY3RKYXZhU2NyaXB0L2pzX2J1ZmZlcl91dGlscy9kaXN0XCIsdCh0LnM9MCl9KFtmdW5jdGlvbihyLG4sdCl7ci5leHBvcnRzPXQoMSl9LGZ1bmN0aW9uKHIsbix0KXtcInVzZSBzdHJpY3RcIjt0LnIobik7dmFyIGU9e307dC5yKGUpLHQuZChlLFwiZW5jb2RlQmFzZTY0XCIsZnVuY3Rpb24oKXtyZXR1cm4gaX0pLHQuZChlLFwiZGVjb2RlQmFzZTY0XCIsZnVuY3Rpb24oKXtyZXR1cm4gYX0pLHQuZChlLFwiZW5jb2RlQmFzZTY0VXJsXCIsZnVuY3Rpb24oKXtyZXR1cm4gc30pLHQuZChlLFwiZGVjb2RlQmFzZTY0VXJsXCIsZnVuY3Rpb24oKXtyZXR1cm4gcH0pLHQuZChlLFwiYXJyYXlCdWZmZXJUb0hleFN0cmluZ1wiLGZ1bmN0aW9uKCl7cmV0dXJuIGR9KSx0LmQoZSxcImhleFN0cmluZ1RvQXJyYXlCdWZmZXJcIixmdW5jdGlvbigpe3JldHVybiBsfSksdC5kKGUsXCJhcnJheUJ1ZmZlclRvU3RyaW5nXCIsZnVuY3Rpb24oKXtyZXR1cm4geX0pLHQuZChlLFwic3RyaW5nVG9BcnJheUJ1ZmZlclwiLGZ1bmN0aW9uKCl7cmV0dXJuIGd9KTt2YXIgbz17fTt0LnIobyksdC5kKG8sXCJwZW1Ub0JpblwiLGZ1bmN0aW9uKCl7cmV0dXJuIHd9KSx0LmQobyxcImJpblRvUGVtXCIsZnVuY3Rpb24oKXtyZXR1cm4gbX0pO3ZhciB1PWZ1bmN0aW9uKHIpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBCdWZmZXIpe3ZhciBuPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyKS5zbGljZSg4LC0xKTtyZXR1cm4oQnVmZmVyLmlzQnVmZmVyKHIpP3I6MDw9W1wiQXJyYXlCdWZmZXJcIixcIlR5cGVkQXJyYXlcIixcIlVpbnQ4QXJyYXlcIixcIkludDhBcnJheVwiLFwiVWludDhDbGFtcGVkQXJyYXlcIixcIkludDE2QXJyYXlcIixcIlVpbnQxNkFycmF5XCIsXCJJbnQzMkFycmF5XCIsXCJVaW50MzJBcnJheVwiLFwiRmxvYXQzMkFycmF5XCIsXCJGbG9hdDY0QXJyYXlcIl0uaW5kZXhPZihuKT9CdWZmZXIuZnJvbShyKTpCdWZmZXIuZnJvbShyLnRvU3RyaW5nKCksXCJiaW5hcnlcIikpLnRvU3RyaW5nKFwiYmFzZTY0XCIpfXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkRW52aXJvbm1lbnRcIil9LGY9ZnVuY3Rpb24ocil7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEJ1ZmZlcilyZXR1cm4gQnVmZmVyLmZyb20ocixcImJhc2U2NFwiKS50b1N0cmluZyhcImJpbmFyeVwiKTt0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZEVudmlyb25tZW50XCIpfTtmdW5jdGlvbiBpKHIpe3ZhciBuO3JldHVybiBuPVwic3RyaW5nXCI9PXR5cGVvZiByP3I6eShyKSwoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvdz91OndpbmRvdy5idG9hKShuKX1mdW5jdGlvbiBhKHIpe3JldHVybiBmdW5jdGlvbihyKXtpZihyIGluc3RhbmNlb2YgVWludDhBcnJheSl7Zm9yKHZhciBuPSEwLHQ9MDt0PHIubGVuZ3RoO3QrKylpZigxMjY8clt0XXx8MzI+clt0XSYmMTMhPT1yW3RdJiYxMCE9PXJbdF0pe249ITE7YnJlYWt9dmFyIGU9bnVsbDtpZihuKXtlPVwiXCI7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspZSs9U3RyaW5nLmZyb21DaGFyQ29kZShyW29dKX1lbHNlIGU9cjtyZXR1cm4gZX10aHJvdyBuZXcgRXJyb3IoXCJJbnB1dCBkYXRhIG11c3QgYmUgYW4gVWludDhBcnJheVwiKX0oZygoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvdz9mOndpbmRvdy5hdG9iKShyKSkpfWZ1bmN0aW9uIGMocil7aWYociBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpcmV0dXJuIHI7aWYoQXJyYXlCdWZmZXIuaXNWaWV3KHIpJiZ2b2lkIDAhPT1yLmJ1ZmZlcilyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoci5idWZmZXIpO2lmKHIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcilyZXR1cm4gbmV3IFVpbnQ4QXJyYXkocik7dGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgbXVzdCBiZSBhbiBBcnJheUJ1ZmZlciBvciBhIFR5cGVkQXJyYXlcIil9ZnVuY3Rpb24gcyhyKXtyZXR1cm4gaShyKS5yZXBsYWNlKC9cXCsvZyxcIi1cIikucmVwbGFjZSgvXFwvL2csXCJfXCIpLnJlcGxhY2UoLz0rJC8sXCJcIil9ZnVuY3Rpb24gcChyKXtpZihcInN0cmluZ1wiIT10eXBlb2Ygcil0aHJvdyBuZXcgRXJyb3IoXCJJbnB1dCBtdXN0IGJlIHN0cmluZ1wiKTtyZXR1cm4gYShyPXIucmVwbGFjZSgvLS9nLFwiK1wiKS5yZXBsYWNlKC9fL2csXCIvXCIpKX1mdW5jdGlvbiBkKHIpe2Zvcih2YXIgbix0PWMociksZT1cIlwiLG89MDtvPHQubGVuZ3RoO28rKyllKz1uPTE9PT0obj0oMjU1JnRbb10pLnRvU3RyaW5nKDE2KSkubGVuZ3RoP1wiMFwiLmNvbmNhdChuKTpuO3JldHVybiBlfWZ1bmN0aW9uIGwocil7aWYoIXJ8fFwic3RyaW5nXCIhPXR5cGVvZiByKXRocm93IG5ldyBFcnJvcihcIklucHV0IGFyZyBtdXN0IGJlIGEgbm9uLW51bGwgc3RyaW5nXCIpO2Zvcih2YXIgbj1bXSx0PXIubGVuZ3RoLGU9MDtlPHQ7ZSs9MiluLnB1c2gocGFyc2VJbnQoci5zdWJzdHIoZSwyKSwxNikpO3JldHVybiBuZXcgVWludDhBcnJheShuKX1mdW5jdGlvbiB5KHIpe3ZhciBuPWMocik7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxuKX1mdW5jdGlvbiBnKHIpe2lmKCFyfHxcInN0cmluZ1wiIT10eXBlb2Ygcil0aHJvdyBuZXcgRXJyb3IoXCJJbnB1dCBhcmcgbXVzdCBiZSBhIG5vbi1udWxsIHN0cmluZ1wiKTtmb3IodmFyIG49bmV3IFVpbnQ4QXJyYXkoci5sZW5ndGgpLHQ9MDt0PHIubGVuZ3RoO3QrKyluW3RdPXIuY2hhckNvZGVBdCh0KTtyZXR1cm4gbn12YXIgYj17cHVibGljOlwiUFVCTElDIEtFWVwiLHByaXZhdGU6XCJQUklWQVRFIEtFWVwiLGVuY3J5cHRlZFByaXZhdGU6XCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIixjZXJ0aWZpY2F0ZTpcIkNFUlRJRklDQVRFXCIsY2VydFJlcXVlc3Q6XCJDRVJUSUZJQ0FURSBSRVFVRVNUXCJ9O2Z1bmN0aW9uIHcocil7cmV0dXJuIGEoZnVuY3Rpb24ocil7aWYoIXJ8fFwic3RyaW5nXCIhPXR5cGVvZiByKXRocm93IG5ldyBFcnJvcihcIklucHV0IGFyZyBtdXN0IGJlIGEgbm9uLW51bGwgc3RyaW5nXCIpO3RyeXt2YXIgbj1yLnNwbGl0KC9eLS0tLS1bc10qQkVHSU5bXi1dKi0tLS0tJC9nbSlbMV0uc3BsaXQoL14tLS0tLVtzXSpFTkRbXi1dKi0tLS0tJC9nbSlbMF07cmV0dXJuIG49bi5yZXBsYWNlKC9cXHI/XFxuL2csXCJcIil9Y2F0Y2gocil7dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBmb3JtYXQgYXMgUEVNXCIpfX0ocikpfWZ1bmN0aW9uIG0ocixuKXtyZXR1cm4gZnVuY3Rpb24ocixuKXtpZighcnx8XCJzdHJpbmdcIiE9dHlwZW9mIHIpdGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgYXJnIG11c3QgYmUgYSBub24tbnVsbCBzdHJpbmdcIik7aWYoIW58fFwic3RyaW5nXCIhPXR5cGVvZiBuKXRocm93IG5ldyBFcnJvcihcIklucHV0IGFyZyBtdXN0IGJlIGEgbm9uLW51bGwgc3RyaW5nXCIpO2lmKDA+T2JqZWN0LmtleXMoYikuaW5kZXhPZihuKSl0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCB0eXBlXCIpO2Zvcih2YXIgdD1iW25dLGU9XCItLS0tLUJFR0lOIFwiLmNvbmNhdCh0LFwiLS0tLS1cXG5cIik7MDxyLmxlbmd0aDspZSs9XCJcIi5jb25jYXQoci5zdWJzdHJpbmcoMCw2NCksXCJcXG5cIikscj1yLnN1YnN0cmluZyg2NCk7cmV0dXJuIGU9XCJcIi5jb25jYXQoZSxcIi0tLS0tRU5EIFwiKS5jb25jYXQodCxcIi0tLS0tXCIpfShpKHIpLG4pfXQuZChuLFwiZW5jb2RlclwiLGZ1bmN0aW9uKCl7cmV0dXJuIGV9KSx0LmQobixcImZvcm1hdHRlclwiLGZ1bmN0aW9uKCl7cmV0dXJuIG99KTtuLmRlZmF1bHQ9e2VuY29kZXI6ZSxmb3JtYXR0ZXI6b319XSl9KTsiLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbnZhciBjbG9uZWFibGVUYWdzID0ge307XG5jbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG5jbG9uZWFibGVUYWdzW2Jvb2xUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9XG5jbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW21hcFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbmNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPSBjbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbmNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG5jbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKipcbiAqIEFkZHMgdGhlIGtleS12YWx1ZSBgcGFpcmAgdG8gYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSBwYWlyIFRoZSBrZXktdmFsdWUgcGFpciB0byBhZGQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBtYXBgLlxuICovXG5mdW5jdGlvbiBhZGRNYXBFbnRyeShtYXAsIHBhaXIpIHtcbiAgLy8gRG9uJ3QgcmV0dXJuIGBtYXAuc2V0YCBiZWNhdXNlIGl0J3Mgbm90IGNoYWluYWJsZSBpbiBJRSAxMS5cbiAgbWFwLnNldChwYWlyWzBdLCBwYWlyWzFdKTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gYHNldGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBtb2RpZnkuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhZGQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBzZXRgLlxuICovXG5mdW5jdGlvbiBhZGRTZXRFbnRyeShzZXQsIHZhbHVlKSB7XG4gIC8vIERvbid0IHJldHVybiBgc2V0LmFkZGAgYmVjYXVzZSBpdCdzIG5vdCBjaGFpbmFibGUgaW4gSUUgMTEuXG4gIHNldC5hZGQodmFsdWUpO1xuICByZXR1cm4gc2V0O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QgaW4gSUUgPCA5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7XG4gIC8vIE1hbnkgaG9zdCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIHRoYXQgY2FuIGNvZXJjZSB0byBzdHJpbmdzXG4gIC8vIGRlc3BpdGUgaGF2aW5nIGltcHJvcGVybHkgZGVmaW5lZCBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gISEodmFsdWUgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIFN5bWJvbCA9IHJvb3QuU3ltYm9sLFxuICAgIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXksXG4gICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKSxcbiAgICBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKSxcbiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLFxuICAgIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyBkYXRhW2tleV0gIT09IHVuZGVmaW5lZCA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIGdldE1hcERhdGEodGhpcywga2V5KS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fWydkZWxldGUnXShrZXkpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGNhY2hlID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGNhY2hlIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gY2FjaGUuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGNhY2hlID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICAvLyBTYWZhcmkgOSBtYWtlcyBgYXJndW1lbnRzLmxlbmd0aGAgZW51bWVyYWJsZSBpbiBzdHJpY3QgbW9kZS5cbiAgdmFyIHJlc3VsdCA9IChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpXG4gICAgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpXG4gICAgOiBbXTtcblxuICB2YXIgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aCxcbiAgICAgIHNraXBJbmRleGVzID0gISFsZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoa2V5ID09ICdsZW5ndGgnIHx8IGlzSW5kZXgoa2V5LCBsZW5ndGgpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Z1bGxdIFNwZWNpZnkgYSBjbG9uZSBpbmNsdWRpbmcgc3ltYm9scy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgaXNEZWVwLCBpc0Z1bGwsIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoY3VzdG9taXplcikge1xuICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgfVxuICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICBpZiAoaXNBcnIpIHtcbiAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgaWYgKCFpc0RlZXApIHtcbiAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgIH1cbiAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICBpZiAoaXNIb3N0T2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZU9iamVjdChpc0Z1bmMgPyB7fSA6IHZhbHVlKTtcbiAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgYmFzZUNsb25lLCBpc0RlZXApO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQ7XG4gIH1cbiAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gIGlmICghaXNBcnIpIHtcbiAgICB2YXIgcHJvcHMgPSBpc0Z1bGwgPyBnZXRBbGxLZXlzKHZhbHVlKSA6IGtleXModmFsdWUpO1xuICB9XG4gIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgIGlmIChwcm9wcykge1xuICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgaXNEZWVwLCBpc0Z1bGwsIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gYmFzZUNyZWF0ZShwcm90bykge1xuICByZXR1cm4gaXNPYmplY3QocHJvdG8pID8gb2JqZWN0Q3JlYXRlKHByb3RvKSA6IHt9O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IChpc0Z1bmN0aW9uKHZhbHVlKSB8fCBpc0hvc3RPYmplY3QodmFsdWUpKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciByZXN1bHQgPSBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGJ1ZmZlci5sZW5ndGgpO1xuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjbG9uZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNsb25lIHZhbHVlcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgbWFwLlxuICovXG5mdW5jdGlvbiBjbG9uZU1hcChtYXAsIGlzRGVlcCwgY2xvbmVGdW5jKSB7XG4gIHZhciBhcnJheSA9IGlzRGVlcCA/IGNsb25lRnVuYyhtYXBUb0FycmF5KG1hcCksIHRydWUpIDogbWFwVG9BcnJheShtYXApO1xuICByZXR1cm4gYXJyYXlSZWR1Y2UoYXJyYXksIGFkZE1hcEVudHJ5LCBuZXcgbWFwLmNvbnN0cnVjdG9yKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgc2V0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNsb25lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2xvbmVGdW5jIFRoZSBmdW5jdGlvbiB0byBjbG9uZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHNldC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTZXQoc2V0LCBpc0RlZXAsIGNsb25lRnVuYykge1xuICB2YXIgYXJyYXkgPSBpc0RlZXAgPyBjbG9uZUZ1bmMoc2V0VG9BcnJheShzZXQpLCB0cnVlKSA6IHNldFRvQXJyYXkoc2V0KTtcbiAgcmV0dXJuIGFycmF5UmVkdWNlKGFycmF5LCBhZGRTZXRFbnRyeSwgbmV3IHNldC5jb25zdHJ1Y3Rvcik7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgPyBzb3VyY2Vba2V5XSA6IG5ld1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG4vKipcbiAqIENvcGllcyBvd24gc3ltYm9sIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9sIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSBuYXRpdmVHZXRTeW1ib2xzID8gb3ZlckFyZyhuYXRpdmVHZXRTeW1ib2xzLCBPYmplY3QpIDogc3R1YkFycmF5O1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEsXG4vLyBmb3IgZGF0YSB2aWV3cyBpbiBFZGdlIDwgMTQsIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzLlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNsb25lRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2xvbmUgdmFsdWVzLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgY2xvbmVGdW5jLCBpc0RlZXApIHtcbiAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHJldHVybiBjbG9uZU1hcChvYmplY3QsIGlzRGVlcCwgY2xvbmVGdW5jKTtcblxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICByZXR1cm4gY2xvbmVTZXQob2JqZWN0LCBpc0RlZXAsIGNsb25lRnVuYyk7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVlKSkgJiZcbiAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZVxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgdHJ1ZSwgdHJ1ZSk7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICghcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpIHx8IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IGFyZ3NUYWcpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICogaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDgtOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVEZWVwO1xuIiwiLy8gYnJvd3Nlci5qc1xuXG5leHBvcnRzLmVuY29kZSA9IHJlcXVpcmUoXCIuL2VuY29kZVwiKS5lbmNvZGU7XG5leHBvcnRzLmRlY29kZSA9IHJlcXVpcmUoXCIuL2RlY29kZVwiKS5kZWNvZGU7XG5cbmV4cG9ydHMuRW5jb2RlciA9IHJlcXVpcmUoXCIuL2VuY29kZXJcIikuRW5jb2RlcjtcbmV4cG9ydHMuRGVjb2RlciA9IHJlcXVpcmUoXCIuL2RlY29kZXJcIikuRGVjb2RlcjtcblxuZXhwb3J0cy5jcmVhdGVDb2RlYyA9IHJlcXVpcmUoXCIuL2V4dFwiKS5jcmVhdGVDb2RlYztcbmV4cG9ydHMuY29kZWMgPSByZXF1aXJlKFwiLi9jb2RlY1wiKS5jb2RlYztcbiIsIi8qIGdsb2JhbHMgQnVmZmVyICovXG5cbm1vZHVsZS5leHBvcnRzID1cbiAgYygoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIEJ1ZmZlcikgJiYgQnVmZmVyKSB8fFxuICBjKHRoaXMuQnVmZmVyKSB8fFxuICBjKChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2Ygd2luZG93KSAmJiB3aW5kb3cuQnVmZmVyKSB8fFxuICB0aGlzLkJ1ZmZlcjtcblxuZnVuY3Rpb24gYyhCKSB7XG4gIHJldHVybiBCICYmIEIuaXNCdWZmZXIgJiYgQjtcbn0iLCIvLyBidWZmZXItbGl0ZS5qc1xuXG52YXIgTUFYQlVGTEVOID0gODE5MjtcblxuZXhwb3J0cy5jb3B5ID0gY29weTtcbmV4cG9ydHMudG9TdHJpbmcgPSB0b1N0cmluZztcbmV4cG9ydHMud3JpdGUgPSB3cml0ZTtcblxuLyoqXG4gKiBCdWZmZXIucHJvdG90eXBlLndyaXRlKClcbiAqXG4gKiBAcGFyYW0gc3RyaW5nIHtTdHJpbmd9XG4gKiBAcGFyYW0gW29mZnNldF0ge051bWJlcn1cbiAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gKi9cblxuZnVuY3Rpb24gd3JpdGUoc3RyaW5nLCBvZmZzZXQpIHtcbiAgdmFyIGJ1ZmZlciA9IHRoaXM7XG4gIHZhciBpbmRleCA9IG9mZnNldCB8fCAob2Zmc2V0IHw9IDApO1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgdmFyIGNociA9IDA7XG4gIHZhciBpID0gMDtcbiAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICBjaHIgPSBzdHJpbmcuY2hhckNvZGVBdChpKyspO1xuXG4gICAgaWYgKGNociA8IDEyOCkge1xuICAgICAgYnVmZmVyW2luZGV4KytdID0gY2hyO1xuICAgIH0gZWxzZSBpZiAoY2hyIDwgMHg4MDApIHtcbiAgICAgIC8vIDIgYnl0ZXNcbiAgICAgIGJ1ZmZlcltpbmRleCsrXSA9IDB4QzAgfCAoY2hyID4+PiA2KTtcbiAgICAgIGJ1ZmZlcltpbmRleCsrXSA9IDB4ODAgfCAoY2hyICYgMHgzRik7XG4gICAgfSBlbHNlIGlmIChjaHIgPCAweEQ4MDAgfHwgY2hyID4gMHhERkZGKSB7XG4gICAgICAvLyAzIGJ5dGVzXG4gICAgICBidWZmZXJbaW5kZXgrK10gPSAweEUwIHwgKGNociAgPj4+IDEyKTtcbiAgICAgIGJ1ZmZlcltpbmRleCsrXSA9IDB4ODAgfCAoKGNociA+Pj4gNikgICYgMHgzRik7XG4gICAgICBidWZmZXJbaW5kZXgrK10gPSAweDgwIHwgKGNociAgICAgICAgICAmIDB4M0YpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyA0IGJ5dGVzIC0gc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNociA9ICgoKGNociAtIDB4RDgwMCkgPDwgMTApIHwgKHN0cmluZy5jaGFyQ29kZUF0KGkrKykgLSAweERDMDApKSArIDB4MTAwMDA7XG4gICAgICBidWZmZXJbaW5kZXgrK10gPSAweEYwIHwgKGNociA+Pj4gMTgpO1xuICAgICAgYnVmZmVyW2luZGV4KytdID0gMHg4MCB8ICgoY2hyID4+PiAxMikgJiAweDNGKTtcbiAgICAgIGJ1ZmZlcltpbmRleCsrXSA9IDB4ODAgfCAoKGNociA+Pj4gNikgICYgMHgzRik7XG4gICAgICBidWZmZXJbaW5kZXgrK10gPSAweDgwIHwgKGNociAgICAgICAgICAmIDB4M0YpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaW5kZXggLSBvZmZzZXQ7XG59XG5cbi8qKlxuICogQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZygpXG4gKlxuICogQHBhcmFtIFtlbmNvZGluZ10ge1N0cmluZ30gaWdub3JlZFxuICogQHBhcmFtIFtzdGFydF0ge051bWJlcn1cbiAqIEBwYXJhbSBbZW5kXSB7TnVtYmVyfVxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiB0b1N0cmluZyhlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgYnVmZmVyID0gdGhpcztcbiAgdmFyIGluZGV4ID0gc3RhcnR8MDtcbiAgaWYgKCFlbmQpIGVuZCA9IGJ1ZmZlci5sZW5ndGg7XG4gIHZhciBzdHJpbmcgPSAnJztcbiAgdmFyIGNociA9IDA7XG5cbiAgd2hpbGUgKGluZGV4IDwgZW5kKSB7XG4gICAgY2hyID0gYnVmZmVyW2luZGV4KytdO1xuICAgIGlmIChjaHIgPCAxMjgpIHtcbiAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocik7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoKGNociAmIDB4RTApID09PSAweEMwKSB7XG4gICAgICAvLyAyIGJ5dGVzXG4gICAgICBjaHIgPSAoY2hyICYgMHgxRikgPDwgNiB8XG4gICAgICAgICAgICAoYnVmZmVyW2luZGV4KytdICYgMHgzRik7XG5cbiAgICB9IGVsc2UgaWYgKChjaHIgJiAweEYwKSA9PT0gMHhFMCkge1xuICAgICAgLy8gMyBieXRlc1xuICAgICAgY2hyID0gKGNociAmIDB4MEYpICAgICAgICAgICAgIDw8IDEyIHxcbiAgICAgICAgICAgIChidWZmZXJbaW5kZXgrK10gJiAweDNGKSA8PCA2ICB8XG4gICAgICAgICAgICAoYnVmZmVyW2luZGV4KytdICYgMHgzRik7XG5cbiAgICB9IGVsc2UgaWYgKChjaHIgJiAweEY4KSA9PT0gMHhGMCkge1xuICAgICAgLy8gNCBieXRlc1xuICAgICAgY2hyID0gKGNociAmIDB4MDcpICAgICAgICAgICAgIDw8IDE4IHxcbiAgICAgICAgICAgIChidWZmZXJbaW5kZXgrK10gJiAweDNGKSA8PCAxMiB8XG4gICAgICAgICAgICAoYnVmZmVyW2luZGV4KytdICYgMHgzRikgPDwgNiAgfFxuICAgICAgICAgICAgKGJ1ZmZlcltpbmRleCsrXSAmIDB4M0YpO1xuICAgIH1cblxuICAgIGlmIChjaHIgPj0gMHgwMTAwMDApIHtcbiAgICAgIC8vIEEgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNociAtPSAweDAxMDAwMDtcblxuICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGNociA+Pj4gMTApICsgMHhEODAwLCAoY2hyICYgMHgzRkYpICsgMHhEQzAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5nO1xufVxuXG4vKipcbiAqIEJ1ZmZlci5wcm90b3R5cGUuY29weSgpXG4gKlxuICogQHBhcmFtIHRhcmdldCB7QnVmZmVyfVxuICogQHBhcmFtIFt0YXJnZXRTdGFydF0ge051bWJlcn1cbiAqIEBwYXJhbSBbc3RhcnRdIHtOdW1iZXJ9XG4gKiBAcGFyYW0gW2VuZF0ge051bWJlcn1cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cblxuZnVuY3Rpb24gY29weSh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIHZhciBpO1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDA7XG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGg7XG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMDtcbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0O1xuXG4gIGlmICh0YXJnZXQgPT09IHRoaXMgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmdcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGFzY2VuZGluZ1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxlbjtcbn1cbiIsIi8vIGJ1ZmZlcmlzaC1hcnJheS5qc1xuXG52YXIgQnVmZmVyaXNoID0gcmVxdWlyZShcIi4vYnVmZmVyaXNoXCIpO1xuXG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gYWxsb2MoMCk7XG5cbmV4cG9ydHMuYWxsb2MgPSBhbGxvYztcbmV4cG9ydHMuY29uY2F0ID0gQnVmZmVyaXNoLmNvbmNhdDtcbmV4cG9ydHMuZnJvbSA9IGZyb207XG5cbi8qKlxuICogQHBhcmFtIHNpemUge051bWJlcn1cbiAqIEByZXR1cm5zIHtCdWZmZXJ8VWludDhBcnJheXxBcnJheX1cbiAqL1xuXG5mdW5jdGlvbiBhbGxvYyhzaXplKSB7XG4gIHJldHVybiBuZXcgQXJyYXkoc2l6ZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHZhbHVlIHtBcnJheXxBcnJheUJ1ZmZlcnxCdWZmZXJ8U3RyaW5nfVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5cbmZ1bmN0aW9uIGZyb20odmFsdWUpIHtcbiAgaWYgKCFCdWZmZXJpc2guaXNCdWZmZXIodmFsdWUpICYmIEJ1ZmZlcmlzaC5pc1ZpZXcodmFsdWUpKSB7XG4gICAgLy8gVHlwZWRBcnJheSB0byBVaW50OEFycmF5XG4gICAgdmFsdWUgPSBCdWZmZXJpc2guVWludDhBcnJheS5mcm9tKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChCdWZmZXJpc2guaXNBcnJheUJ1ZmZlcih2YWx1ZSkpIHtcbiAgICAvLyBBcnJheUJ1ZmZlciB0byBVaW50OEFycmF5XG4gICAgdmFsdWUgPSBuZXcgVWludDhBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgLy8gU3RyaW5nIHRvIEFycmF5XG4gICAgcmV0dXJuIEJ1ZmZlcmlzaC5mcm9tLmNhbGwoZXhwb3J0cywgdmFsdWUpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpO1xuICB9XG5cbiAgLy8gQXJyYXktbGlrZSB0byBBcnJheVxuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodmFsdWUpO1xufVxuIiwiLy8gYnVmZmVyaXNoLWJ1ZmZlci5qc1xuXG52YXIgQnVmZmVyaXNoID0gcmVxdWlyZShcIi4vYnVmZmVyaXNoXCIpO1xudmFyIEJ1ZmZlciA9IEJ1ZmZlcmlzaC5nbG9iYWw7XG5cbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBCdWZmZXJpc2guaGFzQnVmZmVyID8gYWxsb2MoMCkgOiBbXTtcblxuZXhwb3J0cy5hbGxvYyA9IEJ1ZmZlcmlzaC5oYXNCdWZmZXIgJiYgQnVmZmVyLmFsbG9jIHx8IGFsbG9jO1xuZXhwb3J0cy5jb25jYXQgPSBCdWZmZXJpc2guY29uY2F0O1xuZXhwb3J0cy5mcm9tID0gZnJvbTtcblxuLyoqXG4gKiBAcGFyYW0gc2l6ZSB7TnVtYmVyfVxuICogQHJldHVybnMge0J1ZmZlcnxVaW50OEFycmF5fEFycmF5fVxuICovXG5cbmZ1bmN0aW9uIGFsbG9jKHNpemUpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIoc2l6ZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHZhbHVlIHtBcnJheXxBcnJheUJ1ZmZlcnxCdWZmZXJ8U3RyaW5nfVxuICogQHJldHVybnMge0J1ZmZlcn1cbiAqL1xuXG5mdW5jdGlvbiBmcm9tKHZhbHVlKSB7XG4gIGlmICghQnVmZmVyaXNoLmlzQnVmZmVyKHZhbHVlKSAmJiBCdWZmZXJpc2guaXNWaWV3KHZhbHVlKSkge1xuICAgIC8vIFR5cGVkQXJyYXkgdG8gVWludDhBcnJheVxuICAgIHZhbHVlID0gQnVmZmVyaXNoLlVpbnQ4QXJyYXkuZnJvbSh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoQnVmZmVyaXNoLmlzQXJyYXlCdWZmZXIodmFsdWUpKSB7XG4gICAgLy8gQXJyYXlCdWZmZXIgdG8gVWludDhBcnJheVxuICAgIHZhbHVlID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIC8vIFN0cmluZyB0byBCdWZmZXJcbiAgICByZXR1cm4gQnVmZmVyaXNoLmZyb20uY2FsbChleHBvcnRzLCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJyk7XG4gIH1cblxuICAvLyBBcnJheS1saWtlIHRvIEJ1ZmZlclxuICBpZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmZyb20ubGVuZ3RoICE9PSAxKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlKTsgLy8gbm9kZSB2NitcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcih2YWx1ZSk7IC8vIG5vZGUgdjRcbiAgfVxufVxuIiwiLy8gYnVmZmVyaXNoLXByb3RvLmpzXG5cbi8qIGpzaGludCBlcW51bGw6dHJ1ZSAqL1xuXG52YXIgQnVmZmVyTGl0ZSA9IHJlcXVpcmUoXCIuL2J1ZmZlci1saXRlXCIpO1xuXG5leHBvcnRzLmNvcHkgPSBjb3B5O1xuZXhwb3J0cy5zbGljZSA9IHNsaWNlO1xuZXhwb3J0cy50b1N0cmluZyA9IHRvU3RyaW5nO1xuZXhwb3J0cy53cml0ZSA9IGdlbihcIndyaXRlXCIpO1xuXG52YXIgQnVmZmVyaXNoID0gcmVxdWlyZShcIi4vYnVmZmVyaXNoXCIpO1xudmFyIEJ1ZmZlciA9IEJ1ZmZlcmlzaC5nbG9iYWw7XG5cbnZhciBpc0J1ZmZlclNoaW0gPSBCdWZmZXJpc2guaGFzQnVmZmVyICYmIChcIlRZUEVEX0FSUkFZX1NVUFBPUlRcIiBpbiBCdWZmZXIpO1xudmFyIGJyb2tlblR5cGVkQXJyYXkgPSBpc0J1ZmZlclNoaW0gJiYgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUO1xuXG4vKipcbiAqIEBwYXJhbSB0YXJnZXQge0J1ZmZlcnxVaW50OEFycmF5fEFycmF5fVxuICogQHBhcmFtIFt0YXJnZXRTdGFydF0ge051bWJlcn1cbiAqIEBwYXJhbSBbc3RhcnRdIHtOdW1iZXJ9XG4gKiBAcGFyYW0gW2VuZF0ge051bWJlcn1cbiAqIEByZXR1cm5zIHtCdWZmZXJ8VWludDhBcnJheXxBcnJheX1cbiAqL1xuXG5mdW5jdGlvbiBjb3B5KHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRoaXNJc0J1ZmZlciA9IEJ1ZmZlcmlzaC5pc0J1ZmZlcih0aGlzKTtcbiAgdmFyIHRhcmdldElzQnVmZmVyID0gQnVmZmVyaXNoLmlzQnVmZmVyKHRhcmdldCk7XG4gIGlmICh0aGlzSXNCdWZmZXIgJiYgdGFyZ2V0SXNCdWZmZXIpIHtcbiAgICAvLyBCdWZmZXIgdG8gQnVmZmVyXG4gICAgcmV0dXJuIHRoaXMuY29weSh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKTtcbiAgfSBlbHNlIGlmICghYnJva2VuVHlwZWRBcnJheSAmJiAhdGhpc0lzQnVmZmVyICYmICF0YXJnZXRJc0J1ZmZlciAmJlxuICAgIEJ1ZmZlcmlzaC5pc1ZpZXcodGhpcykgJiYgQnVmZmVyaXNoLmlzVmlldyh0YXJnZXQpKSB7XG4gICAgLy8gVWludDhBcnJheSB0byBVaW50OEFycmF5IChleGNlcHQgZm9yIG1pbm9yIHNvbWUgYnJvd3NlcnMpXG4gICAgdmFyIGJ1ZmZlciA9IChzdGFydCB8fCBlbmQgIT0gbnVsbCkgPyBzbGljZS5jYWxsKHRoaXMsIHN0YXJ0LCBlbmQpIDogdGhpcztcbiAgICB0YXJnZXQuc2V0KGJ1ZmZlciwgdGFyZ2V0U3RhcnQpO1xuICAgIHJldHVybiBidWZmZXIubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIC8vIG90aGVyIGNhc2VzXG4gICAgcmV0dXJuIEJ1ZmZlckxpdGUuY29weS5jYWxsKHRoaXMsIHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIFtzdGFydF0ge051bWJlcn1cbiAqIEBwYXJhbSBbZW5kXSB7TnVtYmVyfVxuICogQHJldHVybnMge0J1ZmZlcnxVaW50OEFycmF5fEFycmF5fVxuICovXG5cbmZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgLy8gZm9yIEJ1ZmZlciwgVWludDhBcnJheSAoZXhjZXB0IGZvciBtaW5vciBzb21lIGJyb3dzZXJzKSBhbmQgQXJyYXlcbiAgdmFyIGYgPSB0aGlzLnNsaWNlIHx8ICghYnJva2VuVHlwZWRBcnJheSAmJiB0aGlzLnN1YmFycmF5KTtcbiAgaWYgKGYpIHJldHVybiBmLmNhbGwodGhpcywgc3RhcnQsIGVuZCk7XG5cbiAgLy8gVWludDhBcnJheSAoZm9yIG1pbm9yIHNvbWUgYnJvd3NlcnMpXG4gIHZhciB0YXJnZXQgPSBCdWZmZXJpc2guYWxsb2MuY2FsbCh0aGlzLCBlbmQgLSBzdGFydCk7XG4gIGNvcHkuY2FsbCh0aGlzLCB0YXJnZXQsIDAsIHN0YXJ0LCBlbmQpO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIEJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcoKVxuICpcbiAqIEBwYXJhbSBbZW5jb2RpbmddIHtTdHJpbmd9IGlnbm9yZWRcbiAqIEBwYXJhbSBbc3RhcnRdIHtOdW1iZXJ9XG4gKiBAcGFyYW0gW2VuZF0ge051bWJlcn1cbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGYgPSAoIWlzQnVmZmVyU2hpbSAmJiBCdWZmZXJpc2guaXNCdWZmZXIodGhpcykpID8gdGhpcy50b1N0cmluZyA6IEJ1ZmZlckxpdGUudG9TdHJpbmc7XG4gIHJldHVybiBmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZW4obWV0aG9kKSB7XG4gIHJldHVybiB3cmFwO1xuXG4gIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGYgPSB0aGlzW21ldGhvZF0gfHwgQnVmZmVyTGl0ZVttZXRob2RdO1xuICAgIHJldHVybiBmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn1cbiIsIi8vIGJ1ZmZlcmlzaC11aW50OGFycmF5LmpzXG5cbnZhciBCdWZmZXJpc2ggPSByZXF1aXJlKFwiLi9idWZmZXJpc2hcIik7XG5cbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBCdWZmZXJpc2guaGFzQXJyYXlCdWZmZXIgPyBhbGxvYygwKSA6IFtdO1xuXG5leHBvcnRzLmFsbG9jID0gYWxsb2M7XG5leHBvcnRzLmNvbmNhdCA9IEJ1ZmZlcmlzaC5jb25jYXQ7XG5leHBvcnRzLmZyb20gPSBmcm9tO1xuXG4vKipcbiAqIEBwYXJhbSBzaXplIHtOdW1iZXJ9XG4gKiBAcmV0dXJucyB7QnVmZmVyfFVpbnQ4QXJyYXl8QXJyYXl9XG4gKi9cblxuZnVuY3Rpb24gYWxsb2Moc2l6ZSkge1xuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHZhbHVlIHtBcnJheXxBcnJheUJ1ZmZlcnxCdWZmZXJ8U3RyaW5nfVxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9XG4gKi9cblxuZnVuY3Rpb24gZnJvbSh2YWx1ZSkge1xuICBpZiAoQnVmZmVyaXNoLmlzVmlldyh2YWx1ZSkpIHtcbiAgICAvLyBUeXBlZEFycmF5IHRvIEFycmF5QnVmZmVyXG4gICAgdmFyIGJ5dGVPZmZzZXQgPSB2YWx1ZS5ieXRlT2Zmc2V0O1xuICAgIHZhciBieXRlTGVuZ3RoID0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICB2YWx1ZSA9IHZhbHVlLmJ1ZmZlcjtcbiAgICBpZiAodmFsdWUuYnl0ZUxlbmd0aCAhPT0gYnl0ZUxlbmd0aCkge1xuICAgICAgaWYgKHZhbHVlLnNsaWNlKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGJ5dGVMZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQW5kcm9pZCA0LjEgZG9lcyBub3QgaGF2ZSBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2VcbiAgICAgICAgdmFsdWUgPSBuZXcgVWludDhBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZS5ieXRlTGVuZ3RoICE9PSBieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgLy8gVHlwZWRBcnJheSB0byBBcnJheUJ1ZmZlciB0byBVaW50OEFycmF5IHRvIEFycmF5XG4gICAgICAgICAgdmFsdWUgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh2YWx1ZSwgYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGJ5dGVMZW5ndGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIC8vIFN0cmluZyB0byBVaW50OEFycmF5XG4gICAgcmV0dXJuIEJ1ZmZlcmlzaC5mcm9tLmNhbGwoZXhwb3J0cywgdmFsdWUpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHZhbHVlKTtcbn1cbiIsIi8vIGJ1ZmZlcmlzaC5qc1xuXG52YXIgQnVmZmVyID0gZXhwb3J0cy5nbG9iYWwgPSByZXF1aXJlKFwiLi9idWZmZXItZ2xvYmFsXCIpO1xudmFyIGhhc0J1ZmZlciA9IGV4cG9ydHMuaGFzQnVmZmVyID0gQnVmZmVyICYmICEhQnVmZmVyLmlzQnVmZmVyO1xudmFyIGhhc0FycmF5QnVmZmVyID0gZXhwb3J0cy5oYXNBcnJheUJ1ZmZlciA9IChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgQXJyYXlCdWZmZXIpO1xuXG52YXIgaXNBcnJheSA9IGV4cG9ydHMuaXNBcnJheSA9IHJlcXVpcmUoXCJpc2FycmF5XCIpO1xuZXhwb3J0cy5pc0FycmF5QnVmZmVyID0gaGFzQXJyYXlCdWZmZXIgPyBpc0FycmF5QnVmZmVyIDogX2ZhbHNlO1xudmFyIGlzQnVmZmVyID0gZXhwb3J0cy5pc0J1ZmZlciA9IGhhc0J1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IF9mYWxzZTtcbnZhciBpc1ZpZXcgPSBleHBvcnRzLmlzVmlldyA9IGhhc0FycmF5QnVmZmVyID8gKEFycmF5QnVmZmVyLmlzVmlldyB8fCBfaXMoXCJBcnJheUJ1ZmZlclwiLCBcImJ1ZmZlclwiKSkgOiBfZmFsc2U7XG5cbmV4cG9ydHMuYWxsb2MgPSBhbGxvYztcbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuZXhwb3J0cy5mcm9tID0gZnJvbTtcblxudmFyIEJ1ZmZlckFycmF5ID0gZXhwb3J0cy5BcnJheSA9IHJlcXVpcmUoXCIuL2J1ZmZlcmlzaC1hcnJheVwiKTtcbnZhciBCdWZmZXJCdWZmZXIgPSBleHBvcnRzLkJ1ZmZlciA9IHJlcXVpcmUoXCIuL2J1ZmZlcmlzaC1idWZmZXJcIik7XG52YXIgQnVmZmVyVWludDhBcnJheSA9IGV4cG9ydHMuVWludDhBcnJheSA9IHJlcXVpcmUoXCIuL2J1ZmZlcmlzaC11aW50OGFycmF5XCIpO1xudmFyIEJ1ZmZlclByb3RvID0gZXhwb3J0cy5wcm90b3R5cGUgPSByZXF1aXJlKFwiLi9idWZmZXJpc2gtcHJvdG9cIik7XG5cbi8qKlxuICogQHBhcmFtIHZhbHVlIHtBcnJheXxBcnJheUJ1ZmZlcnxCdWZmZXJ8U3RyaW5nfVxuICogQHJldHVybnMge0J1ZmZlcnxVaW50OEFycmF5fEFycmF5fVxuICovXG5cbmZ1bmN0aW9uIGZyb20odmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBmcm9tU3RyaW5nLmNhbGwodGhpcywgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhdXRvKHRoaXMpLmZyb20odmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHNpemUge051bWJlcn1cbiAqIEByZXR1cm5zIHtCdWZmZXJ8VWludDhBcnJheXxBcnJheX1cbiAqL1xuXG5mdW5jdGlvbiBhbGxvYyhzaXplKSB7XG4gIHJldHVybiBhdXRvKHRoaXMpLmFsbG9jKHNpemUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSBsaXN0IHtBcnJheX0gYXJyYXkgb2YgKEJ1ZmZlcnxVaW50OEFycmF5fEFycmF5KXNcbiAqIEBwYXJhbSBbbGVuZ3RoXVxuICogQHJldHVybnMge0J1ZmZlcnxVaW50OEFycmF5fEFycmF5fVxuICovXG5cbmZ1bmN0aW9uIGNvbmNhdChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSAwO1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobGlzdCwgZHJ5cnVuKTtcbiAgfVxuICB2YXIgcmVmID0gKHRoaXMgIT09IGV4cG9ydHMpICYmIHRoaXMgfHwgbGlzdFswXTtcbiAgdmFyIHJlc3VsdCA9IGFsbG9jLmNhbGwocmVmLCBsZW5ndGgpO1xuICB2YXIgb2Zmc2V0ID0gMDtcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChsaXN0LCBhcHBlbmQpO1xuICByZXR1cm4gcmVzdWx0O1xuXG4gIGZ1bmN0aW9uIGRyeXJ1bihidWZmZXIpIHtcbiAgICBsZW5ndGggKz0gYnVmZmVyLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGVuZChidWZmZXIpIHtcbiAgICBvZmZzZXQgKz0gQnVmZmVyUHJvdG8uY29weS5jYWxsKGJ1ZmZlciwgcmVzdWx0LCBvZmZzZXQpO1xuICB9XG59XG5cbnZhciBfaXNBcnJheUJ1ZmZlciA9IF9pcyhcIkFycmF5QnVmZmVyXCIpO1xuXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgX2lzQXJyYXlCdWZmZXIodmFsdWUpO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZnJvbVN0cmluZyh2YWx1ZSkge1xuICB2YXIgZXhwZWN0ZWQgPSB2YWx1ZS5sZW5ndGggKiAzO1xuICB2YXIgdGhhdCA9IGFsbG9jLmNhbGwodGhpcywgZXhwZWN0ZWQpO1xuICB2YXIgYWN0dWFsID0gQnVmZmVyUHJvdG8ud3JpdGUuY2FsbCh0aGF0LCB2YWx1ZSk7XG4gIGlmIChleHBlY3RlZCAhPT0gYWN0dWFsKSB7XG4gICAgdGhhdCA9IEJ1ZmZlclByb3RvLnNsaWNlLmNhbGwodGhhdCwgMCwgYWN0dWFsKTtcbiAgfVxuICByZXR1cm4gdGhhdDtcbn1cblxuZnVuY3Rpb24gYXV0byh0aGF0KSB7XG4gIHJldHVybiBpc0J1ZmZlcih0aGF0KSA/IEJ1ZmZlckJ1ZmZlclxuICAgIDogaXNWaWV3KHRoYXQpID8gQnVmZmVyVWludDhBcnJheVxuICAgIDogaXNBcnJheSh0aGF0KSA/IEJ1ZmZlckFycmF5XG4gICAgOiBoYXNCdWZmZXIgPyBCdWZmZXJCdWZmZXJcbiAgICA6IGhhc0FycmF5QnVmZmVyID8gQnVmZmVyVWludDhBcnJheVxuICAgIDogQnVmZmVyQXJyYXk7XG59XG5cbmZ1bmN0aW9uIF9mYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBfaXMobmFtZSwga2V5KSB7XG4gIC8qIGpzaGludCBlcW51bGw6dHJ1ZSAqL1xuICBuYW1lID0gXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiO1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICE9IG51bGwpICYmIHt9LnRvU3RyaW5nLmNhbGwoa2V5ID8gdmFsdWVba2V5XSA6IHZhbHVlKSA9PT0gbmFtZTtcbiAgfTtcbn0iLCIvLyBjb2RlYy1iYXNlLmpzXG5cbnZhciBJU19BUlJBWSA9IHJlcXVpcmUoXCJpc2FycmF5XCIpO1xuXG5leHBvcnRzLmNyZWF0ZUNvZGVjID0gY3JlYXRlQ29kZWM7XG5leHBvcnRzLmluc3RhbGwgPSBpbnN0YWxsO1xuZXhwb3J0cy5maWx0ZXIgPSBmaWx0ZXI7XG5cbnZhciBCdWZmZXJpc2ggPSByZXF1aXJlKFwiLi9idWZmZXJpc2hcIik7XG5cbmZ1bmN0aW9uIENvZGVjKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIENvZGVjKSkgcmV0dXJuIG5ldyBDb2RlYyhvcHRpb25zKTtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy5pbml0KCk7XG59XG5cbkNvZGVjLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMudWludDhhcnJheSkge1xuICAgIHRoaXMuYnVmZmVyaXNoID0gQnVmZmVyaXNoLlVpbnQ4QXJyYXk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGluc3RhbGwocHJvcHMpIHtcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgQ29kZWMucHJvdG90eXBlW2tleV0gPSBhZGQoQ29kZWMucHJvdG90eXBlW2tleV0sIHByb3BzW2tleV0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZChhLCBiKSB7XG4gIHJldHVybiAoYSAmJiBiKSA/IGFiIDogKGEgfHwgYik7XG5cbiAgZnVuY3Rpb24gYWIoKSB7XG4gICAgYS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gam9pbihmaWx0ZXJzKSB7XG4gIGZpbHRlcnMgPSBmaWx0ZXJzLnNsaWNlKCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZpbHRlcnMucmVkdWNlKGl0ZXJhdG9yLCB2YWx1ZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gaXRlcmF0b3IodmFsdWUsIGZpbHRlcikge1xuICAgIHJldHVybiBmaWx0ZXIodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihmaWx0ZXIpIHtcbiAgcmV0dXJuIElTX0FSUkFZKGZpbHRlcikgPyBqb2luKGZpbHRlcikgOiBmaWx0ZXI7XG59XG5cbi8vIEBwdWJsaWNcbi8vIG1zZ3BhY2suY3JlYXRlQ29kZWMoKVxuXG5mdW5jdGlvbiBjcmVhdGVDb2RlYyhvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgQ29kZWMob3B0aW9ucyk7XG59XG5cbi8vIGRlZmF1bHQgc2hhcmVkIGNvZGVjXG5cbmV4cG9ydHMucHJlc2V0ID0gY3JlYXRlQ29kZWMoe3ByZXNldDogdHJ1ZX0pO1xuIiwiLy8gY29kZWMuanNcblxuLy8gbG9hZCBib3RoIGludGVyZmFjZXNcbnJlcXVpcmUoXCIuL3JlYWQtY29yZVwiKTtcbnJlcXVpcmUoXCIuL3dyaXRlLWNvcmVcIik7XG5cbi8vIEBwdWJsaWNcbi8vIG1zZ3BhY2suY29kZWMucHJlc2V0XG5cbmV4cG9ydHMuY29kZWMgPSB7XG4gIHByZXNldDogcmVxdWlyZShcIi4vY29kZWMtYmFzZVwiKS5wcmVzZXRcbn07XG4iLCIvLyBkZWNvZGUtYnVmZmVyLmpzXG5cbmV4cG9ydHMuRGVjb2RlQnVmZmVyID0gRGVjb2RlQnVmZmVyO1xuXG52YXIgcHJlc2V0ID0gcmVxdWlyZShcIi4vcmVhZC1jb3JlXCIpLnByZXNldDtcblxudmFyIEZsZXhEZWNvZGVyID0gcmVxdWlyZShcIi4vZmxleC1idWZmZXJcIikuRmxleERlY29kZXI7XG5cbkZsZXhEZWNvZGVyLm1peGluKERlY29kZUJ1ZmZlci5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBEZWNvZGVCdWZmZXIob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVjb2RlQnVmZmVyKSkgcmV0dXJuIG5ldyBEZWNvZGVCdWZmZXIob3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIGlmIChvcHRpb25zLmNvZGVjKSB7XG4gICAgICB2YXIgY29kZWMgPSB0aGlzLmNvZGVjID0gb3B0aW9ucy5jb2RlYztcbiAgICAgIGlmIChjb2RlYy5idWZmZXJpc2gpIHRoaXMuYnVmZmVyaXNoID0gY29kZWMuYnVmZmVyaXNoO1xuICAgIH1cbiAgfVxufVxuXG5EZWNvZGVCdWZmZXIucHJvdG90eXBlLmNvZGVjID0gcHJlc2V0O1xuXG5EZWNvZGVCdWZmZXIucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNvZGVjLmRlY29kZSh0aGlzKTtcbn07XG4iLCIvLyBkZWNvZGUuanNcblxuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG5cbnZhciBEZWNvZGVCdWZmZXIgPSByZXF1aXJlKFwiLi9kZWNvZGUtYnVmZmVyXCIpLkRlY29kZUJ1ZmZlcjtcblxuZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBkZWNvZGVyID0gbmV3IERlY29kZUJ1ZmZlcihvcHRpb25zKTtcbiAgZGVjb2Rlci53cml0ZShpbnB1dCk7XG4gIHJldHVybiBkZWNvZGVyLnJlYWQoKTtcbn0iLCIvLyBkZWNvZGVyLmpzXG5cbmV4cG9ydHMuRGVjb2RlciA9IERlY29kZXI7XG5cbnZhciBFdmVudExpdGUgPSByZXF1aXJlKFwiZXZlbnQtbGl0ZVwiKTtcbnZhciBEZWNvZGVCdWZmZXIgPSByZXF1aXJlKFwiLi9kZWNvZGUtYnVmZmVyXCIpLkRlY29kZUJ1ZmZlcjtcblxuZnVuY3Rpb24gRGVjb2RlcihvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZWNvZGVyKSkgcmV0dXJuIG5ldyBEZWNvZGVyKG9wdGlvbnMpO1xuICBEZWNvZGVCdWZmZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuRGVjb2Rlci5wcm90b3R5cGUgPSBuZXcgRGVjb2RlQnVmZmVyKCk7XG5cbkV2ZW50TGl0ZS5taXhpbihEZWNvZGVyLnByb3RvdHlwZSk7XG5cbkRlY29kZXIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoKSB0aGlzLndyaXRlKGNodW5rKTtcbiAgdGhpcy5mbHVzaCgpO1xufTtcblxuRGVjb2Rlci5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gIHRoaXMuZW1pdChcImRhdGFcIiwgY2h1bmspO1xufTtcblxuRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oY2h1bmspIHtcbiAgdGhpcy5kZWNvZGUoY2h1bmspO1xuICB0aGlzLmVtaXQoXCJlbmRcIik7XG59O1xuIiwiLy8gZW5jb2RlLWJ1ZmZlci5qc1xuXG5leHBvcnRzLkVuY29kZUJ1ZmZlciA9IEVuY29kZUJ1ZmZlcjtcblxudmFyIHByZXNldCA9IHJlcXVpcmUoXCIuL3dyaXRlLWNvcmVcIikucHJlc2V0O1xuXG52YXIgRmxleEVuY29kZXIgPSByZXF1aXJlKFwiLi9mbGV4LWJ1ZmZlclwiKS5GbGV4RW5jb2RlcjtcblxuRmxleEVuY29kZXIubWl4aW4oRW5jb2RlQnVmZmVyLnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIEVuY29kZUJ1ZmZlcihvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFbmNvZGVCdWZmZXIpKSByZXR1cm4gbmV3IEVuY29kZUJ1ZmZlcihvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgaWYgKG9wdGlvbnMuY29kZWMpIHtcbiAgICAgIHZhciBjb2RlYyA9IHRoaXMuY29kZWMgPSBvcHRpb25zLmNvZGVjO1xuICAgICAgaWYgKGNvZGVjLmJ1ZmZlcmlzaCkgdGhpcy5idWZmZXJpc2ggPSBjb2RlYy5idWZmZXJpc2g7XG4gICAgfVxuICB9XG59XG5cbkVuY29kZUJ1ZmZlci5wcm90b3R5cGUuY29kZWMgPSBwcmVzZXQ7XG5cbkVuY29kZUJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihpbnB1dCkge1xuICB0aGlzLmNvZGVjLmVuY29kZSh0aGlzLCBpbnB1dCk7XG59O1xuIiwiLy8gZW5jb2RlLmpzXG5cbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuXG52YXIgRW5jb2RlQnVmZmVyID0gcmVxdWlyZShcIi4vZW5jb2RlLWJ1ZmZlclwiKS5FbmNvZGVCdWZmZXI7XG5cbmZ1bmN0aW9uIGVuY29kZShpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgZW5jb2RlciA9IG5ldyBFbmNvZGVCdWZmZXIob3B0aW9ucyk7XG4gIGVuY29kZXIud3JpdGUoaW5wdXQpO1xuICByZXR1cm4gZW5jb2Rlci5yZWFkKCk7XG59XG4iLCIvLyBlbmNvZGVyLmpzXG5cbmV4cG9ydHMuRW5jb2RlciA9IEVuY29kZXI7XG5cbnZhciBFdmVudExpdGUgPSByZXF1aXJlKFwiZXZlbnQtbGl0ZVwiKTtcbnZhciBFbmNvZGVCdWZmZXIgPSByZXF1aXJlKFwiLi9lbmNvZGUtYnVmZmVyXCIpLkVuY29kZUJ1ZmZlcjtcblxuZnVuY3Rpb24gRW5jb2RlcihvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFbmNvZGVyKSkgcmV0dXJuIG5ldyBFbmNvZGVyKG9wdGlvbnMpO1xuICBFbmNvZGVCdWZmZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuRW5jb2Rlci5wcm90b3R5cGUgPSBuZXcgRW5jb2RlQnVmZmVyKCk7XG5cbkV2ZW50TGl0ZS5taXhpbihFbmNvZGVyLnByb3RvdHlwZSk7XG5cbkVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gIHRoaXMud3JpdGUoY2h1bmspO1xuICB0aGlzLmVtaXQoXCJkYXRhXCIsIHRoaXMucmVhZCgpKTtcbn07XG5cbkVuY29kZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoKSB0aGlzLmVuY29kZShjaHVuayk7XG4gIHRoaXMuZmx1c2goKTtcbiAgdGhpcy5lbWl0KFwiZW5kXCIpO1xufTtcbiIsIi8vIGV4dC1idWZmZXIuanNcblxuZXhwb3J0cy5FeHRCdWZmZXIgPSBFeHRCdWZmZXI7XG5cbnZhciBCdWZmZXJpc2ggPSByZXF1aXJlKFwiLi9idWZmZXJpc2hcIik7XG5cbmZ1bmN0aW9uIEV4dEJ1ZmZlcihidWZmZXIsIHR5cGUpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEV4dEJ1ZmZlcikpIHJldHVybiBuZXcgRXh0QnVmZmVyKGJ1ZmZlciwgdHlwZSk7XG4gIHRoaXMuYnVmZmVyID0gQnVmZmVyaXNoLmZyb20oYnVmZmVyKTtcbiAgdGhpcy50eXBlID0gdHlwZTtcbn1cbiIsIi8vIGV4dC1wYWNrZXIuanNcblxuZXhwb3J0cy5zZXRFeHRQYWNrZXJzID0gc2V0RXh0UGFja2VycztcblxudmFyIEJ1ZmZlcmlzaCA9IHJlcXVpcmUoXCIuL2J1ZmZlcmlzaFwiKTtcbnZhciBCdWZmZXIgPSBCdWZmZXJpc2guZ2xvYmFsO1xudmFyIHBhY2tUeXBlZEFycmF5ID0gQnVmZmVyaXNoLlVpbnQ4QXJyYXkuZnJvbTtcbnZhciBfZW5jb2RlO1xuXG52YXIgRVJST1JfQ09MVU1OUyA9IHtuYW1lOiAxLCBtZXNzYWdlOiAxLCBzdGFjazogMSwgY29sdW1uTnVtYmVyOiAxLCBmaWxlTmFtZTogMSwgbGluZU51bWJlcjogMX07XG5cbmZ1bmN0aW9uIHNldEV4dFBhY2tlcnMoY29kZWMpIHtcbiAgY29kZWMuYWRkRXh0UGFja2VyKDB4MEUsIEVycm9yLCBbcGFja0Vycm9yLCBlbmNvZGVdKTtcbiAgY29kZWMuYWRkRXh0UGFja2VyKDB4MDEsIEV2YWxFcnJvciwgW3BhY2tFcnJvciwgZW5jb2RlXSk7XG4gIGNvZGVjLmFkZEV4dFBhY2tlcigweDAyLCBSYW5nZUVycm9yLCBbcGFja0Vycm9yLCBlbmNvZGVdKTtcbiAgY29kZWMuYWRkRXh0UGFja2VyKDB4MDMsIFJlZmVyZW5jZUVycm9yLCBbcGFja0Vycm9yLCBlbmNvZGVdKTtcbiAgY29kZWMuYWRkRXh0UGFja2VyKDB4MDQsIFN5bnRheEVycm9yLCBbcGFja0Vycm9yLCBlbmNvZGVdKTtcbiAgY29kZWMuYWRkRXh0UGFja2VyKDB4MDUsIFR5cGVFcnJvciwgW3BhY2tFcnJvciwgZW5jb2RlXSk7XG4gIGNvZGVjLmFkZEV4dFBhY2tlcigweDA2LCBVUklFcnJvciwgW3BhY2tFcnJvciwgZW5jb2RlXSk7XG5cbiAgY29kZWMuYWRkRXh0UGFja2VyKDB4MEEsIFJlZ0V4cCwgW3BhY2tSZWdFeHAsIGVuY29kZV0pO1xuICBjb2RlYy5hZGRFeHRQYWNrZXIoMHgwQiwgQm9vbGVhbiwgW3BhY2tWYWx1ZU9mLCBlbmNvZGVdKTtcbiAgY29kZWMuYWRkRXh0UGFja2VyKDB4MEMsIFN0cmluZywgW3BhY2tWYWx1ZU9mLCBlbmNvZGVdKTtcbiAgY29kZWMuYWRkRXh0UGFja2VyKDB4MEQsIERhdGUsIFtOdW1iZXIsIGVuY29kZV0pO1xuICBjb2RlYy5hZGRFeHRQYWNrZXIoMHgwRiwgTnVtYmVyLCBbcGFja1ZhbHVlT2YsIGVuY29kZV0pO1xuXG4gIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgVWludDhBcnJheSkge1xuICAgIGNvZGVjLmFkZEV4dFBhY2tlcigweDExLCBJbnQ4QXJyYXksIHBhY2tUeXBlZEFycmF5KTtcbiAgICBjb2RlYy5hZGRFeHRQYWNrZXIoMHgxMiwgVWludDhBcnJheSwgcGFja1R5cGVkQXJyYXkpO1xuICAgIGNvZGVjLmFkZEV4dFBhY2tlcigweDEzLCBJbnQxNkFycmF5LCBwYWNrVHlwZWRBcnJheSk7XG4gICAgY29kZWMuYWRkRXh0UGFja2VyKDB4MTQsIFVpbnQxNkFycmF5LCBwYWNrVHlwZWRBcnJheSk7XG4gICAgY29kZWMuYWRkRXh0UGFja2VyKDB4MTUsIEludDMyQXJyYXksIHBhY2tUeXBlZEFycmF5KTtcbiAgICBjb2RlYy5hZGRFeHRQYWNrZXIoMHgxNiwgVWludDMyQXJyYXksIHBhY2tUeXBlZEFycmF5KTtcbiAgICBjb2RlYy5hZGRFeHRQYWNrZXIoMHgxNywgRmxvYXQzMkFycmF5LCBwYWNrVHlwZWRBcnJheSk7XG5cbiAgICAvLyBQaGFudG9tSlMvMS45LjcgZG9lc24ndCBoYXZlIEZsb2F0NjRBcnJheVxuICAgIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgRmxvYXQ2NEFycmF5KSB7XG4gICAgICBjb2RlYy5hZGRFeHRQYWNrZXIoMHgxOCwgRmxvYXQ2NEFycmF5LCBwYWNrVHlwZWRBcnJheSk7XG4gICAgfVxuXG4gICAgLy8gSUUxMCBkb2Vzbid0IGhhdmUgVWludDhDbGFtcGVkQXJyYXlcbiAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5KSB7XG4gICAgICBjb2RlYy5hZGRFeHRQYWNrZXIoMHgxOSwgVWludDhDbGFtcGVkQXJyYXksIHBhY2tUeXBlZEFycmF5KTtcbiAgICB9XG5cbiAgICBjb2RlYy5hZGRFeHRQYWNrZXIoMHgxQSwgQXJyYXlCdWZmZXIsIHBhY2tUeXBlZEFycmF5KTtcbiAgICBjb2RlYy5hZGRFeHRQYWNrZXIoMHgxRCwgRGF0YVZpZXcsIHBhY2tUeXBlZEFycmF5KTtcbiAgfVxuXG4gIGlmIChCdWZmZXJpc2guaGFzQnVmZmVyKSB7XG4gICAgY29kZWMuYWRkRXh0UGFja2VyKDB4MUIsIEJ1ZmZlciwgQnVmZmVyaXNoLmZyb20pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuICBpZiAoIV9lbmNvZGUpIF9lbmNvZGUgPSByZXF1aXJlKFwiLi9lbmNvZGVcIikuZW5jb2RlOyAvLyBsYXp5IGxvYWRcbiAgcmV0dXJuIF9lbmNvZGUoaW5wdXQpO1xufVxuXG5mdW5jdGlvbiBwYWNrVmFsdWVPZih2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlKS52YWx1ZU9mKCk7XG59XG5cbmZ1bmN0aW9uIHBhY2tSZWdFeHAodmFsdWUpIHtcbiAgdmFsdWUgPSBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNwbGl0KFwiL1wiKTtcbiAgdmFsdWUuc2hpZnQoKTtcbiAgdmFyIG91dCA9IFt2YWx1ZS5wb3AoKV07XG4gIG91dC51bnNoaWZ0KHZhbHVlLmpvaW4oXCIvXCIpKTtcbiAgcmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gcGFja0Vycm9yKHZhbHVlKSB7XG4gIHZhciBvdXQgPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIEVSUk9SX0NPTFVNTlMpIHtcbiAgICBvdXRba2V5XSA9IHZhbHVlW2tleV07XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsIi8vIGV4dC11bnBhY2tlci5qc1xuXG5leHBvcnRzLnNldEV4dFVucGFja2VycyA9IHNldEV4dFVucGFja2VycztcblxudmFyIEJ1ZmZlcmlzaCA9IHJlcXVpcmUoXCIuL2J1ZmZlcmlzaFwiKTtcbnZhciBCdWZmZXIgPSBCdWZmZXJpc2guZ2xvYmFsO1xudmFyIF9kZWNvZGU7XG5cbnZhciBFUlJPUl9DT0xVTU5TID0ge25hbWU6IDEsIG1lc3NhZ2U6IDEsIHN0YWNrOiAxLCBjb2x1bW5OdW1iZXI6IDEsIGZpbGVOYW1lOiAxLCBsaW5lTnVtYmVyOiAxfTtcblxuZnVuY3Rpb24gc2V0RXh0VW5wYWNrZXJzKGNvZGVjKSB7XG4gIGNvZGVjLmFkZEV4dFVucGFja2VyKDB4MEUsIFtkZWNvZGUsIHVucGFja0Vycm9yKEVycm9yKV0pO1xuICBjb2RlYy5hZGRFeHRVbnBhY2tlcigweDAxLCBbZGVjb2RlLCB1bnBhY2tFcnJvcihFdmFsRXJyb3IpXSk7XG4gIGNvZGVjLmFkZEV4dFVucGFja2VyKDB4MDIsIFtkZWNvZGUsIHVucGFja0Vycm9yKFJhbmdlRXJyb3IpXSk7XG4gIGNvZGVjLmFkZEV4dFVucGFja2VyKDB4MDMsIFtkZWNvZGUsIHVucGFja0Vycm9yKFJlZmVyZW5jZUVycm9yKV0pO1xuICBjb2RlYy5hZGRFeHRVbnBhY2tlcigweDA0LCBbZGVjb2RlLCB1bnBhY2tFcnJvcihTeW50YXhFcnJvcildKTtcbiAgY29kZWMuYWRkRXh0VW5wYWNrZXIoMHgwNSwgW2RlY29kZSwgdW5wYWNrRXJyb3IoVHlwZUVycm9yKV0pO1xuICBjb2RlYy5hZGRFeHRVbnBhY2tlcigweDA2LCBbZGVjb2RlLCB1bnBhY2tFcnJvcihVUklFcnJvcildKTtcblxuICBjb2RlYy5hZGRFeHRVbnBhY2tlcigweDBBLCBbZGVjb2RlLCB1bnBhY2tSZWdFeHBdKTtcbiAgY29kZWMuYWRkRXh0VW5wYWNrZXIoMHgwQiwgW2RlY29kZSwgdW5wYWNrQ2xhc3MoQm9vbGVhbildKTtcbiAgY29kZWMuYWRkRXh0VW5wYWNrZXIoMHgwQywgW2RlY29kZSwgdW5wYWNrQ2xhc3MoU3RyaW5nKV0pO1xuICBjb2RlYy5hZGRFeHRVbnBhY2tlcigweDBELCBbZGVjb2RlLCB1bnBhY2tDbGFzcyhEYXRlKV0pO1xuICBjb2RlYy5hZGRFeHRVbnBhY2tlcigweDBGLCBbZGVjb2RlLCB1bnBhY2tDbGFzcyhOdW1iZXIpXSk7XG5cbiAgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBVaW50OEFycmF5KSB7XG4gICAgY29kZWMuYWRkRXh0VW5wYWNrZXIoMHgxMSwgdW5wYWNrQ2xhc3MoSW50OEFycmF5KSk7XG4gICAgY29kZWMuYWRkRXh0VW5wYWNrZXIoMHgxMiwgdW5wYWNrQ2xhc3MoVWludDhBcnJheSkpO1xuICAgIGNvZGVjLmFkZEV4dFVucGFja2VyKDB4MTMsIFt1bnBhY2tBcnJheUJ1ZmZlciwgdW5wYWNrQ2xhc3MoSW50MTZBcnJheSldKTtcbiAgICBjb2RlYy5hZGRFeHRVbnBhY2tlcigweDE0LCBbdW5wYWNrQXJyYXlCdWZmZXIsIHVucGFja0NsYXNzKFVpbnQxNkFycmF5KV0pO1xuICAgIGNvZGVjLmFkZEV4dFVucGFja2VyKDB4MTUsIFt1bnBhY2tBcnJheUJ1ZmZlciwgdW5wYWNrQ2xhc3MoSW50MzJBcnJheSldKTtcbiAgICBjb2RlYy5hZGRFeHRVbnBhY2tlcigweDE2LCBbdW5wYWNrQXJyYXlCdWZmZXIsIHVucGFja0NsYXNzKFVpbnQzMkFycmF5KV0pO1xuICAgIGNvZGVjLmFkZEV4dFVucGFja2VyKDB4MTcsIFt1bnBhY2tBcnJheUJ1ZmZlciwgdW5wYWNrQ2xhc3MoRmxvYXQzMkFycmF5KV0pO1xuXG4gICAgLy8gUGhhbnRvbUpTLzEuOS43IGRvZXNuJ3QgaGF2ZSBGbG9hdDY0QXJyYXlcbiAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIEZsb2F0NjRBcnJheSkge1xuICAgICAgY29kZWMuYWRkRXh0VW5wYWNrZXIoMHgxOCwgW3VucGFja0FycmF5QnVmZmVyLCB1bnBhY2tDbGFzcyhGbG9hdDY0QXJyYXkpXSk7XG4gICAgfVxuXG4gICAgLy8gSUUxMCBkb2Vzbid0IGhhdmUgVWludDhDbGFtcGVkQXJyYXlcbiAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5KSB7XG4gICAgICBjb2RlYy5hZGRFeHRVbnBhY2tlcigweDE5LCB1bnBhY2tDbGFzcyhVaW50OENsYW1wZWRBcnJheSkpO1xuICAgIH1cblxuICAgIGNvZGVjLmFkZEV4dFVucGFja2VyKDB4MUEsIHVucGFja0FycmF5QnVmZmVyKTtcbiAgICBjb2RlYy5hZGRFeHRVbnBhY2tlcigweDFELCBbdW5wYWNrQXJyYXlCdWZmZXIsIHVucGFja0NsYXNzKERhdGFWaWV3KV0pO1xuICB9XG5cbiAgaWYgKEJ1ZmZlcmlzaC5oYXNCdWZmZXIpIHtcbiAgICBjb2RlYy5hZGRFeHRVbnBhY2tlcigweDFCLCB1bnBhY2tDbGFzcyhCdWZmZXIpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcbiAgaWYgKCFfZGVjb2RlKSBfZGVjb2RlID0gcmVxdWlyZShcIi4vZGVjb2RlXCIpLmRlY29kZTsgLy8gbGF6eSBsb2FkXG4gIHJldHVybiBfZGVjb2RlKGlucHV0KTtcbn1cblxuZnVuY3Rpb24gdW5wYWNrUmVnRXhwKHZhbHVlKSB7XG4gIHJldHVybiBSZWdFeHAuYXBwbHkobnVsbCwgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tFcnJvcihDbGFzcykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgb3V0ID0gbmV3IENsYXNzKCk7XG4gICAgZm9yICh2YXIga2V5IGluIEVSUk9SX0NPTFVNTlMpIHtcbiAgICAgIG91dFtrZXldID0gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdW5wYWNrQ2xhc3MoQ2xhc3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBDbGFzcyh2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVucGFja0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gIHJldHVybiAobmV3IFVpbnQ4QXJyYXkodmFsdWUpKS5idWZmZXI7XG59XG4iLCIvLyBleHQuanNcblxuLy8gbG9hZCBib3RoIGludGVyZmFjZXNcbnJlcXVpcmUoXCIuL3JlYWQtY29yZVwiKTtcbnJlcXVpcmUoXCIuL3dyaXRlLWNvcmVcIik7XG5cbmV4cG9ydHMuY3JlYXRlQ29kZWMgPSByZXF1aXJlKFwiLi9jb2RlYy1iYXNlXCIpLmNyZWF0ZUNvZGVjO1xuIiwiLy8gZmxleC1idWZmZXIuanNcblxuZXhwb3J0cy5GbGV4RGVjb2RlciA9IEZsZXhEZWNvZGVyO1xuZXhwb3J0cy5GbGV4RW5jb2RlciA9IEZsZXhFbmNvZGVyO1xuXG52YXIgQnVmZmVyaXNoID0gcmVxdWlyZShcIi4vYnVmZmVyaXNoXCIpO1xuXG52YXIgTUlOX0JVRkZFUl9TSVpFID0gMjA0ODtcbnZhciBNQVhfQlVGRkVSX1NJWkUgPSA2NTUzNjtcbnZhciBCVUZGRVJfU0hPUlRBR0UgPSBcIkJVRkZFUl9TSE9SVEFHRVwiO1xuXG5mdW5jdGlvbiBGbGV4RGVjb2RlcigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEZsZXhEZWNvZGVyKSkgcmV0dXJuIG5ldyBGbGV4RGVjb2RlcigpO1xufVxuXG5mdW5jdGlvbiBGbGV4RW5jb2RlcigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEZsZXhFbmNvZGVyKSkgcmV0dXJuIG5ldyBGbGV4RW5jb2RlcigpO1xufVxuXG5GbGV4RGVjb2Rlci5taXhpbiA9IG1peGluRmFjdG9yeShnZXREZWNvZGVyTWV0aG9kcygpKTtcbkZsZXhEZWNvZGVyLm1peGluKEZsZXhEZWNvZGVyLnByb3RvdHlwZSk7XG5cbkZsZXhFbmNvZGVyLm1peGluID0gbWl4aW5GYWN0b3J5KGdldEVuY29kZXJNZXRob2RzKCkpO1xuRmxleEVuY29kZXIubWl4aW4oRmxleEVuY29kZXIucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gZ2V0RGVjb2Rlck1ldGhvZHMoKSB7XG4gIHJldHVybiB7XG4gICAgYnVmZmVyaXNoOiBCdWZmZXJpc2gsXG4gICAgd3JpdGU6IHdyaXRlLFxuICAgIGZldGNoOiBmZXRjaCxcbiAgICBmbHVzaDogZmx1c2gsXG4gICAgcHVzaDogcHVzaCxcbiAgICBwdWxsOiBwdWxsLFxuICAgIHJlYWQ6IHJlYWQsXG4gICAgcmVzZXJ2ZTogcmVzZXJ2ZSxcbiAgICBvZmZzZXQ6IDBcbiAgfTtcblxuICBmdW5jdGlvbiB3cml0ZShjaHVuaykge1xuICAgIHZhciBwcmV2ID0gdGhpcy5vZmZzZXQgPyBCdWZmZXJpc2gucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5idWZmZXIsIHRoaXMub2Zmc2V0KSA6IHRoaXMuYnVmZmVyO1xuICAgIHRoaXMuYnVmZmVyID0gcHJldiA/IChjaHVuayA/IHRoaXMuYnVmZmVyaXNoLmNvbmNhdChbcHJldiwgY2h1bmtdKSA6IHByZXYpIDogY2h1bms7XG4gICAgdGhpcy5vZmZzZXQgPSAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgd2hpbGUgKHRoaXMub2Zmc2V0IDwgdGhpcy5idWZmZXIubGVuZ3RoKSB7XG4gICAgICB2YXIgc3RhcnQgPSB0aGlzLm9mZnNldDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy5mZXRjaCgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZSAmJiBlLm1lc3NhZ2UgIT0gQlVGRkVSX1NIT1JUQUdFKSB0aHJvdyBlO1xuICAgICAgICAvLyByb2xsYmFja1xuICAgICAgICB0aGlzLm9mZnNldCA9IHN0YXJ0O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXJ2ZShsZW5ndGgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLm9mZnNldDtcbiAgICB2YXIgZW5kID0gc3RhcnQgKyBsZW5ndGg7XG4gICAgaWYgKGVuZCA+IHRoaXMuYnVmZmVyLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKEJVRkZFUl9TSE9SVEFHRSk7XG4gICAgdGhpcy5vZmZzZXQgPSBlbmQ7XG4gICAgcmV0dXJuIHN0YXJ0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEVuY29kZXJNZXRob2RzKCkge1xuICByZXR1cm4ge1xuICAgIGJ1ZmZlcmlzaDogQnVmZmVyaXNoLFxuICAgIHdyaXRlOiB3cml0ZSxcbiAgICBmZXRjaDogZmV0Y2gsXG4gICAgZmx1c2g6IGZsdXNoLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcHVsbDogcHVsbCxcbiAgICByZWFkOiByZWFkLFxuICAgIHJlc2VydmU6IHJlc2VydmUsXG4gICAgc2VuZDogc2VuZCxcbiAgICBtYXhCdWZmZXJTaXplOiBNQVhfQlVGRkVSX1NJWkUsXG4gICAgbWluQnVmZmVyU2l6ZTogTUlOX0JVRkZFUl9TSVpFLFxuICAgIG9mZnNldDogMCxcbiAgICBzdGFydDogMFxuICB9O1xuXG4gIGZ1bmN0aW9uIGZldGNoKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuc3RhcnQ7XG4gICAgaWYgKHN0YXJ0IDwgdGhpcy5vZmZzZXQpIHtcbiAgICAgIHZhciBlbmQgPSB0aGlzLnN0YXJ0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICByZXR1cm4gQnVmZmVyaXNoLnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuYnVmZmVyLCBzdGFydCwgZW5kKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICB3aGlsZSAodGhpcy5zdGFydCA8IHRoaXMub2Zmc2V0KSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLmZldGNoKCk7XG4gICAgICBpZiAodmFsdWUpIHRoaXMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHVsbCgpIHtcbiAgICB2YXIgYnVmZmVycyA9IHRoaXMuYnVmZmVycyB8fCAodGhpcy5idWZmZXJzID0gW10pO1xuICAgIHZhciBjaHVuayA9IGJ1ZmZlcnMubGVuZ3RoID4gMSA/IHRoaXMuYnVmZmVyaXNoLmNvbmNhdChidWZmZXJzKSA6IGJ1ZmZlcnNbMF07XG4gICAgYnVmZmVycy5sZW5ndGggPSAwOyAvLyBidWZmZXIgZXhoYXVzdGVkXG4gICAgcmV0dXJuIGNodW5rO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXJ2ZShsZW5ndGgpIHtcbiAgICB2YXIgcmVxID0gbGVuZ3RoIHwgMDtcblxuICAgIGlmICh0aGlzLmJ1ZmZlcikge1xuICAgICAgdmFyIHNpemUgPSB0aGlzLmJ1ZmZlci5sZW5ndGg7XG4gICAgICB2YXIgc3RhcnQgPSB0aGlzLm9mZnNldCB8IDA7XG4gICAgICB2YXIgZW5kID0gc3RhcnQgKyByZXE7XG5cbiAgICAgIC8vIGlzIGl0IGxvbmcgZW5vdWdoP1xuICAgICAgaWYgKGVuZCA8IHNpemUpIHtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBlbmQ7XG4gICAgICAgIHJldHVybiBzdGFydDtcbiAgICAgIH1cblxuICAgICAgLy8gZmx1c2ggY3VycmVudCBidWZmZXJcbiAgICAgIHRoaXMuZmx1c2goKTtcblxuICAgICAgLy8gcmVzaXplIGl0IHRvIDJ4IGN1cnJlbnQgbGVuZ3RoXG4gICAgICBsZW5ndGggPSBNYXRoLm1heChsZW5ndGgsIE1hdGgubWluKHNpemUgKiAyLCB0aGlzLm1heEJ1ZmZlclNpemUpKTtcbiAgICB9XG5cbiAgICAvLyBtaW5pbXVtIGJ1ZmZlciBzaXplXG4gICAgbGVuZ3RoID0gTWF0aC5tYXgobGVuZ3RoLCB0aGlzLm1pbkJ1ZmZlclNpemUpO1xuXG4gICAgLy8gYWxsb2NhdGUgbmV3IGJ1ZmZlclxuICAgIHRoaXMuYnVmZmVyID0gdGhpcy5idWZmZXJpc2guYWxsb2MobGVuZ3RoKTtcbiAgICB0aGlzLnN0YXJ0ID0gMDtcbiAgICB0aGlzLm9mZnNldCA9IHJlcTtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbmQoYnVmZmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCA+IHRoaXMubWluQnVmZmVyU2l6ZSkge1xuICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgdGhpcy5wdXNoKGJ1ZmZlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvZmZzZXQgPSB0aGlzLnJlc2VydmUobGVuZ3RoKTtcbiAgICAgIEJ1ZmZlcmlzaC5wcm90b3R5cGUuY29weS5jYWxsKGJ1ZmZlciwgdGhpcy5idWZmZXIsIG9mZnNldCk7XG4gICAgfVxuICB9XG59XG5cbi8vIGNvbW1vbiBtZXRob2RzXG5cbmZ1bmN0aW9uIHdyaXRlKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJtZXRob2Qgbm90IGltcGxlbWVudGVkOiB3cml0ZSgpXCIpO1xufVxuXG5mdW5jdGlvbiBmZXRjaCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwibWV0aG9kIG5vdCBpbXBsZW1lbnRlZDogZmV0Y2goKVwiKTtcbn1cblxuZnVuY3Rpb24gcmVhZCgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMuYnVmZmVycyAmJiB0aGlzLmJ1ZmZlcnMubGVuZ3RoO1xuXG4gIC8vIGZldGNoIHRoZSBmaXJzdCByZXN1bHRcbiAgaWYgKCFsZW5ndGgpIHJldHVybiB0aGlzLmZldGNoKCk7XG5cbiAgLy8gZmx1c2ggY3VycmVudCBidWZmZXJcbiAgdGhpcy5mbHVzaCgpO1xuXG4gIC8vIHJlYWQgZnJvbSB0aGUgcmVzdWx0c1xuICByZXR1cm4gdGhpcy5wdWxsKCk7XG59XG5cbmZ1bmN0aW9uIHB1c2goY2h1bmspIHtcbiAgdmFyIGJ1ZmZlcnMgPSB0aGlzLmJ1ZmZlcnMgfHwgKHRoaXMuYnVmZmVycyA9IFtdKTtcbiAgYnVmZmVycy5wdXNoKGNodW5rKTtcbn1cblxuZnVuY3Rpb24gcHVsbCgpIHtcbiAgdmFyIGJ1ZmZlcnMgPSB0aGlzLmJ1ZmZlcnMgfHwgKHRoaXMuYnVmZmVycyA9IFtdKTtcbiAgcmV0dXJuIGJ1ZmZlcnMuc2hpZnQoKTtcbn1cblxuZnVuY3Rpb24gbWl4aW5GYWN0b3J5KHNvdXJjZSkge1xuICByZXR1cm4gbWl4aW47XG5cbiAgZnVuY3Rpb24gbWl4aW4odGFyZ2V0KSB7XG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxufVxuIiwiLy8gcmVhZC1jb3JlLmpzXG5cbnZhciBFeHRCdWZmZXIgPSByZXF1aXJlKFwiLi9leHQtYnVmZmVyXCIpLkV4dEJ1ZmZlcjtcbnZhciBFeHRVbnBhY2tlciA9IHJlcXVpcmUoXCIuL2V4dC11bnBhY2tlclwiKTtcbnZhciByZWFkVWludDggPSByZXF1aXJlKFwiLi9yZWFkLWZvcm1hdFwiKS5yZWFkVWludDg7XG52YXIgUmVhZFRva2VuID0gcmVxdWlyZShcIi4vcmVhZC10b2tlblwiKTtcbnZhciBDb2RlY0Jhc2UgPSByZXF1aXJlKFwiLi9jb2RlYy1iYXNlXCIpO1xuXG5Db2RlY0Jhc2UuaW5zdGFsbCh7XG4gIGFkZEV4dFVucGFja2VyOiBhZGRFeHRVbnBhY2tlcixcbiAgZ2V0RXh0VW5wYWNrZXI6IGdldEV4dFVucGFja2VyLFxuICBpbml0OiBpbml0XG59KTtcblxuZXhwb3J0cy5wcmVzZXQgPSBpbml0LmNhbGwoQ29kZWNCYXNlLnByZXNldCk7XG5cbmZ1bmN0aW9uIGdldERlY29kZXIob3B0aW9ucykge1xuICB2YXIgcmVhZFRva2VuID0gUmVhZFRva2VuLmdldFJlYWRUb2tlbihvcHRpb25zKTtcbiAgcmV0dXJuIGRlY29kZTtcblxuICBmdW5jdGlvbiBkZWNvZGUoZGVjb2Rlcikge1xuICAgIHZhciB0eXBlID0gcmVhZFVpbnQ4KGRlY29kZXIpO1xuICAgIHZhciBmdW5jID0gcmVhZFRva2VuW3R5cGVdO1xuICAgIGlmICghZnVuYykgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB0eXBlOiBcIiArICh0eXBlID8gKFwiMHhcIiArIHR5cGUudG9TdHJpbmcoMTYpKSA6IHR5cGUpKTtcbiAgICByZXR1cm4gZnVuYyhkZWNvZGVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgdGhpcy5kZWNvZGUgPSBnZXREZWNvZGVyKG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucHJlc2V0KSB7XG4gICAgRXh0VW5wYWNrZXIuc2V0RXh0VW5wYWNrZXJzKHRoaXMpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFkZEV4dFVucGFja2VyKGV0eXBlLCB1bnBhY2tlcikge1xuICB2YXIgdW5wYWNrZXJzID0gdGhpcy5leHRVbnBhY2tlcnMgfHwgKHRoaXMuZXh0VW5wYWNrZXJzID0gW10pO1xuICB1bnBhY2tlcnNbZXR5cGVdID0gQ29kZWNCYXNlLmZpbHRlcih1bnBhY2tlcik7XG59XG5cbmZ1bmN0aW9uIGdldEV4dFVucGFja2VyKHR5cGUpIHtcbiAgdmFyIHVucGFja2VycyA9IHRoaXMuZXh0VW5wYWNrZXJzIHx8ICh0aGlzLmV4dFVucGFja2VycyA9IFtdKTtcbiAgcmV0dXJuIHVucGFja2Vyc1t0eXBlXSB8fCBleHRVbnBhY2tlcjtcblxuICBmdW5jdGlvbiBleHRVbnBhY2tlcihidWZmZXIpIHtcbiAgICByZXR1cm4gbmV3IEV4dEJ1ZmZlcihidWZmZXIsIHR5cGUpO1xuICB9XG59XG4iLCIvLyByZWFkLWZvcm1hdC5qc1xuXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoXCJpZWVlNzU0XCIpO1xudmFyIEludDY0QnVmZmVyID0gcmVxdWlyZShcImludDY0LWJ1ZmZlclwiKTtcbnZhciBVaW50NjRCRSA9IEludDY0QnVmZmVyLlVpbnQ2NEJFO1xudmFyIEludDY0QkUgPSBJbnQ2NEJ1ZmZlci5JbnQ2NEJFO1xuXG5leHBvcnRzLmdldFJlYWRGb3JtYXQgPSBnZXRSZWFkRm9ybWF0O1xuZXhwb3J0cy5yZWFkVWludDggPSB1aW50ODtcblxudmFyIEJ1ZmZlcmlzaCA9IHJlcXVpcmUoXCIuL2J1ZmZlcmlzaFwiKTtcbnZhciBCdWZmZXJQcm90byA9IHJlcXVpcmUoXCIuL2J1ZmZlcmlzaC1wcm90b1wiKTtcblxudmFyIEhBU19NQVAgPSAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIE1hcCk7XG52YXIgTk9fQVNTRVJUID0gdHJ1ZTtcblxuZnVuY3Rpb24gZ2V0UmVhZEZvcm1hdChvcHRpb25zKSB7XG4gIHZhciBiaW5hcnJheWJ1ZmZlciA9IEJ1ZmZlcmlzaC5oYXNBcnJheUJ1ZmZlciAmJiBvcHRpb25zICYmIG9wdGlvbnMuYmluYXJyYXlidWZmZXI7XG4gIHZhciBpbnQ2NCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5pbnQ2NDtcbiAgdmFyIHVzZW1hcCA9IEhBU19NQVAgJiYgb3B0aW9ucyAmJiBvcHRpb25zLnVzZW1hcDtcblxuICB2YXIgcmVhZEZvcm1hdCA9IHtcbiAgICBtYXA6ICh1c2VtYXAgPyBtYXBfdG9fbWFwIDogbWFwX3RvX29iaiksXG4gICAgYXJyYXk6IGFycmF5LFxuICAgIHN0cjogc3RyLFxuICAgIGJpbjogKGJpbmFycmF5YnVmZmVyID8gYmluX2FycmF5YnVmZmVyIDogYmluX2J1ZmZlciksXG4gICAgZXh0OiBleHQsXG4gICAgdWludDg6IHVpbnQ4LFxuICAgIHVpbnQxNjogdWludDE2LFxuICAgIHVpbnQzMjogdWludDMyLFxuICAgIHVpbnQ2NDogcmVhZCg4LCBpbnQ2NCA/IHJlYWRVSW50NjRCRV9pbnQ2NCA6IHJlYWRVSW50NjRCRSksXG4gICAgaW50ODogaW50OCxcbiAgICBpbnQxNjogaW50MTYsXG4gICAgaW50MzI6IGludDMyLFxuICAgIGludDY0OiByZWFkKDgsIGludDY0ID8gcmVhZEludDY0QkVfaW50NjQgOiByZWFkSW50NjRCRSksXG4gICAgZmxvYXQzMjogcmVhZCg0LCByZWFkRmxvYXRCRSksXG4gICAgZmxvYXQ2NDogcmVhZCg4LCByZWFkRG91YmxlQkUpXG4gIH07XG5cbiAgcmV0dXJuIHJlYWRGb3JtYXQ7XG59XG5cbmZ1bmN0aW9uIG1hcF90b19vYmooZGVjb2RlciwgbGVuKSB7XG4gIHZhciB2YWx1ZSA9IHt9O1xuICB2YXIgaTtcbiAgdmFyIGsgPSBuZXcgQXJyYXkobGVuKTtcbiAgdmFyIHYgPSBuZXcgQXJyYXkobGVuKTtcblxuICB2YXIgZGVjb2RlID0gZGVjb2Rlci5jb2RlYy5kZWNvZGU7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGtbaV0gPSBkZWNvZGUoZGVjb2Rlcik7XG4gICAgdltpXSA9IGRlY29kZShkZWNvZGVyKTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YWx1ZVtrW2ldXSA9IHZbaV07XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBtYXBfdG9fbWFwKGRlY29kZXIsIGxlbikge1xuICB2YXIgdmFsdWUgPSBuZXcgTWFwKCk7XG4gIHZhciBpO1xuICB2YXIgayA9IG5ldyBBcnJheShsZW4pO1xuICB2YXIgdiA9IG5ldyBBcnJheShsZW4pO1xuXG4gIHZhciBkZWNvZGUgPSBkZWNvZGVyLmNvZGVjLmRlY29kZTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga1tpXSA9IGRlY29kZShkZWNvZGVyKTtcbiAgICB2W2ldID0gZGVjb2RlKGRlY29kZXIpO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhbHVlLnNldChrW2ldLCB2W2ldKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGFycmF5KGRlY29kZXIsIGxlbikge1xuICB2YXIgdmFsdWUgPSBuZXcgQXJyYXkobGVuKTtcbiAgdmFyIGRlY29kZSA9IGRlY29kZXIuY29kZWMuZGVjb2RlO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFsdWVbaV0gPSBkZWNvZGUoZGVjb2Rlcik7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBzdHIoZGVjb2RlciwgbGVuKSB7XG4gIHZhciBzdGFydCA9IGRlY29kZXIucmVzZXJ2ZShsZW4pO1xuICB2YXIgZW5kID0gc3RhcnQgKyBsZW47XG4gIHJldHVybiBCdWZmZXJQcm90by50b1N0cmluZy5jYWxsKGRlY29kZXIuYnVmZmVyLCBcInV0Zi04XCIsIHN0YXJ0LCBlbmQpO1xufVxuXG5mdW5jdGlvbiBiaW5fYnVmZmVyKGRlY29kZXIsIGxlbikge1xuICB2YXIgc3RhcnQgPSBkZWNvZGVyLnJlc2VydmUobGVuKTtcbiAgdmFyIGVuZCA9IHN0YXJ0ICsgbGVuO1xuICB2YXIgYnVmID0gQnVmZmVyUHJvdG8uc2xpY2UuY2FsbChkZWNvZGVyLmJ1ZmZlciwgc3RhcnQsIGVuZCk7XG4gIHJldHVybiBCdWZmZXJpc2guZnJvbShidWYpO1xufVxuXG5mdW5jdGlvbiBiaW5fYXJyYXlidWZmZXIoZGVjb2RlciwgbGVuKSB7XG4gIHZhciBzdGFydCA9IGRlY29kZXIucmVzZXJ2ZShsZW4pO1xuICB2YXIgZW5kID0gc3RhcnQgKyBsZW47XG4gIHZhciBidWYgPSBCdWZmZXJQcm90by5zbGljZS5jYWxsKGRlY29kZXIuYnVmZmVyLCBzdGFydCwgZW5kKTtcbiAgcmV0dXJuIEJ1ZmZlcmlzaC5VaW50OEFycmF5LmZyb20oYnVmKS5idWZmZXI7XG59XG5cbmZ1bmN0aW9uIGV4dChkZWNvZGVyLCBsZW4pIHtcbiAgdmFyIHN0YXJ0ID0gZGVjb2Rlci5yZXNlcnZlKGxlbisxKTtcbiAgdmFyIHR5cGUgPSBkZWNvZGVyLmJ1ZmZlcltzdGFydCsrXTtcbiAgdmFyIGVuZCA9IHN0YXJ0ICsgbGVuO1xuICB2YXIgdW5wYWNrID0gZGVjb2Rlci5jb2RlYy5nZXRFeHRVbnBhY2tlcih0eXBlKTtcbiAgaWYgKCF1bnBhY2spIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZXh0IHR5cGU6IFwiICsgKHR5cGUgPyAoXCIweFwiICsgdHlwZS50b1N0cmluZygxNikpIDogdHlwZSkpO1xuICB2YXIgYnVmID0gQnVmZmVyUHJvdG8uc2xpY2UuY2FsbChkZWNvZGVyLmJ1ZmZlciwgc3RhcnQsIGVuZCk7XG4gIHJldHVybiB1bnBhY2soYnVmKTtcbn1cblxuZnVuY3Rpb24gdWludDgoZGVjb2Rlcikge1xuICB2YXIgc3RhcnQgPSBkZWNvZGVyLnJlc2VydmUoMSk7XG4gIHJldHVybiBkZWNvZGVyLmJ1ZmZlcltzdGFydF07XG59XG5cbmZ1bmN0aW9uIGludDgoZGVjb2Rlcikge1xuICB2YXIgc3RhcnQgPSBkZWNvZGVyLnJlc2VydmUoMSk7XG4gIHZhciB2YWx1ZSA9IGRlY29kZXIuYnVmZmVyW3N0YXJ0XTtcbiAgcmV0dXJuICh2YWx1ZSAmIDB4ODApID8gdmFsdWUgLSAweDEwMCA6IHZhbHVlO1xufVxuXG5mdW5jdGlvbiB1aW50MTYoZGVjb2Rlcikge1xuICB2YXIgc3RhcnQgPSBkZWNvZGVyLnJlc2VydmUoMik7XG4gIHZhciBidWZmZXIgPSBkZWNvZGVyLmJ1ZmZlcjtcbiAgcmV0dXJuIChidWZmZXJbc3RhcnQrK10gPDwgOCkgfCBidWZmZXJbc3RhcnRdO1xufVxuXG5mdW5jdGlvbiBpbnQxNihkZWNvZGVyKSB7XG4gIHZhciBzdGFydCA9IGRlY29kZXIucmVzZXJ2ZSgyKTtcbiAgdmFyIGJ1ZmZlciA9IGRlY29kZXIuYnVmZmVyO1xuICB2YXIgdmFsdWUgPSAoYnVmZmVyW3N0YXJ0KytdIDw8IDgpIHwgYnVmZmVyW3N0YXJ0XTtcbiAgcmV0dXJuICh2YWx1ZSAmIDB4ODAwMCkgPyB2YWx1ZSAtIDB4MTAwMDAgOiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gdWludDMyKGRlY29kZXIpIHtcbiAgdmFyIHN0YXJ0ID0gZGVjb2Rlci5yZXNlcnZlKDQpO1xuICB2YXIgYnVmZmVyID0gZGVjb2Rlci5idWZmZXI7XG4gIHJldHVybiAoYnVmZmVyW3N0YXJ0KytdICogMTY3NzcyMTYpICsgKGJ1ZmZlcltzdGFydCsrXSA8PCAxNikgKyAoYnVmZmVyW3N0YXJ0KytdIDw8IDgpICsgYnVmZmVyW3N0YXJ0XTtcbn1cblxuZnVuY3Rpb24gaW50MzIoZGVjb2Rlcikge1xuICB2YXIgc3RhcnQgPSBkZWNvZGVyLnJlc2VydmUoNCk7XG4gIHZhciBidWZmZXIgPSBkZWNvZGVyLmJ1ZmZlcjtcbiAgcmV0dXJuIChidWZmZXJbc3RhcnQrK10gPDwgMjQpIHwgKGJ1ZmZlcltzdGFydCsrXSA8PCAxNikgfCAoYnVmZmVyW3N0YXJ0KytdIDw8IDgpIHwgYnVmZmVyW3N0YXJ0XTtcbn1cblxuZnVuY3Rpb24gcmVhZChsZW4sIG1ldGhvZCkge1xuICByZXR1cm4gZnVuY3Rpb24oZGVjb2Rlcikge1xuICAgIHZhciBzdGFydCA9IGRlY29kZXIucmVzZXJ2ZShsZW4pO1xuICAgIHJldHVybiBtZXRob2QuY2FsbChkZWNvZGVyLmJ1ZmZlciwgc3RhcnQsIE5PX0FTU0VSVCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlYWRVSW50NjRCRShzdGFydCkge1xuICByZXR1cm4gbmV3IFVpbnQ2NEJFKHRoaXMsIHN0YXJ0KS50b051bWJlcigpO1xufVxuXG5mdW5jdGlvbiByZWFkSW50NjRCRShzdGFydCkge1xuICByZXR1cm4gbmV3IEludDY0QkUodGhpcywgc3RhcnQpLnRvTnVtYmVyKCk7XG59XG5cbmZ1bmN0aW9uIHJlYWRVSW50NjRCRV9pbnQ2NChzdGFydCkge1xuICByZXR1cm4gbmV3IFVpbnQ2NEJFKHRoaXMsIHN0YXJ0KTtcbn1cblxuZnVuY3Rpb24gcmVhZEludDY0QkVfaW50NjQoc3RhcnQpIHtcbiAgcmV0dXJuIG5ldyBJbnQ2NEJFKHRoaXMsIHN0YXJ0KTtcbn1cblxuZnVuY3Rpb24gcmVhZEZsb2F0QkUoc3RhcnQpIHtcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBzdGFydCwgZmFsc2UsIDIzLCA0KTtcbn1cblxuZnVuY3Rpb24gcmVhZERvdWJsZUJFKHN0YXJ0KSB7XG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgc3RhcnQsIGZhbHNlLCA1MiwgOCk7XG59IiwiLy8gcmVhZC10b2tlbi5qc1xuXG52YXIgUmVhZEZvcm1hdCA9IHJlcXVpcmUoXCIuL3JlYWQtZm9ybWF0XCIpO1xuXG5leHBvcnRzLmdldFJlYWRUb2tlbiA9IGdldFJlYWRUb2tlbjtcblxuZnVuY3Rpb24gZ2V0UmVhZFRva2VuKG9wdGlvbnMpIHtcbiAgdmFyIGZvcm1hdCA9IFJlYWRGb3JtYXQuZ2V0UmVhZEZvcm1hdChvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnVzZXJhdykge1xuICAgIHJldHVybiBpbml0X3VzZXJhdyhmb3JtYXQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbml0X3Rva2VuKGZvcm1hdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdF90b2tlbihmb3JtYXQpIHtcbiAgdmFyIGk7XG4gIHZhciB0b2tlbiA9IG5ldyBBcnJheSgyNTYpO1xuXG4gIC8vIHBvc2l0aXZlIGZpeGludCAtLSAweDAwIC0gMHg3ZlxuICBmb3IgKGkgPSAweDAwOyBpIDw9IDB4N2Y7IGkrKykge1xuICAgIHRva2VuW2ldID0gY29uc3RhbnQoaSk7XG4gIH1cblxuICAvLyBmaXhtYXAgLS0gMHg4MCAtIDB4OGZcbiAgZm9yIChpID0gMHg4MDsgaSA8PSAweDhmOyBpKyspIHtcbiAgICB0b2tlbltpXSA9IGZpeChpIC0gMHg4MCwgZm9ybWF0Lm1hcCk7XG4gIH1cblxuICAvLyBmaXhhcnJheSAtLSAweDkwIC0gMHg5ZlxuICBmb3IgKGkgPSAweDkwOyBpIDw9IDB4OWY7IGkrKykge1xuICAgIHRva2VuW2ldID0gZml4KGkgLSAweDkwLCBmb3JtYXQuYXJyYXkpO1xuICB9XG5cbiAgLy8gZml4c3RyIC0tIDB4YTAgLSAweGJmXG4gIGZvciAoaSA9IDB4YTA7IGkgPD0gMHhiZjsgaSsrKSB7XG4gICAgdG9rZW5baV0gPSBmaXgoaSAtIDB4YTAsIGZvcm1hdC5zdHIpO1xuICB9XG5cbiAgLy8gbmlsIC0tIDB4YzBcbiAgdG9rZW5bMHhjMF0gPSBjb25zdGFudChudWxsKTtcblxuICAvLyAobmV2ZXIgdXNlZCkgLS0gMHhjMVxuICB0b2tlblsweGMxXSA9IG51bGw7XG5cbiAgLy8gZmFsc2UgLS0gMHhjMlxuICAvLyB0cnVlIC0tIDB4YzNcbiAgdG9rZW5bMHhjMl0gPSBjb25zdGFudChmYWxzZSk7XG4gIHRva2VuWzB4YzNdID0gY29uc3RhbnQodHJ1ZSk7XG5cbiAgLy8gYmluIDggLS0gMHhjNFxuICAvLyBiaW4gMTYgLS0gMHhjNVxuICAvLyBiaW4gMzIgLS0gMHhjNlxuICB0b2tlblsweGM0XSA9IGZsZXgoZm9ybWF0LnVpbnQ4LCBmb3JtYXQuYmluKTtcbiAgdG9rZW5bMHhjNV0gPSBmbGV4KGZvcm1hdC51aW50MTYsIGZvcm1hdC5iaW4pO1xuICB0b2tlblsweGM2XSA9IGZsZXgoZm9ybWF0LnVpbnQzMiwgZm9ybWF0LmJpbik7XG5cbiAgLy8gZXh0IDggLS0gMHhjN1xuICAvLyBleHQgMTYgLS0gMHhjOFxuICAvLyBleHQgMzIgLS0gMHhjOVxuICB0b2tlblsweGM3XSA9IGZsZXgoZm9ybWF0LnVpbnQ4LCBmb3JtYXQuZXh0KTtcbiAgdG9rZW5bMHhjOF0gPSBmbGV4KGZvcm1hdC51aW50MTYsIGZvcm1hdC5leHQpO1xuICB0b2tlblsweGM5XSA9IGZsZXgoZm9ybWF0LnVpbnQzMiwgZm9ybWF0LmV4dCk7XG5cbiAgLy8gZmxvYXQgMzIgLS0gMHhjYVxuICAvLyBmbG9hdCA2NCAtLSAweGNiXG4gIHRva2VuWzB4Y2FdID0gZm9ybWF0LmZsb2F0MzI7XG4gIHRva2VuWzB4Y2JdID0gZm9ybWF0LmZsb2F0NjQ7XG5cbiAgLy8gdWludCA4IC0tIDB4Y2NcbiAgLy8gdWludCAxNiAtLSAweGNkXG4gIC8vIHVpbnQgMzIgLS0gMHhjZVxuICAvLyB1aW50IDY0IC0tIDB4Y2ZcbiAgdG9rZW5bMHhjY10gPSBmb3JtYXQudWludDg7XG4gIHRva2VuWzB4Y2RdID0gZm9ybWF0LnVpbnQxNjtcbiAgdG9rZW5bMHhjZV0gPSBmb3JtYXQudWludDMyO1xuICB0b2tlblsweGNmXSA9IGZvcm1hdC51aW50NjQ7XG5cbiAgLy8gaW50IDggLS0gMHhkMFxuICAvLyBpbnQgMTYgLS0gMHhkMVxuICAvLyBpbnQgMzIgLS0gMHhkMlxuICAvLyBpbnQgNjQgLS0gMHhkM1xuICB0b2tlblsweGQwXSA9IGZvcm1hdC5pbnQ4O1xuICB0b2tlblsweGQxXSA9IGZvcm1hdC5pbnQxNjtcbiAgdG9rZW5bMHhkMl0gPSBmb3JtYXQuaW50MzI7XG4gIHRva2VuWzB4ZDNdID0gZm9ybWF0LmludDY0O1xuXG4gIC8vIGZpeGV4dCAxIC0tIDB4ZDRcbiAgLy8gZml4ZXh0IDIgLS0gMHhkNVxuICAvLyBmaXhleHQgNCAtLSAweGQ2XG4gIC8vIGZpeGV4dCA4IC0tIDB4ZDdcbiAgLy8gZml4ZXh0IDE2IC0tIDB4ZDhcbiAgdG9rZW5bMHhkNF0gPSBmaXgoMSwgZm9ybWF0LmV4dCk7XG4gIHRva2VuWzB4ZDVdID0gZml4KDIsIGZvcm1hdC5leHQpO1xuICB0b2tlblsweGQ2XSA9IGZpeCg0LCBmb3JtYXQuZXh0KTtcbiAgdG9rZW5bMHhkN10gPSBmaXgoOCwgZm9ybWF0LmV4dCk7XG4gIHRva2VuWzB4ZDhdID0gZml4KDE2LCBmb3JtYXQuZXh0KTtcblxuICAvLyBzdHIgOCAtLSAweGQ5XG4gIC8vIHN0ciAxNiAtLSAweGRhXG4gIC8vIHN0ciAzMiAtLSAweGRiXG4gIHRva2VuWzB4ZDldID0gZmxleChmb3JtYXQudWludDgsIGZvcm1hdC5zdHIpO1xuICB0b2tlblsweGRhXSA9IGZsZXgoZm9ybWF0LnVpbnQxNiwgZm9ybWF0LnN0cik7XG4gIHRva2VuWzB4ZGJdID0gZmxleChmb3JtYXQudWludDMyLCBmb3JtYXQuc3RyKTtcblxuICAvLyBhcnJheSAxNiAtLSAweGRjXG4gIC8vIGFycmF5IDMyIC0tIDB4ZGRcbiAgdG9rZW5bMHhkY10gPSBmbGV4KGZvcm1hdC51aW50MTYsIGZvcm1hdC5hcnJheSk7XG4gIHRva2VuWzB4ZGRdID0gZmxleChmb3JtYXQudWludDMyLCBmb3JtYXQuYXJyYXkpO1xuXG4gIC8vIG1hcCAxNiAtLSAweGRlXG4gIC8vIG1hcCAzMiAtLSAweGRmXG4gIHRva2VuWzB4ZGVdID0gZmxleChmb3JtYXQudWludDE2LCBmb3JtYXQubWFwKTtcbiAgdG9rZW5bMHhkZl0gPSBmbGV4KGZvcm1hdC51aW50MzIsIGZvcm1hdC5tYXApO1xuXG4gIC8vIG5lZ2F0aXZlIGZpeGludCAtLSAweGUwIC0gMHhmZlxuICBmb3IgKGkgPSAweGUwOyBpIDw9IDB4ZmY7IGkrKykge1xuICAgIHRva2VuW2ldID0gY29uc3RhbnQoaSAtIDB4MTAwKTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbjtcbn1cblxuZnVuY3Rpb24gaW5pdF91c2VyYXcoZm9ybWF0KSB7XG4gIHZhciBpO1xuICB2YXIgdG9rZW4gPSBpbml0X3Rva2VuKGZvcm1hdCkuc2xpY2UoKTtcblxuICAvLyByYXcgOCAtLSAweGQ5XG4gIC8vIHJhdyAxNiAtLSAweGRhXG4gIC8vIHJhdyAzMiAtLSAweGRiXG4gIHRva2VuWzB4ZDldID0gdG9rZW5bMHhjNF07XG4gIHRva2VuWzB4ZGFdID0gdG9rZW5bMHhjNV07XG4gIHRva2VuWzB4ZGJdID0gdG9rZW5bMHhjNl07XG5cbiAgLy8gZml4cmF3IC0tIDB4YTAgLSAweGJmXG4gIGZvciAoaSA9IDB4YTA7IGkgPD0gMHhiZjsgaSsrKSB7XG4gICAgdG9rZW5baV0gPSBmaXgoaSAtIDB4YTAsIGZvcm1hdC5iaW4pO1xuICB9XG5cbiAgcmV0dXJuIHRva2VuO1xufVxuXG5mdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmbGV4KGxlbkZ1bmMsIGRlY29kZUZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRlY29kZXIpIHtcbiAgICB2YXIgbGVuID0gbGVuRnVuYyhkZWNvZGVyKTtcbiAgICByZXR1cm4gZGVjb2RlRnVuYyhkZWNvZGVyLCBsZW4pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaXgobGVuLCBtZXRob2QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRlY29kZXIpIHtcbiAgICByZXR1cm4gbWV0aG9kKGRlY29kZXIsIGxlbik7XG4gIH07XG59XG4iLCIvLyB3cml0ZS1jb3JlLmpzXG5cbnZhciBFeHRCdWZmZXIgPSByZXF1aXJlKFwiLi9leHQtYnVmZmVyXCIpLkV4dEJ1ZmZlcjtcbnZhciBFeHRQYWNrZXIgPSByZXF1aXJlKFwiLi9leHQtcGFja2VyXCIpO1xudmFyIFdyaXRlVHlwZSA9IHJlcXVpcmUoXCIuL3dyaXRlLXR5cGVcIik7XG52YXIgQ29kZWNCYXNlID0gcmVxdWlyZShcIi4vY29kZWMtYmFzZVwiKTtcblxuQ29kZWNCYXNlLmluc3RhbGwoe1xuICBhZGRFeHRQYWNrZXI6IGFkZEV4dFBhY2tlcixcbiAgZ2V0RXh0UGFja2VyOiBnZXRFeHRQYWNrZXIsXG4gIGluaXQ6IGluaXRcbn0pO1xuXG5leHBvcnRzLnByZXNldCA9IGluaXQuY2FsbChDb2RlY0Jhc2UucHJlc2V0KTtcblxuZnVuY3Rpb24gZ2V0RW5jb2RlcihvcHRpb25zKSB7XG4gIHZhciB3cml0ZVR5cGUgPSBXcml0ZVR5cGUuZ2V0V3JpdGVUeXBlKG9wdGlvbnMpO1xuICByZXR1cm4gZW5jb2RlO1xuXG4gIGZ1bmN0aW9uIGVuY29kZShlbmNvZGVyLCB2YWx1ZSkge1xuICAgIHZhciBmdW5jID0gd3JpdGVUeXBlW3R5cGVvZiB2YWx1ZV07XG4gICAgaWYgKCFmdW5jKSB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCB0eXBlIFxcXCJcIiArICh0eXBlb2YgdmFsdWUpICsgXCJcXFwiOiBcIiArIHZhbHVlKTtcbiAgICBmdW5jKGVuY29kZXIsIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgdGhpcy5lbmNvZGUgPSBnZXRFbmNvZGVyKG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucHJlc2V0KSB7XG4gICAgRXh0UGFja2VyLnNldEV4dFBhY2tlcnModGhpcyk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gYWRkRXh0UGFja2VyKGV0eXBlLCBDbGFzcywgcGFja2VyKSB7XG4gIHBhY2tlciA9IENvZGVjQmFzZS5maWx0ZXIocGFja2VyKTtcbiAgdmFyIG5hbWUgPSBDbGFzcy5uYW1lO1xuICBpZiAobmFtZSAmJiBuYW1lICE9PSBcIk9iamVjdFwiKSB7XG4gICAgdmFyIHBhY2tlcnMgPSB0aGlzLmV4dFBhY2tlcnMgfHwgKHRoaXMuZXh0UGFja2VycyA9IHt9KTtcbiAgICBwYWNrZXJzW25hbWVdID0gZXh0UGFja2VyO1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrIGZvciBJRVxuICAgIHZhciBsaXN0ID0gdGhpcy5leHRFbmNvZGVyTGlzdCB8fCAodGhpcy5leHRFbmNvZGVyTGlzdCA9IFtdKTtcbiAgICBsaXN0LnVuc2hpZnQoW0NsYXNzLCBleHRQYWNrZXJdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dFBhY2tlcih2YWx1ZSkge1xuICAgIGlmIChwYWNrZXIpIHZhbHVlID0gcGFja2VyKHZhbHVlKTtcbiAgICByZXR1cm4gbmV3IEV4dEJ1ZmZlcih2YWx1ZSwgZXR5cGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEV4dFBhY2tlcih2YWx1ZSkge1xuICB2YXIgcGFja2VycyA9IHRoaXMuZXh0UGFja2VycyB8fCAodGhpcy5leHRQYWNrZXJzID0ge30pO1xuICB2YXIgYyA9IHZhbHVlLmNvbnN0cnVjdG9yO1xuICB2YXIgZSA9IGMgJiYgYy5uYW1lICYmIHBhY2tlcnNbYy5uYW1lXTtcbiAgaWYgKGUpIHJldHVybiBlO1xuXG4gIC8vIGZhbGxiYWNrIGZvciBJRVxuICB2YXIgbGlzdCA9IHRoaXMuZXh0RW5jb2Rlckxpc3QgfHwgKHRoaXMuZXh0RW5jb2Rlckxpc3QgPSBbXSk7XG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBwYWlyID0gbGlzdFtpXTtcbiAgICBpZiAoYyA9PT0gcGFpclswXSkgcmV0dXJuIHBhaXJbMV07XG4gIH1cbn1cbiIsIi8vIHdyaXRlLXRva2VuLmpzXG5cbnZhciBpZWVlNzU0ID0gcmVxdWlyZShcImllZWU3NTRcIik7XG52YXIgSW50NjRCdWZmZXIgPSByZXF1aXJlKFwiaW50NjQtYnVmZmVyXCIpO1xudmFyIFVpbnQ2NEJFID0gSW50NjRCdWZmZXIuVWludDY0QkU7XG52YXIgSW50NjRCRSA9IEludDY0QnVmZmVyLkludDY0QkU7XG5cbnZhciB1aW50OCA9IHJlcXVpcmUoXCIuL3dyaXRlLXVpbnQ4XCIpLnVpbnQ4O1xudmFyIEJ1ZmZlcmlzaCA9IHJlcXVpcmUoXCIuL2J1ZmZlcmlzaFwiKTtcbnZhciBCdWZmZXIgPSBCdWZmZXJpc2guZ2xvYmFsO1xudmFyIElTX0JVRkZFUl9TSElNID0gQnVmZmVyaXNoLmhhc0J1ZmZlciAmJiAoXCJUWVBFRF9BUlJBWV9TVVBQT1JUXCIgaW4gQnVmZmVyKTtcbnZhciBOT19UWVBFRF9BUlJBWSA9IElTX0JVRkZFUl9TSElNICYmICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVDtcbnZhciBCdWZmZXJfcHJvdG90eXBlID0gQnVmZmVyaXNoLmhhc0J1ZmZlciAmJiBCdWZmZXIucHJvdG90eXBlIHx8IHt9O1xuXG5leHBvcnRzLmdldFdyaXRlVG9rZW4gPSBnZXRXcml0ZVRva2VuO1xuXG5mdW5jdGlvbiBnZXRXcml0ZVRva2VuKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy51aW50OGFycmF5KSB7XG4gICAgcmV0dXJuIGluaXRfdWludDhhcnJheSgpO1xuICB9IGVsc2UgaWYgKE5PX1RZUEVEX0FSUkFZIHx8IChCdWZmZXJpc2guaGFzQnVmZmVyICYmIG9wdGlvbnMgJiYgb3B0aW9ucy5zYWZlKSkge1xuICAgIHJldHVybiBpbml0X3NhZmUoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaW5pdF90b2tlbigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRfdWludDhhcnJheSgpIHtcbiAgdmFyIHRva2VuID0gaW5pdF90b2tlbigpO1xuXG4gIC8vIGZsb2F0IDMyIC0tIDB4Y2FcbiAgLy8gZmxvYXQgNjQgLS0gMHhjYlxuICB0b2tlblsweGNhXSA9IHdyaXRlTigweGNhLCA0LCB3cml0ZUZsb2F0QkUpO1xuICB0b2tlblsweGNiXSA9IHdyaXRlTigweGNiLCA4LCB3cml0ZURvdWJsZUJFKTtcblxuICByZXR1cm4gdG9rZW47XG59XG5cbi8vIE5vZGUuanMgYW5kIGJyb3dzZXJzIHdpdGggVHlwZWRBcnJheVxuXG5mdW5jdGlvbiBpbml0X3Rva2VuKCkge1xuICAvLyAoaW1tZWRpYXRlIHZhbHVlcylcbiAgLy8gcG9zaXRpdmUgZml4aW50IC0tIDB4MDAgLSAweDdmXG4gIC8vIG5pbCAtLSAweGMwXG4gIC8vIGZhbHNlIC0tIDB4YzJcbiAgLy8gdHJ1ZSAtLSAweGMzXG4gIC8vIG5lZ2F0aXZlIGZpeGludCAtLSAweGUwIC0gMHhmZlxuICB2YXIgdG9rZW4gPSB1aW50OC5zbGljZSgpO1xuXG4gIC8vIGJpbiA4IC0tIDB4YzRcbiAgLy8gYmluIDE2IC0tIDB4YzVcbiAgLy8gYmluIDMyIC0tIDB4YzZcbiAgdG9rZW5bMHhjNF0gPSB3cml0ZTEoMHhjNCk7XG4gIHRva2VuWzB4YzVdID0gd3JpdGUyKDB4YzUpO1xuICB0b2tlblsweGM2XSA9IHdyaXRlNCgweGM2KTtcblxuICAvLyBleHQgOCAtLSAweGM3XG4gIC8vIGV4dCAxNiAtLSAweGM4XG4gIC8vIGV4dCAzMiAtLSAweGM5XG4gIHRva2VuWzB4YzddID0gd3JpdGUxKDB4YzcpO1xuICB0b2tlblsweGM4XSA9IHdyaXRlMigweGM4KTtcbiAgdG9rZW5bMHhjOV0gPSB3cml0ZTQoMHhjOSk7XG5cbiAgLy8gZmxvYXQgMzIgLS0gMHhjYVxuICAvLyBmbG9hdCA2NCAtLSAweGNiXG4gIHRva2VuWzB4Y2FdID0gd3JpdGVOKDB4Y2EsIDQsIChCdWZmZXJfcHJvdG90eXBlLndyaXRlRmxvYXRCRSB8fCB3cml0ZUZsb2F0QkUpLCB0cnVlKTtcbiAgdG9rZW5bMHhjYl0gPSB3cml0ZU4oMHhjYiwgOCwgKEJ1ZmZlcl9wcm90b3R5cGUud3JpdGVEb3VibGVCRSB8fCB3cml0ZURvdWJsZUJFKSwgdHJ1ZSk7XG5cbiAgLy8gdWludCA4IC0tIDB4Y2NcbiAgLy8gdWludCAxNiAtLSAweGNkXG4gIC8vIHVpbnQgMzIgLS0gMHhjZVxuICAvLyB1aW50IDY0IC0tIDB4Y2ZcbiAgdG9rZW5bMHhjY10gPSB3cml0ZTEoMHhjYyk7XG4gIHRva2VuWzB4Y2RdID0gd3JpdGUyKDB4Y2QpO1xuICB0b2tlblsweGNlXSA9IHdyaXRlNCgweGNlKTtcbiAgdG9rZW5bMHhjZl0gPSB3cml0ZU4oMHhjZiwgOCwgd3JpdGVVSW50NjRCRSk7XG5cbiAgLy8gaW50IDggLS0gMHhkMFxuICAvLyBpbnQgMTYgLS0gMHhkMVxuICAvLyBpbnQgMzIgLS0gMHhkMlxuICAvLyBpbnQgNjQgLS0gMHhkM1xuICB0b2tlblsweGQwXSA9IHdyaXRlMSgweGQwKTtcbiAgdG9rZW5bMHhkMV0gPSB3cml0ZTIoMHhkMSk7XG4gIHRva2VuWzB4ZDJdID0gd3JpdGU0KDB4ZDIpO1xuICB0b2tlblsweGQzXSA9IHdyaXRlTigweGQzLCA4LCB3cml0ZUludDY0QkUpO1xuXG4gIC8vIHN0ciA4IC0tIDB4ZDlcbiAgLy8gc3RyIDE2IC0tIDB4ZGFcbiAgLy8gc3RyIDMyIC0tIDB4ZGJcbiAgdG9rZW5bMHhkOV0gPSB3cml0ZTEoMHhkOSk7XG4gIHRva2VuWzB4ZGFdID0gd3JpdGUyKDB4ZGEpO1xuICB0b2tlblsweGRiXSA9IHdyaXRlNCgweGRiKTtcblxuICAvLyBhcnJheSAxNiAtLSAweGRjXG4gIC8vIGFycmF5IDMyIC0tIDB4ZGRcbiAgdG9rZW5bMHhkY10gPSB3cml0ZTIoMHhkYyk7XG4gIHRva2VuWzB4ZGRdID0gd3JpdGU0KDB4ZGQpO1xuXG4gIC8vIG1hcCAxNiAtLSAweGRlXG4gIC8vIG1hcCAzMiAtLSAweGRmXG4gIHRva2VuWzB4ZGVdID0gd3JpdGUyKDB4ZGUpO1xuICB0b2tlblsweGRmXSA9IHdyaXRlNCgweGRmKTtcblxuICByZXR1cm4gdG9rZW47XG59XG5cbi8vIHNhZmUgbW9kZTogZm9yIG9sZCBicm93c2VycyBhbmQgd2hvIG5lZWRzIGFzc2VydHNcblxuZnVuY3Rpb24gaW5pdF9zYWZlKCkge1xuICAvLyAoaW1tZWRpYXRlIHZhbHVlcylcbiAgLy8gcG9zaXRpdmUgZml4aW50IC0tIDB4MDAgLSAweDdmXG4gIC8vIG5pbCAtLSAweGMwXG4gIC8vIGZhbHNlIC0tIDB4YzJcbiAgLy8gdHJ1ZSAtLSAweGMzXG4gIC8vIG5lZ2F0aXZlIGZpeGludCAtLSAweGUwIC0gMHhmZlxuICB2YXIgdG9rZW4gPSB1aW50OC5zbGljZSgpO1xuXG4gIC8vIGJpbiA4IC0tIDB4YzRcbiAgLy8gYmluIDE2IC0tIDB4YzVcbiAgLy8gYmluIDMyIC0tIDB4YzZcbiAgdG9rZW5bMHhjNF0gPSB3cml0ZU4oMHhjNCwgMSwgQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4KTtcbiAgdG9rZW5bMHhjNV0gPSB3cml0ZU4oMHhjNSwgMiwgQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFKTtcbiAgdG9rZW5bMHhjNl0gPSB3cml0ZU4oMHhjNiwgNCwgQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFKTtcblxuICAvLyBleHQgOCAtLSAweGM3XG4gIC8vIGV4dCAxNiAtLSAweGM4XG4gIC8vIGV4dCAzMiAtLSAweGM5XG4gIHRva2VuWzB4YzddID0gd3JpdGVOKDB4YzcsIDEsIEJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCk7XG4gIHRva2VuWzB4YzhdID0gd3JpdGVOKDB4YzgsIDIsIEJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSk7XG4gIHRva2VuWzB4YzldID0gd3JpdGVOKDB4YzksIDQsIEJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSk7XG5cbiAgLy8gZmxvYXQgMzIgLS0gMHhjYVxuICAvLyBmbG9hdCA2NCAtLSAweGNiXG4gIHRva2VuWzB4Y2FdID0gd3JpdGVOKDB4Y2EsIDQsIEJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFKTtcbiAgdG9rZW5bMHhjYl0gPSB3cml0ZU4oMHhjYiwgOCwgQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFKTtcblxuICAvLyB1aW50IDggLS0gMHhjY1xuICAvLyB1aW50IDE2IC0tIDB4Y2RcbiAgLy8gdWludCAzMiAtLSAweGNlXG4gIC8vIHVpbnQgNjQgLS0gMHhjZlxuICB0b2tlblsweGNjXSA9IHdyaXRlTigweGNjLCAxLCBCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDgpO1xuICB0b2tlblsweGNkXSA9IHdyaXRlTigweGNkLCAyLCBCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUpO1xuICB0b2tlblsweGNlXSA9IHdyaXRlTigweGNlLCA0LCBCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUpO1xuICB0b2tlblsweGNmXSA9IHdyaXRlTigweGNmLCA4LCB3cml0ZVVJbnQ2NEJFKTtcblxuICAvLyBpbnQgOCAtLSAweGQwXG4gIC8vIGludCAxNiAtLSAweGQxXG4gIC8vIGludCAzMiAtLSAweGQyXG4gIC8vIGludCA2NCAtLSAweGQzXG4gIHRva2VuWzB4ZDBdID0gd3JpdGVOKDB4ZDAsIDEsIEJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4KTtcbiAgdG9rZW5bMHhkMV0gPSB3cml0ZU4oMHhkMSwgMiwgQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUpO1xuICB0b2tlblsweGQyXSA9IHdyaXRlTigweGQyLCA0LCBCdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSk7XG4gIHRva2VuWzB4ZDNdID0gd3JpdGVOKDB4ZDMsIDgsIHdyaXRlSW50NjRCRSk7XG5cbiAgLy8gc3RyIDggLS0gMHhkOVxuICAvLyBzdHIgMTYgLS0gMHhkYVxuICAvLyBzdHIgMzIgLS0gMHhkYlxuICB0b2tlblsweGQ5XSA9IHdyaXRlTigweGQ5LCAxLCBCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDgpO1xuICB0b2tlblsweGRhXSA9IHdyaXRlTigweGRhLCAyLCBCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUpO1xuICB0b2tlblsweGRiXSA9IHdyaXRlTigweGRiLCA0LCBCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUpO1xuXG4gIC8vIGFycmF5IDE2IC0tIDB4ZGNcbiAgLy8gYXJyYXkgMzIgLS0gMHhkZFxuICB0b2tlblsweGRjXSA9IHdyaXRlTigweGRjLCAyLCBCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUpO1xuICB0b2tlblsweGRkXSA9IHdyaXRlTigweGRkLCA0LCBCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUpO1xuXG4gIC8vIG1hcCAxNiAtLSAweGRlXG4gIC8vIG1hcCAzMiAtLSAweGRmXG4gIHRva2VuWzB4ZGVdID0gd3JpdGVOKDB4ZGUsIDIsIEJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSk7XG4gIHRva2VuWzB4ZGZdID0gd3JpdGVOKDB4ZGYsIDQsIEJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSk7XG5cbiAgcmV0dXJuIHRva2VuO1xufVxuXG5mdW5jdGlvbiB3cml0ZTEodHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZW5jb2RlciwgdmFsdWUpIHtcbiAgICB2YXIgb2Zmc2V0ID0gZW5jb2Rlci5yZXNlcnZlKDIpO1xuICAgIHZhciBidWZmZXIgPSBlbmNvZGVyLmJ1ZmZlcjtcbiAgICBidWZmZXJbb2Zmc2V0KytdID0gdHlwZTtcbiAgICBidWZmZXJbb2Zmc2V0XSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB3cml0ZTIodHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZW5jb2RlciwgdmFsdWUpIHtcbiAgICB2YXIgb2Zmc2V0ID0gZW5jb2Rlci5yZXNlcnZlKDMpO1xuICAgIHZhciBidWZmZXIgPSBlbmNvZGVyLmJ1ZmZlcjtcbiAgICBidWZmZXJbb2Zmc2V0KytdID0gdHlwZTtcbiAgICBidWZmZXJbb2Zmc2V0KytdID0gdmFsdWUgPj4+IDg7XG4gICAgYnVmZmVyW29mZnNldF0gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gd3JpdGU0KHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVuY29kZXIsIHZhbHVlKSB7XG4gICAgdmFyIG9mZnNldCA9IGVuY29kZXIucmVzZXJ2ZSg1KTtcbiAgICB2YXIgYnVmZmVyID0gZW5jb2Rlci5idWZmZXI7XG4gICAgYnVmZmVyW29mZnNldCsrXSA9IHR5cGU7XG4gICAgYnVmZmVyW29mZnNldCsrXSA9IHZhbHVlID4+PiAyNDtcbiAgICBidWZmZXJbb2Zmc2V0KytdID0gdmFsdWUgPj4+IDE2O1xuICAgIGJ1ZmZlcltvZmZzZXQrK10gPSB2YWx1ZSA+Pj4gODtcbiAgICBidWZmZXJbb2Zmc2V0XSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB3cml0ZU4odHlwZSwgbGVuLCBtZXRob2QsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBmdW5jdGlvbihlbmNvZGVyLCB2YWx1ZSkge1xuICAgIHZhciBvZmZzZXQgPSBlbmNvZGVyLnJlc2VydmUobGVuICsgMSk7XG4gICAgZW5jb2Rlci5idWZmZXJbb2Zmc2V0KytdID0gdHlwZTtcbiAgICBtZXRob2QuY2FsbChlbmNvZGVyLmJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB3cml0ZVVJbnQ2NEJFKHZhbHVlLCBvZmZzZXQpIHtcbiAgbmV3IFVpbnQ2NEJFKHRoaXMsIG9mZnNldCwgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiB3cml0ZUludDY0QkUodmFsdWUsIG9mZnNldCkge1xuICBuZXcgSW50NjRCRSh0aGlzLCBvZmZzZXQsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdEJFKHZhbHVlLCBvZmZzZXQpIHtcbiAgaWVlZTc1NC53cml0ZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZUJFKHZhbHVlLCBvZmZzZXQpIHtcbiAgaWVlZTc1NC53cml0ZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpO1xufVxuIiwiLy8gd3JpdGUtdHlwZS5qc1xuXG52YXIgSVNfQVJSQVkgPSByZXF1aXJlKFwiaXNhcnJheVwiKTtcbnZhciBJbnQ2NEJ1ZmZlciA9IHJlcXVpcmUoXCJpbnQ2NC1idWZmZXJcIik7XG52YXIgVWludDY0QkUgPSBJbnQ2NEJ1ZmZlci5VaW50NjRCRTtcbnZhciBJbnQ2NEJFID0gSW50NjRCdWZmZXIuSW50NjRCRTtcblxudmFyIEJ1ZmZlcmlzaCA9IHJlcXVpcmUoXCIuL2J1ZmZlcmlzaFwiKTtcbnZhciBCdWZmZXJQcm90byA9IHJlcXVpcmUoXCIuL2J1ZmZlcmlzaC1wcm90b1wiKTtcbnZhciBXcml0ZVRva2VuID0gcmVxdWlyZShcIi4vd3JpdGUtdG9rZW5cIik7XG52YXIgdWludDggPSByZXF1aXJlKFwiLi93cml0ZS11aW50OFwiKS51aW50ODtcbnZhciBFeHRCdWZmZXIgPSByZXF1aXJlKFwiLi9leHQtYnVmZmVyXCIpLkV4dEJ1ZmZlcjtcblxudmFyIEhBU19VSU5UOEFSUkFZID0gKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBVaW50OEFycmF5KTtcbnZhciBIQVNfTUFQID0gKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBNYXApO1xuXG52YXIgZXh0bWFwID0gW107XG5leHRtYXBbMV0gPSAweGQ0O1xuZXh0bWFwWzJdID0gMHhkNTtcbmV4dG1hcFs0XSA9IDB4ZDY7XG5leHRtYXBbOF0gPSAweGQ3O1xuZXh0bWFwWzE2XSA9IDB4ZDg7XG5cbmV4cG9ydHMuZ2V0V3JpdGVUeXBlID0gZ2V0V3JpdGVUeXBlO1xuXG5mdW5jdGlvbiBnZXRXcml0ZVR5cGUob3B0aW9ucykge1xuICB2YXIgdG9rZW4gPSBXcml0ZVRva2VuLmdldFdyaXRlVG9rZW4ob3B0aW9ucyk7XG4gIHZhciB1c2VyYXcgPSBvcHRpb25zICYmIG9wdGlvbnMudXNlcmF3O1xuICB2YXIgYmluYXJyYXlidWZmZXIgPSBIQVNfVUlOVDhBUlJBWSAmJiBvcHRpb25zICYmIG9wdGlvbnMuYmluYXJyYXlidWZmZXI7XG4gIHZhciBpc0J1ZmZlciA9IGJpbmFycmF5YnVmZmVyID8gQnVmZmVyaXNoLmlzQXJyYXlCdWZmZXIgOiBCdWZmZXJpc2guaXNCdWZmZXI7XG4gIHZhciBiaW4gPSBiaW5hcnJheWJ1ZmZlciA/IGJpbl9hcnJheWJ1ZmZlciA6IGJpbl9idWZmZXI7XG4gIHZhciB1c2VtYXAgPSBIQVNfTUFQICYmIG9wdGlvbnMgJiYgb3B0aW9ucy51c2VtYXA7XG4gIHZhciBtYXAgPSB1c2VtYXAgPyBtYXBfdG9fbWFwIDogb2JqX3RvX21hcDtcblxuICB2YXIgd3JpdGVUeXBlID0ge1xuICAgIFwiYm9vbGVhblwiOiBib29sLFxuICAgIFwiZnVuY3Rpb25cIjogbmlsLFxuICAgIFwibnVtYmVyXCI6IG51bWJlcixcbiAgICBcIm9iamVjdFwiOiAodXNlcmF3ID8gb2JqZWN0X3JhdyA6IG9iamVjdCksXG4gICAgXCJzdHJpbmdcIjogX3N0cmluZyh1c2VyYXcgPyByYXdfaGVhZF9zaXplIDogc3RyX2hlYWRfc2l6ZSksXG4gICAgXCJzeW1ib2xcIjogbmlsLFxuICAgIFwidW5kZWZpbmVkXCI6IG5pbFxuICB9O1xuXG4gIHJldHVybiB3cml0ZVR5cGU7XG5cbiAgLy8gZmFsc2UgLS0gMHhjMlxuICAvLyB0cnVlIC0tIDB4YzNcbiAgZnVuY3Rpb24gYm9vbChlbmNvZGVyLCB2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gdmFsdWUgPyAweGMzIDogMHhjMjtcbiAgICB0b2tlblt0eXBlXShlbmNvZGVyLCB2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBudW1iZXIoZW5jb2RlciwgdmFsdWUpIHtcbiAgICB2YXIgaXZhbHVlID0gdmFsdWUgfCAwO1xuICAgIHZhciB0eXBlO1xuICAgIGlmICh2YWx1ZSAhPT0gaXZhbHVlKSB7XG4gICAgICAvLyBmbG9hdCA2NCAtLSAweGNiXG4gICAgICB0eXBlID0gMHhjYjtcbiAgICAgIHRva2VuW3R5cGVdKGVuY29kZXIsIHZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKC0weDIwIDw9IGl2YWx1ZSAmJiBpdmFsdWUgPD0gMHg3Rikge1xuICAgICAgLy8gcG9zaXRpdmUgZml4aW50IC0tIDB4MDAgLSAweDdmXG4gICAgICAvLyBuZWdhdGl2ZSBmaXhpbnQgLS0gMHhlMCAtIDB4ZmZcbiAgICAgIHR5cGUgPSBpdmFsdWUgJiAweEZGO1xuICAgIH0gZWxzZSBpZiAoMCA8PSBpdmFsdWUpIHtcbiAgICAgIC8vIHVpbnQgOCAtLSAweGNjXG4gICAgICAvLyB1aW50IDE2IC0tIDB4Y2RcbiAgICAgIC8vIHVpbnQgMzIgLS0gMHhjZVxuICAgICAgdHlwZSA9IChpdmFsdWUgPD0gMHhGRikgPyAweGNjIDogKGl2YWx1ZSA8PSAweEZGRkYpID8gMHhjZCA6IDB4Y2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGludCA4IC0tIDB4ZDBcbiAgICAgIC8vIGludCAxNiAtLSAweGQxXG4gICAgICAvLyBpbnQgMzIgLS0gMHhkMlxuICAgICAgdHlwZSA9ICgtMHg4MCA8PSBpdmFsdWUpID8gMHhkMCA6ICgtMHg4MDAwIDw9IGl2YWx1ZSkgPyAweGQxIDogMHhkMjtcbiAgICB9XG4gICAgdG9rZW5bdHlwZV0oZW5jb2RlciwgaXZhbHVlKTtcbiAgfVxuXG4gIC8vIHVpbnQgNjQgLS0gMHhjZlxuICBmdW5jdGlvbiB1aW50NjQoZW5jb2RlciwgdmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IDB4Y2Y7XG4gICAgdG9rZW5bdHlwZV0oZW5jb2RlciwgdmFsdWUudG9BcnJheSgpKTtcbiAgfVxuXG4gIC8vIGludCA2NCAtLSAweGQzXG4gIGZ1bmN0aW9uIGludDY0KGVuY29kZXIsIHZhbHVlKSB7XG4gICAgdmFyIHR5cGUgPSAweGQzO1xuICAgIHRva2VuW3R5cGVdKGVuY29kZXIsIHZhbHVlLnRvQXJyYXkoKSk7XG4gIH1cblxuICAvLyBzdHIgOCAtLSAweGQ5XG4gIC8vIHN0ciAxNiAtLSAweGRhXG4gIC8vIHN0ciAzMiAtLSAweGRiXG4gIC8vIGZpeHN0ciAtLSAweGEwIC0gMHhiZlxuICBmdW5jdGlvbiBzdHJfaGVhZF9zaXplKGxlbmd0aCkge1xuICAgIHJldHVybiAobGVuZ3RoIDwgMzIpID8gMSA6IChsZW5ndGggPD0gMHhGRikgPyAyIDogKGxlbmd0aCA8PSAweEZGRkYpID8gMyA6IDU7XG4gIH1cblxuICAvLyByYXcgMTYgLS0gMHhkYVxuICAvLyByYXcgMzIgLS0gMHhkYlxuICAvLyBmaXhyYXcgLS0gMHhhMCAtIDB4YmZcbiAgZnVuY3Rpb24gcmF3X2hlYWRfc2l6ZShsZW5ndGgpIHtcbiAgICByZXR1cm4gKGxlbmd0aCA8IDMyKSA/IDEgOiAobGVuZ3RoIDw9IDB4RkZGRikgPyAzIDogNTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zdHJpbmcoaGVhZF9zaXplKSB7XG4gICAgcmV0dXJuIHN0cmluZztcblxuICAgIGZ1bmN0aW9uIHN0cmluZyhlbmNvZGVyLCB2YWx1ZSkge1xuICAgICAgLy8gcHJlcGFyZSBidWZmZXJcbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gICAgICB2YXIgbWF4c2l6ZSA9IDUgKyBsZW5ndGggKiAzO1xuICAgICAgZW5jb2Rlci5vZmZzZXQgPSBlbmNvZGVyLnJlc2VydmUobWF4c2l6ZSk7XG4gICAgICB2YXIgYnVmZmVyID0gZW5jb2Rlci5idWZmZXI7XG5cbiAgICAgIC8vIGV4cGVjdGVkIGhlYWRlciBzaXplXG4gICAgICB2YXIgZXhwZWN0ZWQgPSBoZWFkX3NpemUobGVuZ3RoKTtcblxuICAgICAgLy8gZXhwZWN0ZWQgc3RhcnQgcG9pbnRcbiAgICAgIHZhciBzdGFydCA9IGVuY29kZXIub2Zmc2V0ICsgZXhwZWN0ZWQ7XG5cbiAgICAgIC8vIHdyaXRlIHN0cmluZ1xuICAgICAgbGVuZ3RoID0gQnVmZmVyUHJvdG8ud3JpdGUuY2FsbChidWZmZXIsIHZhbHVlLCBzdGFydCk7XG5cbiAgICAgIC8vIGFjdHVhbCBoZWFkZXIgc2l6ZVxuICAgICAgdmFyIGFjdHVhbCA9IGhlYWRfc2l6ZShsZW5ndGgpO1xuXG4gICAgICAvLyBtb3ZlIGNvbnRlbnQgd2hlbiBuZWVkZWRcbiAgICAgIGlmIChleHBlY3RlZCAhPT0gYWN0dWFsKSB7XG4gICAgICAgIHZhciB0YXJnZXRTdGFydCA9IHN0YXJ0ICsgYWN0dWFsIC0gZXhwZWN0ZWQ7XG4gICAgICAgIHZhciBlbmQgPSBzdGFydCArIGxlbmd0aDtcbiAgICAgICAgQnVmZmVyUHJvdG8uY29weS5jYWxsKGJ1ZmZlciwgYnVmZmVyLCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIHdyaXRlIGhlYWRlclxuICAgICAgdmFyIHR5cGUgPSAoYWN0dWFsID09PSAxKSA/ICgweGEwICsgbGVuZ3RoKSA6IChhY3R1YWwgPD0gMykgPyAoMHhkNyArIGFjdHVhbCkgOiAweGRiO1xuICAgICAgdG9rZW5bdHlwZV0oZW5jb2RlciwgbGVuZ3RoKTtcblxuICAgICAgLy8gbW92ZSBjdXJzb3JcbiAgICAgIGVuY29kZXIub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvYmplY3QoZW5jb2RlciwgdmFsdWUpIHtcbiAgICAvLyBudWxsXG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gbmlsKGVuY29kZXIsIHZhbHVlKTtcblxuICAgIC8vIEJ1ZmZlclxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHJldHVybiBiaW4oZW5jb2RlciwgdmFsdWUpO1xuXG4gICAgLy8gQXJyYXlcbiAgICBpZiAoSVNfQVJSQVkodmFsdWUpKSByZXR1cm4gYXJyYXkoZW5jb2RlciwgdmFsdWUpO1xuXG4gICAgLy8gaW50NjQtYnVmZmVyIG9iamVjdHNcbiAgICBpZiAoVWludDY0QkUuaXNVaW50NjRCRSh2YWx1ZSkpIHJldHVybiB1aW50NjQoZW5jb2RlciwgdmFsdWUpO1xuICAgIGlmIChJbnQ2NEJFLmlzSW50NjRCRSh2YWx1ZSkpIHJldHVybiBpbnQ2NChlbmNvZGVyLCB2YWx1ZSk7XG5cbiAgICAvLyBleHQgZm9ybWF0c1xuICAgIHZhciBwYWNrZXIgPSBlbmNvZGVyLmNvZGVjLmdldEV4dFBhY2tlcih2YWx1ZSk7XG4gICAgaWYgKHBhY2tlcikgdmFsdWUgPSBwYWNrZXIodmFsdWUpO1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEV4dEJ1ZmZlcikgcmV0dXJuIGV4dChlbmNvZGVyLCB2YWx1ZSk7XG5cbiAgICAvLyBwbGFpbiBvbGQgT2JqZWN0cyBvciBNYXBcbiAgICBtYXAoZW5jb2RlciwgdmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb2JqZWN0X3JhdyhlbmNvZGVyLCB2YWx1ZSkge1xuICAgIC8vIEJ1ZmZlclxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHJldHVybiByYXcoZW5jb2RlciwgdmFsdWUpO1xuXG4gICAgLy8gb3RoZXJzXG4gICAgb2JqZWN0KGVuY29kZXIsIHZhbHVlKTtcbiAgfVxuXG4gIC8vIG5pbCAtLSAweGMwXG4gIGZ1bmN0aW9uIG5pbChlbmNvZGVyLCB2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gMHhjMDtcbiAgICB0b2tlblt0eXBlXShlbmNvZGVyLCB2YWx1ZSk7XG4gIH1cblxuICAvLyBmaXhhcnJheSAtLSAweDkwIC0gMHg5ZlxuICAvLyBhcnJheSAxNiAtLSAweGRjXG4gIC8vIGFycmF5IDMyIC0tIDB4ZGRcbiAgZnVuY3Rpb24gYXJyYXkoZW5jb2RlciwgdmFsdWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICAgIHZhciB0eXBlID0gKGxlbmd0aCA8IDE2KSA/ICgweDkwICsgbGVuZ3RoKSA6IChsZW5ndGggPD0gMHhGRkZGKSA/IDB4ZGMgOiAweGRkO1xuICAgIHRva2VuW3R5cGVdKGVuY29kZXIsIGxlbmd0aCk7XG5cbiAgICB2YXIgZW5jb2RlID0gZW5jb2Rlci5jb2RlYy5lbmNvZGU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgZW5jb2RlKGVuY29kZXIsIHZhbHVlW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBiaW4gOCAtLSAweGM0XG4gIC8vIGJpbiAxNiAtLSAweGM1XG4gIC8vIGJpbiAzMiAtLSAweGM2XG4gIGZ1bmN0aW9uIGJpbl9idWZmZXIoZW5jb2RlciwgdmFsdWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICAgIHZhciB0eXBlID0gKGxlbmd0aCA8IDB4RkYpID8gMHhjNCA6IChsZW5ndGggPD0gMHhGRkZGKSA/IDB4YzUgOiAweGM2O1xuICAgIHRva2VuW3R5cGVdKGVuY29kZXIsIGxlbmd0aCk7XG4gICAgZW5jb2Rlci5zZW5kKHZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpbl9hcnJheWJ1ZmZlcihlbmNvZGVyLCB2YWx1ZSkge1xuICAgIGJpbl9idWZmZXIoZW5jb2RlciwgbmV3IFVpbnQ4QXJyYXkodmFsdWUpKTtcbiAgfVxuXG4gIC8vIGZpeGV4dCAxIC0tIDB4ZDRcbiAgLy8gZml4ZXh0IDIgLS0gMHhkNVxuICAvLyBmaXhleHQgNCAtLSAweGQ2XG4gIC8vIGZpeGV4dCA4IC0tIDB4ZDdcbiAgLy8gZml4ZXh0IDE2IC0tIDB4ZDhcbiAgLy8gZXh0IDggLS0gMHhjN1xuICAvLyBleHQgMTYgLS0gMHhjOFxuICAvLyBleHQgMzIgLS0gMHhjOVxuICBmdW5jdGlvbiBleHQoZW5jb2RlciwgdmFsdWUpIHtcbiAgICB2YXIgYnVmZmVyID0gdmFsdWUuYnVmZmVyO1xuICAgIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoO1xuICAgIHZhciB0eXBlID0gZXh0bWFwW2xlbmd0aF0gfHwgKChsZW5ndGggPCAweEZGKSA/IDB4YzcgOiAobGVuZ3RoIDw9IDB4RkZGRikgPyAweGM4IDogMHhjOSk7XG4gICAgdG9rZW5bdHlwZV0oZW5jb2RlciwgbGVuZ3RoKTtcbiAgICB1aW50OFt2YWx1ZS50eXBlXShlbmNvZGVyKTtcbiAgICBlbmNvZGVyLnNlbmQoYnVmZmVyKTtcbiAgfVxuXG4gIC8vIGZpeG1hcCAtLSAweDgwIC0gMHg4ZlxuICAvLyBtYXAgMTYgLS0gMHhkZVxuICAvLyBtYXAgMzIgLS0gMHhkZlxuICBmdW5jdGlvbiBvYmpfdG9fbWFwKGVuY29kZXIsIHZhbHVlKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB0eXBlID0gKGxlbmd0aCA8IDE2KSA/ICgweDgwICsgbGVuZ3RoKSA6IChsZW5ndGggPD0gMHhGRkZGKSA/IDB4ZGUgOiAweGRmO1xuICAgIHRva2VuW3R5cGVdKGVuY29kZXIsIGxlbmd0aCk7XG5cbiAgICB2YXIgZW5jb2RlID0gZW5jb2Rlci5jb2RlYy5lbmNvZGU7XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgZW5jb2RlKGVuY29kZXIsIGtleSk7XG4gICAgICBlbmNvZGUoZW5jb2RlciwgdmFsdWVba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBmaXhtYXAgLS0gMHg4MCAtIDB4OGZcbiAgLy8gbWFwIDE2IC0tIDB4ZGVcbiAgLy8gbWFwIDMyIC0tIDB4ZGZcbiAgZnVuY3Rpb24gbWFwX3RvX21hcChlbmNvZGVyLCB2YWx1ZSkge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgTWFwKSkgcmV0dXJuIG9ial90b19tYXAoZW5jb2RlciwgdmFsdWUpO1xuXG4gICAgdmFyIGxlbmd0aCA9IHZhbHVlLnNpemU7XG4gICAgdmFyIHR5cGUgPSAobGVuZ3RoIDwgMTYpID8gKDB4ODAgKyBsZW5ndGgpIDogKGxlbmd0aCA8PSAweEZGRkYpID8gMHhkZSA6IDB4ZGY7XG4gICAgdG9rZW5bdHlwZV0oZW5jb2RlciwgbGVuZ3RoKTtcblxuICAgIHZhciBlbmNvZGUgPSBlbmNvZGVyLmNvZGVjLmVuY29kZTtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwga2V5LCBtKSB7XG4gICAgICBlbmNvZGUoZW5jb2Rlciwga2V5KTtcbiAgICAgIGVuY29kZShlbmNvZGVyLCB2YWwpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gcmF3IDE2IC0tIDB4ZGFcbiAgLy8gcmF3IDMyIC0tIDB4ZGJcbiAgLy8gZml4cmF3IC0tIDB4YTAgLSAweGJmXG4gIGZ1bmN0aW9uIHJhdyhlbmNvZGVyLCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gICAgdmFyIHR5cGUgPSAobGVuZ3RoIDwgMzIpID8gKDB4YTAgKyBsZW5ndGgpIDogKGxlbmd0aCA8PSAweEZGRkYpID8gMHhkYSA6IDB4ZGI7XG4gICAgdG9rZW5bdHlwZV0oZW5jb2RlciwgbGVuZ3RoKTtcbiAgICBlbmNvZGVyLnNlbmQodmFsdWUpO1xuICB9XG59XG4iLCIvLyB3cml0ZS11bml0OC5qc1xuXG52YXIgY29uc3RhbnQgPSBleHBvcnRzLnVpbnQ4ID0gbmV3IEFycmF5KDI1Nik7XG5cbmZvciAodmFyIGkgPSAweDAwOyBpIDw9IDB4RkY7IGkrKykge1xuICBjb25zdGFudFtpXSA9IHdyaXRlMChpKTtcbn1cblxuZnVuY3Rpb24gd3JpdGUwKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVuY29kZXIpIHtcbiAgICB2YXIgb2Zmc2V0ID0gZW5jb2Rlci5yZXNlcnZlKDEpO1xuICAgIGVuY29kZXIuYnVmZmVyW29mZnNldF0gPSB0eXBlO1xuICB9O1xufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIHJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCBhcnJheSB3aXRoIGRpcmVjdG9yeSBuYW1lcyB0aGVyZVxuLy8gbXVzdCBiZSBubyBzbGFzaGVzLCBlbXB0eSBlbGVtZW50cywgb3IgZGV2aWNlIG5hbWVzIChjOlxcKSBpbiB0aGUgYXJyYXlcbi8vIChzbyBhbHNvIG5vIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMgLSBpdCBkb2VzIG5vdCBkaXN0aW5ndWlzaFxuLy8gcmVsYXRpdmUgYW5kIGFic29sdXRlIHBhdGhzKVxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7XG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBsYXN0ID0gcGFydHNbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuLy8gU3BsaXQgYSBmaWxlbmFtZSBpbnRvIFtyb290LCBkaXIsIGJhc2VuYW1lLCBleHRdLCB1bml4IHZlcnNpb25cbi8vICdyb290JyBpcyBqdXN0IGEgc2xhc2gsIG9yIG5vdGhpbmcuXG52YXIgc3BsaXRQYXRoUmUgPVxuICAgIC9eKFxcLz98KShbXFxzXFxTXSo/KSgoPzpcXC57MSwyfXxbXlxcL10rP3wpKFxcLlteLlxcL10qfCkpKD86W1xcL10qKSQvO1xudmFyIHNwbGl0UGF0aCA9IGZ1bmN0aW9uKGZpbGVuYW1lKSB7XG4gIHJldHVybiBzcGxpdFBhdGhSZS5leGVjKGZpbGVuYW1lKS5zbGljZSgxKTtcbn07XG5cbi8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzb2x2ZWRQYXRoID0gJycsXG4gICAgICByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICB2YXIgcGF0aCA9IChpID49IDApID8gYXJndW1lbnRzW2ldIDogcHJvY2Vzcy5jd2QoKTtcblxuICAgIC8vIFNraXAgZW1wdHkgYW5kIGludmFsaWQgZW50cmllc1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfSBlbHNlIGlmICghcGF0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICcvJyArIHJlc29sdmVkUGF0aDtcbiAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcbiAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIHJldHVybiAoKHJlc29sdmVkQWJzb2x1dGUgPyAnLycgOiAnJykgKyByZXNvbHZlZFBhdGgpIHx8ICcuJztcbn07XG5cbi8vIHBhdGgubm9ybWFsaXplKHBhdGgpXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIGlzQWJzb2x1dGUgPSBleHBvcnRzLmlzQWJzb2x1dGUocGF0aCksXG4gICAgICB0cmFpbGluZ1NsYXNoID0gc3Vic3RyKHBhdGgsIC0xKSA9PT0gJy8nO1xuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICBwYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhaXNBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIGlmICghcGF0aCAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHBhdGggPSAnLic7XG4gIH1cbiAgaWYgKHBhdGggJiYgdHJhaWxpbmdTbGFzaCkge1xuICAgIHBhdGggKz0gJy8nO1xuICB9XG5cbiAgcmV0dXJuIChpc0Fic29sdXRlID8gJy8nIDogJycpICsgcGF0aDtcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLyc7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmpvaW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhdGhzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgcmV0dXJuIGV4cG9ydHMubm9ybWFsaXplKGZpbHRlcihwYXRocywgZnVuY3Rpb24ocCwgaW5kZXgpIHtcbiAgICBpZiAodHlwZW9mIHAgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfSkuam9pbignLycpKTtcbn07XG5cblxuLy8gcGF0aC5yZWxhdGl2ZShmcm9tLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVsYXRpdmUgPSBmdW5jdGlvbihmcm9tLCB0bykge1xuICBmcm9tID0gZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTtcbiAgdG8gPSBleHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtcblxuICBmdW5jdGlvbiB0cmltKGFycikge1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgZm9yICg7IHN0YXJ0IDwgYXJyLmxlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGVuZCA+PSAwOyBlbmQtLSkge1xuICAgICAgaWYgKGFycltlbmRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbiAgfVxuXG4gIHZhciBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7XG4gIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcblxuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICB2YXIgc2FtZVBhcnRzTGVuZ3RoID0gbGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkge1xuICAgICAgc2FtZVBhcnRzTGVuZ3RoID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvdXRwdXRQYXJ0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gc2FtZVBhcnRzTGVuZ3RoOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcbiAgfVxuXG4gIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7XG5cbiAgcmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oJy8nKTtcbn07XG5cbmV4cG9ydHMuc2VwID0gJy8nO1xuZXhwb3J0cy5kZWxpbWl0ZXIgPSAnOic7XG5cbmV4cG9ydHMuZGlybmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIHJlc3VsdCA9IHNwbGl0UGF0aChwYXRoKSxcbiAgICAgIHJvb3QgPSByZXN1bHRbMF0sXG4gICAgICBkaXIgPSByZXN1bHRbMV07XG5cbiAgaWYgKCFyb290ICYmICFkaXIpIHtcbiAgICAvLyBObyBkaXJuYW1lIHdoYXRzb2V2ZXJcbiAgICByZXR1cm4gJy4nO1xuICB9XG5cbiAgaWYgKGRpcikge1xuICAgIC8vIEl0IGhhcyBhIGRpcm5hbWUsIHN0cmlwIHRyYWlsaW5nIHNsYXNoXG4gICAgZGlyID0gZGlyLnN1YnN0cigwLCBkaXIubGVuZ3RoIC0gMSk7XG4gIH1cblxuICByZXR1cm4gcm9vdCArIGRpcjtcbn07XG5cblxuZXhwb3J0cy5iYXNlbmFtZSA9IGZ1bmN0aW9uKHBhdGgsIGV4dCkge1xuICB2YXIgZiA9IHNwbGl0UGF0aChwYXRoKVsyXTtcbiAgLy8gVE9ETzogbWFrZSB0aGlzIGNvbXBhcmlzb24gY2FzZS1pbnNlbnNpdGl2ZSBvbiB3aW5kb3dzP1xuICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkge1xuICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBmO1xufTtcblxuXG5leHBvcnRzLmV4dG5hbWUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBzcGxpdFBhdGgocGF0aClbM107XG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIgKHhzLCBmKSB7XG4gICAgaWYgKHhzLmZpbHRlcikgcmV0dXJuIHhzLmZpbHRlcihmKTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZih4c1tpXSwgaSwgeHMpKSByZXMucHVzaCh4c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFN0cmluZy5wcm90b3R5cGUuc3Vic3RyIC0gbmVnYXRpdmUgaW5kZXggZG9uJ3Qgd29yayBpbiBJRThcbnZhciBzdWJzdHIgPSAnYWInLnN1YnN0cigtMSkgPT09ICdiJ1xuICAgID8gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikgeyByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKSB9XG4gICAgOiBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7XG4gICAgICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gc3RyLmxlbmd0aCArIHN0YXJ0O1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKTtcbiAgICB9XG47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qICFcbiAqIENoYWkgLSBwYXRodmFsIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2dpY2FscGFyYWRveC9maWx0clxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmhhc1Byb3BlcnR5KG9iamVjdCwgbmFtZSlcbiAqXG4gKiBUaGlzIGFsbG93cyBjaGVja2luZyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgb3duXG4gKiBvciBpbmhlcml0ZWQgZnJvbSBwcm90b3R5cGUgY2hhaW4gbmFtZWQgcHJvcGVydHkuXG4gKlxuICogQmFzaWNhbGx5IGRvZXMgdGhlIHNhbWUgdGhpbmcgYXMgdGhlIGBpbmBcbiAqIG9wZXJhdG9yIGJ1dCB3b3JrcyBwcm9wZXJseSB3aXRoIG51bGwvdW5kZWZpbmVkIHZhbHVlc1xuICogYW5kIG90aGVyIHByaW1pdGl2ZXMuXG4gKlxuICogICAgIHZhciBvYmogPSB7XG4gKiAgICAgICAgIGFycjogWydhJywgJ2InLCAnYyddXG4gKiAgICAgICAsIHN0cjogJ0hlbGxvJ1xuICogICAgIH1cbiAqXG4gKiBUaGUgZm9sbG93aW5nIHdvdWxkIGJlIHRoZSByZXN1bHRzLlxuICpcbiAqICAgICBoYXNQcm9wZXJ0eShvYmosICdzdHInKTsgIC8vIHRydWVcbiAqICAgICBoYXNQcm9wZXJ0eShvYmosICdjb25zdHJ1Y3RvcicpOyAgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iaiwgJ2JhcicpOyAgLy8gZmFsc2VcbiAqXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLnN0ciwgJ2xlbmd0aCcpOyAvLyB0cnVlXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLnN0ciwgMSk7ICAvLyB0cnVlXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLnN0ciwgNSk7ICAvLyBmYWxzZVxuICpcbiAqICAgICBoYXNQcm9wZXJ0eShvYmouYXJyLCAnbGVuZ3RoJyk7ICAvLyB0cnVlXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLmFyciwgMik7ICAvLyB0cnVlXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLmFyciwgMyk7ICAvLyBmYWxzZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gbmFtZVxuICogQHJldHVybnMge0Jvb2xlYW59IHdoZXRoZXIgaXQgZXhpc3RzXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBoYXNQcm9wZXJ0eVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBoYXNQcm9wZXJ0eShvYmosIG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRoZSBgaW5gIG9wZXJhdG9yIGRvZXMgbm90IHdvcmsgd2l0aCBwcmltaXRpdmVzLlxuICByZXR1cm4gbmFtZSBpbiBPYmplY3Qob2JqKTtcbn1cblxuLyogIVxuICogIyMgcGFyc2VQYXRoKHBhdGgpXG4gKlxuICogSGVscGVyIGZ1bmN0aW9uIHVzZWQgdG8gcGFyc2Ugc3RyaW5nIG9iamVjdFxuICogcGF0aHMuIFVzZSBpbiBjb25qdW5jdGlvbiB3aXRoIGBpbnRlcm5hbEdldFBhdGhWYWx1ZWAuXG4gKlxuICogICAgICB2YXIgcGFyc2VkID0gcGFyc2VQYXRoKCdteW9iamVjdC5wcm9wZXJ0eS5zdWJwcm9wJyk7XG4gKlxuICogIyMjIFBhdGhzOlxuICpcbiAqICogQ2FuIGJlIGluZmluaXRlbHkgZGVlcCBhbmQgbmVzdGVkLlxuICogKiBBcnJheXMgYXJlIGFsc28gdmFsaWQgdXNpbmcgdGhlIGZvcm1hbCBgbXlvYmplY3QuZG9jdW1lbnRbM10ucHJvcGVydHlgLlxuICogKiBMaXRlcmFsIGRvdHMgYW5kIGJyYWNrZXRzIChub3QgZGVsaW1pdGVyKSBtdXN0IGJlIGJhY2tzbGFzaC1lc2NhcGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBwYXJzZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBzdHIgPSBwYXRoLnJlcGxhY2UoLyhbXlxcXFxdKVxcWy9nLCAnJDEuWycpO1xuICB2YXIgcGFydHMgPSBzdHIubWF0Y2goLyhcXFxcXFwufFteLl0rPykrL2cpO1xuICByZXR1cm4gcGFydHMubWFwKGZ1bmN0aW9uIG1hcE1hdGNoZXModmFsdWUpIHtcbiAgICB2YXIgcmVnZXhwID0gL15cXFsoXFxkKylcXF0kLztcbiAgICB2YXIgbUFyciA9IHJlZ2V4cC5leGVjKHZhbHVlKTtcbiAgICB2YXIgcGFyc2VkID0gbnVsbDtcbiAgICBpZiAobUFycikge1xuICAgICAgcGFyc2VkID0geyBpOiBwYXJzZUZsb2F0KG1BcnJbMV0pIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZCA9IHsgcDogdmFsdWUucmVwbGFjZSgvXFxcXChbLlxcW1xcXV0pL2csICckMScpIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfSk7XG59XG5cbi8qICFcbiAqICMjIGludGVybmFsR2V0UGF0aFZhbHVlKG9iaiwgcGFyc2VkWywgcGF0aERlcHRoXSlcbiAqXG4gKiBIZWxwZXIgY29tcGFuaW9uIGZ1bmN0aW9uIGZvciBgLnBhcnNlUGF0aGAgdGhhdCByZXR1cm5zXG4gKiB0aGUgdmFsdWUgbG9jYXRlZCBhdCB0aGUgcGFyc2VkIGFkZHJlc3MuXG4gKlxuICogICAgICB2YXIgdmFsdWUgPSBnZXRQYXRoVmFsdWUob2JqLCBwYXJzZWQpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgdG8gc2VhcmNoIGFnYWluc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJzZWQgZGVmaW5pdGlvbiBmcm9tIGBwYXJzZVBhdGhgLlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlcHRoIChuZXN0aW5nIGxldmVsKSBvZiB0aGUgcHJvcGVydHkgd2Ugd2FudCB0byByZXRyaWV2ZVxuICogQHJldHVybnMge09iamVjdHxVbmRlZmluZWR9IHZhbHVlXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpbnRlcm5hbEdldFBhdGhWYWx1ZShvYmosIHBhcnNlZCwgcGF0aERlcHRoKSB7XG4gIHZhciB0ZW1wb3JhcnlWYWx1ZSA9IG9iajtcbiAgdmFyIHJlcyA9IG51bGw7XG4gIHBhdGhEZXB0aCA9ICh0eXBlb2YgcGF0aERlcHRoID09PSAndW5kZWZpbmVkJyA/IHBhcnNlZC5sZW5ndGggOiBwYXRoRGVwdGgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aERlcHRoOyBpKyspIHtcbiAgICB2YXIgcGFydCA9IHBhcnNlZFtpXTtcbiAgICBpZiAodGVtcG9yYXJ5VmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgcGFydC5wID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0ZW1wb3JhcnlWYWx1ZSA9IHRlbXBvcmFyeVZhbHVlW3BhcnQuaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZW1wb3JhcnlWYWx1ZSA9IHRlbXBvcmFyeVZhbHVlW3BhcnQucF07XG4gICAgICB9XG5cbiAgICAgIGlmIChpID09PSAocGF0aERlcHRoIC0gMSkpIHtcbiAgICAgICAgcmVzID0gdGVtcG9yYXJ5VmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn1cblxuLyogIVxuICogIyMgaW50ZXJuYWxTZXRQYXRoVmFsdWUob2JqLCB2YWx1ZSwgcGFyc2VkKVxuICpcbiAqIENvbXBhbmlvbiBmdW5jdGlvbiBmb3IgYHBhcnNlUGF0aGAgdGhhdCBzZXRzXG4gKiB0aGUgdmFsdWUgbG9jYXRlZCBhdCBhIHBhcnNlZCBhZGRyZXNzLlxuICpcbiAqICBpbnRlcm5hbFNldFBhdGhWYWx1ZShvYmosICd2YWx1ZScsIHBhcnNlZCk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCB0byBzZWFyY2ggYW5kIGRlZmluZSBvblxuICogQHBhcmFtIHsqfSB2YWx1ZSB0byB1c2UgdXBvbiBzZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJzZWQgZGVmaW5pdGlvbiBmcm9tIGBwYXJzZVBhdGhgXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpbnRlcm5hbFNldFBhdGhWYWx1ZShvYmosIHZhbCwgcGFyc2VkKSB7XG4gIHZhciB0ZW1wT2JqID0gb2JqO1xuICB2YXIgcGF0aERlcHRoID0gcGFyc2VkLmxlbmd0aDtcbiAgdmFyIHBhcnQgPSBudWxsO1xuICAvLyBIZXJlIHdlIGl0ZXJhdGUgdGhyb3VnaCBldmVyeSBwYXJ0IG9mIHRoZSBwYXRoXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aERlcHRoOyBpKyspIHtcbiAgICB2YXIgcHJvcE5hbWUgPSBudWxsO1xuICAgIHZhciBwcm9wVmFsID0gbnVsbDtcbiAgICBwYXJ0ID0gcGFyc2VkW2ldO1xuXG4gICAgLy8gSWYgaXQncyB0aGUgbGFzdCBwYXJ0IG9mIHRoZSBwYXRoLCB3ZSBzZXQgdGhlICdwcm9wTmFtZScgdmFsdWUgd2l0aCB0aGUgcHJvcGVydHkgbmFtZVxuICAgIGlmIChpID09PSAocGF0aERlcHRoIC0gMSkpIHtcbiAgICAgIHByb3BOYW1lID0gdHlwZW9mIHBhcnQucCA9PT0gJ3VuZGVmaW5lZCcgPyBwYXJ0LmkgOiBwYXJ0LnA7XG4gICAgICAvLyBOb3cgd2Ugc2V0IHRoZSBwcm9wZXJ0eSB3aXRoIHRoZSBuYW1lIGhlbGQgYnkgJ3Byb3BOYW1lJyBvbiBvYmplY3Qgd2l0aCB0aGUgZGVzaXJlZCB2YWxcbiAgICAgIHRlbXBPYmpbcHJvcE5hbWVdID0gdmFsO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhcnQucCAhPT0gJ3VuZGVmaW5lZCcgJiYgdGVtcE9ialtwYXJ0LnBdKSB7XG4gICAgICB0ZW1wT2JqID0gdGVtcE9ialtwYXJ0LnBdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhcnQuaSAhPT0gJ3VuZGVmaW5lZCcgJiYgdGVtcE9ialtwYXJ0LmldKSB7XG4gICAgICB0ZW1wT2JqID0gdGVtcE9ialtwYXJ0LmldO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgb2JqIGRvZXNuJ3QgaGF2ZSB0aGUgcHJvcGVydHkgd2UgY3JlYXRlIG9uZSB3aXRoIHRoYXQgbmFtZSB0byBkZWZpbmUgaXRcbiAgICAgIHZhciBuZXh0ID0gcGFyc2VkW2kgKyAxXTtcbiAgICAgIC8vIEhlcmUgd2Ugc2V0IHRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB3aGljaCB3aWxsIGJlIGRlZmluZWRcbiAgICAgIHByb3BOYW1lID0gdHlwZW9mIHBhcnQucCA9PT0gJ3VuZGVmaW5lZCcgPyBwYXJ0LmkgOiBwYXJ0LnA7XG4gICAgICAvLyBIZXJlIHdlIGRlY2lkZSBpZiB0aGlzIHByb3BlcnR5IHdpbGwgYmUgYW4gYXJyYXkgb3IgYSBuZXcgb2JqZWN0XG4gICAgICBwcm9wVmFsID0gdHlwZW9mIG5leHQucCA9PT0gJ3VuZGVmaW5lZCcgPyBbXSA6IHt9O1xuICAgICAgdGVtcE9ialtwcm9wTmFtZV0gPSBwcm9wVmFsO1xuICAgICAgdGVtcE9iaiA9IHRlbXBPYmpbcHJvcE5hbWVdO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqICMjIyAuZ2V0UGF0aEluZm8ob2JqZWN0LCBwYXRoKVxuICpcbiAqIFRoaXMgYWxsb3dzIHRoZSByZXRyaWV2YWwgb2YgcHJvcGVydHkgaW5mbyBpbiBhblxuICogb2JqZWN0IGdpdmVuIGEgc3RyaW5nIHBhdGguXG4gKlxuICogVGhlIHBhdGggaW5mbyBjb25zaXN0cyBvZiBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICogcGFyZW50IC0gVGhlIHBhcmVudCBvYmplY3Qgb2YgdGhlIHByb3BlcnR5IHJlZmVyZW5jZWQgYnkgYHBhdGhgXG4gKiAqIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZmluYWwgcHJvcGVydHksIGEgbnVtYmVyIGlmIGl0IHdhcyBhbiBhcnJheSBpbmRleGVyXG4gKiAqIHZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSwgaWYgaXQgZXhpc3RzLCBvdGhlcndpc2UgYHVuZGVmaW5lZGBcbiAqICogZXhpc3RzIC0gV2hldGhlciB0aGUgcHJvcGVydHkgZXhpc3RzIG9yIG5vdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBpbmZvXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBnZXRQYXRoSW5mb1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBnZXRQYXRoSW5mbyhvYmosIHBhdGgpIHtcbiAgdmFyIHBhcnNlZCA9IHBhcnNlUGF0aChwYXRoKTtcbiAgdmFyIGxhc3QgPSBwYXJzZWRbcGFyc2VkLmxlbmd0aCAtIDFdO1xuICB2YXIgaW5mbyA9IHtcbiAgICBwYXJlbnQ6IHBhcnNlZC5sZW5ndGggPiAxID8gaW50ZXJuYWxHZXRQYXRoVmFsdWUob2JqLCBwYXJzZWQsIHBhcnNlZC5sZW5ndGggLSAxKSA6IG9iaixcbiAgICBuYW1lOiBsYXN0LnAgfHwgbGFzdC5pLFxuICAgIHZhbHVlOiBpbnRlcm5hbEdldFBhdGhWYWx1ZShvYmosIHBhcnNlZCksXG4gIH07XG4gIGluZm8uZXhpc3RzID0gaGFzUHJvcGVydHkoaW5mby5wYXJlbnQsIGluZm8ubmFtZSk7XG5cbiAgcmV0dXJuIGluZm87XG59XG5cbi8qKlxuICogIyMjIC5nZXRQYXRoVmFsdWUob2JqZWN0LCBwYXRoKVxuICpcbiAqIFRoaXMgYWxsb3dzIHRoZSByZXRyaWV2YWwgb2YgdmFsdWVzIGluIGFuXG4gKiBvYmplY3QgZ2l2ZW4gYSBzdHJpbmcgcGF0aC5cbiAqXG4gKiAgICAgdmFyIG9iaiA9IHtcbiAqICAgICAgICAgcHJvcDE6IHtcbiAqICAgICAgICAgICAgIGFycjogWydhJywgJ2InLCAnYyddXG4gKiAgICAgICAgICAgLCBzdHI6ICdIZWxsbydcbiAqICAgICAgICAgfVxuICogICAgICAgLCBwcm9wMjoge1xuICogICAgICAgICAgICAgYXJyOiBbIHsgbmVzdGVkOiAnVW5pdmVyc2UnIH0gXVxuICogICAgICAgICAgICwgc3RyOiAnSGVsbG8gYWdhaW4hJ1xuICogICAgICAgICB9XG4gKiAgICAgfVxuICpcbiAqIFRoZSBmb2xsb3dpbmcgd291bGQgYmUgdGhlIHJlc3VsdHMuXG4gKlxuICogICAgIGdldFBhdGhWYWx1ZShvYmosICdwcm9wMS5zdHInKTsgLy8gSGVsbG9cbiAqICAgICBnZXRQYXRoVmFsdWUob2JqLCAncHJvcDEuYXR0WzJdJyk7IC8vIGJcbiAqICAgICBnZXRQYXRoVmFsdWUob2JqLCAncHJvcDIuYXJyWzBdLm5lc3RlZCcpOyAvLyBVbml2ZXJzZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB2YWx1ZSBvciBgdW5kZWZpbmVkYFxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZ2V0UGF0aFZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGdldFBhdGhWYWx1ZShvYmosIHBhdGgpIHtcbiAgdmFyIGluZm8gPSBnZXRQYXRoSW5mbyhvYmosIHBhdGgpO1xuICByZXR1cm4gaW5mby52YWx1ZTtcbn1cblxuLyoqXG4gKiAjIyMgLnNldFBhdGhWYWx1ZShvYmplY3QsIHBhdGgsIHZhbHVlKVxuICpcbiAqIERlZmluZSB0aGUgdmFsdWUgaW4gYW4gb2JqZWN0IGF0IGEgZ2l2ZW4gc3RyaW5nIHBhdGguXG4gKlxuICogYGBganNcbiAqIHZhciBvYmogPSB7XG4gKiAgICAgcHJvcDE6IHtcbiAqICAgICAgICAgYXJyOiBbJ2EnLCAnYicsICdjJ11cbiAqICAgICAgICwgc3RyOiAnSGVsbG8nXG4gKiAgICAgfVxuICogICAsIHByb3AyOiB7XG4gKiAgICAgICAgIGFycjogWyB7IG5lc3RlZDogJ1VuaXZlcnNlJyB9IF1cbiAqICAgICAgICwgc3RyOiAnSGVsbG8gYWdhaW4hJ1xuICogICAgIH1cbiAqIH07XG4gKiBgYGBcbiAqXG4gKiBUaGUgZm9sbG93aW5nIHdvdWxkIGJlIGFjY2VwdGFibGUuXG4gKlxuICogYGBganNcbiAqIHZhciBwcm9wZXJ0aWVzID0gcmVxdWlyZSgndGVhLXByb3BlcnRpZXMnKTtcbiAqIHByb3BlcnRpZXMuc2V0KG9iaiwgJ3Byb3AxLnN0cicsICdIZWxsbyBVbml2ZXJzZSEnKTtcbiAqIHByb3BlcnRpZXMuc2V0KG9iaiwgJ3Byb3AxLmFyclsyXScsICdCJyk7XG4gKiBwcm9wZXJ0aWVzLnNldChvYmosICdwcm9wMi5hcnJbMF0ubmVzdGVkLnZhbHVlJywgeyBoZWxsbzogJ3VuaXZlcnNlJyB9KTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2V0UGF0aFZhbHVlKG9iaiwgcGF0aCwgdmFsKSB7XG4gIHZhciBwYXJzZWQgPSBwYXJzZVBhdGgocGF0aCk7XG4gIGludGVybmFsU2V0UGF0aFZhbHVlKG9iaiwgdmFsLCBwYXJzZWQpO1xuICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaGFzUHJvcGVydHk6IGhhc1Byb3BlcnR5LFxuICBnZXRQYXRoSW5mbzogZ2V0UGF0aEluZm8sXG4gIGdldFBhdGhWYWx1ZTogZ2V0UGF0aFZhbHVlLFxuICBzZXRQYXRoVmFsdWU6IHNldFBhdGhWYWx1ZSxcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLnR5cGVEZXRlY3QgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbi8qICFcbiAqIHR5cGUtZGV0ZWN0XG4gKiBDb3B5cmlnaHQoYykgMjAxMyBqYWtlIGx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG52YXIgcHJvbWlzZUV4aXN0cyA9IHR5cGVvZiBQcm9taXNlID09PSAnZnVuY3Rpb24nO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xudmFyIGdsb2JhbE9iamVjdCA9IHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyA/IHNlbGYgOiBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgaWQtYmxhY2tsaXN0XG5cbnZhciBzeW1ib2xFeGlzdHMgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJztcbnZhciBtYXBFeGlzdHMgPSB0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJztcbnZhciBzZXRFeGlzdHMgPSB0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJztcbnZhciB3ZWFrTWFwRXhpc3RzID0gdHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnO1xudmFyIHdlYWtTZXRFeGlzdHMgPSB0eXBlb2YgV2Vha1NldCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgZGF0YVZpZXdFeGlzdHMgPSB0eXBlb2YgRGF0YVZpZXcgIT09ICd1bmRlZmluZWQnO1xudmFyIHN5bWJvbEl0ZXJhdG9yRXhpc3RzID0gc3ltYm9sRXhpc3RzICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgIT09ICd1bmRlZmluZWQnO1xudmFyIHN5bWJvbFRvU3RyaW5nVGFnRXhpc3RzID0gc3ltYm9sRXhpc3RzICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgIT09ICd1bmRlZmluZWQnO1xudmFyIHNldEVudHJpZXNFeGlzdHMgPSBzZXRFeGlzdHMgJiYgdHlwZW9mIFNldC5wcm90b3R5cGUuZW50cmllcyA9PT0gJ2Z1bmN0aW9uJztcbnZhciBtYXBFbnRyaWVzRXhpc3RzID0gbWFwRXhpc3RzICYmIHR5cGVvZiBNYXAucHJvdG90eXBlLmVudHJpZXMgPT09ICdmdW5jdGlvbic7XG52YXIgc2V0SXRlcmF0b3JQcm90b3R5cGUgPSBzZXRFbnRyaWVzRXhpc3RzICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgU2V0KCkuZW50cmllcygpKTtcbnZhciBtYXBJdGVyYXRvclByb3RvdHlwZSA9IG1hcEVudHJpZXNFeGlzdHMgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBNYXAoKS5lbnRyaWVzKCkpO1xudmFyIGFycmF5SXRlcmF0b3JFeGlzdHMgPSBzeW1ib2xJdGVyYXRvckV4aXN0cyAmJiB0eXBlb2YgQXJyYXkucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG52YXIgYXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGFycmF5SXRlcmF0b3JFeGlzdHMgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSk7XG52YXIgc3RyaW5nSXRlcmF0b3JFeGlzdHMgPSBzeW1ib2xJdGVyYXRvckV4aXN0cyAmJiB0eXBlb2YgU3RyaW5nLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nO1xudmFyIHN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlID0gc3RyaW5nSXRlcmF0b3JFeGlzdHMgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSk7XG52YXIgdG9TdHJpbmdMZWZ0U2xpY2VMZW5ndGggPSA4O1xudmFyIHRvU3RyaW5nUmlnaHRTbGljZUxlbmd0aCA9IC0xO1xuLyoqXG4gKiAjIyMgdHlwZU9mIChvYmopXG4gKlxuICogVXNlcyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgdG8gZGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGFuIG9iamVjdCxcbiAqIG5vcm1hbGlzaW5nIGJlaGF2aW91ciBhY3Jvc3MgZW5naW5lIHZlcnNpb25zICYgd2VsbCBvcHRpbWlzZWQuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtTdHJpbmd9IG9iamVjdCB0eXBlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiB0eXBlRGV0ZWN0KG9iaikge1xuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAgKiBQcmU6XG4gICAqICAgc3RyaW5nIGxpdGVyYWwgICAgIHggMywwMzksMDM1IG9wcy9zZWMgwrExLjYyJSAoNzggcnVucyBzYW1wbGVkKVxuICAgKiAgIGJvb2xlYW4gbGl0ZXJhbCAgICB4IDEsNDI0LDEzOCBvcHMvc2VjIMKxNC41NCUgKDc1IHJ1bnMgc2FtcGxlZClcbiAgICogICBudW1iZXIgbGl0ZXJhbCAgICAgeCAxLDY1MywxNTMgb3BzL3NlYyDCsTEuOTElICg4MiBydW5zIHNhbXBsZWQpXG4gICAqICAgdW5kZWZpbmVkICAgICAgICAgIHggOSw5NzgsNjYwIG9wcy9zZWMgwrExLjkyJSAoNzUgcnVucyBzYW1wbGVkKVxuICAgKiAgIGZ1bmN0aW9uICAgICAgICAgICB4IDIsNTU2LDc2OSBvcHMvc2VjIMKxMS43MyUgKDc3IHJ1bnMgc2FtcGxlZClcbiAgICogUG9zdDpcbiAgICogICBzdHJpbmcgbGl0ZXJhbCAgICAgeCAzOCw1NjQsNzk2IG9wcy9zZWMgwrExLjE1JSAoNzkgcnVucyBzYW1wbGVkKVxuICAgKiAgIGJvb2xlYW4gbGl0ZXJhbCAgICB4IDMxLDE0OCw5NDAgb3BzL3NlYyDCsTEuMTAlICg3OSBydW5zIHNhbXBsZWQpXG4gICAqICAgbnVtYmVyIGxpdGVyYWwgICAgIHggMzIsNjc5LDMzMCBvcHMvc2VjIMKxMS45MCUgKDc4IHJ1bnMgc2FtcGxlZClcbiAgICogICB1bmRlZmluZWQgICAgICAgICAgeCAzMiwzNjMsMzY4IG9wcy9zZWMgwrExLjA3JSAoODIgcnVucyBzYW1wbGVkKVxuICAgKiAgIGZ1bmN0aW9uICAgICAgICAgICB4IDMxLDI5Niw4NzAgb3BzL3NlYyDCsTAuOTYlICg4MyBydW5zIHNhbXBsZWQpXG4gICAqL1xuICB2YXIgdHlwZW9mT2JqID0gdHlwZW9mIG9iajtcbiAgaWYgKHR5cGVvZk9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gdHlwZW9mT2JqO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgICogUHJlOlxuICAgKiAgIG51bGwgICAgICAgICAgICAgICB4IDI4LDY0NSw3NjUgb3BzL3NlYyDCsTEuMTclICg4MiBydW5zIHNhbXBsZWQpXG4gICAqIFBvc3Q6XG4gICAqICAgbnVsbCAgICAgICAgICAgICAgIHggMzYsNDI4LDk2MiBvcHMvc2VjIMKxMS4zNyUgKDg0IHJ1bnMgc2FtcGxlZClcbiAgICovXG4gIGlmIChvYmogPT09IG51bGwpIHtcbiAgICByZXR1cm4gJ251bGwnO1xuICB9XG5cbiAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2luZG93KWBgXG4gICAqICAtIE5vZGUgPT09IFwiW29iamVjdCBnbG9iYWxdXCJcbiAgICogIC0gQ2hyb21lID09PSBcIltvYmplY3QgZ2xvYmFsXVwiXG4gICAqICAtIEZpcmVmb3ggPT09IFwiW29iamVjdCBXaW5kb3ddXCJcbiAgICogIC0gUGhhbnRvbUpTID09PSBcIltvYmplY3QgV2luZG93XVwiXG4gICAqICAtIFNhZmFyaSA9PT0gXCJbb2JqZWN0IFdpbmRvd11cIlxuICAgKiAgLSBJRSAxMSA9PT0gXCJbb2JqZWN0IFdpbmRvd11cIlxuICAgKiAgLSBJRSBFZGdlID09PSBcIltvYmplY3QgV2luZG93XVwiXG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcylgYFxuICAgKiAgLSBDaHJvbWUgV29ya2VyID09PSBcIltvYmplY3QgZ2xvYmFsXVwiXG4gICAqICAtIEZpcmVmb3ggV29ya2VyID09PSBcIltvYmplY3QgRGVkaWNhdGVkV29ya2VyR2xvYmFsU2NvcGVdXCJcbiAgICogIC0gU2FmYXJpIFdvcmtlciA9PT0gXCJbb2JqZWN0IERlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlXVwiXG4gICAqICAtIElFIDExIFdvcmtlciA9PT0gXCJbb2JqZWN0IFdvcmtlckdsb2JhbFNjb3BlXVwiXG4gICAqICAtIElFIEVkZ2UgV29ya2VyID09PSBcIltvYmplY3QgV29ya2VyR2xvYmFsU2NvcGVdXCJcbiAgICovXG4gIGlmIChvYmogPT09IGdsb2JhbE9iamVjdCkge1xuICAgIHJldHVybiAnZ2xvYmFsJztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICAqIFByZTpcbiAgICogICBhcnJheSBsaXRlcmFsICAgICAgeCAyLDg4OCwzNTIgb3BzL3NlYyDCsTAuNjclICg4MiBydW5zIHNhbXBsZWQpXG4gICAqIFBvc3Q6XG4gICAqICAgYXJyYXkgbGl0ZXJhbCAgICAgIHggMjIsNDc5LDY1MCBvcHMvc2VjIMKxMC45NiUgKDgxIHJ1bnMgc2FtcGxlZClcbiAgICovXG4gIGlmIChcbiAgICBBcnJheS5pc0FycmF5KG9iaikgJiZcbiAgICAoc3ltYm9sVG9TdHJpbmdUYWdFeGlzdHMgPT09IGZhbHNlIHx8ICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIG9iaikpXG4gICkge1xuICAgIHJldHVybiAnQXJyYXknO1xuICB9XG5cbiAgLy8gTm90IGNhY2hpbmcgZXhpc3RlbmNlIG9mIGB3aW5kb3dgIGFuZCByZWxhdGVkIHByb3BlcnRpZXMgZHVlIHRvIHBvdGVudGlhbFxuICAvLyBmb3IgYHdpbmRvd2AgdG8gYmUgdW5zZXQgYmVmb3JlIHRlc3RzIGluIHF1YXNpLWJyb3dzZXIgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93ICE9PSBudWxsKSB7XG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Jyb3dzZXJzLmh0bWwjbG9jYXRpb24pXG4gICAgICogV2hhdFdHIEhUTUwkNy43LjMgLSBUaGUgYExvY2F0aW9uYCBpbnRlcmZhY2VcbiAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdpbmRvdy5sb2NhdGlvbilgYFxuICAgICAqICAtIElFIDw9MTEgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICAgKiAgLSBJRSBFZGdlIDw9MTMgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIHdpbmRvdy5sb2NhdGlvbiA9PT0gJ29iamVjdCcgJiYgb2JqID09PSB3aW5kb3cubG9jYXRpb24pIHtcbiAgICAgIHJldHVybiAnTG9jYXRpb24nO1xuICAgIH1cblxuICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAqIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNkb2N1bWVudClcbiAgICAgKiBXaGF0V0cgSFRNTCQzLjEuMSAtIFRoZSBgRG9jdW1lbnRgIG9iamVjdFxuICAgICAqIE5vdGU6IE1vc3QgYnJvd3NlcnMgY3VycmVudGx5IGFkaGVyIHRvIHRoZSBXM0MgRE9NIExldmVsIDIgc3BlY1xuICAgICAqICAgICAgIChodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItSFRNTC9odG1sLmh0bWwjSUQtMjY4MDkyNjgpXG4gICAgICogICAgICAgd2hpY2ggc3VnZ2VzdHMgdGhhdCBicm93c2VycyBzaG91bGQgdXNlIEhUTUxUYWJsZUNlbGxFbGVtZW50IGZvclxuICAgICAqICAgICAgIGJvdGggVEQgYW5kIFRIIGVsZW1lbnRzLiBXaGF0V0cgc2VwYXJhdGVzIHRoZXNlLlxuICAgICAqICAgICAgIFdoYXRXRyBIVE1MIHN0YXRlczpcbiAgICAgKiAgICAgICAgID4gRm9yIGhpc3RvcmljYWwgcmVhc29ucywgV2luZG93IG9iamVjdHMgbXVzdCBhbHNvIGhhdmUgYVxuICAgICAqICAgICAgICAgPiB3cml0YWJsZSwgY29uZmlndXJhYmxlLCBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lZFxuICAgICAqICAgICAgICAgPiBIVE1MRG9jdW1lbnQgd2hvc2UgdmFsdWUgaXMgdGhlIERvY3VtZW50IGludGVyZmFjZSBvYmplY3QuXG4gICAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkb2N1bWVudClgYFxuICAgICAqICAtIENocm9tZSA9PT0gXCJbb2JqZWN0IEhUTUxEb2N1bWVudF1cIlxuICAgICAqICAtIEZpcmVmb3ggPT09IFwiW29iamVjdCBIVE1MRG9jdW1lbnRdXCJcbiAgICAgKiAgLSBTYWZhcmkgPT09IFwiW29iamVjdCBIVE1MRG9jdW1lbnRdXCJcbiAgICAgKiAgLSBJRSA8PTEwID09PSBcIltvYmplY3QgRG9jdW1lbnRdXCJcbiAgICAgKiAgLSBJRSAxMSA9PT0gXCJbb2JqZWN0IEhUTUxEb2N1bWVudF1cIlxuICAgICAqICAtIElFIEVkZ2UgPD0xMyA9PT0gXCJbb2JqZWN0IEhUTUxEb2N1bWVudF1cIlxuICAgICAqL1xuICAgIGlmICh0eXBlb2Ygd2luZG93LmRvY3VtZW50ID09PSAnb2JqZWN0JyAmJiBvYmogPT09IHdpbmRvdy5kb2N1bWVudCkge1xuICAgICAgcmV0dXJuICdEb2N1bWVudCc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cubmF2aWdhdG9yID09PSAnb2JqZWN0Jykge1xuICAgICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI21pbWV0eXBlYXJyYXkpXG4gICAgICAgKiBXaGF0V0cgSFRNTCQ4LjYuMS41IC0gUGx1Z2lucyAtIEludGVyZmFjZSBNaW1lVHlwZUFycmF5XG4gICAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5hdmlnYXRvci5taW1lVHlwZXMpYGBcbiAgICAgICAqICAtIElFIDw9MTAgPT09IFwiW29iamVjdCBNU01pbWVUeXBlc0NvbGxlY3Rpb25dXCJcbiAgICAgICAqL1xuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cubmF2aWdhdG9yLm1pbWVUeXBlcyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICBvYmogPT09IHdpbmRvdy5uYXZpZ2F0b3IubWltZVR5cGVzKSB7XG4gICAgICAgIHJldHVybiAnTWltZVR5cGVBcnJheSc7XG4gICAgICB9XG5cbiAgICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3dlYmFwcGFwaXMuaHRtbCNwbHVnaW5hcnJheSlcbiAgICAgICAqIFdoYXRXRyBIVE1MJDguNi4xLjUgLSBQbHVnaW5zIC0gSW50ZXJmYWNlIFBsdWdpbkFycmF5XG4gICAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5hdmlnYXRvci5wbHVnaW5zKWBgXG4gICAgICAgKiAgLSBJRSA8PTEwID09PSBcIltvYmplY3QgTVNQbHVnaW5zQ29sbGVjdGlvbl1cIlxuICAgICAgICovXG4gICAgICBpZiAodHlwZW9mIHdpbmRvdy5uYXZpZ2F0b3IucGx1Z2lucyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICBvYmogPT09IHdpbmRvdy5uYXZpZ2F0b3IucGx1Z2lucykge1xuICAgICAgICByZXR1cm4gJ1BsdWdpbkFycmF5JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoKHR5cGVvZiB3aW5kb3cuSFRNTEVsZW1lbnQgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgdHlwZW9mIHdpbmRvdy5IVE1MRWxlbWVudCA9PT0gJ29iamVjdCcpICYmXG4gICAgICAgIG9iaiBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCkge1xuICAgICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICAqIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS93ZWJhcHBhcGlzLmh0bWwjcGx1Z2luYXJyYXkpXG4gICAgICAqIFdoYXRXRyBIVE1MJDQuNC40IC0gVGhlIGBibG9ja3F1b3RlYCBlbGVtZW50IC0gSW50ZXJmYWNlIGBIVE1MUXVvdGVFbGVtZW50YFxuICAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Jsb2NrcXVvdGUnKSlgYFxuICAgICAgKiAgLSBJRSA8PTEwID09PSBcIltvYmplY3QgSFRNTEJsb2NrRWxlbWVudF1cIlxuICAgICAgKi9cbiAgICAgIGlmIChvYmoudGFnTmFtZSA9PT0gJ0JMT0NLUVVPVEUnKSB7XG4gICAgICAgIHJldHVybiAnSFRNTFF1b3RlRWxlbWVudCc7XG4gICAgICB9XG5cbiAgICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI2h0bWx0YWJsZWRhdGFjZWxsZWxlbWVudClcbiAgICAgICAqIFdoYXRXRyBIVE1MJDQuOS45IC0gVGhlIGB0ZGAgZWxlbWVudCAtIEludGVyZmFjZSBgSFRNTFRhYmxlRGF0YUNlbGxFbGVtZW50YFxuICAgICAgICogTm90ZTogTW9zdCBicm93c2VycyBjdXJyZW50bHkgYWRoZXIgdG8gdGhlIFczQyBET00gTGV2ZWwgMiBzcGVjXG4gICAgICAgKiAgICAgICAoaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUhUTUwvaHRtbC5odG1sI0lELTgyOTE1MDc1KVxuICAgICAgICogICAgICAgd2hpY2ggc3VnZ2VzdHMgdGhhdCBicm93c2VycyBzaG91bGQgdXNlIEhUTUxUYWJsZUNlbGxFbGVtZW50IGZvclxuICAgICAgICogICAgICAgYm90aCBURCBhbmQgVEggZWxlbWVudHMuIFdoYXRXRyBzZXBhcmF0ZXMgdGhlc2UuXG4gICAgICAgKiBUZXN0OiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKSlcbiAgICAgICAqICAtIENocm9tZSA9PT0gXCJbb2JqZWN0IEhUTUxUYWJsZUNlbGxFbGVtZW50XVwiXG4gICAgICAgKiAgLSBGaXJlZm94ID09PSBcIltvYmplY3QgSFRNTFRhYmxlQ2VsbEVsZW1lbnRdXCJcbiAgICAgICAqICAtIFNhZmFyaSA9PT0gXCJbb2JqZWN0IEhUTUxUYWJsZUNlbGxFbGVtZW50XVwiXG4gICAgICAgKi9cbiAgICAgIGlmIChvYmoudGFnTmFtZSA9PT0gJ1REJykge1xuICAgICAgICByZXR1cm4gJ0hUTUxUYWJsZURhdGFDZWxsRWxlbWVudCc7XG4gICAgICB9XG5cbiAgICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI2h0bWx0YWJsZWhlYWRlcmNlbGxlbGVtZW50KVxuICAgICAgICogV2hhdFdHIEhUTUwkNC45LjkgLSBUaGUgYHRkYCBlbGVtZW50IC0gSW50ZXJmYWNlIGBIVE1MVGFibGVIZWFkZXJDZWxsRWxlbWVudGBcbiAgICAgICAqIE5vdGU6IE1vc3QgYnJvd3NlcnMgY3VycmVudGx5IGFkaGVyIHRvIHRoZSBXM0MgRE9NIExldmVsIDIgc3BlY1xuICAgICAgICogICAgICAgKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1IVE1ML2h0bWwuaHRtbCNJRC04MjkxNTA3NSlcbiAgICAgICAqICAgICAgIHdoaWNoIHN1Z2dlc3RzIHRoYXQgYnJvd3NlcnMgc2hvdWxkIHVzZSBIVE1MVGFibGVDZWxsRWxlbWVudCBmb3JcbiAgICAgICAqICAgICAgIGJvdGggVEQgYW5kIFRIIGVsZW1lbnRzLiBXaGF0V0cgc2VwYXJhdGVzIHRoZXNlLlxuICAgICAgICogVGVzdDogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJykpXG4gICAgICAgKiAgLSBDaHJvbWUgPT09IFwiW29iamVjdCBIVE1MVGFibGVDZWxsRWxlbWVudF1cIlxuICAgICAgICogIC0gRmlyZWZveCA9PT0gXCJbb2JqZWN0IEhUTUxUYWJsZUNlbGxFbGVtZW50XVwiXG4gICAgICAgKiAgLSBTYWZhcmkgPT09IFwiW29iamVjdCBIVE1MVGFibGVDZWxsRWxlbWVudF1cIlxuICAgICAgICovXG4gICAgICBpZiAob2JqLnRhZ05hbWUgPT09ICdUSCcpIHtcbiAgICAgICAgcmV0dXJuICdIVE1MVGFibGVIZWFkZXJDZWxsRWxlbWVudCc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICBGbG9hdDY0QXJyYXkgICAgICAgeCA2MjUsNjQ0IG9wcy9zZWMgwrExLjU4JSAoODAgcnVucyBzYW1wbGVkKVxuICAqICAgRmxvYXQzMkFycmF5ICAgICAgIHggMSwyNzksODUyIG9wcy9zZWMgwrEyLjkxJSAoNzcgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDMyQXJyYXkgICAgICAgIHggMSwxNzgsMTg1IG9wcy9zZWMgwrExLjk1JSAoODMgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDE2QXJyYXkgICAgICAgIHggMSwwMDgsMzgwIG9wcy9zZWMgwrEyLjI1JSAoODAgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDhBcnJheSAgICAgICAgIHggMSwxMjgsMDQwIG9wcy9zZWMgwrEyLjExJSAoODEgcnVucyBzYW1wbGVkKVxuICAqICAgSW50MzJBcnJheSAgICAgICAgIHggMSwxNzAsMTE5IG9wcy9zZWMgwrEyLjg4JSAoODAgcnVucyBzYW1wbGVkKVxuICAqICAgSW50MTZBcnJheSAgICAgICAgIHggMSwxNzYsMzQ4IG9wcy9zZWMgwrE1Ljc5JSAoODYgcnVucyBzYW1wbGVkKVxuICAqICAgSW50OEFycmF5ICAgICAgICAgIHggMSwwNTgsNzA3IG9wcy9zZWMgwrE0Ljk0JSAoNzcgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDhDbGFtcGVkQXJyYXkgIHggMSwxMTAsNjMzIG9wcy9zZWMgwrE0LjIwJSAoODAgcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICBGbG9hdDY0QXJyYXkgICAgICAgeCA3LDEwNSw2NzEgb3BzL3NlYyDCsTEzLjQ3JSAoNjQgcnVucyBzYW1wbGVkKVxuICAqICAgRmxvYXQzMkFycmF5ICAgICAgIHggNSw4ODcsOTEyIG9wcy9zZWMgwrExLjQ2JSAoODIgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDMyQXJyYXkgICAgICAgIHggNiw0OTEsNjYxIG9wcy9zZWMgwrExLjc2JSAoNzkgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDE2QXJyYXkgICAgICAgIHggNiw1NTksNzk1IG9wcy9zZWMgwrExLjY3JSAoODIgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDhBcnJheSAgICAgICAgIHggNiw0NjMsOTY2IG9wcy9zZWMgwrExLjQzJSAoODUgcnVucyBzYW1wbGVkKVxuICAqICAgSW50MzJBcnJheSAgICAgICAgIHggNSw2NDEsODQxIG9wcy9zZWMgwrEzLjQ5JSAoODEgcnVucyBzYW1wbGVkKVxuICAqICAgSW50MTZBcnJheSAgICAgICAgIHggNiw1ODMsNTExIG9wcy9zZWMgwrExLjk4JSAoODAgcnVucyBzYW1wbGVkKVxuICAqICAgSW50OEFycmF5ICAgICAgICAgIHggNiw2MDYsMDc4IG9wcy9zZWMgwrExLjc0JSAoODEgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDhDbGFtcGVkQXJyYXkgIHggNiw2MDIsMjI0IG9wcy9zZWMgwrExLjc3JSAoODMgcnVucyBzYW1wbGVkKVxuICAqL1xuICB2YXIgc3RyaW5nVGFnID0gKHN5bWJvbFRvU3RyaW5nVGFnRXhpc3RzICYmIG9ialtTeW1ib2wudG9TdHJpbmdUYWddKTtcbiAgaWYgKHR5cGVvZiBzdHJpbmdUYWcgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHN0cmluZ1RhZztcbiAgfVxuXG4gIHZhciBvYmpQcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKTtcbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICByZWdleCBsaXRlcmFsICAgICAgeCAxLDc3MiwzODUgb3BzL3NlYyDCsTEuODUlICg3NyBydW5zIHNhbXBsZWQpXG4gICogICByZWdleCBjb25zdHJ1Y3RvciAgeCAyLDE0Myw2MzQgb3BzL3NlYyDCsTIuNDYlICg3OCBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIHJlZ2V4IGxpdGVyYWwgICAgICB4IDMsOTI4LDAwOSBvcHMvc2VjIMKxMC42NSUgKDc4IHJ1bnMgc2FtcGxlZClcbiAgKiAgIHJlZ2V4IGNvbnN0cnVjdG9yICB4IDMsOTMxLDEwOCBvcHMvc2VjIMKxMC41OCUgKDg0IHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgaWYgKG9ialByb3RvdHlwZSA9PT0gUmVnRXhwLnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnUmVnRXhwJztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgZGF0ZSAgICAgICAgICAgICAgIHggMiwxMzAsMDc0IG9wcy9zZWMgwrE0LjQyJSAoNjggcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICBkYXRlICAgICAgICAgICAgICAgeCAzLDk1Myw3Nzkgb3BzL3NlYyDCsTEuMzUlICg3NyBydW5zIHNhbXBsZWQpXG4gICovXG4gIGlmIChvYmpQcm90b3R5cGUgPT09IERhdGUucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdEYXRlJztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiAoaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1sI3NlYy1wcm9taXNlLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnKVxuICAgKiBFUzYkMjUuNC41LjQgLSBQcm9taXNlLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXSBzaG91bGQgYmUgXCJQcm9taXNlXCI6XG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUHJvbWlzZS5yZXNvbHZlKCkpYGBcbiAgICogIC0gQ2hyb21lIDw9NDcgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICogIC0gRWRnZSA8PTIwID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqICAtIEZpcmVmb3ggMjktTGF0ZXN0ID09PSBcIltvYmplY3QgUHJvbWlzZV1cIlxuICAgKiAgLSBTYWZhcmkgNy4xLUxhdGVzdCA9PT0gXCJbb2JqZWN0IFByb21pc2VdXCJcbiAgICovXG4gIGlmIChwcm9taXNlRXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gUHJvbWlzZS5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ1Byb21pc2UnO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICBzZXQgICAgICAgICAgICAgICAgeCAyLDIyMiwxODYgb3BzL3NlYyDCsTEuMzElICg4MiBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIHNldCAgICAgICAgICAgICAgICB4IDQsNTQ1LDg3OSBvcHMvc2VjIMKxMS4xMyUgKDgzIHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgaWYgKHNldEV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IFNldC5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ1NldCc7XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAqIFByZTpcbiAgKiAgIG1hcCAgICAgICAgICAgICAgICB4IDIsMzk2LDg0MiBvcHMvc2VjIMKxMS41OSUgKDgxIHJ1bnMgc2FtcGxlZClcbiAgKiBQb3N0OlxuICAqICAgbWFwICAgICAgICAgICAgICAgIHggNCwxODMsOTQ1IG9wcy9zZWMgwrE2LjU5JSAoODIgcnVucyBzYW1wbGVkKVxuICAqL1xuICBpZiAobWFwRXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gTWFwLnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnTWFwJztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgd2Vha3NldCAgICAgICAgICAgIHggMSwzMjMsMjIwIG9wcy9zZWMgwrEyLjE3JSAoNzYgcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICB3ZWFrc2V0ICAgICAgICAgICAgeCA0LDIzNyw1MTAgb3BzL3NlYyDCsTIuMDElICg3NyBydW5zIHNhbXBsZWQpXG4gICovXG4gIGlmICh3ZWFrU2V0RXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gV2Vha1NldC5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ1dlYWtTZXQnO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICB3ZWFrbWFwICAgICAgICAgICAgeCAxLDUwMCwyNjAgb3BzL3NlYyDCsTIuMDIlICg3OCBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIHdlYWttYXAgICAgICAgICAgICB4IDMsODgxLDM4NCBvcHMvc2VjIMKxMS40NSUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgaWYgKHdlYWtNYXBFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBXZWFrTWFwLnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnV2Vha01hcCc7XG4gIH1cblxuICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICogKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvaW5kZXguaHRtbCNzZWMtZGF0YXZpZXcucHJvdG90eXBlLUBAdG9zdHJpbmd0YWcpXG4gICAqIEVTNiQyNC4yLjQuMjEgLSBEYXRhVmlldy5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiRGF0YVZpZXdcIjpcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSlgYFxuICAgKiAgLSBFZGdlIDw9MTMgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICovXG4gIGlmIChkYXRhVmlld0V4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IERhdGFWaWV3LnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnRGF0YVZpZXcnO1xuICB9XG5cbiAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAqIChodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wL2luZGV4Lmh0bWwjc2VjLSVtYXBpdGVyYXRvcnByb3RvdHlwZSUtQEB0b3N0cmluZ3RhZylcbiAgICogRVM2JDIzLjEuNS4yLjIgLSAlTWFwSXRlcmF0b3JQcm90b3R5cGUlW0BAdG9TdHJpbmdUYWddIHNob3VsZCBiZSBcIk1hcCBJdGVyYXRvclwiOlxuICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ldyBNYXAoKS5lbnRyaWVzKCkpYGBcbiAgICogIC0gRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqL1xuICBpZiAobWFwRXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gbWFwSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ01hcCBJdGVyYXRvcic7XG4gIH1cblxuICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICogKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvaW5kZXguaHRtbCNzZWMtJXNldGl0ZXJhdG9ycHJvdG90eXBlJS1AQHRvc3RyaW5ndGFnKVxuICAgKiBFUzYkMjMuMi41LjIuMiAtICVTZXRJdGVyYXRvclByb3RvdHlwZSVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiU2V0IEl0ZXJhdG9yXCI6XG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3IFNldCgpLmVudHJpZXMoKSlgYFxuICAgKiAgLSBFZGdlIDw9MTMgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICovXG4gIGlmIChzZXRFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBzZXRJdGVyYXRvclByb3RvdHlwZSkge1xuICAgIHJldHVybiAnU2V0IEl0ZXJhdG9yJztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiAoaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1sI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUtQEB0b3N0cmluZ3RhZylcbiAgICogRVM2JDIyLjEuNS4yLjIgLSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiQXJyYXkgSXRlcmF0b3JcIjpcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChbXVtTeW1ib2wuaXRlcmF0b3JdKCkpYGBcbiAgICogIC0gRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqL1xuICBpZiAoYXJyYXlJdGVyYXRvckV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IGFycmF5SXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ0FycmF5IEl0ZXJhdG9yJztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiAoaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1sI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLUBAdG9zdHJpbmd0YWcpXG4gICAqIEVTNiQyMS4xLjUuMi4yIC0gJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJVtAQHRvU3RyaW5nVGFnXSBzaG91bGQgYmUgXCJTdHJpbmcgSXRlcmF0b3JcIjpcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCgnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpYGBcbiAgICogIC0gRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqL1xuICBpZiAoc3RyaW5nSXRlcmF0b3JFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBzdHJpbmdJdGVyYXRvclByb3RvdHlwZSkge1xuICAgIHJldHVybiAnU3RyaW5nIEl0ZXJhdG9yJztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgb2JqZWN0IGZyb20gbnVsbCAgIHggMiw0MjQsMzIwIG9wcy9zZWMgwrExLjY3JSAoNzYgcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICBvYmplY3QgZnJvbSBudWxsICAgeCA1LDgzOCwwMDAgb3BzL3NlYyDCsTAuOTklICg4NCBydW5zIHNhbXBsZWQpXG4gICovXG4gIGlmIChvYmpQcm90b3R5cGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gJ09iamVjdCc7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0XG4gICAgLnByb3RvdHlwZVxuICAgIC50b1N0cmluZ1xuICAgIC5jYWxsKG9iailcbiAgICAuc2xpY2UodG9TdHJpbmdMZWZ0U2xpY2VMZW5ndGgsIHRvU3RyaW5nUmlnaHRTbGljZUxlbmd0aCk7XG59XG5cbnJldHVybiB0eXBlRGV0ZWN0O1xuXG59KSkpO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qKlxuICogY2FzY2FkZS5qc1xuICovXG5cbmltcG9ydCB7T3BlblBHUH0gZnJvbSAnLi9zdWl0ZV9vcGVucGdwLmpzJztcbmltcG9ydCB7SnNjdX0gZnJvbSAnLi9zdWl0ZV9qc2N1LmpzJztcbmltcG9ydCB7Z2VuZXJhdGVLZXlPYmplY3QsIGltcG9ydEtleXMsIEtleXN9IGZyb20gJy4va2V5cy5qcyc7XG5pbXBvcnQge1NpZ25hdHVyZX0gZnJvbSAnLi9zaWduYXR1cmUuanMnO1xuaW1wb3J0IHtDYXNjYWRlZERhdGEsIGNyZWF0ZUNhc2NhZGVkRGF0YX0gZnJvbSAnLi9jYXNjYWRlZF9kYXRhLmpzJztcbmltcG9ydCAqIGFzIGNvcmUgZnJvbSAnLi9jb3JlLmpzJztcbmltcG9ydCBjbG9uZURlZXAgZnJvbSAnbG9kYXNoLmNsb25lZGVlcCc7Ly8nbG9kYXNoL2Nsb25lRGVlcCc7XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUVuY3J5cHRpb25DYXNjYWRlKHtrZXlzLCBwcm9jZWR1cmV9KXtcbiAgY29uc3QgbG9jYWxLZXlzID0gY2xvbmVEZWVwKGtleXMpO1xuICBjb25zdCBsb2NhbFByb2NlZHVyZSA9IHByb2NlZHVyZS5tYXAoICh4KSA9PiBjbG9uZURlZXAoeCkpO1xuXG4gIGNvbnN0IGNhc2NhZGUgPSBuZXcgQ2FzY2FkZSgpO1xuICBjYXNjYWRlLl9pbml0KHttb2RlOiAnZW5jcnlwdCcsIGtleXM6IGxvY2FsS2V5cywgcHJvY2VkdXJlOiBsb2NhbFByb2NlZHVyZX0pO1xuICBhd2FpdCBjYXNjYWRlLl9pbml0RW5jcnlwdGlvblByb2NlZHVyZSgpO1xuXG4gIHJldHVybiBjYXNjYWRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVjcnlwdGlvbkNhc2NhZGUoe2tleXMsIGVuY3J5cHRlZH0pe1xuICBjb25zdCBsb2NhbEtleXMgPSBjbG9uZURlZXAoa2V5cyk7XG5cbiAgY29uc3QgY2FzY2FkZSA9IG5ldyBDYXNjYWRlKCk7XG4gIGNhc2NhZGUuX2luaXQoe21vZGU6ICdkZWNyeXB0Jywga2V5czogbG9jYWxLZXlzLCBlbmNyeXB0ZWR9KTtcbiAgY2FzY2FkZS5faW5pdERlY3J5cHRpb25Qcm9jZWR1cmUoKTtcblxuICByZXR1cm4gY2FzY2FkZTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmNvbnN0IG1vZGVzID0gWydlbmNyeXB0JywgJ2RlY3J5cHQnXTtcbmNsYXNzIENhc2NhZGUgZXh0ZW5kcyBBcnJheSB7XG4gIF9pbml0KHttb2RlLCBrZXlzLCBwcm9jZWR1cmUsIGVuY3J5cHRlZH0pe1xuICAgIC8vIGFzc2VydGlvbnNcbiAgICBpZiAobW9kZXMuaW5kZXhPZihtb2RlKSA8IDApIHRocm93IG5ldyBFcnJvcignSW52YWxpZE1vZGUnKTtcbiAgICBpZiAoIShrZXlzIGluc3RhbmNlb2YgS2V5cykpIHRocm93IG5ldyBFcnJvcignTm90S2V5T2JqZWN0Jyk7XG4gICAgaWYgKGtleXMubW9kZS5pbmRleE9mKG1vZGUpIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdVbm1hdGNoZWRLZXlNb2RlJyk7XG5cbiAgICB0aGlzLl9jYXNjYWRlTW9kZSA9IG1vZGU7XG4gICAgdGhpcy5fb3JnS2V5cyA9IGtleXM7XG5cbiAgICBpZiAobW9kZSA9PT0gJ2VuY3J5cHQnKSB7XG4gICAgICBpZiAoIShwcm9jZWR1cmUgaW5zdGFuY2VvZiBBcnJheSkpIHRocm93IG5ldyBFcnJvcignTm90QXJyYXlQcm9jZWR1cmUnKTtcbiAgICAgIGNvbnN0IGluaXRpYWwgPSBwcm9jZWR1cmUubWFwKCAoY29uZmlnKSA9PiB7XG4gICAgICAgIGlmKHR5cGVvZiBjb25maWcuZW5jcnlwdCA9PT0gJ3VuZGVmaW5lZCcpIHRocm93IG5ldyBFcnJvcignSW52YWxpZFByb2NlZHVyZScpO1xuICAgICAgICByZXR1cm4ge2NvbmZpZ307XG4gICAgICB9KTtcbiAgICAgIHRoaXMucHVzaCguLi5pbml0aWFsKTtcbiAgICB9XG5cbiAgICBpZiAobW9kZSA9PT0gJ2RlY3J5cHQnKSB7XG4gICAgICBpZiAoIShlbmNyeXB0ZWQgaW5zdGFuY2VvZiBDYXNjYWRlZERhdGEpKSB0aHJvdyBuZXcgRXJyb3IoJ05vdENhc2NhZGVkRW5jcnlwdGVkRGF0YScpO1xuICAgICAgY29uc3QgaW5pdGlhbCA9IGVuY3J5cHRlZC5tYXAoIChlbmNyeXB0ZWRPYmplY3QpID0+IHtcbiAgICAgICAgaWYodHlwZW9mIGVuY3J5cHRlZE9iamVjdC5tZXNzYWdlID09PSAndW5kZWZpbmVkJykgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkRW5jcnlwdGVkTWVzc2FnZScpO1xuICAgICAgICByZXR1cm4ge2RhdGE6IGVuY3J5cHRlZE9iamVjdH07XG4gICAgICB9KTtcbiAgICAgIHRoaXMucHVzaCguLi5pbml0aWFsKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgb3JpZ2luYWwga2V5IHRvIHRoZSBmaW5hbCBzdGVwIGluIHRoZSBwcm9jZWR1cmVcbiAgICB0aGlzW3RoaXMubGVuZ3RoIC0gMV0ua2V5cyA9IHRoaXMuX29yZ0tleXM7XG4gIH1cblxuICBhc3luYyBfaW5pdEVuY3J5cHRpb25Qcm9jZWR1cmUoKXtcbiAgICAvLyBleHBvcnQgc2lnbmluZ0tleSBmb3IgcHJlY2VkZW5jZVxuICAgIGNvbnN0IHNpZ25pbmdLZXlzID0gdGhpcy5fb3JnS2V5cy5rZXlzLnByaXZhdGVLZXlzO1xuXG4gICAgY29uc3QgcHJlY2VkZW5jZSA9IHRoaXMuc2xpY2UoMCwgdGhpcy5sZW5ndGggLTEpO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKHByZWNlZGVuY2UubWFwKCBhc3luYyAocHJvYywgaWR4KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHByb2MuY29uZmlnLmVuY3J5cHQub25ldGltZUtleSA9PT0gJ3VuZGVmaW5lZCcpIHRocm93IG5ldyBFcnJvcignTm9LZXlQYXJhbXNHaXZlbicpO1xuXG4gICAgICBjb25zdCBzdWl0ZU9iamVjdCA9IHtlbmNyeXB0X2RlY3J5cHQ6IHByb2MuY29uZmlnLmVuY3J5cHQuc3VpdGV9O1xuICAgICAgY29uc3QgbW9kZUFycmF5ID0gWydlbmNyeXB0J107XG5cbiAgICAgIC8vIGtleSBnZW5lcmF0aW9uIGZvciBlbmNyeXB0aW9uIGF0IHRoaXMgc3RlcFxuICAgICAgY29uc3Qga2V5UGFyYW1zID0gT2JqZWN0LmFzc2lnbih7IHN1aXRlOiBwcm9jLmNvbmZpZy5lbmNyeXB0LnN1aXRlfSwgcHJvYy5jb25maWcuZW5jcnlwdC5vbmV0aW1lS2V5KTtcbiAgICAgIGRlbGV0ZSBwcm9jLmNvbmZpZy5lbmNyeXB0Lm9uZXRpbWVLZXk7XG4gICAgICBjb25zdCBvbmV0aW1lS2V5ID0gYXdhaXQgZ2VuZXJhdGVLZXlPYmplY3Qoa2V5UGFyYW1zKTsgLy8gZ2VuZXJhdGUga2V5c1xuICAgICAgY29uc3Qgb25ldGltZUtleU9iamVjdCA9IChrZXlQYXJhbXMua2V5UGFyYW1zLnR5cGUgPT09ICdzZXNzaW9uJylcbiAgICAgICAgPyB7c2Vzc2lvbktleTogb25ldGltZUtleS5rZXl9XG4gICAgICAgIDoge3B1YmxpY0tleXM6IFtvbmV0aW1lS2V5LnB1YmxpY0tleV19O1xuXG4gICAgICAvLyBtZXNzYWdlIGZvciBlbmNyeXB0aW9uIGF0IG5leHQgc3RlcC5cbiAgICAgIC8vIFtOT1RFXSBtZXNzYWdlIGZvciB0aGUgZmlyc3Qgc3RlcCBpcyBkaXJlY3RseSBnaXZlbiBtZXNzYWdlIHRvIGJlIGVuY3J5cHRlZCwgb3RoZXJ3aXNlLCBwcmV2aW91cyBwcml2YXRlL3Nlc3Npb24ga2V5cztcbiAgICAgIGxldCBuZXh0U3RlcE1lc3NhZ2U7XG4gICAgICBpZiAoa2V5UGFyYW1zLmtleVBhcmFtcy50eXBlID09PSAnc2Vzc2lvbicpIG5leHRTdGVwTWVzc2FnZSA9IG9uZXRpbWVLZXkua2V5O1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChrZXlQYXJhbXMuc3VpdGUgPT09ICdqc2N1JykgbmV4dFN0ZXBNZXNzYWdlID0gYXdhaXQgb25ldGltZUtleS5wcml2YXRlS2V5LmV4cG9ydCgnZGVyJyk7XG4gICAgICAgIGVsc2UgaWYgKGtleVBhcmFtcy5zdWl0ZSA9PT0gJ29wZW5wZ3AnKSBuZXh0U3RlcE1lc3NhZ2UgPSBvbmV0aW1lS2V5LnByaXZhdGVLZXkudG9QYWNrZXRsaXN0KCkud3JpdGUoKTtcbiAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd25TdWl0ZScpO1xuICAgICAgfVxuICAgICAgdGhpc1tpZHgrMV0ubWVzc2FnZSA9IG5leHRTdGVwTWVzc2FnZTtcblxuICAgICAgLy8gdXBkYXRlZCBjb25maWcgYW5kIGtleSBvYmplY3QgZm9yIHNpZ25pbmcgYW5kIGtleSBpbXBvcnRcbiAgICAgIGlmICh0eXBlb2YgcHJvYy5jb25maWcuc2lnbiAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvYy5jb25maWcuc2lnbi5yZXF1aXJlZCl7XG4gICAgICAgIHByb2MuY29uZmlnLnNpZ24gPSBPYmplY3QuYXNzaWduKHByb2MuY29uZmlnLnNpZ24sIHRoaXNbdGhpcy5sZW5ndGgtMV0uY29uZmlnLnNpZ24pO1xuICAgICAgICBvbmV0aW1lS2V5T2JqZWN0LnByaXZhdGVLZXlzID0gc2lnbmluZ0tleXM7XG4gICAgICAgIHN1aXRlT2JqZWN0LnNpZ25fdmVyaWZ5ID0gcHJvYy5jb25maWcuc2lnbi5zdWl0ZTtcbiAgICAgICAgbW9kZUFycmF5LnB1c2goJ3NpZ24nKTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tpZHhdLmtleXMgPSBhd2FpdCBpbXBvcnRLZXlzKCdvYmplY3QnLCB7a2V5czpvbmV0aW1lS2V5T2JqZWN0LCBzdWl0ZTogc3VpdGVPYmplY3QsIG1vZGU6IG1vZGVBcnJheX0pO1xuICAgIH0pKTtcbiAgfVxuXG4gIF9pbml0RGVjcnlwdGlvblByb2NlZHVyZSgpe1xuICAgIC8vIGRvIG5vdGhpbmcgYXQgdGhpcyBwb2ludFxuICB9XG5cbiAgYXN5bmMgZW5jcnlwdChtZXNzYWdlKXtcbiAgICBpZih0aGlzLl9jYXNjYWRlTW9kZSAhPT0gJ2VuY3J5cHQnKSB0aHJvdyBuZXcgRXJyb3IoJ05vdEVuY3J5cHRpb25DYXNjYWRlJyk7XG4gICAgaWYoIShtZXNzYWdlIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHRocm93IG5ldyBFcnJvcignTm90VWludDhBcnJheU1lc3NhZ2UnKTtcblxuICAgIC8vIHNldCBnaXZlbiBtZXNzYWdlIGFzIHRoZSBmaXJzdCBzdGVwIG1lc3NhZ2VcbiAgICB0aGlzWzBdLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IFByb21pc2UuYWxsKHRoaXMubWFwKCAocHJvYykgPT4gY29yZS5lbmNyeXB0KHByb2MpKSk7XG4gICAgcmV0dXJuIGNyZWF0ZUNhc2NhZGVkRGF0YShkYXRhKTtcbiAgfVxuXG4gIGFzeW5jIGRlY3J5cHQoKXtcbiAgICBpZih0aGlzLl9jYXNjYWRlTW9kZSAhPT0gJ2RlY3J5cHQnKSB0aHJvdyBuZXcgRXJyb3IoJ05vdERlY3J5cHRpb25DYXNjYWRlJyk7XG5cbiAgICAvLyBleHBvcnQgdmVyaWZpY2F0aW9uS2V5IGZvciBwcmVjZWRlbmNlXG4gICAgY29uc3QgdmVyaWZpY2F0aW9uS2V5cyA9IHRoaXMuX29yZ0tleXMua2V5cy5wdWJsaWNLZXlzO1xuXG4gICAgLy8gc2VyaWFsaXplZCBkZWNyeXB0aW9uXG4gICAgY29uc3QgZGVjcnlwdGVkID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IobGV0IGlkeCA9IHRoaXMubGVuZ3RoLTE7IGlkeCA+PSAwOyBpZHgtLSkge1xuICAgICAgaWYgKCEodGhpc1tpZHhdLmtleXMgaW5zdGFuY2VvZiBLZXlzKSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkS2V5c09iamVjdCcpO1xuICAgICAgaWYgKHR5cGVvZiB0aGlzW2lkeF0uZGF0YSA9PT0gJ3VuZGVmaW5lZCcpIHRocm93IG5ldyBFcnJvcignSW52YWxpZERhdGFPYmplY3QnKTtcblxuICAgICAgZGVjcnlwdGVkW2lkeF0gPSBhd2FpdCBjb3JlLmRlY3J5cHQodGhpc1tpZHhdKTtcblxuICAgICAgLy8gYXNzaWduIGRlY3J5cHRlZCBtZXNzYWdlIGFzIHByZXZpb3VzIHN0ZXAgZGVjcnlwdGlvbiBrZXlcbiAgICAgIGlmKGlkeCA+IDApe1xuICAgICAgICBjb25zdCBzdWl0ZU9iamVjdCA9IHtlbmNyeXB0X2RlY3J5cHQ6IHRoaXNbaWR4LTFdLmRhdGEubWVzc2FnZS5zdWl0ZX07XG4gICAgICAgIGNvbnN0IG1vZGVBcnJheSA9IFsnZGVjcnlwdCddO1xuXG4gICAgICAgIGxldCBuZXh0RGVjcnlwdGlvbktleU9iamVjdDtcbiAgICAgICAgaWYgKHRoaXNbaWR4LTFdLmRhdGEubWVzc2FnZS5rZXlUeXBlID09PSAnc2Vzc2lvbl9rZXlfZW5jcnlwdCcpIG5leHREZWNyeXB0aW9uS2V5T2JqZWN0ID0ge3Nlc3Npb25LZXk6IGRlY3J5cHRlZFtpZHhdLmRhdGF9O1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpc1tpZHgtMV0uZGF0YS5tZXNzYWdlLnN1aXRlID09PSAnanNjdScpe1xuICAgICAgICAgICAgbmV4dERlY3J5cHRpb25LZXlPYmplY3QgPSB7cHJpdmF0ZUtleXM6IFthd2FpdCBKc2N1LmltcG9ydEtleSgnZGVyJywgZGVjcnlwdGVkW2lkeF0uZGF0YSldfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAodGhpc1tpZHgtMV0uZGF0YS5tZXNzYWdlLnN1aXRlID09PSAnb3BlbnBncCcpe1xuICAgICAgICAgICAgbmV4dERlY3J5cHRpb25LZXlPYmplY3QgPSB7cHJpdmF0ZUtleXM6IFthd2FpdCBPcGVuUEdQLmltcG9ydEtleSgnZGVyJywgZGVjcnlwdGVkW2lkeF0uZGF0YSldfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd25TdWl0ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlZCBjb25maWcgYW5kIGtleSBvYmplY3QgZm9yIHNpZ25pbmcgYW5kIGtleSBpbXBvcnRcbiAgICAgICAgaWYgKHRoaXNbaWR4LTFdLmRhdGEuc2lnbmF0dXJlIGluc3RhbmNlb2YgU2lnbmF0dXJlICYmIHR5cGVvZiB2ZXJpZmljYXRpb25LZXlzICE9PSAndW5kZWZpbmVkJyl7XG4gICAgICAgICAgbmV4dERlY3J5cHRpb25LZXlPYmplY3QucHVibGljS2V5cyA9IHZlcmlmaWNhdGlvbktleXM7XG4gICAgICAgICAgc3VpdGVPYmplY3Quc2lnbl92ZXJpZnkgPSB0aGlzW2lkeC0xXS5kYXRhLnNpZ25hdHVyZS5zdWl0ZTtcbiAgICAgICAgICBtb2RlQXJyYXkucHVzaCgndmVyaWZ5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV0EgZm9yIGVtYmVkZGVkIHNpZ25hdHVyZVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdGhpc1tpZHgtMV0uZGF0YS5tZXNzYWdlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICYmIHRoaXNbaWR4LTFdLmRhdGEubWVzc2FnZS5zdWl0ZSA9PT0gJ29wZW5wZ3AnXG4gICAgICAgICAgJiYgdHlwZW9mIHZlcmlmaWNhdGlvbktleXMgIT09ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgIG5leHREZWNyeXB0aW9uS2V5T2JqZWN0LnB1YmxpY0tleXMgPSB2ZXJpZmljYXRpb25LZXlzO1xuICAgICAgICAgIHN1aXRlT2JqZWN0LnNpZ25fdmVyaWZ5ID0gJ29wZW5wZ3AnO1xuICAgICAgICAgIG1vZGVBcnJheS5wdXNoKCd2ZXJpZnknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXNbaWR4LTFdLmtleXMgPSBhd2FpdCBpbXBvcnRLZXlzKCdvYmplY3QnLCB7IGtleXM6IG5leHREZWNyeXB0aW9uS2V5T2JqZWN0LCBzdWl0ZTogc3VpdGVPYmplY3QsIG1vZGU6IG1vZGVBcnJheSB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlY3J5cHRlZDtcblxuICB9XG5cbiAgZ2V0IG1vZGUgKCkgeyByZXR1cm4gdGhpcy5fY2FzY2FkZU1vZGU7IH1cbiAgZ2V0IGtleXMgKCkgeyByZXR1cm4gdGhpcy5fb3JnS2V5czsgfVxuICAvLyBnZXQgYWxsS2V5cyAoKSB7IHJldHVybiBudWxsOyB9IC8vIFRPRE9cblxuICB0b0FycmF5KCkgeyByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKTsgfVxuXG4gIG1hcChjYWxsYmFjaykgeyByZXR1cm4gdGhpcy50b0FycmF5KCkubWFwKGNhbGxiYWNrKTsgfVxuICBzbGljZSAoYSwgYikgeyByZXR1cm4gdGhpcy50b0FycmF5KCkuc2xpY2UoYSwgYik7IH1cbn1cblxuXG4iLCIvKipcbiAqIGNhc2NhZGVkX2RhdGEuanNcbiAqL1xuXG5pbXBvcnQgbXNncGFjayBmcm9tICdtc2dwYWNrLWxpdGUnO1xuaW1wb3J0IHtpbXBvcnRFbmNyeXB0ZWRCdWZmZXIsIEVuY3J5cHRlZE1lc3NhZ2V9IGZyb20gJy4vZW5jcnlwdGVkX21lc3NhZ2UuanMnO1xuaW1wb3J0IHtpbXBvcnRTaWduYXR1cmVCdWZmZXIsIFNpZ25hdHVyZX0gZnJvbSAnLi9zaWduYXR1cmUuanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW1wb3J0Q2FzY2FkZWRCdWZmZXIoc2VyaWFsaXplZCl7XG4gIGlmICghKHNlcmlhbGl6ZWQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkgdGhyb3cgbmV3IEVycm9yKCdOb25VaW50OEFycmF5U2VyaWFsaXplZERhdGEnKTtcbiAgbGV0IGRlcztcbiAgdHJ5IHtcbiAgICBkZXMgPSBtc2dwYWNrLmRlY29kZShzZXJpYWxpemVkKTtcbiAgfSBjYXRjaCAoZSkgeyB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZFRvUGFyc2VDYXNjYWRlZEJ1ZmZlcjogJHtlLm1lc3NhZ2V9YCk7IH1cblxuICBpZiAoIShkZXMgaW5zdGFuY2VvZiBBcnJheSkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZENhc2NhZGVkRGF0YScpO1xuXG4gIGNvbnN0IGRlc0NvbXBvbmVudExpc3QgPSBkZXMubWFwKCAob2JqKSA9PiB7XG4gICAgY29uc3QgcmV0dXJuT2JqZWN0ID0ge307XG4gICAgaWYodHlwZW9mIG9iai5tZXNzYWdlICE9PSAndW5kZWZpbmVkJykgcmV0dXJuT2JqZWN0Lm1lc3NhZ2UgPSBpbXBvcnRFbmNyeXB0ZWRCdWZmZXIob2JqLm1lc3NhZ2UpO1xuICAgIGlmKHR5cGVvZiBvYmouc2lnbmF0dXJlICE9PSAndW5kZWZpbmVkJykgcmV0dXJuT2JqZWN0LnNpZ25hdHVyZSA9IGltcG9ydFNpZ25hdHVyZUJ1ZmZlcihvYmouc2lnbmF0dXJlKTtcbiAgICByZXR1cm4gcmV0dXJuT2JqZWN0O1xuICB9KTtcblxuICByZXR1cm4gY3JlYXRlQ2FzY2FkZWREYXRhKGRlc0NvbXBvbmVudExpc3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FzY2FkZWREYXRhKGRhdGEpIHtcbiAgLy8gYXNzZXJ0aW9uXG4gIGlmICghKGRhdGEgaW5zdGFuY2VvZiBBcnJheSkpIHRocm93IG5ldyBFcnJvcignTm90QXJyYXlGb3JDYXNjYWRlZERhdGEnKTtcbiAgZGF0YS5tYXAoIChvYmopID0+IHtcbiAgICBpZih0eXBlb2Ygb2JqLm1lc3NhZ2UgIT09ICd1bmRlZmluZWQnICYmICEob2JqLm1lc3NhZ2UgaW5zdGFuY2VvZiBFbmNyeXB0ZWRNZXNzYWdlKSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkRW5jcnlwdGVkTWVzc2FnZScpO1xuICAgIGlmKHR5cGVvZiBvYmouc2lnbmF0dXJlICE9PSAndW5kZWZpbmVkJyAmJiAhKG9iai5zaWduYXR1cmUgaW5zdGFuY2VvZiBTaWduYXR1cmUpKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRTaWduYXR1cmUnKTtcbiAgICBpZih0eXBlb2Ygb2JqLm1lc3NhZ2UgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvYmouc2lnbmF0dXJlID09PSAndW5kZWZpbmVkJykgdGhyb3cgbmV3IEVycm9yKCdOb0VuY3J5cHRlZE1lc3NhZ2VBbmRTaWduYXR1cmUnKTtcbiAgfSk7XG5cbiAgcmV0dXJuIG5ldyBDYXNjYWRlZERhdGEoZGF0YSk7XG59XG5cbmV4cG9ydCBjbGFzcyBDYXNjYWRlZERhdGEgZXh0ZW5kcyBBcnJheSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpe1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5wdXNoKC4uLmRhdGEpO1xuICB9XG5cbiAgZXh0cmFjdChpZHgpIHtcbiAgICBpZiAoaWR4ID4gdGhpcy5sZW5ndGggLTEgfHwgaWR4IDwgMCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkSW5kZXhPdXRPZlJhbmdlJyk7XG4gICAgaWYgKHR5cGVvZiB0aGlzW2lkeF0ubWVzc2FnZSA9PT0gJ3VuZGVmaW5lZCcpIHRocm93IG5ldyBFcnJvcignTWVzc2FnZU9iamVjdERvZXNOb3RFeGlzdCcpO1xuXG4gICAgcmV0dXJuIHRoaXNbaWR4XS5tZXNzYWdlLmV4dHJhY3QoKTtcbiAgfVxuXG4gIGluc2VydChpZHgsIG1lc3NhZ2UpIHtcbiAgICBpZiAoaWR4ID4gdGhpcy5sZW5ndGggLTEgfHwgaWR4IDwgMCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkSW5kZXhPdXRPZlJhbmdlJyk7XG4gICAgaWYgKCEobWVzc2FnZSBpbnN0YW5jZW9mIEFycmF5KSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkRW5jcnlwdGVkTWVzc2FnZUFycmF5Jyk7XG4gICAgaWYgKHRoaXNbaWR4XS5tZXNzYWdlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignTWVzc2FnZUFscmVhZHlFeGlzdHMnKTtcblxuICAgIHRoaXNbaWR4XS5tZXNzYWdlLmluc2VydChtZXNzYWdlKTtcbiAgfVxuXG4gIHNlcmlhbGl6ZSgpIHtcbiAgICBjb25zdCBzZXJpYWxpemVkQ29tcEFycmF5ID0gdGhpcy5tYXAoIChvYmopID0+IHtcbiAgICAgIGNvbnN0IHJldHVybk9iamVjdCA9IHt9O1xuICAgICAgaWYgKHR5cGVvZiBvYmoubWVzc2FnZSAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybk9iamVjdC5tZXNzYWdlID0gbmV3IFVpbnQ4QXJyYXkob2JqLm1lc3NhZ2Uuc2VyaWFsaXplKCkpO1xuICAgICAgaWYgKHR5cGVvZiBvYmouc2lnbmF0dXJlICE9PSAndW5kZWZpbmVkJykgcmV0dXJuT2JqZWN0LnNpZ25hdHVyZSA9IG5ldyBVaW50OEFycmF5KG9iai5zaWduYXR1cmUuc2VyaWFsaXplKCkpO1xuICAgICAgcmV0dXJuIHJldHVybk9iamVjdDtcbiAgICB9KTtcbiAgICBjb25zdCByZXR1cm5BcnJheSA9IG1zZ3BhY2suZW5jb2RlKHNlcmlhbGl6ZWRDb21wQXJyYXkpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShyZXR1cm5BcnJheSk7XG4gIH1cblxuICB0b0FycmF5KCkgeyByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKTsgfVxuXG4gIG1hcChjYWxsYmFjaykgeyByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKS5tYXAoY2FsbGJhY2spOyB9XG59XG4iLCIvKipcbiAqIGNvcmUuanNcbiAqL1xuXG5pbXBvcnQge2dlbmVyYXRlS2V5T2JqZWN0fSBmcm9tICcuL2tleXMuanMnO1xuaW1wb3J0IHtpbXBvcnRNZXNzYWdlfSBmcm9tICcuL21lc3NhZ2UuanMnO1xuaW1wb3J0IHtPcGVuUEdQfSBmcm9tICcuL3N1aXRlX29wZW5wZ3AuanMnO1xuaW1wb3J0IHtKc2N1fSBmcm9tICcuL3N1aXRlX2pzY3UuanMnO1xuXG4vKipcbiAqIEdlbmVyYXRlIGtleSAocGFpcikuIFRoaXMgQVBJIG11c3QgYmUgY2FsbGVkIGV4dGVybmFsbHkuXG4gKiBAcGFyYW0ga2V5UGFyYW1zIHtvYmplY3R9OiBhIHBhcmFtZXRlciB0byBnZW5lcmF0ZSBrZXlzIGluIHRoZSBmb3JtIG9mIGxpa2VcbiAqIE9wZW5QR1A6XG4gKiB7IHN1aXRlOiAnb3BlbnBncCcsXG4gKiAgIHVzZXJJZHMsXG4gKiAgIHBhc3NwaHJhc2U6ICdvbWcnLFxuICogICBrZXlQYXJhbXM6IHsgdHlwZTogJ0VDQycsIGtleUV4cGlyYXRpb25UaW1lOiAwLCBjdXJ2ZTogJ1AtMjU2JyB9IH1cbiAqIFNpbXBsZSBDcnlwdG8gU3VpdGUgdXNpbmcgV2ViQ3J5cHRvQVBJL09wZW5TU0w6XG4gKiB7IHN1aXRlOiAnanNjdScsXG4gKiAgIHBhc3NwaHJhc2U6ICdvbWcnLFxuICogICBrZXlQYXJhbXM6IHt0eXBlOiAnRUNDJywgY3VydmV9IH0gfVxuICogQHJldHVybiB7UHJvbWlzZTwqPn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlS2V5IChrZXlQYXJhbXMpIHtcbiAgY29uc3Qga2V5T2JqID0gYXdhaXQgZ2VuZXJhdGVLZXlPYmplY3Qoa2V5UGFyYW1zKTtcblxuICAvLyBmb3JtYXR0aW5nXG4gIGlmIChrZXlQYXJhbXMua2V5UGFyYW1zLnR5cGUgPT09ICdzZXNzaW9uJykge1xuICAgIHJldHVybiBrZXlPYmo7XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYoa2V5UGFyYW1zLnN1aXRlID09PSAnb3BlbnBncCcpIHsgLyoqIE9wZW5QR1AgKiovXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwdWJsaWNLZXk6IHsga2V5U3RyaW5nOiBrZXlPYmoucHVibGljS2V5LmFybW9yKCksIGtleUlkczoga2V5T2JqLmtleUlkcyB9LFxuICAgICAgICBwcml2YXRlS2V5OiBPYmplY3QuYXNzaWduKFxuICAgICAgICAgIHsga2V5U3RyaW5nOiBrZXlPYmoucHJpdmF0ZUtleS5hcm1vcigpLCBrZXlJZHM6IGtleU9iai5rZXlJZHMgfSxcbiAgICAgICAgICAoa2V5UGFyYW1zLnBhc3NwaHJhc2UpID8ge3Bhc3NwaHJhc2U6IGtleVBhcmFtcy5wYXNzcGhyYXNlfSA6IHt9KVxuICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5UGFyYW1zLnN1aXRlID09PSAnanNjdScpIHsgLyoqIGpzLWNyeXB0by11dGlscyAqKi9cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHB1YmxpY0tleToge1xuICAgICAgICAgIGtleVN0cmluZzogYXdhaXQga2V5T2JqLnB1YmxpY0tleS5leHBvcnQoJ3BlbScsIHtvdXRwdXRQdWJsaWM6IHRydWV9KSxcbiAgICAgICAgICBrZXlJZHM6IGtleU9iai5rZXlJZHNcbiAgICAgICAgfSxcbiAgICAgICAgcHJpdmF0ZUtleTogT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICB7IGtleVN0cmluZzogYXdhaXQga2V5T2JqLnByaXZhdGVLZXkuZXhwb3J0KCdwZW0nKSwga2V5SWRzOiBrZXlPYmoua2V5SWRzIH0sXG4gICAgICAgICAgKGtleVBhcmFtcy5wYXNzcGhyYXNlKSA/IHtwYXNzcGhyYXNlOiBrZXlQYXJhbXMucGFzc3BocmFzZX0gOiB7fSApXG4gICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHRocm93IG5ldyBFcnJvcignSW52YWxpZENyeXB0b1N1aXRlJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBCYXNpYyBlbmNyeXB0aW9uIEFQSSB0aGF0IGVuYWJsZXMgc2lnbmluZyBzaW11bHRhbmVvdXNseSB3aXRoIGVuY3J5cHRpbmcgbWVzc2FnZS5cbiAqIEBwYXJhbSBtZXNzYWdlXG4gKiBAcGFyYW0ga2V5c1xuICogQHBhcmFtIGNvbmZpZ1xuICogQHJldHVybiB7UHJvbWlzZTx7c3VjY2VzczogYm9vbGVhbiwgc3RhdHVzOiBzdHJpbmcsIGRhdGE6IGFueX0+fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5jcnlwdCh7bWVzc2FnZSwga2V5cywgY29uZmlnfSl7XG4gIC8vIGFzc2VydGlvblxuICBpZiAodHlwZW9mIGNvbmZpZy5lbmNyeXB0ID09PSAndW5kZWZpbmVkJykgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkQ29uZmlnRm9yRW5jcnlwdGlvbicpO1xuXG4gIC8vIGNvbXBvc2Ugb2JqZWN0c1xuICBjb25zdCBtc2dPYmogPSBpbXBvcnRNZXNzYWdlKG1lc3NhZ2UpO1xuXG4gIC8vIGRvIHNpZ25pbmdcbiAgbGV0IHNpZ25lZCA9IHt9O1xuICBpZiAodHlwZW9mIGNvbmZpZy5zaWduICE9PSAndW5kZWZpbmVkJyAmJiBjb25maWcuc2lnbi5yZXF1aXJlZCAmJlxuICAgICh0eXBlb2YgY29uZmlnLmVuY3J5cHQgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgKHR5cGVvZiBjb25maWcuZW5jcnlwdCAhPT0gJ3VuZGVmaW5lZCcgJiYgIShjb25maWcuZW5jcnlwdC5zdWl0ZSA9PT0gJ29wZW5wZ3AnICYmIGNvbmZpZy5zaWduLnN1aXRlID09PSAnb3BlbnBncCcpKSlcbiAgKXtcbiAgICBpZiAoa2V5cy5zdWl0ZS5zaWduX3ZlcmlmeSAhPT0gY29uZmlnLnNpZ24uc3VpdGUpIHRocm93IG5ldyBFcnJvcignVW5tYXRjaGVkS2V5VHlwZVRvU2lnbmluZ1N1aXRlJyk7XG4gICAgc2lnbmVkID0gYXdhaXQgc2lnbkJhc2Uoe1xuICAgICAgbWVzc2FnZTogbXNnT2JqLCBrZXlzLCBvcHRpb25zOiBjb25maWcuc2lnbi5vcHRpb25zXG4gICAgfSkuY2F0Y2goKGUpID0+IHsgdGhyb3cgbmV3IEVycm9yKGBTaWduaW5nRmFpbGVkOiAke2UubWVzc2FnZX1gKTsgfSk7XG4gIH1cbiAgLy8gY29uc29sZS5sb2coc2lnbmVkKTtcblxuICAvLyBkbyBlbmNyeXB0aW9uLlxuICBpZiAoa2V5cy5zdWl0ZS5lbmNyeXB0X2RlY3J5cHQgIT09IGNvbmZpZy5lbmNyeXB0LnN1aXRlKSB0aHJvdyBuZXcgRXJyb3IoJ1VubWF0Y2hlZEtleVR5cGVUb0VuY3J5cHRpb25TdWl0ZScpO1xuICBjb25zdCBlbmNyeXB0ZWQgPSBhd2FpdCBlbmNyeXB0QmFzZSh7XG4gICAgbWVzc2FnZTogbXNnT2JqLCBrZXlzLCBvcHRpb25zOiBjb25maWcuZW5jcnlwdC5vcHRpb25zXG4gIH0pLmNhdGNoKCAoZSkgPT4geyB0aHJvdyBuZXcgRXJyb3IoYEVuY3J5cHRpb25GYWlsZWQ6ICR7ZS5tZXNzYWdlfWApOyB9KTtcblxuICAvLyBjb25zb2xlLmxvZyhlbmNyeXB0ZWQpO1xuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKGVuY3J5cHRlZCwgc2lnbmVkKTtcbn1cblxuLyoqXG4gKiBEZWNyeXB0IGdpdmVuIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWxseSB2ZXJpZnkgYXR0YWNoZWQgc2lnbmF0dXJlcyBzaW11bHRhbmVvdXNseS5cbiAqIEBwYXJhbSBkYXRhXG4gKiBAcGFyYW0ga2V5c1xuICogQHJldHVybiB7UHJvbWlzZTwqPn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlY3J5cHQoe2RhdGEsIGtleXN9KXtcbiAgaWYodHlwZW9mIGRhdGEubWVzc2FnZSA9PT0gJ3VuZGVmaW5lZCcpIHRocm93IG5ldyBFcnJvcignSW52YWxpZEVuY3J5cHRlZERhdGFGb3JtYXQnKTtcblxuICAvLyBkbyBkZWNyeXB0aW9uXG4gIGlmIChrZXlzLnN1aXRlLmVuY3J5cHRfZGVjcnlwdCAhPT0gZGF0YS5tZXNzYWdlLnN1aXRlKSB0aHJvdyBuZXcgRXJyb3IoJ1VubWF0Y2hlZEtleVR5cGVUb0VuY3J5cHRpb25TdWl0ZScpO1xuICBjb25zdCBkZWNyeXB0ZWQgPSBhd2FpdCBkZWNyeXB0QmFzZSh7XG4gICAgZW5jcnlwdGVkOiBkYXRhLCBrZXlzLCBvcHRpb25zOiBkYXRhLm1lc3NhZ2Uub3B0aW9uc1xuICB9KS5jYXRjaCggKGUpID0+IHsgY29uc29sZS5lcnJvcihlKTsgdGhyb3cgbmV3IEVycm9yKGBEZWNyeXB0aW9uRmFpbGVkOiAke2UubWVzc2FnZX1gKTsgfSk7XG5cbiAgLy8gZG8gdmVyaWZpY2F0aW9uXG4gIGxldCB2ZXJpZmllZCA9IHt9O1xuICBpZih0eXBlb2YgZGF0YS5zaWduYXR1cmUgIT09ICd1bmRlZmluZWQnICYmIGtleXMua2V5cy5wdWJsaWNLZXlzKSB7XG4gICAgdmVyaWZpZWQgPSBhd2FpdCB2ZXJpZnlCYXNlKHtcbiAgICAgIG1lc3NhZ2U6IGltcG9ydE1lc3NhZ2UoZGVjcnlwdGVkLmRhdGEpLCBzaWduYXR1cmU6IGRhdGEuc2lnbmF0dXJlLCBrZXlzLCBvcHRpb25zOiBkYXRhLnNpZ25hdHVyZS5vcHRpb25zXG4gICAgfSkuY2F0Y2goKGUpID0+IHsgdGhyb3cgbmV3IEVycm9yKGBWZXJpZmljYXRpb25GYWlsZWQ6ICR7ZS5tZXNzYWdlfWApOyB9KTtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgZGVjcnlwdGVkLnNpZ25hdHVyZXMgIT09ICd1bmRlZmluZWQnKSB2ZXJpZmllZCA9IGRlY3J5cHRlZC5zaWduYXR1cmVzO1xuXG4gIHJldHVybiB7ZGF0YTogZGVjcnlwdGVkLmRhdGEsIHNpZ25hdHVyZXM6IHZlcmlmaWVkfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzaWduYXR1cmUgb2JqZWN0cy5cbiAqIEBwYXJhbSBtZXNzYWdlXG4gKiBAcGFyYW0ga2V5c1xuICogQHBhcmFtIGNvbmZpZ1xuICogQHJldHVybiB7UHJvbWlzZTx7c3VjY2VzczogYm9vbGVhbiwgc3RhdHVzOiBzdHJpbmcsIGRhdGF9Pn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ24oe21lc3NhZ2UsIGtleXMsIGNvbmZpZ30pe1xuICAvLyBhc3NlcnRpb25cbiAgaWYgKHR5cGVvZiBjb25maWcuc2lnbiA9PT0gJ3VuZGVmaW5lZCcpIHRocm93IG5ldyBFcnJvcignSW52YWxpZENvbmZpZ0ZvclNpZ25pbmcnKTtcblxuICAvLyBjb21wb3NlIG9iamVjdHNcbiAgY29uc3QgbXNnT2JqID0gaW1wb3J0TWVzc2FnZShtZXNzYWdlKTtcblxuICAvLyBkbyBzaWduaW5nXG4gIGxldCBzaWduZWQ7XG4gIGlmKGtleXMua2V5cy5wcml2YXRlS2V5cykge1xuICAgIHNpZ25lZCA9IGF3YWl0IHNpZ25CYXNlKHtcbiAgICAgIG1lc3NhZ2U6IG1zZ09iaiwga2V5cywgb3B0aW9uczogY29uZmlnLnNpZ24ub3B0aW9ucywgb3V0cHV0OiB7c2lnbjogY29uZmlnLnNpZ24ub3V0cHV0fVxuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFNpZ25pbmdGYWlsZWQ6ICR7ZS5tZXNzYWdlfWApO1xuICAgIH0pO1xuICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkUHJpdmF0ZUtleXMnKTtcblxuICByZXR1cm4gc2lnbmVkO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmVyaWZ5KHttZXNzYWdlLCBzaWduYXR1cmUsIGtleXN9KXtcbiAgLy8gYXNzZXJ0aW9uXG4gIGlmICh0eXBlb2Ygc2lnbmF0dXJlID09PSAndW5kZWZpbmVkJykgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkT2JqZWN0Rm9yU2lnbmF0dXJlJyk7XG5cbiAgY29uc3QgbXNnT2JqID0gaW1wb3J0TWVzc2FnZShtZXNzYWdlKTtcblxuICAvLyBkbyB2ZXJpZmljYXRpb25cbiAgbGV0IHZlcmlmaWVkID0ge307XG4gIGlmKHR5cGVvZiBzaWduYXR1cmUgIT09ICd1bmRlZmluZWQnICYmIGtleXMua2V5cy5wdWJsaWNLZXlzKSB7XG4gICAgdmVyaWZpZWQgPSBhd2FpdCB2ZXJpZnlCYXNlKHtcbiAgICAgIG1lc3NhZ2U6IG1zZ09iaiwgc2lnbmF0dXJlLCBrZXlzLCBvcHRpb25zOiBzaWduYXR1cmUub3B0aW9uc1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFZlcmlmaWNhdGlvbkZhaWxlZDogJHtlLm1lc3NhZ2V9YCk7XG4gICAgfSk7XG4gIH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRTaWduYXR1cmVPckludmFsaWRQdWJsaWNLZXknKTtcblxuICByZXR1cm4gdmVyaWZpZWQ7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIGJhc2UgZnVuY3Rpb25zXG5jb25zdCBlbmNyeXB0QmFzZSA9IGFzeW5jICh7bWVzc2FnZSwga2V5cywgb3B0aW9uc30pID0+IHtcbiAgaWYgKCFrZXlzLmNhbkVuY3J5cHQoKSkgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZEtleUZvckVuY3J5cHRpb24nKTtcblxuICBsZXQgc3VpdGVPYmo7XG4gIGlmIChrZXlzLnN1aXRlLmVuY3J5cHRfZGVjcnlwdCA9PT0gJ2pzY3UnKSBzdWl0ZU9iaiA9IEpzY3U7XG4gIGVsc2UgaWYgKGtleXMuc3VpdGUuZW5jcnlwdF9kZWNyeXB0ID09PSAnb3BlbnBncCcpIHN1aXRlT2JqID0gT3BlblBHUDtcbiAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd25FbmNyeXB0aW9uU3VpdGUnKTtcblxuICByZXR1cm4gc3VpdGVPYmouZW5jcnlwdCh7IG1lc3NhZ2UsIGtleXM6IGtleXMua2V5cywgb3B0aW9ucyB9KTtcbn07XG5cbmNvbnN0IGRlY3J5cHRCYXNlID0gYXN5bmMgKHtlbmNyeXB0ZWQsIGtleXMsIG9wdGlvbnN9KSA9PiB7XG4gIGlmKCFrZXlzLmNhbkRlY3J5cHQoKSkgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZEtleUZvckRlY3J5cHRpb24nKTtcblxuICBsZXQgc3VpdGVPYmo7XG4gIGlmIChrZXlzLnN1aXRlLmVuY3J5cHRfZGVjcnlwdCA9PT0gJ2pzY3UnKSBzdWl0ZU9iaiA9IEpzY3U7XG4gIGVsc2UgaWYgKGtleXMuc3VpdGUuZW5jcnlwdF9kZWNyeXB0ID09PSAnb3BlbnBncCcpIHN1aXRlT2JqID0gT3BlblBHUDtcbiAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd25EZWNyeXB0aW9uU3VpdGUnKTtcblxuICByZXR1cm4gc3VpdGVPYmouZGVjcnlwdCh7IGVuY3J5cHRlZCwga2V5czoga2V5cy5rZXlzLCBvcHRpb25zIH0pO1xufTtcblxuY29uc3Qgc2lnbkJhc2UgPSBhc3luYyAoe21lc3NhZ2UsIGtleXMsIG9wdGlvbnN9KSA9PiB7XG4gIGlmICgha2V5cy5jYW5TaWduKCkpIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWRLZXlGb3JTaWduJyk7XG5cbiAgbGV0IHN1aXRlT2JqO1xuICBpZiAoa2V5cy5zdWl0ZS5zaWduX3ZlcmlmeSA9PT0gJ2pzY3UnKSBzdWl0ZU9iaiA9IEpzY3U7XG4gIGVsc2UgaWYgKGtleXMuc3VpdGUuc2lnbl92ZXJpZnkgPT09ICdvcGVucGdwJykgc3VpdGVPYmogPSBPcGVuUEdQO1xuICBlbHNlIHRocm93IG5ldyBFcnJvcignVW5rbm93blNpZ25pbmdTdWl0ZScpO1xuXG4gIHJldHVybiBzdWl0ZU9iai5zaWduKHsgbWVzc2FnZSwga2V5czoga2V5cy5rZXlzLCBvcHRpb25zIH0pO1xufTtcblxuY29uc3QgdmVyaWZ5QmFzZSA9IGFzeW5jICh7bWVzc2FnZSwgc2lnbmF0dXJlLCBrZXlzLCBvcHRpb25zfSkgPT4ge1xuICBpZigha2V5cy5jYW5WZXJpZnkoKSkgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZEtleUZvclZlcmlmaWNhdGlvbicpO1xuXG4gIGxldCBzdWl0ZU9iajtcbiAgaWYgKGtleXMuc3VpdGUuc2lnbl92ZXJpZnkgPT09ICdqc2N1Jykgc3VpdGVPYmogPSBKc2N1O1xuICBlbHNlIGlmIChrZXlzLnN1aXRlLnNpZ25fdmVyaWZ5ID09PSAnb3BlbnBncCcpIHN1aXRlT2JqID0gT3BlblBHUDtcbiAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd25TaWduaW5nU3VpdGUnKTtcblxuICByZXR1cm4gc3VpdGVPYmoudmVyaWZ5KHsgbWVzc2FnZSwgc2lnbmF0dXJlLCBrZXlzOiBrZXlzLmtleXMsIG9wdGlvbnN9KTtcbn07IiwiLyoqXG4gKiBlbmNyeXB0ZWRfbWVzc2FnZS5qc1xuICovXG5cbmltcG9ydCB7S2V5SWQsIEtleUlkTGlzdCwgY3JlYXRlS2V5SWQsIGNyZWF0ZUtleUlkTGlzdH0gZnJvbSAnLi9rZXlpZC5qcyc7XG5pbXBvcnQganNldSBmcm9tICdqcy1lbmNvZGluZy11dGlscyc7XG5pbXBvcnQgY2xvbmVEZWVwIGZyb20gJ2xvZGFzaC5jbG9uZWRlZXAnO1xuaW1wb3J0IG1zZ3BhY2sgZnJvbSAnbXNncGFjay1saXRlJztcblxuY29uc3Qgc3VpdGVzID0gWydqc2N1JywgJ29wZW5wZ3AnXTtcbmNvbnN0IGtleVR5cGVzID0gWydwdWJsaWNfa2V5X2VuY3J5cHQnLCAnc2Vzc2lvbl9rZXlfZW5jcnlwdCddO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBpbXBvcnRFbmNyeXB0ZWRCdWZmZXIoc2VyaWFsaXplZCl7XG4gIGlmICghKHNlcmlhbGl6ZWQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkgdGhyb3cgbmV3IEVycm9yKCdOb25VaW50OEFycmF5U2VyaWFsaXplZERhdGEnKTtcbiAgbGV0IGRlcztcbiAgdHJ5IHtcbiAgICBkZXMgPSBtc2dwYWNrLmRlY29kZShzZXJpYWxpemVkKTtcbiAgfSBjYXRjaCAoZSkgeyB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZFRvUGFyc2VFbmNyeXB0ZWRNZXNzYWdlQnVmZmVyOiAke2UubWVzc2FnZX1gKTsgfVxuXG4gIGlmICghZGVzLnN1aXRlIHx8ICFkZXMua2V5VHlwZSB8fCAhZGVzLm1lc3NhZ2UgfHwgIWRlcy5vcHRpb25zKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRFbmNyeXB0ZWRNZXNzYWdlRm9ybWF0Jyk7XG5cbiAgY29uc3QgbWVzc2FnZUxpc3QgPSBkZXMubWVzc2FnZS5tYXAoIChlbGVtKSA9PiB7XG4gICAgbGV0IGtleUlkO1xuICAgIGlmKGVsZW0ua2V5SWQgaW5zdGFuY2VvZiBBcnJheSkga2V5SWQgPSBjcmVhdGVLZXlJZExpc3QoZWxlbS5rZXlJZC5tYXAoIChrKSA9PiBjcmVhdGVLZXlJZChuZXcgVWludDhBcnJheShrKSkpKTtcbiAgICBlbHNlIGtleUlkID0gY3JlYXRlS2V5SWQobmV3IFVpbnQ4QXJyYXkoZWxlbS5rZXlJZCkpO1xuICAgIHJldHVybiBjcmVhdGVSYXdFbmNyeXB0ZWRNZXNzYWdlKGVsZW0uZGF0YSwga2V5SWQsIGVsZW0ucGFyYW1zKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNyZWF0ZUVuY3J5cHRlZE1lc3NhZ2UoIGRlcy5zdWl0ZSwgZGVzLmtleVR5cGUsIG1lc3NhZ2VMaXN0LCBkZXMub3B0aW9ucyApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW1wb3J0UmF3RW5jcnlwdGVkQnVmZmVyTGlzdChhcnJheSl7XG4gIGlmICghKGFycmF5IGluc3RhbmNlb2YgQXJyYXkpKSB0aHJvdyBuZXcgRXJyb3IoJ05vdEFycmF5T2ZTZXJpYWxpemVkRGF0YScpO1xuICBhcnJheS5mb3JFYWNoKCAoc2VyKSA9PiB7XG4gICAgaWYoIShzZXIgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkgdGhyb3cgbmV3IEVycm9yKCdOb3RVaW50OEFycmF5U2VyaWFsaXplZERhdGEnKTtcbiAgfSk7XG4gIGxldCBkZXNlcmlhbGl6ZWRBcnJheTtcbiAgdHJ5IHtcbiAgICBkZXNlcmlhbGl6ZWRBcnJheSA9IGFycmF5Lm1hcCggKHNlcikgPT4ge1xuICAgICAgY29uc3QgZGVjb2RlZCA9IG1zZ3BhY2suZGVjb2RlKHNlcik7XG4gICAgICBsZXQga2V5SWQ7XG4gICAgICBpZihkZWNvZGVkLmtleUlkIGluc3RhbmNlb2YgQXJyYXkpIGtleUlkID0gY3JlYXRlS2V5SWRMaXN0KGRlY29kZWQua2V5SWQubWFwKCAoaykgPT4gY3JlYXRlS2V5SWQobmV3IFVpbnQ4QXJyYXkoaykpKSk7XG4gICAgICBlbHNlIGtleUlkID0gY3JlYXRlS2V5SWQobmV3IFVpbnQ4QXJyYXkoZGVjb2RlZC5rZXlJZCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVJhd0VuY3J5cHRlZE1lc3NhZ2UoZGVjb2RlZC5kYXRhLCBrZXlJZCwgZGVjb2RlZC5wYXJhbXMpO1xuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7IHRocm93IG5ldyBFcnJvcihgRmFpbGVkVG9QYXJzZVJhd0VuY3J5cHRlZE1lc3NhZ2U6ICR7ZS5tZXNzYWdlfWApOyB9XG5cbiAgcmV0dXJuIGRlc2VyaWFsaXplZEFycmF5O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbmNyeXB0ZWRNZXNzYWdlKHN1aXRlLCBrZXlUeXBlLCBtZXNzYWdlLCBvcHRpb25zID0ge30pIHtcbiAgLy8gYXNzZXJ0aW9uXG4gIGlmIChzdWl0ZXMuaW5kZXhPZihzdWl0ZSkgPCAwKSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkU3VpdGUnKTtcbiAgaWYgKGtleVR5cGVzLmluZGV4T2Yoa2V5VHlwZSkgPCAwKSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkS2V5VHlwZScpO1xuXG4gIHJldHVybiBuZXcgRW5jcnlwdGVkTWVzc2FnZShzdWl0ZSwga2V5VHlwZSwgbWVzc2FnZSwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSYXdFbmNyeXB0ZWRNZXNzYWdlKGRhdGEsIGtleUlkLCBwYXJhbXMpIHtcbiAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB0aHJvdyBuZXcgRXJyb3IoJ05vblVpbnQ4QXJyYXlEYXRhJyk7XG4gIGlmICghKGtleUlkIGluc3RhbmNlb2YgS2V5SWQpICYmICEoa2V5SWQgaW5zdGFuY2VvZiBLZXlJZExpc3QpKSB0aHJvdyBuZXcgRXJyb3IoJ05vbktleUlkT3JLZXlJZExpc3RPYmplY3QnKTtcblxuICByZXR1cm4gbmV3IFJhd0VuY3J5cHRlZE1lc3NhZ2UoZGF0YSwga2V5SWQsIHBhcmFtcyk7XG59XG5cbmV4cG9ydCBjbGFzcyBFbmNyeXB0ZWRNZXNzYWdlIHtcbiAgY29uc3RydWN0b3Ioc3VpdGUsIGtleVR5cGUsIG1lc3NhZ2UsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuX3N1aXRlID0gc3VpdGU7XG4gICAgdGhpcy5fa2V5VHlwZSA9IGtleVR5cGU7XG4gICAgdGhpcy5fc2V0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIF9zZXRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICB0aGlzLl9tZXNzYWdlID0gbmV3IFJhd0VuY3J5cHRlZE1lc3NhZ2VMaXN0KCk7XG4gICAgdGhpcy5fbWVzc2FnZS5fc2V0KG1lc3NhZ2UpO1xuICB9XG5cbiAgZXh0cmFjdCgpIHtcbiAgICBjb25zdCByZXR1cm5BcnJheSA9IGNsb25lRGVlcCh0aGlzLl9tZXNzYWdlKTtcbiAgICB0aGlzLl9tZXNzYWdlID0gbmV3IFJhd0VuY3J5cHRlZE1lc3NhZ2VMaXN0KCk7XG4gICAgdGhpcy5fbWVzc2FnZS5fc2V0KFtdKTtcbiAgICByZXR1cm4gcmV0dXJuQXJyYXkudG9BcnJheSgpO1xuICB9XG5cbiAgaW5zZXJ0KG1lc3NhZ2VBcnJheSkge1xuICAgIHRoaXMuX21lc3NhZ2UgPSBuZXcgUmF3RW5jcnlwdGVkTWVzc2FnZUxpc3QoKTtcbiAgICB0aGlzLl9tZXNzYWdlLl9zZXQobWVzc2FnZUFycmF5KTtcbiAgfVxuXG4gIGdldCBzdWl0ZSgpIHsgcmV0dXJuIHRoaXMuX3N1aXRlOyB9XG4gIGdldCBrZXlUeXBlKCkgeyByZXR1cm4gdGhpcy5fa2V5VHlwZTsgfVxuICBnZXQgbWVzc2FnZSgpIHsgcmV0dXJuIHRoaXMuX21lc3NhZ2U7IH1cbiAgZ2V0IG9wdGlvbnMoKSB7IHJldHVybiB0aGlzLl9vcHRpb25zOyB9XG5cbiAgc2VyaWFsaXplKCkge1xuICAgIHJldHVybiBtc2dwYWNrLmVuY29kZSh7XG4gICAgICBzdWl0ZTogdGhpcy5fc3VpdGUsXG4gICAgICBrZXlUeXBlOiB0aGlzLl9rZXlUeXBlLFxuICAgICAgbWVzc2FnZTogdGhpcy5fbWVzc2FnZS50b0pzT2JqZWN0KCksXG4gICAgICBvcHRpb25zOiB0aGlzLl9vcHRpb25zXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJhd0VuY3J5cHRlZE1lc3NhZ2UgZXh0ZW5kcyBVaW50OEFycmF5IHtcbiAgY29uc3RydWN0b3IoZGF0YSwga2V5SWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgc3VwZXIoZGF0YSk7XG4gICAgdGhpcy5fa2V5SWQgPSBrZXlJZDtcbiAgICB0aGlzLl9wYXJhbXMgPSBwYXJhbXM7XG4gIH1cblxuICB0b0Jhc2U2NCgpIHsgcmV0dXJuIGpzZXUuZW5jb2Rlci5lbmNvZGVCYXNlNjQodGhpcyk7IH1cblxuICB0b0J1ZmZlcigpIHtcbiAgICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheSh0aGlzKTtcbiAgICByZXR1cm4gY2xvbmVEZWVwKGJ1Zik7XG4gIH1cblxuICB0b0pzT2JqZWN0KCkge1xuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiB0aGlzLnRvQnVmZmVyKCksXG4gICAgICBrZXlJZDogdGhpcy5fa2V5SWQudG9CdWZmZXIoKSxcbiAgICAgIHBhcmFtczogdGhpcy5fcGFyYW1zXG4gICAgfTtcbiAgfVxuXG4gIHNlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4gbXNncGFjay5lbmNvZGUodGhpcy50b0pzT2JqZWN0KCkpO1xuICB9XG5cbiAgZ2V0IGtleUlkKCkgeyByZXR1cm4gdGhpcy5fa2V5SWQ7IH1cbiAgZ2V0IHBhcmFtcygpIHsgcmV0dXJuIHRoaXMuX3BhcmFtczsgfVxufVxuXG5leHBvcnQgY2xhc3MgUmF3RW5jcnlwdGVkTWVzc2FnZUxpc3QgZXh0ZW5kcyBBcnJheSB7XG4gIF9zZXQobWVzc2FnZSkge1xuICAgIGlmICghKG1lc3NhZ2UgaW5zdGFuY2VvZiBBcnJheSkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZEVuY3J5cHRlZE1lc3NhZ2VMaXN0Jyk7XG4gICAgY29uc3QgYmluYXJ5TWVzc2FnZSA9IG1lc3NhZ2UubWFwKChtKSA9PiB7XG4gICAgICBpZiAoIShtIGluc3RhbmNlb2YgUmF3RW5jcnlwdGVkTWVzc2FnZSkpIHRocm93IG5ldyBFcnJvcignTm90RW5jcnlwdGVkTWVzc2FnZScpO1xuICAgICAgcmV0dXJuIG07XG4gICAgfSk7XG4gICAgdGhpcy5wdXNoKC4uLmJpbmFyeU1lc3NhZ2UpO1xuICB9XG5cbiAgdG9Kc09iamVjdCgpIHsgcmV0dXJuIHRoaXMubWFwKChyYXcpID0+IHJhdy50b0pzT2JqZWN0KCkpOyB9XG4gIHRvQXJyYXkoKSB7IHJldHVybiBBcnJheS5mcm9tKHRoaXMpOyB9XG5cbiAgbWFwKGNhbGxiYWNrKSB7IHJldHVybiB0aGlzLnRvQXJyYXkoKS5tYXAoY2FsbGJhY2spOyB9XG4gIGZpbHRlcihjYWxsYmFjaykgeyByZXR1cm4gdGhpcy50b0FycmF5KCkuZmlsdGVyKGNhbGxiYWNrKTsgfVxufSIsIi8qKlxuICogaW5kZXguanNcbiAqL1xuXG5pbXBvcnQge1xuICBnZW5lcmF0ZUtleSxcbiAgZW5jcnlwdCxcbiAgZGVjcnlwdCxcbiAgc2lnbixcbiAgdmVyaWZ5XG59IGZyb20gJy4vY29yZS5qcyc7XG5pbXBvcnQgeyBjcmVhdGVFbmNyeXB0aW9uQ2FzY2FkZSwgY3JlYXRlRGVjcnlwdGlvbkNhc2NhZGUgfSBmcm9tICcuL2Nhc2NhZGUuanMnO1xuaW1wb3J0IHsgaW1wb3J0S2V5cyB9IGZyb20gJy4va2V5cy5qcyc7XG5pbXBvcnQgeyBpbXBvcnRFbmNyeXB0ZWRCdWZmZXIsIGltcG9ydFJhd0VuY3J5cHRlZEJ1ZmZlckxpc3QgfSBmcm9tICcuL2VuY3J5cHRlZF9tZXNzYWdlLmpzJztcbmltcG9ydCB7IGltcG9ydFNpZ25hdHVyZUJ1ZmZlciB9IGZyb20gJy4vc2lnbmF0dXJlLmpzJztcbmltcG9ydCB7IGltcG9ydENhc2NhZGVkQnVmZmVyfSBmcm9tICcuL2Nhc2NhZGVkX2RhdGEuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdlbmVyYXRlS2V5LFxuICBlbmNyeXB0LFxuICBkZWNyeXB0LFxuICBzaWduLFxuICB2ZXJpZnksXG4gIGltcG9ydEtleXMsXG4gIGltcG9ydEVuY3J5cHRlZEJ1ZmZlcixcbiAgaW1wb3J0UmF3RW5jcnlwdGVkQnVmZmVyTGlzdCxcbiAgaW1wb3J0U2lnbmF0dXJlQnVmZmVyLFxuICBpbXBvcnRDYXNjYWRlZEJ1ZmZlcixcbiAgY3JlYXRlRW5jcnlwdGlvbkNhc2NhZGUsXG4gIGNyZWF0ZURlY3J5cHRpb25DYXNjYWRlXG59O1xuZXhwb3J0IHtcbiAgZ2VuZXJhdGVLZXksXG4gIGVuY3J5cHQsXG4gIGRlY3J5cHQsXG4gIHNpZ24sXG4gIHZlcmlmeSxcbiAgaW1wb3J0S2V5cyxcbiAgaW1wb3J0RW5jcnlwdGVkQnVmZmVyLFxuICBpbXBvcnRSYXdFbmNyeXB0ZWRCdWZmZXJMaXN0LFxuICBpbXBvcnRTaWduYXR1cmVCdWZmZXIsXG4gIGltcG9ydENhc2NhZGVkQnVmZmVyLFxuICBjcmVhdGVFbmNyeXB0aW9uQ2FzY2FkZSxcbiAgY3JlYXRlRGVjcnlwdGlvbkNhc2NhZGVcbn07IiwiLyoqXG4gKiBrZXlpZC5qc1xuICovXG5cbmltcG9ydCBqc2V1IGZyb20gJ2pzLWVuY29kaW5nLXV0aWxzJztcbmltcG9ydCBwYXJhbXMgZnJvbSAnLi9wYXJhbXMuanMnO1xuaW1wb3J0IHtnZXRKc2N1fSBmcm9tICcuL3V0aWwuanMnO1xuaW1wb3J0IGNsb25lRGVlcCBmcm9tICdsb2Rhc2guY2xvbmVkZWVwJztcblxuLyoqXG4gKiBDYWxjdWxhdGUga2V5IGlkIGZyb20gb3BlbnBncCBrZXkgb2JqZWN0XG4gKiBAcGFyYW0ga2V5T2JqZWN0XG4gKiBAcGFyYW0gbGVuXG4gKiBAcmV0dXJuIHtLZXlJZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21PcGVuUGdwS2V5KGtleU9iamVjdCwgbGVuPXBhcmFtcy5wdWJsaWNLZXlJZExFTil7XG4gIGNvbnN0IGZwID0ga2V5T2JqZWN0LmdldEZpbmdlcnByaW50KCk7XG4gIGNvbnN0IGJ1ZiA9IGpzZXUuZW5jb2Rlci5oZXhTdHJpbmdUb0FycmF5QnVmZmVyKGZwKTtcbiAgcmV0dXJuIGNyZWF0ZUtleUlkKGJ1Zi5zbGljZSgwLCBsZW4pKTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUga2V5IElkIGZyb20gandrLWZvcm1hdHRlZCBrZXlcbiAqIEtleSBpZCBpcyBkZWZpbmVkIGFzIGp3ayBwdWJsaWMga2V5IHRodW1icHJpbnQgKE5PVEU6IG5vdCBwcml2YXRlIGtleSB0aHVtYnByaW50KVxuICogc2VlIHRoZSBzcGVjIGhlcmUgPT4gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc2MzhcbiAqIEBwYXJhbSBrZXlPYmplY3RcbiAqIEBwYXJhbSBsZW5cbiAqIEByZXR1cm4ge1Byb21pc2U8S2V5SWQ+fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZnJvbUpzY3VLZXkoa2V5T2JqZWN0LCBsZW49cGFyYW1zLnB1YmxpY0tleUlkTEVOKSB7XG4gIGNvbnN0IHRodW1iUHJpbnRCdWYgPSBhd2FpdCBrZXlPYmplY3QuZ2V0SndrVGh1bWJwcmludChwYXJhbXMucHVibGljS2V5SWRIYXNoLCAnYmluYXJ5Jyk7XG4gIHJldHVybiBjcmVhdGVLZXlJZCh0aHVtYlByaW50QnVmLnNsaWNlKDAsIGxlbikpO1xufVxuXG4vKipcbiAqIEp1c3QgYSBoYXNoIG9mIHJhdyBiaW5hcnkga2V5XG4gKiBAcGFyYW0gYmluXG4gKiBAcGFyYW0gbGVuXG4gKiBAcmV0dXJuIHtQcm9taXNlPEtleUlkPn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZyb21SYXdLZXkoYmluLCBsZW4gPSBwYXJhbXMuc2Vzc2lvbktleUlkTGVuZ3RoKSB7XG4gIGNvbnN0IGpzY3UgPSBnZXRKc2N1KCk7XG4gIGNvbnN0IGRpZ2VzdCA9IGF3YWl0IGpzY3UuaGFzaC5jb21wdXRlKGJpbiwgcGFyYW1zLnNlc3Npb25LZXlJZEhhc2gpO1xuICByZXR1cm4gY3JlYXRlS2V5SWQoZGlnZXN0LnNsaWNlKDAsIGxlbikpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVLZXlJZChrZXlJZCl7XG4gIGlmKCEoa2V5SWQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkgdGhyb3cgbmV3IEVycm9yKCdOb3RVaW50OEFycmF5S2V5SWQnKTtcbiAgY29uc3QgbG9jYWxLZXlJZCA9IGNsb25lRGVlcChrZXlJZCk7XG4gIHJldHVybiBuZXcgS2V5SWQobG9jYWxLZXlJZCk7XG59XG5cbmV4cG9ydCBjbGFzcyBLZXlJZCBleHRlbmRzIFVpbnQ4QXJyYXkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jb25zdHJ1Y3RvclxuICBjb25zdHJ1Y3RvcihrZXlJZCl7XG4gICAgc3VwZXIoa2V5SWQpO1xuICB9XG5cbiAgdG9IZXgoKSB7IHJldHVybiBqc2V1LmVuY29kZXIuYXJyYXlCdWZmZXJUb0hleFN0cmluZyh0aGlzKTsgfVxuICB0b0J1ZmZlcigpIHtcbiAgICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheSh0aGlzKTtcbiAgICByZXR1cm4gY2xvbmVEZWVwKGJ1Zik7XG4gIH1cbn1cblxuXG4vLyBOT1RFOiBLZXlJZExpc3QgaXMgdXNlZCBvbmx5IGZvciBFbmNyeXB0ZWRNZXNzYWdlIGdlbmVyYXRlZCBpbiBPcGVuUEdQLlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUtleUlkTGlzdCAoa2V5SWRzKSB7XG4gIGNvbnN0IG9iaiA9IG5ldyBLZXlJZExpc3QoKTtcbiAgb2JqLl9pbml0KGtleUlkcyk7XG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBjbGFzcyBLZXlJZExpc3QgZXh0ZW5kcyBBcnJheSB7XG4gIF9pbml0KGtleUlkcyl7XG4gICAgaWYgKCEoa2V5SWRzIGluc3RhbmNlb2YgQXJyYXkpKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRLZXlJZExpc3QnKTtcbiAgICBjb25zdCBiaW5hcnlLZXlJZHMgPSBrZXlJZHMubWFwKCAoaykgPT4ge1xuICAgICAgaWYoIShrIGluc3RhbmNlb2YgS2V5SWQpKSB0aHJvdyBuZXcgRXJyb3IoJ05vdEtleUlkJyk7XG4gICAgICByZXR1cm4gaztcbiAgICB9KTtcbiAgICB0aGlzLnB1c2goLi4uYmluYXJ5S2V5SWRzKTtcbiAgfVxuICB0b0J1ZmZlcigpIHsgcmV0dXJuIHRoaXMubWFwKCAoa2lkKSA9PiBraWQudG9CdWZmZXIoKSk7IH1cbiAgdG9BcnJheSgpIHsgcmV0dXJuIEFycmF5LmZyb20odGhpcyk7IH1cblxuICBtYXAoY2FsbGJhY2spIHsgcmV0dXJuIHRoaXMudG9BcnJheSgpLm1hcChjYWxsYmFjayk7IH1cbn0iLCIvKipcbiAqIGtleXMuanNcbiAqL1xuXG5pbXBvcnQgY2xvbmVEZWVwIGZyb20gJ2xvZGFzaC5jbG9uZWRlZXAnOy8vJ2xvZGFzaC9jbG9uZURlZXAnO1xuaW1wb3J0IHtKc2N1fSBmcm9tICcuL3N1aXRlX2pzY3UuanMnO1xuaW1wb3J0IHtPcGVuUEdQfSBmcm9tICcuL3N1aXRlX29wZW5wZ3AuanMnO1xuXG5leHBvcnQgY2xhc3MgS2V5cyB7XG4gIGFzeW5jIGZyb20oZm9ybWF0LCB7a2V5cywgc3VpdGUsIG1vZGV9KXtcblxuICAgIGlmKG1vZGUuaW5kZXhPZignZW5jcnlwdCcpID49IDApIHtcbiAgICAgIGlmKG1vZGUuaW5kZXhPZigndmVyaWZ5JykgPj0gMCB8fCBtb2RlLmluZGV4T2YoJ2RlY3J5cHQnKSA+PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRNb2RlJyk7XG4gICAgICBpZiAodHlwZW9mIGtleXMucHVibGljS2V5cyAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICBpZiAodHlwZW9mIGtleXMuc2Vzc2lvbktleSAhPT0gJ3VuZGVmaW5lZCcpIHRocm93IG5ldyBFcnJvcignU2Vzc2lvbktleUFuZFB1YmxpY0tleUFyZUV4Y2x1c2l2ZScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXlzLnNlc3Npb25LZXkgPT09ICd1bmRlZmluZWQnKSB0aHJvdyBuZXcgRXJyb3IoJ05vU2Vzc2lvbktleU9yUHVibGljS2V5SXNHaXZlbicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmKG1vZGUuaW5kZXhPZignZGVjcnlwdCcpID49IDApIHtcbiAgICAgIGlmKG1vZGUuaW5kZXhPZignc2lnbicpID49IDAgfHwgbW9kZS5pbmRleE9mKCdlbmNyeXB0JykgPj0gMCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkTW9kZScpO1xuICAgICAgaWYgKHR5cGVvZiBrZXlzLnByaXZhdGVLZXlQYXNzU2V0cyAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGtleXMucHJpdmF0ZUtleXMgIT09ICd1bmRlZmluZWQnKXtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXlzLnNlc3Npb25LZXkgIT09ICd1bmRlZmluZWQnKSB0aHJvdyBuZXcgRXJyb3IoJ1Nlc3Npb25LZXlBbmRQcml2YXRlS2V5QXJlRXhjbHVzaXZlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodHlwZW9mIGtleXMuc2Vzc2lvbktleSA9PT0gJ3VuZGVmaW5lZCcpIHRocm93IG5ldyBFcnJvcignTm9TZXNzaW9uS2V5T3JQcml2YXRlS2V5SXNHaXZlbicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmKG1vZGUuaW5kZXhPZignc2lnbicpID49IDApe1xuICAgICAgaWYobW9kZS5pbmRleE9mKCd2ZXJpZnknKSA+PSAwIHx8IG1vZGUuaW5kZXhPZignZGVjcnlwdCcpID49IDApIHRocm93IG5ldyBFcnJvcignSW52YWxpZE1vZGUnKTtcbiAgICAgIGlmKHR5cGVvZiBrZXlzLnByaXZhdGVLZXlQYXNzU2V0cyA9PT0gJ3VuZGVmaW5lZCcgJiYgIHR5cGVvZiBrZXlzLnByaXZhdGVLZXlzID09PSAndW5kZWZpbmVkJykgdGhyb3cgbmV3IEVycm9yKCdOb1ByaXZhdGVLZXknKTtcbiAgICB9XG4gICAgaWYobW9kZS5pbmRleE9mKCd2ZXJpZnknKSA+PSAwKXtcbiAgICAgIGlmKG1vZGUuaW5kZXhPZignc2lnbicpID49IDAgfHwgbW9kZS5pbmRleE9mKCdlbmNyeXB0JykgPj0gMCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkTW9kZScpO1xuICAgICAgaWYodHlwZW9mIGtleXMucHVibGljS2V5cyA9PT0gJ3VuZGVmaW5lZCcpIHRocm93IG5ldyBFcnJvcignTm9QdWJsaWNLZXknKTtcbiAgICB9XG5cbiAgICBsZXQgb2JqO1xuICAgIGlmIChmb3JtYXQgPT09ICdzdHJpbmcnKSBvYmogPSBhd2FpdCBpbXBvcnRLZXlTdHJpbmdzKHtrZXlzLCBzdWl0ZSwgbW9kZX0pO1xuICAgIGVsc2UgaWYgKGZvcm1hdCA9PT0gJ29iamVjdCcpIG9iaiA9IGF3YWl0IGltcG9ydEtleU9iamVjdHMoe2tleXMsIHN1aXRlLCBtb2RlfSk7XG4gICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkQXRUaGlzUG9pbnQnKTtcblxuICAgIHRoaXMuX2tleXMgPSBvYmoua2V5cztcbiAgICB0aGlzLl9zdWl0ZSA9IG9iai5zdWl0ZTtcbiAgICB0aGlzLl9tb2RlID0gb2JqLm1vZGU7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGdldCBrZXlzICgpIHsgcmV0dXJuIHRoaXMuX2tleXM7IH1cbiAgZ2V0IHN1aXRlICgpIHsgcmV0dXJuIHRoaXMuX3N1aXRlOyB9XG4gIGdldCBtb2RlICgpIHsgcmV0dXJuIHRoaXMuX21vZGU7IH1cblxuICBjYW5FbmNyeXB0KCkgeyByZXR1cm4gdGhpcy5tb2RlLmluZGV4T2YoJ2VuY3J5cHQnKSA+PSAwOyB9XG4gIGNhbkRlY3J5cHQoKSB7IHJldHVybiB0aGlzLm1vZGUuaW5kZXhPZignZGVjcnlwdCcpID49IDA7IH1cbiAgY2FuU2lnbigpIHsgcmV0dXJuIHRoaXMubW9kZS5pbmRleE9mKCdzaWduJykgPj0gMDsgfVxuICBjYW5WZXJpZnkoKSB7IHJldHVybiB0aGlzLm1vZGUuaW5kZXhPZigndmVyaWZ5JykgPj0gMDsgfVxuXG59XG5cbi8qKlxuICogRnVuY3Rpb25zIHRvIGltcG9ydCBrZXlzIGFuZCB0cmFuc2xhdGUgdGhlbSB0byBzdWl0ZS1zcGVjaWZpYyBrZXkgb2JqZWN0cy5cbiAqIEBwYXJhbSBmb3JtYXRcbiAqIEBwYXJhbSBrZXlzXG4gKiBAcGFyYW0gc3VpdGVcbiAqIEBwYXJhbSBtb2RlXG4gKiBAcmV0dXJuIHtQcm9taXNlPEtleXM+fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW1wb3J0S2V5cyhmb3JtYXQ9J3N0cmluZycsIHtrZXlzLCBzdWl0ZSwgbW9kZX0pe1xuICBjb25zdCBsb2NhbEZvcm1hdCA9IGNsb25lRGVlcChmb3JtYXQpO1xuICBjb25zdCBsb2NhbEtleXMgPSBjbG9uZURlZXAoa2V5cyk7XG4gIGNvbnN0IGxvY2FsU3VpdGUgPSBjbG9uZURlZXAoc3VpdGUpO1xuICBjb25zdCBsb2NhbE1vZGUgPSBjbG9uZURlZXAobW9kZSk7XG5cbiAgY29uc3Qga2V5T2JqID0gbmV3IEtleXMoKTtcbiAgYXdhaXQga2V5T2JqLmZyb20obG9jYWxGb3JtYXQsIHtrZXlzOiBsb2NhbEtleXMsIHN1aXRlOiBsb2NhbFN1aXRlLCBtb2RlOiBsb2NhbE1vZGV9KTtcbiAgcmV0dXJuIGtleU9iajtcbn1cblxuXG4vKipcbiAqIGltcG9ydCBmcm9tIGtleXN0cmluZywgaS5lLiwgcGVtXG4gKiBAcGFyYW0ga2V5c1xuICogQHBhcmFtIHN1aXRlXG4gKiBAcGFyYW0gbW9kZVxuICogQHJldHVybiB7UHJvbWlzZTx7a2V5cywgc3VpdGU6ICosIG1vZGU6ICp9Pn1cbiAqL1xuYXN5bmMgZnVuY3Rpb24gaW1wb3J0S2V5U3RyaW5ncyh7a2V5cywgc3VpdGUsIG1vZGV9KXtcbiAgY29uc3Qga2V5T2JqZWN0cyA9IHt9O1xuXG4gIGlmIChrZXlzLnNlc3Npb25LZXkpIGtleU9iamVjdHMuc2Vzc2lvbktleSA9IGtleXMuc2Vzc2lvbktleTsgLy8gc3ltbWV0cmljIGtleVxuXG4gIGNvbnN0IG1vZGVzID0gW1xuICAgIHtuYW1lOiAnZW5jcnlwdF9kZWNyeXB0Jywgb3A6IHtwdWJsaWM6ICdlbmNyeXB0JywgcHJpdmF0ZTogJ2RlY3J5cHQnfX0sXG4gICAge25hbWU6ICdzaWduX3ZlcmlmeScsIG9wOiB7cHVibGljOiAndmVyaWZ5JywgcHJpdmF0ZTogJ3NpZ24nfX1cbiAgXTtcbiAgYXdhaXQgUHJvbWlzZS5hbGwobW9kZXMubWFwKCBhc3luYyAobW9kZU9qYmVjdCkgPT4ge1xuICAgIGlmKHR5cGVvZiBzdWl0ZVttb2RlT2piZWN0Lm5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuXG5cbiAgICAgIGxldCBzdWl0ZU9iajtcbiAgICAgIGlmIChzdWl0ZVttb2RlT2piZWN0Lm5hbWVdID09PSAnanNjdScpIHN1aXRlT2JqID0gSnNjdTtcbiAgICAgIGVsc2UgaWYgKHN1aXRlW21vZGVPamJlY3QubmFtZV0gPT09ICdvcGVucGdwJykgc3VpdGVPYmogPSBPcGVuUEdQO1xuICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRTdWl0ZScpO1xuXG4gICAgICBpZiAobW9kZS5pbmRleE9mKG1vZGVPamJlY3Qub3AucHVibGljKSA+PSAwKSB7XG4gICAgICAgIGlmIChrZXlzLnB1YmxpY0tleXMpIGtleU9iamVjdHMucHVibGljS2V5cyA9IGF3YWl0IFByb21pc2UuYWxsKGtleXMucHVibGljS2V5cy5tYXAoIChwaykgPT4gc3VpdGVPYmouaW1wb3J0S2V5KCdwZW0nLCBwaykpKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG1vZGUuaW5kZXhPZihtb2RlT2piZWN0Lm9wLnByaXZhdGUpID49IDApIHtcbiAgICAgICAgaWYgKGtleXMucHJpdmF0ZUtleVBhc3NTZXRzKSB7XG4gICAgICAgICAga2V5T2JqZWN0cy5wcml2YXRlS2V5cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICAgICAga2V5cy5wcml2YXRlS2V5UGFzc1NldHMubWFwKChwa3BzKSA9PiBzdWl0ZU9iai5pbXBvcnRLZXkoJ3BlbScsIHBrcHMucHJpdmF0ZUtleSwgcGtwcy5wYXNzcGhyYXNlKSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignSW52YWxpZEtleU1vZGUnKTtcbiAgICB9XG4gIH0pKTtcblxuICByZXR1cm4geyBrZXlzOiBrZXlPYmplY3RzLCBzdWl0ZSwgbW9kZSB9O1xufVxuXG4vKipcbiAqIGp1c3QgaW1wb3J0IGZyb20ga2V5IG9iamVjdFxuICogQHBhcmFtIGtleXNcbiAqIEBwYXJhbSBzdWl0ZVxuICogQHBhcmFtIG1vZGVcbiAqIEByZXR1cm4ge1Byb21pc2U8e2tleXMsIHN1aXRlOiAqLCBtb2RlOiAqfT59XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGltcG9ydEtleU9iamVjdHMoe2tleXMsIHN1aXRlLCBtb2RlfSl7XG4gIGNvbnN0IGtleU9iamVjdHMgPSB7fTtcblxuICBpZiAoa2V5cy5zZXNzaW9uS2V5KSBrZXlPYmplY3RzLnNlc3Npb25LZXkgPSBrZXlzLnNlc3Npb25LZXk7IC8vIHN5bW1ldHJpYyBrZXlcblxuICBpZiAoa2V5cy5wdWJsaWNLZXlzKSBrZXlPYmplY3RzLnB1YmxpY0tleXMgPSBrZXlzLnB1YmxpY0tleXM7XG5cbiAgaWYgKGtleXMucHJpdmF0ZUtleXMpIGtleU9iamVjdHMucHJpdmF0ZUtleXMgPSBrZXlzLnByaXZhdGVLZXlzO1xuXG4gIHJldHVybiB7a2V5czoga2V5T2JqZWN0cywgc3VpdGUsIG1vZGV9O1xufVxuXG5cbi8qKlxuICogQmFzaWMga2V5IGdlbmVyYXRvciB2aWEgb3BlbnBncC9qc2N1IEFQSXMuIFJldHVybnMgcmF3IG9iamVjdHMgb2Yga2V5cyBpbiBib3RoIGVudmlyb25tZW50cyBmcm9tIHRoZSBzcGVjIHdpdGggc29tZSBhZGRpdGlvbmFsIGFyZ3MuXG4gKiBAcGFyYW0ga2V5UGFyYW1zXG4gKiBAcmV0dXJuIHtQcm9taXNlPCo+fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVLZXlPYmplY3Qoa2V5UGFyYW1zKSB7XG4gIGNvbnN0IGxvY2FsS2V5UGFyYW1zID0gY2xvbmVEZWVwKGtleVBhcmFtcyk7XG4gIGxldCByZXR1cm5LZXk7XG4gIGlmIChsb2NhbEtleVBhcmFtcy5zdWl0ZSA9PT0gJ29wZW5wZ3AnKSB7IC8qKiBPcGVuUEdQICoqL1xuICAgIHJldHVybktleSA9IGF3YWl0IE9wZW5QR1AuZ2VuZXJhdGVLZXkoe1xuICAgICAgdXNlcklkczogbG9jYWxLZXlQYXJhbXMudXNlcklkcyxcbiAgICAgIHBhc3NwaHJhc2U6IGxvY2FsS2V5UGFyYW1zLnBhc3NwaHJhc2UsXG4gICAgICBwYXJhbXM6IGxvY2FsS2V5UGFyYW1zLmtleVBhcmFtc1xuICAgIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBHUEdLZXlHZW5lcmF0aW9uRmFpbGVkOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH0pO1xuXG4gIH1cbiAgZWxzZSBpZiAobG9jYWxLZXlQYXJhbXMuc3VpdGUgPT09ICdqc2N1JykgeyAvKioganMtY3J5cHRvLXV0aWxzICoqL1xuICAgIHJldHVybktleSA9IGF3YWl0IEpzY3UuZ2VuZXJhdGVLZXkoe1xuICAgICAgcGFzc3BocmFzZTogbG9jYWxLZXlQYXJhbXMucGFzc3BocmFzZSxcbiAgICAgIHBhcmFtczogbG9jYWxLZXlQYXJhbXMua2V5UGFyYW1zLFxuICAgICAgZW5jcnlwdE9wdGlvbnM6IGxvY2FsS2V5UGFyYW1zLmVuY3J5cHRPcHRpb25zXG4gICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEpzY3VLZXlHZW5lcmF0aW9uRmFpbGVkOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH0pO1xuICB9XG4gIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZENyeXB0b1N1aXRlJyk7XG5cbiAgcmV0dXJuIHJldHVybktleTtcbn0iLCIvKipcbiAqIG1lc3NhZ2UuanNcbiAqL1xuXG5pbXBvcnQganNldSBmcm9tICdqcy1lbmNvZGluZy11dGlscyc7XG5pbXBvcnQgY2xvbmVEZWVwIGZyb20gJ2xvZGFzaC5jbG9uZWRlZXAnOyAvLydsb2Rhc2gvY2xvbmVEZWVwJztcblxuLyoqXG4gKiBpbXBvcnQgbWVzc2FnZSBhbmQgdHJhbnNsYXRlIGl0IHRvIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIG1zZ1xuICogQHJldHVybiB7TWVzc2FnZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGltcG9ydE1lc3NhZ2UobXNnKXtcbiAgY29uc3QgbG9jYWxNZXNzYWdlID0gY2xvbmVEZWVwKG1zZyk7XG4gIGNvbnN0IG9iaiA9IG5ldyBNZXNzYWdlKCk7XG4gIG9iai5faW5pdChsb2NhbE1lc3NhZ2UpO1xuICByZXR1cm4gb2JqO1xufVxuXG5jbGFzcyBNZXNzYWdlIHtcbiAgX2luaXQobXNnKXtcbiAgICBpZihtc2cgaW5zdGFuY2VvZiBVaW50OEFycmF5KXtcbiAgICAgIHRoaXMuX21lc3NhZ2UgPSBtc2c7XG4gICAgICB0aGlzLl9tZXNzYWdlVHlwZSA9ICdiaW5hcnknO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgbXNnID09PSAnc3RyaW5nJyl7XG4gICAgICB0aGlzLl9tZXNzYWdlID0ganNldS5lbmNvZGVyLnN0cmluZ1RvQXJyYXlCdWZmZXIobXNnKTtcbiAgICAgIHRoaXMuX21lc3NhZ2VUeXBlID0gJ3N0cmluZyc7XG4gICAgfVxuICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZE1lc3NhZ2VUeXBlJyk7XG4gIH1cblxuICBnZXQgYmluYXJ5ICgpIHsgLy8gcmV0dXJucyBtZXNzYWdlIGluIGJpbmFyeSBmb3JtYXRcbiAgICByZXR1cm4gdGhpcy5fbWVzc2FnZTtcbiAgfVxuXG4gIGdldCBtZXNzYWdlICgpIHsgLy8gcmV0dXJuIG1lc3NhZ2UgaW4gb3JpZ2luYWwgZm9ybWF0XG4gICAgaWYodGhpcy5tZXNzYWdlVHlwZSA9PT0gJ2JpbmFyeScpIHJldHVybiB0aGlzLl9tZXNzYWdlO1xuICAgIGVsc2UgaWYgKHRoaXMubWVzc2FnZVR5cGUgPT09ICdzdHJpbmcnKSByZXR1cm4ganNldS5lbmNvZGVyLmFycmF5QnVmZmVyVG9TdHJpbmcodGhpcy5fbWVzc2FnZSk7XG4gICAgZWxzZSByZXR1cm4gbnVsbDtcbiAgfVxuICBnZXQgbWVzc2FnZVR5cGUgKCkgeyByZXR1cm4gdGhpcy5fbWVzc2FnZVR5cGU7IH1cbn0iLCIvKipcbiAqIHBhcmFtcy5qc1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHB1YmxpY0tleUlkTEVOOiAzMixcbiAgcHVibGljS2V5SWRIYXNoOiAnU0hBLTI1NicsXG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHNlc3Npb25LZXlJZExlbmd0aDogMzIsIC8vIDggYnl0ZSBzZXNzaW9uIGtleSBpZCBnaXZlbiBmcm9tIGxhc3QgOCBieXRlIGZyb20gc2hhIDI1NiBkaWdlc3QgYXMgcHVibGljIGtleSBpZFxuICBzZXNzaW9uS2V5SWRIYXNoOiAnU0hBLTI1NicsIC8vIGZvciBoYXNoIGRpZ2VzdCBvZiBzZXNzaW9uIGtleVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBTdWl0ZS1zcGVjaWZpYyBwYXJhbWV0ZXJzIGJlbG93XG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBqc2N1XG4gIGpzY3U6IHtcbiAgICAvLyBpdiBsZW5ndGggZm9yIEFFUy1HQ01cbiAgICBpdkxlbmd0aEFlc0djbTogMTIsXG4gIH0sXG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIE9wZW5QR1BcbiAgb3BlbnBncCA6IHtcbiAgICBkZWZhdWx0VXNlciA6ICc8ZXhhbXBsZUBleGFtcGxlLmNvbT4nLFxuXG4gICAgLy8gb3BlbnBncC53b3JrZXIuanMgbXVzdCBiZSBsb2NhdGVkIGluIHRoZSBwbGFjZSB3aGVyZSBhcGlfb3BlbnBncC5qcyBhbmQganMtZmlsZSBidW5kbGluZyBjb3JlLWZpbGUuXG4gICAgLy8gTmFtZWx5IGluIHRoaXMgcHJvamVjdCwgdGhleSBhcmUgbG9jYXRlZCBpbiAnZGlzdCcgYW5kIGl0IHdpbGwgYmUgJy4vJyBmcm9tIHRoZSB2aWV3cG9pbnQgb2YgYnVuZGxlZCBmaWxlLlxuICAgIHdvcmtlclBhdGhXZWI6ICcuL29wZW5wZ3Aud29ya2VyLm1pbi5qcycsXG5cbiAgICB3b3JrZXJQYXRoTm9kZTogJy4uL25vZGVfbW9kdWxlcy9vcGVucGdwL2Rpc3Qvb3BlbnBncC53b3JrZXIubWluLmpzJyxcblxuICAgIC8vIG1hcHBpbmcgbmFtZXMgb2YgY3VydmVcbiAgICBjdXJ2ZUxpc3Q6IHtcbiAgICAgICdQLTI1Nic6IHtuYW1lOiAncDI1Nid9LFxuICAgICAgJ1AtMzg0Jzoge25hbWU6ICdwMzg0J30sXG4gICAgICAnUC01MjEnOiB7bmFtZTogJ3A1MjEnfVxuICAgIH1cbiAgfVxufTsiLCIvKipcbiAqIHNpZ25hdHVyZVxuICovXG5pbXBvcnQge0tleUlkLCBjcmVhdGVLZXlJZH0gZnJvbSAnLi9rZXlpZC5qcyc7XG5pbXBvcnQganNldSBmcm9tICdqcy1lbmNvZGluZy11dGlscyc7XG5pbXBvcnQgY2xvbmVEZWVwIGZyb20gJ2xvZGFzaC5jbG9uZWRlZXAnO1xuaW1wb3J0IG1zZ3BhY2sgZnJvbSAnbXNncGFjay1saXRlJztcblxuY29uc3Qgc3VpdGVzID0gWydqc2N1JywgJ29wZW5wZ3AnXTtcbmNvbnN0IGtleVR5cGVzID0gWydwdWJsaWNfa2V5X3NpZ24nXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGltcG9ydFNpZ25hdHVyZUJ1ZmZlcihzZXJpYWxpemVkKXtcbiAgaWYgKCEoc2VyaWFsaXplZCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB0aHJvdyBuZXcgRXJyb3IoJ05vblVpbnQ4QXJyYXlTZXJpYWxpemVkRGF0YScpO1xuICBsZXQgZGVzO1xuICB0cnkge1xuICAgIGRlcyA9IG1zZ3BhY2suZGVjb2RlKHNlcmlhbGl6ZWQpO1xuICB9IGNhdGNoIChlKSB7IHRocm93IG5ldyBFcnJvcihgRmFpbGVkVG9QYXJzZVNpZ25hdHVyZUJ1ZmZlcjogJHtlLm1lc3NhZ2V9YCk7IH1cblxuICBpZiAoIWRlcy5zdWl0ZSB8fCAhZGVzLmtleVR5cGUgfHwgIWRlcy5zaWduYXR1cmVzIHx8ICFkZXMub3B0aW9ucykgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkU2lnbmF0dXJlRm9ybWF0Jyk7XG5cbiAgY29uc3Qgc2lnbmF0dXJlTGlzdCA9IGRlcy5zaWduYXR1cmVzLm1hcCggKGVsZW0pID0+IGNyZWF0ZVJhd1NpZ25hdHVyZShlbGVtLmRhdGEsIGNyZWF0ZUtleUlkKGVsZW0ua2V5SWQpKSApO1xuXG4gIHJldHVybiBjcmVhdGVTaWduYXR1cmUoZGVzLnN1aXRlLCBkZXMua2V5VHlwZSwgc2lnbmF0dXJlTGlzdCwgZGVzLm9wdGlvbnMgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNpZ25hdHVyZShzdWl0ZSwga2V5VHlwZSwgc2lnbmF0dXJlcywgb3B0aW9ucyA9IHt9KXtcbiAgLy8gYXNzZXJ0aW9uXG4gIGlmKHN1aXRlcy5pbmRleE9mKHN1aXRlKSA8IDApIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWRTdWl0ZScpO1xuICBpZihrZXlUeXBlcy5pbmRleE9mKGtleVR5cGUpIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZEtleVR5cGUnKTtcbiAgaWYoc3VpdGUgPT09ICdqc2N1JyAmJiB0eXBlb2Ygb3B0aW9ucy5oYXNoID09PSAndW5kZWZpbmVkJykgdGhyb3cgbmV3IEVycm9yKCdIYXNoTXVzdEJlU3BlY2lmaWVkJyk7XG4gIGlmICghKHNpZ25hdHVyZXMgaW5zdGFuY2VvZiBBcnJheSkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZFNpZ25hdHVyZUxpc3QnKTtcblxuICByZXR1cm4gbmV3IFNpZ25hdHVyZShzdWl0ZSwga2V5VHlwZSwgc2lnbmF0dXJlcywgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBjbGFzcyBTaWduYXR1cmUge1xuICBjb25zdHJ1Y3RvcihzdWl0ZSwga2V5VHlwZSwgc2lnbmF0dXJlcywgb3B0aW9ucyA9IHt9KXtcbiAgICB0aGlzLl9zdWl0ZSA9IHN1aXRlO1xuICAgIHRoaXMuX2tleVR5cGUgPSBrZXlUeXBlO1xuICAgIHRoaXMuX3NpZ25hdHVyZXMgPSBuZXcgU2lnbmF0dXJlTGlzdChzaWduYXR1cmVzKTtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIGdldCBzdWl0ZSAoKSB7IHJldHVybiB0aGlzLl9zdWl0ZTsgfVxuICBnZXQga2V5VHlwZSAoKSB7IHJldHVybiB0aGlzLl9rZXlUeXBlOyB9XG4gIGdldCBzaWduYXR1cmVzICgpIHsgcmV0dXJuIHRoaXMuX3NpZ25hdHVyZXM7IH1cbiAgZ2V0IG9wdGlvbnMgKCkgeyByZXR1cm4gdGhpcy5fb3B0aW9uczsgfVxuXG4gIHNlcmlhbGl6ZSAoKSB7XG4gICAgcmV0dXJuIG1zZ3BhY2suZW5jb2RlKHtcbiAgICAgIHN1aXRlOiB0aGlzLl9zdWl0ZSxcbiAgICAgIGtleVR5cGU6IHRoaXMuX2tleVR5cGUsXG4gICAgICBzaWduYXR1cmVzOiB0aGlzLl9zaWduYXR1cmVzLnRvSnNPYmplY3QoKSxcbiAgICAgIG9wdGlvbnM6IHRoaXMuX29wdGlvbnNcbiAgICB9KTtcbiAgfVxufVxuXG5jbGFzcyBTaWduYXR1cmVMaXN0IGV4dGVuZHMgQXJyYXkge1xuICBjb25zdHJ1Y3RvcihzaWduYXR1cmVzKXtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IGJpbmFyeVNpZ25hdHVyZXMgPSBzaWduYXR1cmVzLm1hcCggKHNpZykgPT4ge1xuICAgICAgaWYoIShzaWcgaW5zdGFuY2VvZiBSYXdTaWduYXR1cmUpKSB0aHJvdyBuZXcgRXJyb3IoJ05vdFJhd1NpZ25hdHVyZU9iamVjdCcpO1xuICAgICAgcmV0dXJuIHNpZztcbiAgICB9KTtcbiAgICB0aGlzLnB1c2goLi4uYmluYXJ5U2lnbmF0dXJlcyk7XG4gIH1cblxuICB0b0pzT2JqZWN0KCkgeyByZXR1cm4gdGhpcy5tYXAoIChzKSA9PiBzLnRvSnNPYmplY3QoKSApOyB9XG4gIHRvQXJyYXkoKSB7IHJldHVybiBBcnJheS5mcm9tKHRoaXMpOyB9XG5cbiAgbWFwKGNhbGxiYWNrKSB7IHJldHVybiB0aGlzLnRvQXJyYXkoKS5tYXAoY2FsbGJhY2spOyB9XG4gIGZpbHRlcihjYWxsYmFjaykgeyByZXR1cm4gdGhpcy50b0FycmF5KCkuZmlsdGVyKGNhbGxiYWNrKTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmF3U2lnbmF0dXJlKHNpZywga2V5SWQpe1xuICAvLyBhc3NlcnRpb25cbiAgaWYoIShzaWcgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkgdGhyb3cgbmV3IEVycm9yKCdOb25VaW50OEFycmF5U2lnbmF0dXJlJyk7XG4gIGlmKCEoa2V5SWQgaW5zdGFuY2VvZiBLZXlJZCkpIHRocm93IG5ldyBFcnJvcignTm9uS2V5SWRPYmplY3QnKTtcblxuICByZXR1cm4gbmV3IFJhd1NpZ25hdHVyZShzaWcsIGtleUlkKTtcbn1cblxuZXhwb3J0IGNsYXNzIFJhd1NpZ25hdHVyZSBleHRlbmRzIFVpbnQ4QXJyYXkge1xuICBjb25zdHJ1Y3RvcihzaWcsIGtleUlkKXtcbiAgICBzdXBlcihzaWcpO1xuICAgIHRoaXMuX2tleUlkID0ga2V5SWQ7XG4gIH1cblxuICB0b0Jhc2U2NCAoKSB7IHJldHVybiBqc2V1LmVuY29kZXIuZW5jb2RlQmFzZTY0KHRoaXMpOyB9XG4gIHRvQnVmZmVyICgpIHsgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7XG4gICAgcmV0dXJuIGNsb25lRGVlcChidWYpO1xuICB9XG4gIHRvSnNPYmplY3QgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiB0aGlzLnRvQnVmZmVyKCksXG4gICAgICBrZXlJZDogdGhpcy5fa2V5SWQudG9CdWZmZXIoKSxcbiAgICB9O1xuICB9XG5cbiAgZ2V0IGtleUlkICgpIHsgcmV0dXJuIHRoaXMuX2tleUlkOyB9XG59IiwiLyoqXG4gKiBzdWl0ZS5qc1xuICovXG5cbmV4cG9ydCBjbGFzcyBTdWl0ZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmIChuZXcudGFyZ2V0ID09PSBTdWl0ZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VpdGVDbGFzc0Nhbm5vdEJlSW5zdGFudGlhdGVkRGlyZWN0bHknKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5nZW5lcmF0ZUtleSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLmVuY3J5cHQgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5kZWNyeXB0ID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuY29uc3RydWN0b3Iuc2lnbiA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLnZlcmlmeSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLmltcG9ydEtleSA9PT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNdXN0T3ZlcnJpZGVBbGxNZXRob2RzJyk7XG4gICAgfVxuICB9XG59IiwiLyoqXG4gKiBzdWl0ZV9qc2N1LmpzXG4gKi9cblxuaW1wb3J0IHtTdWl0ZX0gZnJvbSAnLi9zdWl0ZS5qcyc7XG5pbXBvcnQge2dldEpzY3V9IGZyb20gJy4vdXRpbC5qcyc7XG5pbXBvcnQgKiBhcyB1dGlsS2V5SWQgZnJvbSAnLi9rZXlpZC5qcyc7XG5pbXBvcnQgcGFyYW1zIGZyb20gJy4vcGFyYW1zLmpzJztcbmltcG9ydCB7Y3JlYXRlRW5jcnlwdGVkTWVzc2FnZSwgY3JlYXRlUmF3RW5jcnlwdGVkTWVzc2FnZX0gZnJvbSAnLi9lbmNyeXB0ZWRfbWVzc2FnZS5qcyc7XG5pbXBvcnQge2NyZWF0ZVNpZ25hdHVyZSwgY3JlYXRlUmF3U2lnbmF0dXJlfSBmcm9tICcuL3NpZ25hdHVyZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBKc2N1IGV4dGVuZHMgU3VpdGUge1xuICAvKipcbiAgICogR2VuZXJhdGUgcHVibGljS2V5UGFpciBvciBzZXNzaW9uS2V5T2JqZWN0IHdpdGgganMtY3J5cHRvLXV0aWxzLlxuICAgKiBAcGFyYW0gcGFyYW1zIHtPYmplY3R9XG4gICAqIEBwYXJhbSBwYXNzcGhyYXNlIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBlbmNyeXB0T3B0aW9ucyB7T2JqZWN0fVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPCo+fVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGdlbmVyYXRlS2V5KHtwYXJhbXMsIHBhc3NwaHJhc2U9bnVsbCwgZW5jcnlwdE9wdGlvbnM9e319KSB7XG4gICAgY29uc3QganNjdSA9IGdldEpzY3UoKTtcblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Nlc3Npb24nKSB7XG4gICAgICBpZiAoIXBhcmFtcy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcigncGFyYW1zLmxlbmd0aCBtdXN0IGJlIHNwZWNpZmllZCcpO1xuICAgICAgY29uc3QgcmF3S2V5ID0gYXdhaXQganNjdS5yYW5kb20uZ2V0UmFuZG9tQnl0ZXMocGFyYW1zLmxlbmd0aCk7XG4gICAgICBjb25zdCBrZXlJZCA9IGF3YWl0IHV0aWxLZXlJZC5mcm9tUmF3S2V5KHJhd0tleSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IHJhd0tleSxcbiAgICAgICAga2V5SWRcbiAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKHBhcmFtcy50eXBlID09PSAnZWMnIHx8IHBhcmFtcy50eXBlID09PSAncnNhJykge1xuICAgICAgY29uc3Qga2V5VHlwZSA9IChwYXJhbXMudHlwZSA9PT0gJ2VjJykgPyAnRUMnIDogJ1JTQSc7XG4gICAgICBjb25zdCBvcHRpb25zID0gKHBhcmFtcy50eXBlID09PSAnZWMnKSA/IHtuYW1lZEN1cnZlOiBwYXJhbXMuY3VydmV9IDoge21vZHVsdXNMZW5ndGg6IHBhcmFtcy5tb2R1bHVzTGVuZ3RofTtcblxuICAgICAgY29uc3QgandLZXlzID0gYXdhaXQganNjdS5wa2MuZ2VuZXJhdGVLZXkoa2V5VHlwZSwgb3B0aW9ucyk7XG4gICAgICBjb25zdCBrZXlJZCA9IGF3YWl0IHV0aWxLZXlJZC5mcm9tSnNjdUtleShuZXcganNjdS5LZXkoJ2p3aycsIGp3S2V5cy5wdWJsaWNLZXkpKTtcblxuICAgICAgY29uc3QgcHVibGljS2V5T2JqID0gbmV3IGpzY3UuS2V5KCdqd2snLCBqd0tleXMucHVibGljS2V5KTtcbiAgICAgIGxldCBwcml2YXRlS2V5T2JqID0gbmV3IGpzY3UuS2V5KCdqd2snLCBqd0tleXMucHJpdmF0ZUtleSk7XG5cbiAgICAgIC8vIGZvciBlbmNyeXB0ZWQga2V5c1xuICAgICAgaWYgKHBhc3NwaHJhc2UpIHtcbiAgICAgICAgY29uc3QgZW5jcnlwdGVkRGVyID0gYXdhaXQgcHJpdmF0ZUtleU9iai5leHBvcnQoJ2RlcicsIHtlbmNyeXB0UGFyYW1zOiBPYmplY3QuYXNzaWduKHtwYXNzcGhyYXNlfSwgZW5jcnlwdE9wdGlvbnMpfSk7XG4gICAgICAgIHByaXZhdGVLZXlPYmogPSBuZXcganNjdS5LZXkoJ2RlcicsIGVuY3J5cHRlZERlcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHB1YmxpY0tleTogcHVibGljS2V5T2JqLFxuICAgICAgICBwcml2YXRlS2V5OiBwcml2YXRlS2V5T2JqLFxuICAgICAgICBrZXlJZFxuICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ0pzY3VVbnN1cHBvcnRlZEtleVR5cGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBvcnQganNjdSBrZXkgb2JqZWN0XG4gICAqIEBwYXJhbSB0eXBlXG4gICAqIEBwYXJhbSBrZXlcbiAgICogQHBhcmFtIHBhc3NwaHJhc2VcbiAgICogQHJldHVybiB7UHJvbWlzZTxqc2N1LktleT59XG4gICAqL1xuICBzdGF0aWMgYXN5bmMgaW1wb3J0S2V5KHR5cGUsIGtleSwgcGFzc3BocmFzZSl7XG4gICAgY29uc3QganNjdSA9IGdldEpzY3UoKTtcblxuICAgIGNvbnN0IGtleU9iaiA9IG5ldyBqc2N1LktleSh0eXBlLCBrZXkpO1xuXG4gICAgaWYoa2V5T2JqLmlzUHJpdmF0ZSAmJiBrZXlPYmouaXNFbmNyeXB0ZWQpe1xuICAgICAgaWYoIXBhc3NwaHJhc2UpIHRocm93IG5ldyBFcnJvcignUGFzc3BocmFzZVJlcXVpcmVkJyk7XG4gICAgICBhd2FpdCBrZXlPYmouZGVjcnlwdChwYXNzcGhyYXNlKS5jYXRjaCggKGUpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWRUb0RlY3J5cHRQcml2YXRlS2V5OiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlPYmo7XG4gIH1cblxuICAvKipcbiAgICogRW5jcnlwdCBwbGFpbnRleHQgb2JqZWN0IHdpdGggZ2l2ZW4ga2V5cy5cbiAgICogQHBhcmFtIG1lc3NhZ2VcbiAgICogQHBhcmFtIGtleXNcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHJldHVybiB7UHJvbWlzZTx7bWVzc2FnZTogRW5jcnlwdGVkTWVzc2FnZX0+fVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGVuY3J5cHQoe21lc3NhZ2UsIGtleXMsIG9wdGlvbnN9KSB7XG4gICAgY29uc3QganNjdSA9IGdldEpzY3UoKTtcblxuICAgIC8vIGNoZWNrIG9wdGlvbnNcbiAgICBpZih0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpIG9wdGlvbnMgPSB7fTtcblxuICAgIC8vIGVuY3J5cHRpb25cbiAgICBsZXQgZW5jcnlwdGVkO1xuICAgIGxldCBlbmNyeXB0ZWRPYmplY3Q7XG4gICAgaWYgKGtleXMucHVibGljS2V5cykgeyAvLyBwdWJsaWMga2V5IGVuY3J5cHRpb25cblxuICAgICAgaWYob3B0aW9ucy5wcml2YXRlS2V5UGFzcyl7IC8vIGZvciBFQ0RIIFRPRE86IFJlY29uc2lkZXIgaWYgdGhlIHBlbSBmb3JtYXR0ZWQga2V5IGNvdWxkIGJlIGFzc3VtZWQuXG4gICAgICAgIG9wdGlvbnMucHJpdmF0ZUtleSA9IGF3YWl0IEpzY3UuaW1wb3J0S2V5KCdwZW0nLCBvcHRpb25zLnByaXZhdGVLZXlQYXNzLnByaXZhdGVLZXksIG9wdGlvbnMucHJpdmF0ZUtleVBhc3MucGFzc3BocmFzZSk7XG4gICAgICAgIG9wdGlvbnMucHJpdmF0ZUtleSA9IGF3YWl0IG9wdGlvbnMucHJpdmF0ZUtleS5leHBvcnQoJ2p3aycpO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5wcml2YXRlS2V5UGFzcztcbiAgICAgIH1cblxuICAgICAgLy8gZm9yIGVjZGggZXBoZW1lcmFsIGtleXNcbiAgICAgIGlmKCFvcHRpb25zLnByaXZhdGVLZXkpIHtcbiAgICAgICAgY29uc3QgandrID0gYXdhaXQga2V5cy5wdWJsaWNLZXlzWzBdLmV4cG9ydCgnandrJyk7XG4gICAgICAgIGlmIChqd2sua3R5ID09PSAnRUMnKXtcbiAgICAgICAgICBjb25zdCBlcGhlbWVyYWwgPSBhd2FpdCBqc2N1LnBrYy5nZW5lcmF0ZUtleSgnRUMnLCB7bmFtZWRDdXJ2ZTogandrLmNydn0pO1xuICAgICAgICAgIG9wdGlvbnMucHJpdmF0ZUtleSA9IGVwaGVtZXJhbC5wcml2YXRlS2V5O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVuY3J5cHRlZCA9IGF3YWl0IFByb21pc2UuYWxsKGtleXMucHVibGljS2V5cy5tYXAoIGFzeW5jIChwdWJsaWNLZXlPYmopID0+IHtcbiAgICAgICAgY29uc3QgcHVibGljSndrID0gYXdhaXQgcHVibGljS2V5T2JqLmV4cG9ydCgnandrJyk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBqc2N1LnBrYy5lbmNyeXB0KG1lc3NhZ2UuYmluYXJ5LCBwdWJsaWNKd2ssIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBmZWQgPSBuZXcgVWludDhBcnJheShkYXRhLmRhdGEpO1xuICAgICAgICBkZWxldGUgZGF0YS5kYXRhO1xuICAgICAgICByZXR1cm4gY3JlYXRlUmF3RW5jcnlwdGVkTWVzc2FnZShmZWQsIGF3YWl0IHV0aWxLZXlJZC5mcm9tSnNjdUtleShwdWJsaWNLZXlPYmopLCBkYXRhKTtcbiAgICAgIH0pKTtcblxuICAgICAgLy8gZm9yIGVjZGgsIHJlbW92ZSBwcml2YXRlIGtleSBhbmQgYWRkIHB1YmxpYyBrZXkgaW4gZW5jcnlwdGlvbiBjb25maWcsIGFuZCBhZGQgdGhlIGNvbmZpZyB0byB0aGUgZW5jcnlwdGVkIG9iamVjdFxuICAgICAgaWYodHlwZW9mIG9wdGlvbnMucHJpdmF0ZUtleSAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICBjb25zdCBwdWJsaWNLZXkgPSBuZXcganNjdS5LZXkoJ2p3aycsIG9wdGlvbnMucHJpdmF0ZUtleSk7XG4gICAgICAgIG9wdGlvbnMucHVibGljS2V5ID0gYXdhaXQgcHVibGljS2V5LmV4cG9ydCgnZGVyJywge291dHB1dFB1YmxpYzogdHJ1ZX0pOyAvLyBleHBvcnQgcHVibGljIGtleSBmcm9tIHByaXZhdGUga2V5XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLnByaXZhdGVLZXk7XG4gICAgICB9XG5cbiAgICAgIGVuY3J5cHRlZE9iamVjdCA9IHttZXNzYWdlOiBjcmVhdGVFbmNyeXB0ZWRNZXNzYWdlKCdqc2N1JywgJ3B1YmxpY19rZXlfZW5jcnlwdCcsIGVuY3J5cHRlZCwgb3B0aW9ucyl9O1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXlzLnNlc3Npb25LZXkpIHsgLy8gc3ltbWV0cmljIGtleSBlbmNyeXB0aW9uXG4gICAgICBpZihvcHRpb25zLm5hbWUgPT09ICdBRVMtR0NNJykgeyAgLy8gVE9ETzogb3RoZXIgaXYtcmVxdWlyZWQgYWxnb3JpdGhtc1xuICAgICAgICBjb25zdCBpdiA9IGF3YWl0IGpzY3UucmFuZG9tLmdldFJhbmRvbUJ5dGVzKHBhcmFtcy5qc2N1Lml2TGVuZ3RoQWVzR2NtKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGpzY3UuYWVzLmVuY3J5cHQobWVzc2FnZS5iaW5hcnksIGtleXMuc2Vzc2lvbktleSwge25hbWU6IG9wdGlvbnMubmFtZSwgaXZ9KTtcbiAgICAgICAgY29uc3Qga2V5SWQgPSBhd2FpdCB1dGlsS2V5SWQuZnJvbVJhd0tleShrZXlzLnNlc3Npb25LZXkpO1xuICAgICAgICBjb25zdCBvYmogPSBjcmVhdGVSYXdFbmNyeXB0ZWRNZXNzYWdlKGRhdGEsIGtleUlkLCB7aXZ9KTtcbiAgICAgICAgZW5jcnlwdGVkID0gW29ial07IC8vIFRPRE8sIHNob3VsZCBiZSBhbiBBcnJheT9cbiAgICAgIH1cbiAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdKc2N1SW52YWxpZEVuY3J5cHRpb25BbGdvcml0aG0nKTtcbiAgICAgIGVuY3J5cHRlZE9iamVjdCA9IHttZXNzYWdlOiBjcmVhdGVFbmNyeXB0ZWRNZXNzYWdlKCdqc2N1JywgJ3Nlc3Npb25fa2V5X2VuY3J5cHQnLCBlbmNyeXB0ZWQsIG9wdGlvbnMpfTtcbiAgICB9XG4gICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ0pzY3VJbnZhbGlkRW5jcnlwdGlvbktleScpO1xuXG4gICAgcmV0dXJuIGVuY3J5cHRlZE9iamVjdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNyeXB0IGVuY3J5cHRlZCBvYmplY3Qgd2l0aCBnaXZlbiBrZXlzLlxuICAgKiBAcGFyYW0gZW5jcnlwdGVkXG4gICAqIEBwYXJhbSBrZXlzXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEByZXR1cm4ge1Byb21pc2U8e2RhdGE6ICp9Pn1cbiAgICovXG4gIHN0YXRpYyBhc3luYyAgZGVjcnlwdCh7ZW5jcnlwdGVkLCBrZXlzLCBvcHRpb25zfSkge1xuICAgIGlmICh0eXBlb2YgZW5jcnlwdGVkLm1lc3NhZ2UgPT09ICd1bmRlZmluZWQnKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRFbmNyeXB0ZWRNZXNzYWdlJyk7IC8vIFRPRE8sIGNoYW5nZSBhY2NvcmRpbmcgdG8gdGhlIGNsYXNzXG4gICAgaWYgKCEoZW5jcnlwdGVkLm1lc3NhZ2UubWVzc2FnZSBpbnN0YW5jZW9mIEFycmF5KSkgdGhyb3cgbmV3IEVycm9yKCdOb25BcnJheU1lc3NhZ2UnKTtcbiAgICBjb25zdCBqc2N1ID0gZ2V0SnNjdSgpO1xuXG4gICAgY29uc3Qga2V5VHlwZSA9IGVuY3J5cHRlZC5tZXNzYWdlLmtleVR5cGU7XG5cbiAgICBsZXQgZGVjcnlwdGVkO1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgaWYgKGtleVR5cGUgPT09ICdwdWJsaWNfa2V5X2VuY3J5cHQnKXtcbiAgICAgIC8vIHB1YmxpYyBrZXkgZGVjcnlwdGlvblxuICAgICAgaWYgKCFrZXlzLnByaXZhdGVLZXlzKSB0aHJvdyBuZXcgRXJyb3IoJ0pzY3VQcml2YXRlS2V5UmVxdWlyZWQnKTtcbiAgICAgIGlmIChvcHRpb25zLnB1YmxpY0tleSl7XG4gICAgICAgIG9wdGlvbnMucHVibGljS2V5ID0gYXdhaXQgSnNjdS5pbXBvcnRLZXkoJ2RlcicsIG9wdGlvbnMucHVibGljS2V5KTtcbiAgICAgICAgb3B0aW9ucy5wdWJsaWNLZXkgPSBhd2FpdCBvcHRpb25zLnB1YmxpY0tleS5leHBvcnQoJ2p3aycpO1xuICAgICAgfVxuXG4gICAgICAvLyBmdW5jdGlvbiBkZWZpbml0aW9uXG4gICAgICBjb25zdCBkZWNyeXB0TWVzc2FnZU9iamVjdCA9IGFzeW5jIChtc2dPYmplY3QsIHByaXZhdGVLZXlPYmplY3QpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IG1zZ09iamVjdC50b0J1ZmZlcigpO1xuICAgICAgICBjb25zdCBzYWx0ID0gKHR5cGVvZiBtc2dPYmplY3QucGFyYW1zLnNhbHQgIT09ICd1bmRlZmluZWQnKSA/IG1zZ09iamVjdC5wYXJhbXMuc2FsdCA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgaXYgPSAodHlwZW9mIG1zZ09iamVjdC5wYXJhbXMuaXYgIT09ICd1bmRlZmluZWQnKSA/IG1zZ09iamVjdC5wYXJhbXMuaXYgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHByaXZhdGVKd2sgPSBhd2FpdCBwcml2YXRlS2V5T2JqZWN0LmV4cG9ydCgnandrJyk7XG4gICAgICAgIGNvbnN0IGRlY09wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgc2FsdCwgaXYgfSwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBhd2FpdCBqc2N1LnBrYy5kZWNyeXB0KGRhdGEsIHByaXZhdGVKd2ssIGRlY09wdGlvbnMpO1xuICAgICAgfTtcblxuICAgICAgLy8gZmlsdGVyIGJ5IGtleUlkXG4gICAgICBjb25zdCBtc2dLZXlTZXQgPSBbXTtcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKGtleXMucHJpdmF0ZUtleXMubWFwKCBhc3luYyAocGspID0+IHtcbiAgICAgICAgY29uc3Qga2V5SWQgPSBhd2FpdCB1dGlsS2V5SWQuZnJvbUpzY3VLZXkocGspO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IGVuY3J5cHRlZC5tZXNzYWdlLm1lc3NhZ2UuZmlsdGVyKCAobSkgPT4gKG0ua2V5SWQudG9IZXgoKSA9PT0ga2V5SWQudG9IZXgoKSkpO1xuICAgICAgICBtc2dLZXlTZXQucHVzaCguLi5maWx0ZXJlZC5tYXAoKG0pID0+ICh7bWVzc2FnZTogbSwgcHJpdmF0ZUtleTogcGt9KSApKTtcbiAgICAgIH0pKTtcbiAgICAgIGlmIChtc2dLZXlTZXQubGVuZ3RoID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZVRvRGVjcnlwdFdpdGhHaXZlblByaXZhdGVLZXknKTtcbiAgICAgIC8vIGRlY3J5cHRcbiAgICAgIGxldCBlcnJNc2cgPSAnJztcbiAgICAgIGNvbnN0IGRlY3J5cHRlZEFycmF5ID0gYXdhaXQgUHJvbWlzZS5hbGwobXNnS2V5U2V0Lm1hcCggYXN5bmMgKHNldCkgPT4ge1xuICAgICAgICBjb25zdCBkID0gYXdhaXQgZGVjcnlwdE1lc3NhZ2VPYmplY3Qoc2V0Lm1lc3NhZ2UsIHNldC5wcml2YXRlS2V5KS5jYXRjaCggKGUpID0+IHsgZXJyTXNnID0gZS5tZXNzYWdlOyB9KTtcbiAgICAgICAgaWYoZCkgcmV0dXJuIGQ7XG4gICAgICAgIGVsc2UgcmV0dXJuIG51bGw7XG4gICAgICB9KSk7XG4gICAgICBjb25zdCByZXR1cm5BcnJheSA9IGRlY3J5cHRlZEFycmF5LmZpbHRlciggKGQpID0+IChkICE9PSBudWxsKSk7XG5cbiAgICAgIGlmKHJldHVybkFycmF5Lmxlbmd0aCA+IDApIGRlY3J5cHRlZCA9IHJldHVybkFycmF5WzBdO1xuICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKTtcblxuICAgIH1cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGVsc2UgaWYgKGtleVR5cGUgPT09ICdzZXNzaW9uX2tleV9lbmNyeXB0Jyl7XG4gICAgICAvLyBzZXNzaW9uIGtleSBkZWNyeXB0aW9uXG4gICAgICBpZiAoIWtleXMuc2Vzc2lvbktleSkgdGhyb3cgbmV3IEVycm9yKCdKc2N1U2Vzc2lvbktleVJlcXVpcmVkJyk7XG4gICAgICBpZiAoIShlbmNyeXB0ZWQubWVzc2FnZS5tZXNzYWdlIGluc3RhbmNlb2YgQXJyYXkpKSB0aHJvdyBuZXcgRXJyb3IoJ05vbkFycmF5TWVzc2FnZScpO1xuXG4gICAgICBjb25zdCBtZXNzYWdlID0gZW5jcnlwdGVkLm1lc3NhZ2UubWVzc2FnZVswXTsgLy8gVE9ETyBTaG91bGQgYmUgYW4gYXJyYXk/XG4gICAgICBjb25zdCBpdiA9ICh0eXBlb2YgbWVzc2FnZS5wYXJhbXMuaXYgIT09ICd1bmRlZmluZWQnKSA/IG1lc3NhZ2UucGFyYW1zLml2IDogbnVsbDtcblxuICAgICAgaWYob3B0aW9ucy5uYW1lID09PSAnQUVTLUdDTScpIHtcbiAgICAgICAgZGVjcnlwdGVkID0gYXdhaXQganNjdS5hZXMuZGVjcnlwdChcbiAgICAgICAgICBtZXNzYWdlLnRvQnVmZmVyKCksXG4gICAgICAgICAga2V5cy5zZXNzaW9uS2V5LFxuICAgICAgICAgIHtuYW1lOiBrZXlzLnNlc3Npb25LZXkuYWxnb3JpdGhtLCBpdn1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdKc2N1SW52YWxpZEVuY3J5cHRpb25BbGdvcml0aG0nKTtcbiAgICB9XG4gICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ0pzY3VJbnZhbGlkS2V5VHlwZV9Ob3RTZXNzaW9uS2V5Jyk7XG5cbiAgICByZXR1cm4ge2RhdGE6IGRlY3J5cHRlZH07XG4gIH1cblxuICAvKipcbiAgICogU2lnbmluZyBvbiBhIG1lc3NhZ2Ugd2l0aCBnaXZlbiBwcml2YXRlIGtleSdzJ1xuICAgKiBAcGFyYW0gbWVzc2FnZVxuICAgKiBAcGFyYW0ga2V5c1xuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPHtzaWduYXR1cmU6IFNpZ25hdHVyZX0+fVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIHNpZ24oe21lc3NhZ2UsIGtleXMsIG9wdGlvbnN9KXtcbiAgICBpZigha2V5cy5wcml2YXRlS2V5cykgdGhyb3cgbmV3IEVycm9yKCdKc2N1SW52YWxpZFNpZ25pbmdLZXlzJyk7XG5cbiAgICBjb25zdCBqc2N1ID0gZ2V0SnNjdSgpO1xuXG4gICAgY29uc3Qgc2lnbmF0dXJlcyA9IGF3YWl0IFByb21pc2UuYWxsKGtleXMucHJpdmF0ZUtleXMubWFwKCBhc3luYyAocHJpdktleSkgPT4ge1xuICAgICAgY29uc3QgcHJpdmF0ZUp3ayA9IGF3YWl0IHByaXZLZXkuZXhwb3J0KCdqd2snKTtcbiAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IGpzY3UucGtjLnNpZ24obWVzc2FnZS5iaW5hcnksIHByaXZhdGVKd2ssIG9wdGlvbnMuaGFzaCwgT2JqZWN0LmFzc2lnbih7Zm9ybWF0OiAncmF3J30sIG9wdGlvbnMpKTtcbiAgICAgIGNvbnN0IGtleUlkID0gYXdhaXQgdXRpbEtleUlkLmZyb21Kc2N1S2V5KHByaXZLZXkpO1xuXG4gICAgICByZXR1cm4gY3JlYXRlUmF3U2lnbmF0dXJlKHNpZ25hdHVyZSwga2V5SWQpO1xuICAgIH0pKTtcblxuICAgIHJldHVybiB7c2lnbmF0dXJlOiBjcmVhdGVTaWduYXR1cmUoJ2pzY3UnLCAncHVibGljX2tleV9zaWduJywgc2lnbmF0dXJlcywgb3B0aW9ucykgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZnkgc2lnbmF0dXJlIGhlcmVcbiAgICogQHBhcmFtIG1lc3NhZ2VcbiAgICogQHBhcmFtIHNpZ25hdHVyZVxuICAgKiBAcGFyYW0ga2V5c1xuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPHtrZXlJZDogKiwgdmFsaWQ6ICp9W10+fVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIHZlcmlmeSh7bWVzc2FnZSwgc2lnbmF0dXJlLCBrZXlzLCBvcHRpb25zfSl7XG4gICAgaWYoIWtleXMucHVibGljS2V5cykgdGhyb3cgbmV3IEVycm9yKCdKc2N1SW52YWxpZFZlcmlmaWNhdGlvbktleXMnKTtcblxuICAgIGNvbnN0IGpzY3UgPSBnZXRKc2N1KCk7XG5cbiAgICBjb25zdCBzaWduYXR1cmVLZXlTZXQgPSBbXTtcbiAgICBjb25zdCB1bnZlcmlmaWVkID0gW107XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoa2V5cy5wdWJsaWNLZXlzLm1hcCggYXN5bmMgKHBrKSA9PiB7XG4gICAgICBjb25zdCBrZXlJZCA9IGF3YWl0IHV0aWxLZXlJZC5mcm9tSnNjdUtleShwayk7XG4gICAgICBjb25zdCBmaWx0ZXJlZCA9IHNpZ25hdHVyZS5zaWduYXR1cmVzLmZpbHRlciggKHMpID0+IHtcbiAgICAgICAgaWYocy5rZXlJZC50b0hleCgpID09PSBrZXlJZC50b0hleCgpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZWxzZXtcbiAgICAgICAgICB1bnZlcmlmaWVkLnB1c2goe2tleUlkOiBzLmtleUlkLCB2YWxpZDogdW5kZWZpbmVkfSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTsgLy8gV0FcbiAgICAgIHNpZ25hdHVyZUtleVNldC5wdXNoKC4uLmZpbHRlcmVkLm1hcCgocykgPT4gKHtzaWduYXR1cmU6IHMsIHB1YmxpY0tleTogcGt9KSApKTtcbiAgICB9KSk7XG5cbiAgICBjb25zdCB2ZXJpZmllZCA9IGF3YWl0IFByb21pc2UuYWxsKHNpZ25hdHVyZUtleVNldC5tYXAoIGFzeW5jIChzaWdLZXkpID0+IHtcbiAgICAgIGNvbnN0IHZhbGlkID0gYXdhaXQganNjdS5wa2MudmVyaWZ5KFxuICAgICAgICBtZXNzYWdlLmJpbmFyeSxcbiAgICAgICAgc2lnS2V5LnNpZ25hdHVyZS50b0J1ZmZlcigpLFxuICAgICAgICBhd2FpdCBzaWdLZXkucHVibGljS2V5LmV4cG9ydCgnandrJyksXG4gICAgICAgIG9wdGlvbnMuaGFzaCxcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7Zm9ybWF0OiAncmF3J30sIG9wdGlvbnMpXG4gICAgICApO1xuICAgICAgcmV0dXJuIHtrZXlJZDogc2lnS2V5LnNpZ25hdHVyZS5rZXlJZCwgdmFsaWR9O1xuICAgIH0pKTtcblxuICAgIHJldHVybiB2ZXJpZmllZC5jb25jYXQodW52ZXJpZmllZCk7XG4gIH1cbn0iLCIvKipcbiAqIHN1aXRlX29wZW5wZ3AuanNcbiAqL1xuaW1wb3J0IGpzZXUgZnJvbSAnanMtZW5jb2RpbmctdXRpbHMnO1xuaW1wb3J0IHtnZXRPcGVuUGdwfSBmcm9tICcuL3V0aWwuanMnO1xuaW1wb3J0IHtTdWl0ZX0gZnJvbSAnLi9zdWl0ZS5qcyc7XG5pbXBvcnQgY29tbW9uUGFyYW1zIGZyb20gJy4vcGFyYW1zLmpzJztcbmltcG9ydCAqIGFzIHV0aWxLZXlJZCBmcm9tICcuL2tleWlkLmpzJztcbmltcG9ydCB7Y3JlYXRlUmF3U2lnbmF0dXJlLCBjcmVhdGVTaWduYXR1cmUsIFJhd1NpZ25hdHVyZX0gZnJvbSAnLi9zaWduYXR1cmUuanMnO1xuaW1wb3J0IHtjcmVhdGVFbmNyeXB0ZWRNZXNzYWdlLCBjcmVhdGVSYXdFbmNyeXB0ZWRNZXNzYWdlfSBmcm9tICcuL2VuY3J5cHRlZF9tZXNzYWdlLmpzJztcblxuZXhwb3J0IGNsYXNzIE9wZW5QR1AgZXh0ZW5kcyBTdWl0ZSB7XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlZCBPcGVuUEdQIEtleSBPYmplY3Qgd2l0aCBnaXZlbiBrZXkgcGFyYW1zLlxuICAgKiBAcGFyYW0gdXNlcklkcyB7QXJyYXl9XG4gICAqIEBwYXJhbSBwYXNzcGhyYXNlIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBwYXJhbXMge09iamVjdH1cbiAgICogQHJldHVybiB7UHJvbWlzZTwqPn1cbiAgICovXG4gIHN0YXRpYyBhc3luYyBnZW5lcmF0ZUtleSh7dXNlcklkcz1jb21tb25QYXJhbXMub3BlbnBncC5kZWZhdWx0VXNlciwgcGFzc3BocmFzZT1udWxsLCBwYXJhbXN9KSB7XG4gICAgY29uc3Qgb3BlbnBncCA9IGdldE9wZW5QZ3AoKTtcblxuICAgIGxldCBvcHRpb25zO1xuICAgIHN3aXRjaCAocGFyYW1zLnR5cGUpIHtcbiAgICBjYXNlICdyc2EnOlxuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgdXNlcklkcywgICAgICAgLy8gbXVsdGlwbGUgdXNlciBJRHNcbiAgICAgICAgbnVtQml0czogcGFyYW1zLm1vZHVsdXNMZW5ndGgsLy8gUlNBIGtleSBzaXplXG4gICAgICAgIHBhc3NwaHJhc2UsICAvLyBwcm90ZWN0cyB0aGUgcHJpdmF0ZSBrZXlcbiAgICAgICAga2V5RXhwaXJhdGlvblRpbWU6IHBhcmFtcy5rZXlFeHBpcmF0aW9uVGltZVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2VjJzpcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIHVzZXJJZHMsICAgICAgIC8vIG11bHRpcGxlIHVzZXIgSURzXG4gICAgICAgIGN1cnZlOiBjb21tb25QYXJhbXMub3BlbnBncC5jdXJ2ZUxpc3RbcGFyYW1zLmN1cnZlXS5uYW1lLCAgLy8gYXBwbGllZCB0aGUgbmFtaW5nIHJ1bGUgb2YganNjdVxuICAgICAgICBwYXNzcGhyYXNlLCAgLy8gcHJvdGVjdHMgdGhlIHByaXZhdGUga2V5XG4gICAgICAgIGtleUV4cGlyYXRpb25UaW1lOiBwYXJhbXMua2V5RXhwaXJhdGlvblRpbWVcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzZXNzaW9uJzpcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIGxlbmd0aDogcGFyYW1zLmxlbmd0aFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dQR1Vuc3VwcG9ydGVkQWxnb3JpdGhtJyk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncnNhJyB8fCBwYXJhbXMudHlwZSA9PT0gJ2VjJykge1xuICAgICAgY29uc3Qga3AgPSBhd2FpdCBvcGVucGdwLmdlbmVyYXRlS2V5KG9wdGlvbnMpO1xuICAgICAgbGV0IGtleUlkID0ga3Aua2V5LmdldEtleXMoKS5tYXAoKGspID0+IHV0aWxLZXlJZC5mcm9tT3BlblBncEtleShrKSk7XG4gICAgICBpZiAoa2V5SWQubGVuZ3RoID09PSAxKSBrZXlJZCA9IGtleUlkWzBdO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwdWJsaWNLZXk6IGtwLmtleS50b1B1YmxpYygpLFxuICAgICAgICBwcml2YXRlS2V5OiBrcC5rZXksXG4gICAgICAgIGtleUlkICAvL2twLmtleS5nZXRLZXlJZHMoKS5tYXAoIChiaWQpID0+IGJpZC50b0hleCgpKVxuICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAocGFyYW1zLnR5cGUgPT09ICdzZXNzaW9uJykge1xuICAgICAgY29uc3QgcmF3S2V5ID0gYXdhaXQgb3BlbnBncC5jcnlwdG8ucmFuZG9tLmdldFJhbmRvbUJ5dGVzKG9wdGlvbnMubGVuZ3RoKTtcbiAgICAgIGNvbnN0IGtleUlkID0gYXdhaXQgdXRpbEtleUlkLmZyb21SYXdLZXkocmF3S2V5KTtcbiAgICAgIHJldHVybiB7a2V5OiByYXdLZXksIGtleUlkfTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgaW1wb3J0S2V5KHR5cGUsIGtleSwgcGFzc3BocmFzZSl7XG4gICAgY29uc3Qgb3BlbnBncCA9IGdldE9wZW5QZ3AoKTtcblxuICAgIGNvbnN0IHJlYWQgPSAodHlwZSA9PT0gJ3BlbScpXG4gICAgICA/IGF3YWl0IG9wZW5wZ3Aua2V5LnJlYWRBcm1vcmVkKGtleSlcbiAgICAgIDogYXdhaXQgb3BlbnBncC5rZXkucmVhZChrZXkpO1xuXG4gICAgaWYocmVhZC5lcnIpIHRocm93IG5ldyBFcnJvcihgSW52YWxpZE9wZW5QR1BLZXlGb3JtYXQ6ICR7cmVhZC5lcnJ9YCk7XG5cbiAgICBjb25zdCBrZXlBcnJheSA9IGF3YWl0IFByb21pc2UuYWxsKHJlYWQua2V5cy5tYXAoYXN5bmMgKGtleU9iamVjdCkgPT4ge1xuICAgICAgaWYgKGtleU9iamVjdC5pc1ByaXZhdGUoKSAmJiBrZXlPYmplY3QucHJpbWFyeUtleS5pc0VuY3J5cHRlZCkge1xuICAgICAgICBhd2FpdCBrZXlPYmplY3QuZGVjcnlwdChwYXNzcGhyYXNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXlPYmplY3Q7XG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIChrZXlBcnJheS5sZW5ndGggPiAxKSA/IGtleUFycmF5IDoga2V5QXJyYXlbMF07XG4gIH1cblxuICAvKipcbiAgICogcmV0dXJucyB7bWVzc2FnZTogeyBNZXNzYWdlLCBzdWl0ZSB9LCBzaWduYXR1cmU6IHsgU2lnbmF0dXJlLCBzdWl0ZSB9fVxuICAgKiBpZiBlbmNyeXB0aW9uIGlzIGRvbmUgc2ltdWx0YW5lb3VzbHkgd2l0aCBzaWduaW5nLCBubyBzaWduYXR1cmUgaWQgaXMgZ2l2ZW4gYmVjYXVzZSBvZiBwcml2YWN5IHJlYXNvbiAoaXNzdWVyIGhpZGluZylcbiAgICogQHBhcmFtIG1lc3NhZ2VcbiAgICogQHBhcmFtIGtleXNcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHBhcmFtIG91dHB1dFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPCo+fVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGVuY3J5cHQoe21lc3NhZ2UsIGtleXMsIG9wdGlvbnM9e319KXtcbiAgICBjb25zdCBvcGVucGdwID0gZ2V0T3BlblBncCgpO1xuXG4gICAgLy8gY2hlY2sgb3B0aW9uc1xuICAgIGlmKG9wdGlvbnMuY29tcHJlc3Npb24pIG9wdGlvbnMuY29tcHJlc3Npb24gPSBvcGVucGdwLmVudW1zLmNvbXByZXNzaW9uW29wdGlvbnMuY29tcHJlc3Npb25dO1xuICAgIG9wdGlvbnMuYXJtb3IgPSBmYWxzZTsgLy8gYXJtb3IgbXVzdCBiZSBmYWxzZSB0byBnZXQga2V5IGlkcyBhZnRlciBlbmNyeXB0aW9uLlxuXG4gICAgLy8gY29udmVydCBtZXNzYWdlXG4gICAgY29uc3QgbXNnT2JqID0gb3BlbnBncC5tZXNzYWdlLmZyb21CaW5hcnkobWVzc2FnZS5iaW5hcnkpO1xuXG4gICAgLy8gY2hlY2sgc2lnbmluZyBrZXkgZm9ybWF0IHRvIGRvIHNpZ25pbmcgc2ltdWx0YW5lb3VzbHkgd2l0aCBlbmNyeXB0aW9uXG4gICAgbGV0IHNpZ25pbmdLZXlzO1xuICAgIGlmKHR5cGVvZiBrZXlzLnByaXZhdGVLZXlzICE9PSAndW5kZWZpbmVkJ1xuICAgICAgJiYga2V5cy5wcml2YXRlS2V5cyBpbnN0YW5jZW9mIEFycmF5XG4gICAgICAmJiBrZXlzLnByaXZhdGVLZXlzWzBdIGluc3RhbmNlb2Ygb3BlbnBncC5rZXkuS2V5KSBzaWduaW5nS2V5cyA9IGtleXMucHJpdmF0ZUtleXM7XG5cbiAgICAvLyBlbmNyeXB0aW9uXG4gICAgbGV0IGVuY3J5cHRlZDtcbiAgICBsZXQgZW5jcnlwdGVkT2JqZWN0O1xuICAgIGlmKGtleXMucHVibGljS2V5cyl7IC8vIHB1YmxpYyBrZXkgZW5jcnlwdGlvblxuICAgICAgY29uc3Qgb3B0ID0ge1xuICAgICAgICBtZXNzYWdlOiBtc2dPYmosXG4gICAgICAgIHB1YmxpY0tleXM6IGtleXMucHVibGljS2V5cywgLy8gZm9yIGVuY3J5cHRpb25cbiAgICAgICAgcHJpdmF0ZUtleXM6IHNpZ25pbmdLZXlzLCAvLyBmb3Igc2lnbmluZyAob3B0aW9uYWwpXG4gICAgICAgIGZvcm1hdDogJ2JpbmFyeSdcbiAgICAgIH07XG4gICAgICBlbmNyeXB0ZWQgPSBhd2FpdCBvcGVucGdwLmVuY3J5cHQoT2JqZWN0LmFzc2lnbihvcHQsIG9wdGlvbnMpKTtcblxuICAgICAgLy8gY29uc3RydWN0IGFuIGVuY3J5cHRlZCBtZXNzYWdlIG9iamVjdFxuICAgICAgY29uc3QgaW50ZXJuYWxIZXhLZXlJZHMgPSBlbmNyeXB0ZWQubWVzc2FnZS5nZXRFbmNyeXB0aW9uS2V5SWRzKCkubWFwKCAoaWQpID0+IGlkLnRvSGV4KCkpO1xuICAgICAgY29uc3QgZXh0ZXJuYWxLZXlJZHMgPSBbXTtcbiAgICAgIGtleXMucHVibGljS2V5cy5tYXAoICh4KSA9PiB4LmdldEtleXMoKS5tYXAoIChrKSA9PiB7IGV4dGVybmFsS2V5SWRzLnB1c2godXRpbEtleUlkLmZyb21PcGVuUGdwS2V5KGspKTt9ICkgKTtcbiAgICAgIGNvbnN0IGVuY3J5cHRpb25LZXlJZCA9IGV4dGVybmFsS2V5SWRzLmZpbHRlciggKGZwKSA9PiBpbnRlcm5hbEhleEtleUlkcy5pbmRleE9mKGZwLnRvSGV4KCkuc2xpY2UoMCwgMTYpKSA+PSAwKTtcbiAgICAgIGNvbnN0IGVuY3J5cHRlZE1lc3NhZ2UgPSBbXG4gICAgICAgIGNyZWF0ZVJhd0VuY3J5cHRlZE1lc3NhZ2UoZW5jcnlwdGVkLm1lc3NhZ2UucGFja2V0cy53cml0ZSgpLCB1dGlsS2V5SWQuY3JlYXRlS2V5SWRMaXN0KGVuY3J5cHRpb25LZXlJZCksIHt9KVxuICAgICAgXTtcbiAgICAgIGVuY3J5cHRlZE9iamVjdCA9IHttZXNzYWdlOiBjcmVhdGVFbmNyeXB0ZWRNZXNzYWdlKCdvcGVucGdwJywgJ3B1YmxpY19rZXlfZW5jcnlwdCcsIGVuY3J5cHRlZE1lc3NhZ2UsIHt9KX07XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleXMuc2Vzc2lvbktleSkgeyAvLyBzeW1tZXRyaWMga2V5IGVuY3J5cHRpb25cbiAgICAgIGNvbnN0IG9wdCA9IHtcbiAgICAgICAgbWVzc2FnZTogbXNnT2JqLFxuICAgICAgICBzZXNzaW9uS2V5OiB7ZGF0YToga2V5cy5zZXNzaW9uS2V5LCBhbGdvcml0aG06IG9wdGlvbnMuYWxnb3JpdGhtfSwgLy8gZm9yIGVuY3J5cHRpb25cbiAgICAgICAgcHJpdmF0ZUtleXM6IHNpZ25pbmdLZXlzLCAvLyBmb3Igc2lnbmluZyAob3B0aW9uYWwpXG4gICAgICAgIGZvcm1hdDogJ2JpbmFyeSdcbiAgICAgIH07XG4gICAgICBlbmNyeXB0ZWQgPSBhd2FpdCBvcGVucGdwLmVuY3J5cHQoT2JqZWN0LmFzc2lnbihvcHQsIG9wdGlvbnMpKTtcblxuICAgICAgLy8gY29uc3RydWN0IGFuIGVuY3J5cHRlZCBtZXNzYWdlIG9iamVjdFxuICAgICAgY29uc3QgZW5jcnlwdGVkTWVzc2FnZSA9IFtcbiAgICAgICAgY3JlYXRlUmF3RW5jcnlwdGVkTWVzc2FnZShlbmNyeXB0ZWQubWVzc2FnZS5wYWNrZXRzLndyaXRlKCksIGF3YWl0IHV0aWxLZXlJZC5mcm9tUmF3S2V5KGtleXMuc2Vzc2lvbktleSksIHt9KVxuICAgICAgXTtcbiAgICAgIGVuY3J5cHRlZE9iamVjdCA9IHttZXNzYWdlOiBjcmVhdGVFbmNyeXB0ZWRNZXNzYWdlKFxuICAgICAgICAnb3BlbnBncCcsICdzZXNzaW9uX2tleV9lbmNyeXB0JywgZW5jcnlwdGVkTWVzc2FnZSwge2FsZ29yaXRobTogb3B0aW9ucy5hbGdvcml0aG19XG4gICAgICApfTtcbiAgICB9XG4gICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRFbmNyeXB0aW9uS2V5Jyk7XG5cbiAgICBsZXQgc2lnbmF0dXJlT2JqID0ge307XG4gICAgaWYgKGtleXMucHJpdmF0ZUtleXMgJiYgZW5jcnlwdGVkLnNpZ25hdHVyZSkgeyAvLyBpZiBkZXRhY2hlZCBpcyB0cnVlXG4gICAgICBjb25zdCBzaWduYXR1cmVPYmplY3RMaXN0ID0gT3BlblBHUC5fbGlzdEZyb21PcGVuUGdwU2lnKGVuY3J5cHRlZC5zaWduYXR1cmUucGFja2V0cywgc2lnbmluZ0tleXMpO1xuICAgICAgc2lnbmF0dXJlT2JqID0ge3NpZ25hdHVyZTogY3JlYXRlU2lnbmF0dXJlKCdvcGVucGdwJywgJ3B1YmxpY19rZXlfc2lnbicsIHNpZ25hdHVyZU9iamVjdExpc3QsIHt9KX07XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZW5jcnlwdGVkT2JqZWN0LCBzaWduYXR1cmVPYmopO1xuICB9XG5cblxuICAvKipcbiAgICogRGVjcnlwdCBPcGVuUEdQIGVuY3J5cHRlZCBtZXNzYWdlXG4gICAqIEBwYXJhbSBlbmNyeXB0ZWRcbiAgICogQHBhcmFtIGtleXNcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHJldHVybiB7UHJvbWlzZTwqPn1cbiAgICovXG4gIHN0YXRpYyBhc3luYyBkZWNyeXB0KHsgZW5jcnlwdGVkLCBrZXlzLCBvcHRpb25zID0ge30gfSl7XG4gICAgY29uc3Qgb3BlbnBncCA9IGdldE9wZW5QZ3AoKTtcblxuICAgIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCBvcGVucGdwLm1lc3NhZ2UucmVhZChlbmNyeXB0ZWQubWVzc2FnZS5tZXNzYWdlWzBdLnRvQnVmZmVyKCksIGZhbHNlKTtcblxuICAgIGxldCBkZWNyeXB0ZWQ7XG4gICAgaWYoZW5jcnlwdGVkLm1lc3NhZ2Uua2V5VHlwZSA9PT0gJ3B1YmxpY19rZXlfZW5jcnlwdCcpe1xuICAgICAgZGVjcnlwdGVkID0gYXdhaXQgb3BlbnBncC5kZWNyeXB0KE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBwcml2YXRlS2V5czoga2V5cy5wcml2YXRlS2V5cyxcbiAgICAgICAgcHVibGljS2V5czoga2V5cy5wdWJsaWNLZXlzLFxuICAgICAgICBmb3JtYXQ6ICdiaW5hcnknXG4gICAgICB9LCBvcHRpb25zKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGVuY3J5cHRlZC5tZXNzYWdlLmtleVR5cGUgPT09ICdzZXNzaW9uX2tleV9lbmNyeXB0Jyl7XG4gICAgICBkZWNyeXB0ZWQgPSBhd2FpdCBvcGVucGdwLmRlY3J5cHQoT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIHNlc3Npb25LZXlzOiBbIHtkYXRhOiBrZXlzLnNlc3Npb25LZXksIGFsZ29yaXRobTogb3B0aW9ucy5hbGdvcml0aG19IF0sXG4gICAgICAgIHB1YmxpY0tleXM6IGtleXMucHVibGljS2V5cyxcbiAgICAgICAgZm9ybWF0OiAnYmluYXJ5J1xuICAgICAgfSwgb3B0aW9ucykpO1xuICAgIH1cblxuICAgIGRlY3J5cHRlZC5kYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGVjcnlwdGVkLmRhdGEpO1xuXG4gICAgaWYgKGRlY3J5cHRlZC5zaWduYXR1cmVzIGluc3RhbmNlb2YgQXJyYXkpe1xuICAgICAgZGVjcnlwdGVkLnNpZ25hdHVyZXMgPSBkZWNyeXB0ZWQuc2lnbmF0dXJlcy5tYXAoIChzaWcpID0+IHtcbiAgICAgICAgY29uc3Qgc2hvcnQgPSBzaWcua2V5aWQudG9IZXgoKTtcbiAgICAgICAgY29uc3QgbG9uZyA9IHNpZy5zaWduYXR1cmUucGFja2V0cy5tYXAoIChzKSA9PiBuZXcgVWludDhBcnJheShzLmlzc3VlckZpbmdlcnByaW50KSk7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkID0gbG9uZy5maWx0ZXIoKGwpID0+IHNob3J0ID09PSBqc2V1LmVuY29kZXIuYXJyYXlCdWZmZXJUb0hleFN0cmluZyhsKS5zbGljZSgwLCAxNikgKTtcbiAgICAgICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKCdTb21ldGhpbmdXcm9uZ0luT3BlblBHUFNpZ25hdHVyZScpO1xuICAgICAgICByZXR1cm4ge2tleUlkOiB1dGlsS2V5SWQuY3JlYXRlS2V5SWQoZmlsdGVyZWRbMF0pLCB2YWxpZDogc2lnLnZhbGlkfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBkZWNyeXB0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBkZXRhY2hlZCBzaWduYXR1cmVcbiAgICogQHBhcmFtIG1lc3NhZ2VcbiAgICogQHBhcmFtIGtleXNcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHBhcmFtIG91dHB1dFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPCo+fVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIHNpZ24oe21lc3NhZ2UsIGtleXMsIG9wdGlvbnM9e319KXtcbiAgICBjb25zdCBvcGVucGdwID0gZ2V0T3BlblBncCgpO1xuXG4gICAgLy8gY2hlY2sgb3B0aW9uc1xuICAgIG9wdGlvbnMuZGV0YWNoZWQgPSB0cnVlOyAvLyB0aGlzIG11c3QgYmUgYWx3YXlzIHRydWUgZm9yIGluZGl2aWR1YWwgc2lnbmF0dXJlXG4gICAgb3B0aW9ucy5hcm1vciA9IGZhbHNlOyAvLyB0aGlzIG11c3QgYmUgYWx3YXlzIGZhbHNlIHRvIGdldCBrZXkgaWRzXG5cbiAgICBjb25zdCBtc2dPYmogPSBvcGVucGdwLm1lc3NhZ2UuZnJvbUJpbmFyeShtZXNzYWdlLmJpbmFyeSk7XG5cbiAgICBpZigha2V5cy5wcml2YXRlS2V5cykgdGhyb3cgbmV3IEVycm9yKCdTaWduaW5nS2V5UmVxdWlyZWQnKTtcbiAgICBjb25zdCBvcHQgPSB7XG4gICAgICBtZXNzYWdlOiBtc2dPYmosXG4gICAgICBwcml2YXRlS2V5czoga2V5cy5wcml2YXRlS2V5cyAvLyBmb3Igc2lnbmluZyAob3B0aW9uYWwpXG4gICAgfTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBvcGVucGdwLnNpZ24oT2JqZWN0LmFzc2lnbihvcHQsIG9wdGlvbnMpKTtcbiAgICBjb25zdCBzaWduYXR1cmVPYmplY3RMaXN0ID0gT3BlblBHUC5fbGlzdEZyb21PcGVuUGdwU2lnKHNpZ25hdHVyZS5zaWduYXR1cmUucGFja2V0cywga2V5cy5wcml2YXRlS2V5cyk7XG4gICAgcmV0dXJuIHtzaWduYXR1cmU6IGNyZWF0ZVNpZ25hdHVyZSgnb3BlbnBncCcsICdwdWJsaWNfa2V5X3NpZ24nLCBzaWduYXR1cmVPYmplY3RMaXN0LCB7fSl9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZGV0YWNoZWQgc2lnbmF0dXJlIHdpdGggdmVyaWZpY2F0aW9uIHJlc3VsdFxuICAgKiBAcGFyYW0gbWVzc2FnZVxuICAgKiBAcGFyYW0gc2lnbmF0dXJlXG4gICAqIEBwYXJhbSBrZXlzXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Kj59XG4gICAqL1xuICBzdGF0aWMgYXN5bmMgdmVyaWZ5KHttZXNzYWdlLCBzaWduYXR1cmUsIGtleXMsIG9wdGlvbnN9KXtcbiAgICBjb25zdCBvcGVucGdwID0gZ2V0T3BlblBncCgpO1xuXG4gICAgaWYoIWtleXMucHVibGljS2V5cykgdGhyb3cgbmV3IEVycm9yKCdWZXJpZmljYXRpb25LZXlSZXF1aXJlZCcpO1xuICAgIGNvbnN0IGxpc3QgPSBPcGVuUEdQLl9MaXN0VG9PcGVuUGdwU2lnKHNpZ25hdHVyZS5zaWduYXR1cmVzLCBrZXlzLnB1YmxpY0tleXMpO1xuICAgIGNvbnN0IG1zZ09iaiA9IG9wZW5wZ3AubWVzc2FnZS5mcm9tQmluYXJ5KG1lc3NhZ2UuYmluYXJ5KTtcblxuICAgIGNvbnN0IHZlcmlmaWVkID0gYXdhaXQgUHJvbWlzZS5hbGwobGlzdC5zaWduYXR1cmVPYmplY3RzLm1hcCggYXN5bmMgKHNpZ0tleSkgPT4ge1xuICAgICAgY29uc3QgbXNnID0gbXNnT2JqLnVud3JhcENvbXByZXNzZWQoKTtcbiAgICAgIGNvbnN0IGxpdGVyYWxEYXRhTGlzdCA9IG1zZy5wYWNrZXRzLmZpbHRlckJ5VGFnKG9wZW5wZ3AuZW51bXMucGFja2V0LmxpdGVyYWwpO1xuICAgICAgY29uc3Qgc2lnbmF0dXJlTGlzdCA9IFtzaWdLZXkub3BlbnBncFNpZ25hdHVyZV07XG4gICAgICBjb25zdCB2YWxpZCA9IGF3YWl0IG9wZW5wZ3AubWVzc2FnZS5jcmVhdGVWZXJpZmljYXRpb25PYmplY3RzKHNpZ25hdHVyZUxpc3QsIGxpdGVyYWxEYXRhTGlzdCwgW3NpZ0tleS5wdWJsaWNLZXldLCBuZXcgRGF0ZSgpKTtcbiAgICAgIHJldHVybiB7a2V5SWQ6IHNpZ0tleS5zaWduYXR1cmUua2V5SWQsIHZhbGlkOiBhd2FpdCB2YWxpZFswXS52ZXJpZmllZH07XG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIHZlcmlmaWVkLmNvbmNhdChsaXN0LnVudmVyaWZpZWQpO1xuICB9XG5cbiAgc3RhdGljIF9saXN0RnJvbU9wZW5QZ3BTaWcgKHNpZ25hdHVyZXMsIGtleXMpIHtcbiAgICBpZiAoIShzaWduYXR1cmVzIGluc3RhbmNlb2YgQXJyYXkpKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRTaWduYXR1cmVMaXN0Jyk7XG5cbiAgICBjb25zdCBleHRlcm5hbEtleUlkcyA9IFtdO1xuICAgIGtleXMubWFwKCAoeCkgPT4geC5nZXRLZXlzKCkubWFwKCAoaykgPT4geyBleHRlcm5hbEtleUlkcy5wdXNoKHV0aWxLZXlJZC5mcm9tT3BlblBncEtleShrKSk7fSApICk7XG5cbiAgICBjb25zdCBzaWduYXR1cmVPYmplY3RzID0gW107XG4gICAgZXh0ZXJuYWxLZXlJZHMubWFwKCAoZnApID0+IHtcbiAgICAgIGNvbnN0IGNvcnJlc3BvbmRpbmdTaWcgPSBzaWduYXR1cmVzLmZpbHRlciggKHNpZykgPT4gc2lnLmlzc3VlcktleUlkLnRvSGV4KCkgPT09IGZwLnRvSGV4KCkuc2xpY2UoMCwxNikpO1xuICAgICAgY29ycmVzcG9uZGluZ1NpZy5tYXAoKHNpZykgPT4ge1xuICAgICAgICBzaWduYXR1cmVPYmplY3RzLnB1c2goY3JlYXRlUmF3U2lnbmF0dXJlKHNpZy53cml0ZSgpLCBmcCkpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2lnbmF0dXJlT2JqZWN0cztcbiAgfVxuXG4gIHN0YXRpYyBfTGlzdFRvT3BlblBncFNpZyAoc2lnbmF0dXJlcywga2V5cykge1xuICAgIGlmICghKHNpZ25hdHVyZXMgaW5zdGFuY2VvZiBBcnJheSkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZFNpZ25hdHVyZUxpc3QnKTtcblxuICAgIGNvbnN0IG9wZW5wZ3AgPSBnZXRPcGVuUGdwKCk7XG5cbiAgICBjb25zdCBvcGVucGdwT2JqZWN0cyA9IHNpZ25hdHVyZXMubWFwKChzaWcpID0+IHtcbiAgICAgIGlmICghKHNpZyBpbnN0YW5jZW9mIFJhd1NpZ25hdHVyZSkpIHRocm93IG5ldyBFcnJvcignTm90UmF3U2lnbmF0dXJlT2JqZWN0Jyk7XG4gICAgICBjb25zdCBvYmogPSBuZXcgb3BlbnBncC5wYWNrZXQuU2lnbmF0dXJlKCk7XG4gICAgICBvYmoucmVhZChzaWcudG9CdWZmZXIoKSwgMCwgLTEpO1xuICAgICAgcmV0dXJuIHtvcGVucGdwU2lnbmF0dXJlOiBvYmosIHNpZ25hdHVyZTogc2lnfTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGV4dGVybmFsS2V5ID0gW107XG4gICAga2V5cy5tYXAoICh4KSA9PiB4LmdldEtleXMoKS5tYXAoIChrKSA9PiB7IGV4dGVybmFsS2V5LnB1c2goe3B1YmxpY0tleTogaywga2V5SWQ6IHV0aWxLZXlJZC5mcm9tT3BlblBncEtleShrKX0pO30gKSApO1xuXG4gICAgY29uc3Qgc2lnbmF0dXJlT2JqZWN0cyA9IFtdO1xuICAgIGV4dGVybmFsS2V5Lm1hcCggKGZwKSA9PiB7XG4gICAgICBjb25zdCBjb3JyZXNwb25kaW5nU2lnID0gb3BlbnBncE9iamVjdHMuZmlsdGVyKCAoc2lnKSA9PiBzaWcub3BlbnBncFNpZ25hdHVyZS5pc3N1ZXJLZXlJZC50b0hleCgpID09PSBmcC5rZXlJZC50b0hleCgpLnNsaWNlKDAsMTYpKTtcbiAgICAgIGNvcnJlc3BvbmRpbmdTaWcubWFwKChzaWcpID0+IHtcbiAgICAgICAgc2lnbmF0dXJlT2JqZWN0cy5wdXNoKE9iamVjdC5hc3NpZ24oe3B1YmxpY0tleTogZnAucHVibGljS2V5fSwgc2lnKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBjb25zdCB1bnZlcmlmaWVkID0gW107XG4gICAgY29uc3QgaWRBcnJheSA9IHNpZ25hdHVyZU9iamVjdHMubWFwKCAoeCkgPT4geC5vcGVucGdwU2lnbmF0dXJlLmlzc3VlcktleUlkLnRvSGV4KCkpO1xuICAgIG9wZW5wZ3BPYmplY3RzLm1hcCggKHNpZykgPT4ge1xuICAgICAgaWYoaWRBcnJheS5pbmRleE9mKHNpZy5vcGVucGdwU2lnbmF0dXJlLmlzc3VlcktleUlkLnRvSGV4KCkuc2xpY2UoMCwxNikpIDwgMCl7XG4gICAgICAgIHVudmVyaWZpZWQucHVzaCh7a2V5SWQ6IHV0aWxLZXlJZC5jcmVhdGVLZXlJZChzaWcub3BlbnBncFNpZ25hdHVyZS5pc3N1ZXJGaW5nZXJwcmludCksIHZhbGlkOiB1bmRlZmluZWR9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB7c2lnbmF0dXJlT2JqZWN0cywgdW52ZXJpZmllZH07XG4gIH1cbn0iLCIvKipcbiAqIHV0aWxzLmpzXG4gKi9cblxuaW1wb3J0IHBhcmFtcyBmcm9tICcuL3BhcmFtcy5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRKc2N1KCkge1xuICBsZXQganNjdTtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuanNjdSAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgIGpzY3UgPSB3aW5kb3cuanNjdTtcbiAgfVxuICBlbHNle1xuICAgIHRyeSB7XG4gICAgICBqc2N1ID0gcmVxdWlyZSgnanMtY3J5cHRvLXV0aWxzJyk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZFRvTG9hZEpTQ1U6ICR7ZS5tZXNzYWdlfWApO1xuICAgIH0gLy8gd29yayBhcm91bmRcbiAgfVxuICByZXR1cm4ganNjdTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZW5QZ3AoKXtcbiAgLy8gbG9hZCBvcGVucGdwXG4gIGxldCBvcGVucGdwO1xuICBsZXQgd29ya2VyUGF0aDtcbiAgaWYodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5vcGVucGdwICE9PSAndW5kZWZpbmVkJykge1xuICAgIG9wZW5wZ3AgPSB3aW5kb3cub3BlbnBncDtcbiAgICB3b3JrZXJQYXRoID0gcGFyYW1zLm9wZW5wZ3Aud29ya2VyUGF0aFdlYjtcbiAgfVxuICBlbHNlIHtcbiAgICBvcGVucGdwID0gcmVxdWlyZSgnb3BlbnBncCcpO1xuICAgIHdvcmtlclBhdGggPSBwYXJhbXMub3BlbnBncC53b3JrZXJQYXRoTm9kZTtcbiAgICAvLyBjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuICAgIC8vIHdvcmtlclBhdGggPSBwYXRoLmpvaW4ocGF0aC5yZXNvbHZlKCksIG9wZW5wZ3BEZWZhdWx0LldPUktFUl9QQVRIKTtcbiAgfVxuXG4gIC8vIGluaXRpYWxpemUgb3BlbnBncFxuICB0cnkge1xuICAgIG9wZW5wZ3AuaW5pdFdvcmtlcih7cGF0aDogd29ya2VyUGF0aH0pOyAvLyBzZXQgdGhlIHJlbGF0aXZlIHdlYiB3b3JrZXIgcGF0aFxuICB9IGNhdGNoKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSk7XG4gIH1cbiAgb3BlbnBncC5jb25maWcuYWVhZF9wcm90ZWN0ID0gdHJ1ZTsgLy8gYWN0aXZhdGUgZmFzdCBBRUFEIG1vZGUgKG5vdCB5ZXQgT3BlblBHUCBzdGFuZGFyZClcbiAgb3BlbnBncC5jb25maWcuYWVhZF9tb2RlID0gb3BlbnBncC5lbnVtcy5hZWFkLmVheDsgLy8gRGVmYXVsdCwgbmF0aXZlIEFFUy1FQVggbW9kZSAoQUVBRClcbiAgb3BlbnBncC5jb25maWcucHJlZmVyX2hhc2hfYWxnb3JpdGhtID0gb3BlbnBncC5lbnVtcy5oYXNoLnNoYTUxMjsgLy8gdXNlIFNIQTUxMiAoZGVmYXVsdCBTSEEyNTYpXG4gIG9wZW5wZ3AuY29uZmlnLmVuY3J5cHRpb25fY2lwaGVyID0gb3BlbnBncC5lbnVtcy5zeW1tZXRyaWMuYWVzMjU2OyAvLyB1c2UgQUVTMjU2XG4gIG9wZW5wZ3AuY29uZmlnLmNvbXByZXNzaW9uID0gb3BlbnBncC5lbnVtcy5jb21wcmVzc2lvbi56bGliOyAvLyBjb21wcmVzc2lvbiBwcmlvciB0byBlbmNyeXB0IHdpdGggemxpYlxuICBvcGVucGdwLmNvbmZpZy5pbnRlZ3JpdHlfcHJvdGVjdCA9IHRydWU7XG4gIG9wZW5wZ3AuY29uZmlnLnJzYV9ibGluZGluZyA9IHRydWU7XG4gIG9wZW5wZ3AuY29uZmlnLnNob3dfdmVyc2lvbiA9IGZhbHNlO1xuICBvcGVucGdwLmNvbmZpZy5zaG93X2NvbW1lbnQgPSBmYWxzZTtcblxuICByZXR1cm4gb3BlbnBncDtcbn0iLCJpbXBvcnQge2dldFRlc3RFbnZ9IGZyb20gJy4vcHJlcGFyZS5qcyc7XG5jb25zdCB0ZXN0RW52ID0gZ2V0VGVzdEVudigpO1xuY29uc3QgY2FzY2FkZSA9IHRlc3RFbnYubGlicmFyeTtcbmNvbnN0IGVudiA9IHRlc3RFbnYuZW52TmFtZTtcblxuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG4vLyBjb25zdCBzaG91bGQgPSBjaGFpLnNob3VsZCgpO1xuY29uc3QgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG5cbmltcG9ydCB7Y3JlYXRlUGFyYW19IGZyb20gJy4vcGFyYW1zLWJhc2ljLmpzJztcblxuZGVzY3JpYmUoYCR7ZW52fTogc2luZ2xlIHB1YmxpYyBrZXkgZW5jcnlwdGlvbi9kZWNyeXB0aW9uIHdpdGggc2ltdWx0YW5lb3VzIHNpZ25pbmcvdmVyaWZpY2F0aW9uYCwgKCkgPT4ge1xuXG4gIGxldCBtZXNzYWdlO1xuICBsZXQgcGFyYW07XG5cbiAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRpbWVvdXQoNTAwMDApO1xuICAgIG1lc3NhZ2UgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMjsgaSsrKSBtZXNzYWdlW2ldID0gMHhGRiAmIGk7XG5cbiAgICBwYXJhbSA9IGF3YWl0IGNyZWF0ZVBhcmFtKCk7XG4gIH0pO1xuXG4gIGl0KCdqc2N1OiBFQy9SU0EgZW5jcnlwdGlvbiBhbmQgc2lnbmluZyB0ZXN0JywgIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRpbWVvdXQoNTAwMDApO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKHBhcmFtLnBhcmFtQXJyYXkubWFwKCBhc3luYyAocGFyYW1PYmplY3QpID0+IHtcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKHBhcmFtT2JqZWN0LnBhcmFtLm1hcCggYXN5bmMgKHAsIGlkeCkgPT4ge1xuICAgICAgICBjb25zdCBlbmNyeXB0aW9uS2V5cyA9IHtcbiAgICAgICAgICBwdWJsaWNLZXlzOiBbIHBhcmFtLktleXNbcGFyYW1PYmplY3QubmFtZV1baWR4XS5wdWJsaWNLZXkua2V5U3RyaW5nIF0sXG4gICAgICAgICAgcHJpdmF0ZUtleVBhc3NTZXRzOlsgeyBwcml2YXRlS2V5OiBwYXJhbS5LZXlzW3BhcmFtT2JqZWN0Lm5hbWVdW2lkeF0ucHJpdmF0ZUtleS5rZXlTdHJpbmcsIHBhc3NwaHJhc2U6ICcnIH0gXSAvLyBmb3IgU2lnbmluZ1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlbmNyeXB0Q29uZmlnID0geyBlbmNyeXB0OiBwYXJhbS5qc2N1RW5jcnlwdENvbmYocGFyYW1PYmplY3QsIGlkeCksIHNpZ246IHBhcmFtLmpzY3VTaWduQ29uZihwYXJhbU9iamVjdCkgfTtcblxuICAgICAgICBjb25zdCBlbmNyeXB0aW9uS2V5SW1wb3J0ZWQgPSBhd2FpdCBjYXNjYWRlLmltcG9ydEtleXMoXG4gICAgICAgICAgJ3N0cmluZycsIHtrZXlzOiBlbmNyeXB0aW9uS2V5cywgc3VpdGU6IHtlbmNyeXB0X2RlY3J5cHQ6ICdqc2N1Jywgc2lnbl92ZXJpZnk6ICdqc2N1J30sIG1vZGU6IFsnZW5jcnlwdCcsICdzaWduJ119XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRpb25SZXN1bHQgPSBhd2FpdCBjYXNjYWRlLmVuY3J5cHQoeyBtZXNzYWdlLCBrZXlzOiBlbmNyeXB0aW9uS2V5SW1wb3J0ZWQsIGNvbmZpZzogZW5jcnlwdENvbmZpZ30pO1xuXG4gICAgICAgIGNvbnN0IGRlY3J5cHRpb25LZXlzID0ge1xuICAgICAgICAgIHByaXZhdGVLZXlQYXNzU2V0czpbIHsgcHJpdmF0ZUtleTogcGFyYW0uS2V5c1twYXJhbU9iamVjdC5uYW1lXVtpZHhdLnByaXZhdGVLZXkua2V5U3RyaW5nLCBwYXNzcGhyYXNlOiAnJyB9IF0sXG4gICAgICAgICAgcHVibGljS2V5czogWyBwYXJhbS5LZXlzW3BhcmFtT2JqZWN0Lm5hbWVdW2lkeF0ucHVibGljS2V5LmtleVN0cmluZyBdIC8vIGZvciB2ZXJpZmljYXRpb25cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGVjcnlwdGlvbktleUltcG9ydGVkID0gYXdhaXQgY2FzY2FkZS5pbXBvcnRLZXlzKFxuICAgICAgICAgICdzdHJpbmcnLCB7a2V5czogZGVjcnlwdGlvbktleXMsIHN1aXRlOiB7ZW5jcnlwdF9kZWNyeXB0OiAnanNjdScsIHNpZ25fdmVyaWZ5OiAnanNjdSd9LCBtb2RlOiBbJ2RlY3J5cHQnLCAndmVyaWZ5J119XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGRlY3J5cHRpb25SZXN1bHQgPSBhd2FpdCBjYXNjYWRlLmRlY3J5cHQoeyBkYXRhOiBlbmNyeXB0aW9uUmVzdWx0LCBrZXlzOiBkZWNyeXB0aW9uS2V5SW1wb3J0ZWQgfSk7XG4gICAgICAgIGV4cGVjdChkZWNyeXB0aW9uUmVzdWx0LnNpZ25hdHVyZXMuZXZlcnkoKHMpID0+IHMudmFsaWQpLCBgZmFpbGVkIGF0ICR7cH1gKS50by5iZS50cnVlO1xuICAgICAgfSkpO1xuICAgIH0pKTtcbiAgfSk7XG5cbiAgaXQoJ2pzY3U6IEVDL1JTQSBlbmNyeXB0aW9uIGFuZCBzaWduaW5nIHRlc3Qgd2l0aCBlcGhlbWVyYWwgRUNESCBrZXlzJywgIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRpbWVvdXQoNTAwMDApO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKHBhcmFtLnBhcmFtQXJyYXkubWFwKCBhc3luYyAocGFyYW1PYmplY3QpID0+IHtcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKHBhcmFtT2JqZWN0LnBhcmFtLm1hcCggYXN5bmMgKHAsIGlkeCkgPT4ge1xuICAgICAgICBjb25zdCBlbmNyeXB0aW9uS2V5cyA9IHtcbiAgICAgICAgICBwdWJsaWNLZXlzOiBbIHBhcmFtLktleXNbcGFyYW1PYmplY3QubmFtZV1baWR4XS5wdWJsaWNLZXkua2V5U3RyaW5nIF0sXG4gICAgICAgICAgcHJpdmF0ZUtleVBhc3NTZXRzOlsgeyBwcml2YXRlS2V5OiBwYXJhbS5LZXlzW3BhcmFtT2JqZWN0Lm5hbWVdW2lkeF0ucHJpdmF0ZUtleS5rZXlTdHJpbmcsIHBhc3NwaHJhc2U6ICcnIH0gXSAvLyBmb3IgU2lnbmluZ1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlbmNyeXB0Q29uZmlnID0geyBlbmNyeXB0OiBwYXJhbS5qc2N1RW5jcnlwdENvbmZFcGhlbWVyYWwocGFyYW1PYmplY3QpLCBzaWduOiBwYXJhbS5qc2N1U2lnbkNvbmYocGFyYW1PYmplY3QpIH07XG5cbiAgICAgICAgY29uc3QgZW5jcnlwdGlvbktleUltcG9ydGVkID0gYXdhaXQgY2FzY2FkZS5pbXBvcnRLZXlzKFxuICAgICAgICAgICdzdHJpbmcnLCB7a2V5czogZW5jcnlwdGlvbktleXMsIHN1aXRlOiB7ZW5jcnlwdF9kZWNyeXB0OiAnanNjdScsIHNpZ25fdmVyaWZ5OiAnanNjdSd9LCBtb2RlOiBbJ2VuY3J5cHQnLCAnc2lnbiddfVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBlbmNyeXB0aW9uUmVzdWx0ID0gYXdhaXQgY2FzY2FkZS5lbmNyeXB0KHsgbWVzc2FnZSwga2V5czogZW5jcnlwdGlvbktleUltcG9ydGVkLCBjb25maWc6IGVuY3J5cHRDb25maWd9KTtcblxuICAgICAgICBjb25zdCBkZWNyeXB0aW9uS2V5cyA9IHtcbiAgICAgICAgICBwcml2YXRlS2V5UGFzc1NldHM6WyB7IHByaXZhdGVLZXk6IHBhcmFtLktleXNbcGFyYW1PYmplY3QubmFtZV1baWR4XS5wcml2YXRlS2V5LmtleVN0cmluZywgcGFzc3BocmFzZTogJycgfSBdLFxuICAgICAgICAgIHB1YmxpY0tleXM6IFsgcGFyYW0uS2V5c1twYXJhbU9iamVjdC5uYW1lXVtpZHhdLnB1YmxpY0tleS5rZXlTdHJpbmcgXSAvLyBmb3IgdmVyaWZpY2F0aW9uXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRlY3J5cHRpb25LZXlJbXBvcnRlZCA9IGF3YWl0IGNhc2NhZGUuaW1wb3J0S2V5cyhcbiAgICAgICAgICAnc3RyaW5nJywge2tleXM6IGRlY3J5cHRpb25LZXlzLCBzdWl0ZToge2VuY3J5cHRfZGVjcnlwdDogJ2pzY3UnLCBzaWduX3ZlcmlmeTogJ2pzY3UnfSwgbW9kZTogWydkZWNyeXB0JywgJ3ZlcmlmeSddfVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBkZWNyeXB0aW9uUmVzdWx0ID0gYXdhaXQgY2FzY2FkZS5kZWNyeXB0KHsgZGF0YTogZW5jcnlwdGlvblJlc3VsdCwga2V5czogZGVjcnlwdGlvbktleUltcG9ydGVkIH0pO1xuICAgICAgICBleHBlY3QoZGVjcnlwdGlvblJlc3VsdC5zaWduYXR1cmVzLmV2ZXJ5KChzKSA9PiBzLnZhbGlkKSwgYGZhaWxlZCBhdCAke3B9YCkudG8uYmUudHJ1ZTtcbiAgICAgIH0pKTtcbiAgICB9KSk7XG4gIH0pO1xuICBcbiAgaXQoJ29wZW5wZ3A6IFJTQS9FQyBlbmNyeXB0aW9uIGFuZCBzaWduaW5nIHRlc3QnLCAgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudGltZW91dCg1MDAwMCk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwocGFyYW0ucGFyYW1BcnJheS5tYXAoIGFzeW5jIChwYXJhbU9iamVjdCkgPT4ge1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocGFyYW1PYmplY3QucGFyYW0ubWFwKCBhc3luYyAocCwgaWR4KSA9PiB7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRpb25LZXlzID0ge1xuICAgICAgICAgIHB1YmxpY0tleXM6IFtwYXJhbS5LZXlzR1BHW3BhcmFtT2JqZWN0Lm5hbWVdW2lkeF0ucHVibGljS2V5LmtleVN0cmluZyBdLFxuICAgICAgICAgIHByaXZhdGVLZXlQYXNzU2V0czpbIHsgcHJpdmF0ZUtleTpwYXJhbS5LZXlzR1BHW3BhcmFtT2JqZWN0Lm5hbWVdW2lkeF0ucHJpdmF0ZUtleS5rZXlTdHJpbmcsIHBhc3NwaHJhc2U6ICcnIH0gXSAvLyBmb3IgU2lnbmluZ1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlbmNyeXB0Q29uZmlnID0geyBlbmNyeXB0OiBwYXJhbS5vcGVucGdwRW5jcnlwdENvbmYsIHNpZ246IHBhcmFtLm9wZW5wZ3BTaWduQ29uZiB9O1xuXG4gICAgICAgIGNvbnN0IGVuY3J5cHRpb25LZXlJbXBvcnRlZCA9IGF3YWl0IGNhc2NhZGUuaW1wb3J0S2V5cyhcbiAgICAgICAgICAnc3RyaW5nJywge2tleXM6IGVuY3J5cHRpb25LZXlzLCBzdWl0ZToge2VuY3J5cHRfZGVjcnlwdDogJ29wZW5wZ3AnLCBzaWduX3ZlcmlmeTogJ29wZW5wZ3AnfSwgbW9kZTogWydlbmNyeXB0JywgJ3NpZ24nXX1cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgZW5jcnlwdGlvblJlc3VsdCA9IGF3YWl0IGNhc2NhZGUuZW5jcnlwdCh7IG1lc3NhZ2UsIGtleXM6IGVuY3J5cHRpb25LZXlJbXBvcnRlZCwgY29uZmlnOiBlbmNyeXB0Q29uZmlnfSk7XG5cbiAgICAgICAgY29uc3QgZGVjcnlwdGlvbktleXMgPSB7XG4gICAgICAgICAgcHJpdmF0ZUtleVBhc3NTZXRzOlsgeyBwcml2YXRlS2V5OnBhcmFtLktleXNHUEdbcGFyYW1PYmplY3QubmFtZV1baWR4XS5wcml2YXRlS2V5LmtleVN0cmluZywgcGFzc3BocmFzZTogJycgfSBdLFxuICAgICAgICAgIHB1YmxpY0tleXM6IFtwYXJhbS5LZXlzR1BHW3BhcmFtT2JqZWN0Lm5hbWVdW2lkeF0ucHVibGljS2V5LmtleVN0cmluZyBdIC8vIGZvciB2ZXJpZmljYXRpb25cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGVjcnlwdGlvbktleUltcG9ydGVkID0gYXdhaXQgY2FzY2FkZS5pbXBvcnRLZXlzKFxuICAgICAgICAgICdzdHJpbmcnLCB7a2V5czogZGVjcnlwdGlvbktleXMsIHN1aXRlOiB7ZW5jcnlwdF9kZWNyeXB0OiAnb3BlbnBncCcsIHNpZ25fdmVyaWZ5OiAnb3BlbnBncCd9LCBtb2RlOiBbJ2RlY3J5cHQnLCAndmVyaWZ5J119XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGRlY3J5cHRpb25SZXN1bHQgPSBhd2FpdCBjYXNjYWRlLmRlY3J5cHQoeyBkYXRhOiBlbmNyeXB0aW9uUmVzdWx0LCBrZXlzOiBkZWNyeXB0aW9uS2V5SW1wb3J0ZWQgfSk7XG4gICAgICAgIGV4cGVjdChkZWNyeXB0aW9uUmVzdWx0LnNpZ25hdHVyZXMuZXZlcnkoKHMpID0+IHMudmFsaWQpLCBgZmFpbGVkIGF0ICR7cH1gKS50by5iZS50cnVlO1xuICAgICAgfSkpO1xuICAgIH0pKTtcbiAgfSk7XG5cblxuICBpdCgnbWl4MSAoZW5jcnlwdDogb3BlbnBncCwgc2lnbjoganNjdSk6IFJTQS9FQyBlbmNyeXB0aW9uIGFuZCBzaWduaW5nIHRlc3QnLCAgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudGltZW91dCg1MDAwMCk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwocGFyYW0ucGFyYW1BcnJheS5tYXAoIGFzeW5jIChwYXJhbU9iamVjdCkgPT4ge1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocGFyYW1PYmplY3QucGFyYW0ubWFwKCBhc3luYyAocCwgaWR4KSA9PiB7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRpb25LZXlzID0ge1xuICAgICAgICAgIHB1YmxpY0tleXM6IFtwYXJhbS5LZXlzR1BHW3BhcmFtT2JqZWN0Lm5hbWVdW2lkeF0ucHVibGljS2V5LmtleVN0cmluZyBdLFxuICAgICAgICAgIHByaXZhdGVLZXlQYXNzU2V0czpbIHsgcHJpdmF0ZUtleTpwYXJhbS5LZXlzW3BhcmFtT2JqZWN0Lm5hbWVdW2lkeF0ucHJpdmF0ZUtleS5rZXlTdHJpbmcsIHBhc3NwaHJhc2U6ICcnIH0gXSAvLyBmb3IgU2lnbmluZ1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlbmNyeXB0Q29uZmlnID0geyBlbmNyeXB0OiBwYXJhbS5vcGVucGdwRW5jcnlwdENvbmYsIHNpZ246IHBhcmFtLmpzY3VTaWduQ29uZihwYXJhbU9iamVjdCkgfTtcblxuICAgICAgICBjb25zdCBlbmNyeXB0aW9uS2V5SW1wb3J0ZWQgPSBhd2FpdCBjYXNjYWRlLmltcG9ydEtleXMoXG4gICAgICAgICAgJ3N0cmluZycsIHtrZXlzOiBlbmNyeXB0aW9uS2V5cywgc3VpdGU6IHtlbmNyeXB0X2RlY3J5cHQ6ICdvcGVucGdwJywgc2lnbl92ZXJpZnk6ICdqc2N1J30sIG1vZGU6IFsnZW5jcnlwdCcsICdzaWduJ119XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRpb25SZXN1bHQgPSBhd2FpdCBjYXNjYWRlLmVuY3J5cHQoeyBtZXNzYWdlLCBrZXlzOiBlbmNyeXB0aW9uS2V5SW1wb3J0ZWQsIGNvbmZpZzogZW5jcnlwdENvbmZpZ30pO1xuXG4gICAgICAgIGNvbnN0IGRlY3J5cHRpb25LZXlzID0ge1xuICAgICAgICAgIHByaXZhdGVLZXlQYXNzU2V0czpbIHsgcHJpdmF0ZUtleTpwYXJhbS5LZXlzR1BHW3BhcmFtT2JqZWN0Lm5hbWVdW2lkeF0ucHJpdmF0ZUtleS5rZXlTdHJpbmcsIHBhc3NwaHJhc2U6ICcnIH0gXSxcbiAgICAgICAgICBwdWJsaWNLZXlzOiBbcGFyYW0uS2V5c1twYXJhbU9iamVjdC5uYW1lXVtpZHhdLnB1YmxpY0tleS5rZXlTdHJpbmcgXSAvLyBmb3IgdmVyaWZpY2F0aW9uXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRlY3J5cHRpb25LZXlJbXBvcnRlZCA9IGF3YWl0IGNhc2NhZGUuaW1wb3J0S2V5cyhcbiAgICAgICAgICAnc3RyaW5nJywge2tleXM6IGRlY3J5cHRpb25LZXlzLCBzdWl0ZToge2VuY3J5cHRfZGVjcnlwdDogJ29wZW5wZ3AnLCBzaWduX3ZlcmlmeTogJ2pzY3UnfSwgbW9kZTogWydkZWNyeXB0JywgJ3ZlcmlmeSddfVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBkZWNyeXB0aW9uUmVzdWx0ID0gYXdhaXQgY2FzY2FkZS5kZWNyeXB0KHsgZGF0YTogZW5jcnlwdGlvblJlc3VsdCwga2V5czogZGVjcnlwdGlvbktleUltcG9ydGVkIH0pO1xuICAgICAgICBleHBlY3QoZGVjcnlwdGlvblJlc3VsdC5zaWduYXR1cmVzLmV2ZXJ5KChzKSA9PiBzLnZhbGlkKSwgYGZhaWxlZCBhdCAke3B9YCkudG8uYmUudHJ1ZTtcbiAgICAgIH0pKTtcbiAgICB9KSk7XG4gIH0pO1xuXG5cbiAgaXQoJ21peDIgKGVuY3J5cHQ6IGpzY3UsIHNpZ246IG9wZW5wZ3ApOiBSU0EvRUMgZW5jcnlwdGlvbiBhbmQgc2luaW5nIHRlc3QnLCAgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudGltZW91dCg1MDAwMCk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwocGFyYW0ucGFyYW1BcnJheS5tYXAoIGFzeW5jIChwYXJhbU9iamVjdCkgPT4ge1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocGFyYW1PYmplY3QucGFyYW0ubWFwKCBhc3luYyAocCwgaWR4KSA9PiB7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRpb25LZXlzID0ge1xuICAgICAgICAgIHB1YmxpY0tleXM6IFtwYXJhbS5LZXlzW3BhcmFtT2JqZWN0Lm5hbWVdW2lkeF0ucHVibGljS2V5LmtleVN0cmluZyBdLFxuICAgICAgICAgIHByaXZhdGVLZXlQYXNzU2V0czpbIHsgcHJpdmF0ZUtleTpwYXJhbS5LZXlzR1BHW3BhcmFtT2JqZWN0Lm5hbWVdW2lkeF0ucHJpdmF0ZUtleS5rZXlTdHJpbmcsIHBhc3NwaHJhc2U6ICcnIH0gXSAvLyBmb3IgU2lnbmluZ1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlbmNyeXB0Q29uZmlnID0geyBlbmNyeXB0OiBwYXJhbS5qc2N1RW5jcnlwdENvbmYocGFyYW1PYmplY3QsIGlkeCksIHNpZ246IHBhcmFtLm9wZW5wZ3BTaWduQ29uZiB9O1xuXG4gICAgICAgIGNvbnN0IGVuY3J5cHRpb25LZXlJbXBvcnRlZCA9IGF3YWl0IGNhc2NhZGUuaW1wb3J0S2V5cyhcbiAgICAgICAgICAnc3RyaW5nJywge2tleXM6IGVuY3J5cHRpb25LZXlzLCBzdWl0ZToge2VuY3J5cHRfZGVjcnlwdDogJ2pzY3UnLCBzaWduX3ZlcmlmeTogJ29wZW5wZ3AnfSwgbW9kZTogWydlbmNyeXB0JywgJ3NpZ24nXX1cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgZW5jcnlwdGlvblJlc3VsdCA9IGF3YWl0IGNhc2NhZGUuZW5jcnlwdCh7IG1lc3NhZ2UsIGtleXM6IGVuY3J5cHRpb25LZXlJbXBvcnRlZCwgY29uZmlnOiBlbmNyeXB0Q29uZmlnfSk7XG5cbiAgICAgICAgY29uc3QgZGVjcnlwdGlvbktleXMgPSB7XG4gICAgICAgICAgcHJpdmF0ZUtleVBhc3NTZXRzOlsgeyBwcml2YXRlS2V5OnBhcmFtLktleXNbcGFyYW1PYmplY3QubmFtZV1baWR4XS5wcml2YXRlS2V5LmtleVN0cmluZywgcGFzc3BocmFzZTogJycgfSBdLFxuICAgICAgICAgIHB1YmxpY0tleXM6IFtwYXJhbS5LZXlzR1BHW3BhcmFtT2JqZWN0Lm5hbWVdW2lkeF0ucHVibGljS2V5LmtleVN0cmluZyBdIC8vIGZvciB2ZXJpZmljYXRpb25cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGVjcnlwdGlvbktleUltcG9ydGVkID0gYXdhaXQgY2FzY2FkZS5pbXBvcnRLZXlzKFxuICAgICAgICAgICdzdHJpbmcnLCB7a2V5czogZGVjcnlwdGlvbktleXMsIHN1aXRlOiB7ZW5jcnlwdF9kZWNyeXB0OiAnanNjdScsIHNpZ25fdmVyaWZ5OiAnb3BlbnBncCd9LCBtb2RlOiBbJ2RlY3J5cHQnLCAndmVyaWZ5J119XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGRlY3J5cHRpb25SZXN1bHQgPSBhd2FpdCBjYXNjYWRlLmRlY3J5cHQoeyBkYXRhOiBlbmNyeXB0aW9uUmVzdWx0LCBrZXlzOiBkZWNyeXB0aW9uS2V5SW1wb3J0ZWQgfSk7XG4gICAgICAgIGV4cGVjdChkZWNyeXB0aW9uUmVzdWx0LnNpZ25hdHVyZXMuZXZlcnkoKHMpID0+IHMudmFsaWQpLCBgZmFpbGVkIGF0ICR7cH1gKS50by5iZS50cnVlO1xuICAgICAgfSkpO1xuICAgIH0pKTtcbiAgfSk7XG5cbiAgaXQoJ21peDIgKGVuY3J5cHQ6IGpzY3UsIHNpZ246IG9wZW5wZ3ApOiBSU0EvRUMgZW5jcnlwdGlvbiBhbmQgc2luaW5nIHRlc3Qgd2l0aCBlcGhlbWVyYWwgRUNESCBrZXlzJywgIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRpbWVvdXQoNTAwMDApO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKHBhcmFtLnBhcmFtQXJyYXkubWFwKCBhc3luYyAocGFyYW1PYmplY3QpID0+IHtcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKHBhcmFtT2JqZWN0LnBhcmFtLm1hcCggYXN5bmMgKHAsIGlkeCkgPT4ge1xuICAgICAgICBjb25zdCBlbmNyeXB0aW9uS2V5cyA9IHtcbiAgICAgICAgICBwdWJsaWNLZXlzOiBbcGFyYW0uS2V5c1twYXJhbU9iamVjdC5uYW1lXVtpZHhdLnB1YmxpY0tleS5rZXlTdHJpbmcgXSxcbiAgICAgICAgICBwcml2YXRlS2V5UGFzc1NldHM6WyB7IHByaXZhdGVLZXk6cGFyYW0uS2V5c0dQR1twYXJhbU9iamVjdC5uYW1lXVtpZHhdLnByaXZhdGVLZXkua2V5U3RyaW5nLCBwYXNzcGhyYXNlOiAnJyB9IF0gLy8gZm9yIFNpZ25pbmdcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZW5jcnlwdENvbmZpZyA9IHsgZW5jcnlwdDogcGFyYW0uanNjdUVuY3J5cHRDb25mRXBoZW1lcmFsKHBhcmFtT2JqZWN0KSwgc2lnbjogcGFyYW0ub3BlbnBncFNpZ25Db25mIH07XG5cbiAgICAgICAgY29uc3QgZW5jcnlwdGlvbktleUltcG9ydGVkID0gYXdhaXQgY2FzY2FkZS5pbXBvcnRLZXlzKFxuICAgICAgICAgICdzdHJpbmcnLCB7a2V5czogZW5jcnlwdGlvbktleXMsIHN1aXRlOiB7ZW5jcnlwdF9kZWNyeXB0OiAnanNjdScsIHNpZ25fdmVyaWZ5OiAnb3BlbnBncCd9LCBtb2RlOiBbJ2VuY3J5cHQnLCAnc2lnbiddfVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBlbmNyeXB0aW9uUmVzdWx0ID0gYXdhaXQgY2FzY2FkZS5lbmNyeXB0KHsgbWVzc2FnZSwga2V5czogZW5jcnlwdGlvbktleUltcG9ydGVkLCBjb25maWc6IGVuY3J5cHRDb25maWd9KTtcblxuICAgICAgICBjb25zdCBkZWNyeXB0aW9uS2V5cyA9IHtcbiAgICAgICAgICBwcml2YXRlS2V5UGFzc1NldHM6WyB7IHByaXZhdGVLZXk6cGFyYW0uS2V5c1twYXJhbU9iamVjdC5uYW1lXVtpZHhdLnByaXZhdGVLZXkua2V5U3RyaW5nLCBwYXNzcGhyYXNlOiAnJyB9IF0sXG4gICAgICAgICAgcHVibGljS2V5czogW3BhcmFtLktleXNHUEdbcGFyYW1PYmplY3QubmFtZV1baWR4XS5wdWJsaWNLZXkua2V5U3RyaW5nIF0gLy8gZm9yIHZlcmlmaWNhdGlvblxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBkZWNyeXB0aW9uS2V5SW1wb3J0ZWQgPSBhd2FpdCBjYXNjYWRlLmltcG9ydEtleXMoXG4gICAgICAgICAgJ3N0cmluZycsIHtrZXlzOiBkZWNyeXB0aW9uS2V5cywgc3VpdGU6IHtlbmNyeXB0X2RlY3J5cHQ6ICdqc2N1Jywgc2lnbl92ZXJpZnk6ICdvcGVucGdwJ30sIG1vZGU6IFsnZGVjcnlwdCcsICd2ZXJpZnknXX1cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgZGVjcnlwdGlvblJlc3VsdCA9IGF3YWl0IGNhc2NhZGUuZGVjcnlwdCh7IGRhdGE6IGVuY3J5cHRpb25SZXN1bHQsIGtleXM6IGRlY3J5cHRpb25LZXlJbXBvcnRlZCB9KTtcbiAgICAgICAgZXhwZWN0KGRlY3J5cHRpb25SZXN1bHQuc2lnbmF0dXJlcy5ldmVyeSgocykgPT4gcy52YWxpZCksIGBmYWlsZWQgYXQgJHtwfWApLnRvLmJlLnRydWU7XG4gICAgICB9KSk7XG4gICAgfSkpO1xuICB9KTtcblxufSk7IiwiLyoqXG4gKiBwYXJhbXMtYmFzaWMuanNcbiAqL1xuXG5cbmltcG9ydCAqIGFzIGNhc2NhZGUgZnJvbSAnLi4vc3JjL2luZGV4LmpzJztcblxuLy8gRW5jcnlwdGlvbiBhbmQgU2lnbmluZyBQYXJhbWV0ZXJzXG5jb25zdCBjdXJ2ZXMgPSBbICdQLTI1NicsICdQLTM4NCcsICdQLTUyMScgXTtcbmNvbnN0IG1vZHVsdXNMZW5ndGggPSBbIDIwNDgsIDIwNDggXTtcbmNvbnN0IHVzZXJJZHMgPSBbICd0ZXN0QGV4YW1wbGUuY29tJyBdO1xuY29uc3QgcGFyYW1BcnJheSA9IFt7bmFtZTogJ2VjJywgcGFyYW06IGN1cnZlc30sIHtuYW1lOiAncnNhJywgcGFyYW06IG1vZHVsdXNMZW5ndGh9XTtcblxuY29uc3Qgb3BlbnBncEVuY3J5cHRDb25mID0geyBzdWl0ZTogJ29wZW5wZ3AnLCBvcHRpb25zOiB7IGRldGFjaGVkOiB0cnVlLCBjb21wcmVzc2lvbjogJ3psaWInIH19O1xuY29uc3Qgb3BlbnBncFNpZ25Db25mID0ge3JlcXVpcmVkOiB0cnVlLCBzdWl0ZTogJ29wZW5wZ3AnLCBvcHRpb25zOiB7fX07XG5cbmNvbnN0IGpzY3VTZXNzaW9uRW5jcnlwdENvbmYgPSB7c3VpdGU6ICdqc2N1Jywgb3B0aW9uczoge25hbWU6ICdBRVMtR0NNJ319O1xuY29uc3Qgb3BlbnBncGdTZXNzaW9uRW5jcnlwdENvbmYgPSB7c3VpdGU6ICdvcGVucGdwJywgb3B0aW9uczoge2FsZ29yaXRobTogJ2FlczI1NicsIGFlYWQ6IHRydWUsIGFlYWRfbW9kZTogJ2VheCcgfX07XG5cbmNvbnN0IGpzY3VPbmV0aW1lU2Vzc2lvbkVuY3J5cHRDb25mID0ge1xuICBvbmV0aW1lS2V5OiB7a2V5UGFyYW1zOiB7dHlwZTogJ3Nlc3Npb24nLCBsZW5ndGg6IDMyfX0sXG4gIHN1aXRlOiAnanNjdScsXG4gIG9wdGlvbnM6IHtuYW1lOiAnQUVTLUdDTSd9XG59O1xuY29uc3Qgb3BlbnBncE9uZXRpbWVTZXNzaW9uRW5jcnlwdENvbmYgPSB7XG4gIG9uZXRpbWVLZXk6IHtrZXlQYXJhbXM6IHt0eXBlOiAnc2Vzc2lvbicsIGxlbmd0aDogMzJ9fSxcbiAgc3VpdGU6ICdvcGVucGdwJyxcbiAgb3B0aW9uczoge2FsZ29yaXRobTogJ2FlczI1NicsIGFlYWQ6IHRydWUsIGFlYWRfbW9kZTogJ2VheCcgfVxufTtcblxuY29uc3QganNjdU9uZXRpbWVQdWJsaWNFbmNyeXB0Q29uZiA9IHtcbiAgc3VpdGU6ICdqc2N1JyxcbiAgb25ldGltZUtleToge2tleVBhcmFtczoge3R5cGU6ICdlYycsIGN1cnZlOiAnUC0yNTYnfSB9LFxuICBvcHRpb25zOiB7IGhhc2g6ICdTSEEtMjU2JywgZW5jcnlwdDogJ0FFUy1HQ00nLCBrZXlMZW5ndGg6IDMyLCBpbmZvOiAnJyB9XG59O1xuXG5jb25zdCBvcGVucGdwT25ldGltZVB1YmxpY0VuY3J5cHRDb25mID0ge1xuICBzdWl0ZTogJ29wZW5wZ3AnLFxuICBvbmV0aW1lS2V5OiB7dXNlcklkczogWyd1c2VyQGV4YW1wbGUuY29tJ10sIGtleVBhcmFtczoge3R5cGU6ICdlYycsIGtleUV4cGlyYXRpb25UaW1lOiAwLCBjdXJ2ZTogJ1AtMjU2J319LFxuICBvcHRpb25zOiB7IGRldGFjaGVkOiB0cnVlLCBjb21wcmVzc2lvbjogJ3psaWInIH1cbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVQYXJhbSgpIHtcbiAgY29uc3QgcGFyYW0gPSBuZXcgUGFyYW1zQmFzaWMoKTtcbiAgYXdhaXQgcGFyYW0uaW5pdCgpO1xuICByZXR1cm4gcGFyYW07XG59XG5cbmNsYXNzIFBhcmFtc0Jhc2lje1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHRoaXMuS2V5cz17fTtcbiAgICB0aGlzLktleXNHUEc9e307XG4gIH1cblxuICBhc3luYyBpbml0ICgpe1xuICAgIHRoaXMuS2V5cy5lYyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgY3VydmVzLm1hcCAoIChjdXJ2ZSkgPT4gY2FzY2FkZS5nZW5lcmF0ZUtleSh7c3VpdGU6ICdqc2N1Jywga2V5UGFyYW1zOiB7dHlwZTogJ2VjJywgY3VydmV9fSkpXG4gICAgKTtcbiAgICB0aGlzLktleXNHUEcuZWMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIGN1cnZlcy5tYXAgKCAoY3VydmUpID0+IGNhc2NhZGUuZ2VuZXJhdGVLZXkoe3N1aXRlOiAnb3BlbnBncCcsIHVzZXJJZHMsIGtleVBhcmFtczoge3R5cGU6ICdlYycsIGtleUV4cGlyYXRpb25UaW1lOiAwLCBjdXJ2ZX19KSlcbiAgICApO1xuICAgIHRoaXMuS2V5cy5yc2EgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIG1vZHVsdXNMZW5ndGgubWFwICggKG1sKSA9PiBjYXNjYWRlLmdlbmVyYXRlS2V5KHtzdWl0ZTogJ2pzY3UnLCBrZXlQYXJhbXM6IHt0eXBlOiAncnNhJywgbW9kdWx1c0xlbmd0aDogbWx9fSkpXG4gICAgKTtcbiAgICB0aGlzLktleXNHUEcucnNhID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICBtb2R1bHVzTGVuZ3RoLm1hcCAoXG4gICAgICAgIChtbCkgPT4gY2FzY2FkZS5nZW5lcmF0ZUtleSh7c3VpdGU6ICdvcGVucGdwJywgdXNlcklkcywga2V5UGFyYW1zOiB7dHlwZTogJ3JzYScsIGtleUV4cGlyYXRpb25UaW1lOiAwLCBtb2R1bHVzTGVuZ3RoOiBtbH19KSlcbiAgICApO1xuXG4gICAgbGV0IGpzY3U7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuanNjdSAhPT0gJ3VuZGVmaW5lZCcpIGpzY3UgPSB3aW5kb3cuanNjdTtcbiAgICBlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGpzY3UgPSByZXF1aXJlKCdqcy1jcnlwdG8tdXRpbHMnKTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZFRvTG9hZEpTQ1U6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfSAvLyB3b3JrIGFyb3VuZFxuICAgIH1cbiAgICB0aGlzLktleXMuc2Vzc2lvbktleSA9IGF3YWl0IGpzY3UucmFuZG9tLmdldFJhbmRvbUJ5dGVzKDMyKTtcbiAgfVxuXG4gIGpzY3VFbmNyeXB0Q29uZiAocGFyYW1PYmplY3QsIGlkeCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdWl0ZTogJ2pzY3UnLFxuICAgICAgb3B0aW9uczogKHBhcmFtT2JqZWN0Lm5hbWUgPT09ICdlYycpXG4gICAgICAgID8ge1xuICAgICAgICAgIHByaXZhdGVLZXlQYXNzOiB7cHJpdmF0ZUtleTogdGhpcy5LZXlzW3BhcmFtT2JqZWN0Lm5hbWVdW2lkeF0ucHJpdmF0ZUtleS5rZXlTdHJpbmcsIHBhc3NwaHJhc2U6ICcnfSwgLy8gb25seSBmb3IgRUNESFxuICAgICAgICAgIGhhc2g6ICdTSEEtMjU2JywgZW5jcnlwdDogJ0FFUy1HQ00nLCBrZXlMZW5ndGg6IDMyLCBpbmZvOiAnJ1xuICAgICAgICB9XG4gICAgICAgIDoge2hhc2g6ICdTSEEtMjU2J30sXG4gICAgfTtcbiAgfVxuXG4gIGpzY3VFbmNyeXB0Q29uZkVwaGVtZXJhbCAocGFyYW1PYmplY3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3VpdGU6ICdqc2N1JyxcbiAgICAgIG9wdGlvbnM6IChwYXJhbU9iamVjdC5uYW1lID09PSAnZWMnKSA/IHsgaGFzaDogJ1NIQS0yNTYnLCBlbmNyeXB0OiAnQUVTLUdDTScsIGtleUxlbmd0aDogMzIsIGluZm86ICcnIH0gOiB7aGFzaDogJ1NIQS0yNTYnfSxcbiAgICB9O1xuICB9XG5cbiAganNjdVNpZ25Db25mIChwYXJhbU9iamVjdCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIHN1aXRlOiAnanNjdScsXG4gICAgICBvcHRpb25zOiAocGFyYW1PYmplY3QubmFtZSA9PT0gJ2VjJykgPyB7aGFzaDogJ1NIQS0yNTYnfSA6IHtoYXNoOiAnU0hBLTI1NicsIG5hbWU6ICdSU0EtUFNTJywgc2FsdExlbmd0aDogMzJ9XG4gICAgfTtcbiAgfVxuXG4gIGdldCBwYXJhbUFycmF5ICgpIHsgcmV0dXJuIHBhcmFtQXJyYXk7IH1cbiAgZ2V0IG9wZW5wZ3BFbmNyeXB0Q29uZiAoKSB7IHJldHVybiBvcGVucGdwRW5jcnlwdENvbmY7IH1cbiAgZ2V0IG9wZW5wZ3BTaWduQ29uZiAoKSB7IHJldHVybiBvcGVucGdwU2lnbkNvbmY7IH1cbiAgZ2V0IGpzY3VTZXNzaW9uRW5jcnlwdENvbmYgKCkgeyByZXR1cm4ganNjdVNlc3Npb25FbmNyeXB0Q29uZjsgfVxuICBnZXQgb3BlbnBncGdTZXNzaW9uRW5jcnlwdENvbmYgKCkgeyByZXR1cm4gb3BlbnBncGdTZXNzaW9uRW5jcnlwdENvbmY7IH1cbiAgZ2V0IGpzY3VPbmV0aW1lU2Vzc2lvbkVuY3J5cHRDb25mICgpIHsgcmV0dXJuIGpzY3VPbmV0aW1lU2Vzc2lvbkVuY3J5cHRDb25mOyB9XG4gIGdldCBvcGVucGdwT25ldGltZVNlc3Npb25FbmNyeXB0Q29uZiAoKSB7IHJldHVybiBvcGVucGdwT25ldGltZVNlc3Npb25FbmNyeXB0Q29uZjsgfVxuICBnZXQganNjdU9uZXRpbWVQdWJsaWNFbmNyeXB0Q29uZiAoKSB7IHJldHVybiBqc2N1T25ldGltZVB1YmxpY0VuY3J5cHRDb25mOyB9XG4gIGdldCBvcGVucGdwT25ldGltZVB1YmxpY0VuY3J5cHRDb25mICgpIHsgcmV0dXJuIG9wZW5wZ3BPbmV0aW1lUHVibGljRW5jcnlwdENvbmY7IH1cbn1cblxuLy8gICBkZWZhdWx0RW5jcnlwdENvbmZpZzoge1xuLy8gICAgIGVuY3J5cHQ6IHtcbi8vICAgICAgIHN1aXRlOiAnb3BlbnBncCcsICAvLyAnanNjdSdcbi8vICAgICAgIG9wdGlvbnM6IHtcbi8vICAgICAgICAgZGV0YWNoZWQ6IHRydWUsXG4vLyAgICAgICAgIGNvbXByZXNzaW9uOiAnemxpYidcbi8vICAgICAgIH0sXG4vLyAgICAgfSxcbi8vICAgICBzaWduOiB7XG4vLyAgICAgICByZXF1aXJlZDogdHJ1ZSxcbi8vICAgICAgIHN1aXRlOiAnb3BlbnBncCcsIC8vICdqc2N1J1xuLy8gICAgICAgb3B0aW9uczogeyB9LFxuLy8gICAgIH1cbi8vICAgfSxcbi8vICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyAgIGRlZmF1bHRQcm9jZWR1cmU6IFtcbi8vICAgICAvLyBrZXlQYXJhbXMgaXMgc2V0IGZvciBzdGVwcyB0aGF0IGludm9sdmVzIGF1dG9tYXRpYyBrZXkgZ2VuZXJhdGlvbi5cbi8vXG4vLyAgICAgLy8gZmlyc3Qgc3RlcCB0aGF0IGVuY3J5cHRzIHRoZSBnaXZlbiBkYXRhXG4vLyAgICAgLy8gbm9uLWxhc3Qgc3RlcCBnZW5lcmF0ZXMga2V5IGF1dG9tYXRpY2FsbHkgb24gc2l0ZS5cbi8vICAgICB7XG4vLyAgICAgICBlbmNyeXB0OiB7XG4vLyAgICAgICAgIHN1aXRlOiAnanNjdScsXG4vLyAgICAgICAgIG9uZXRpbWVLZXk6IHtrZXlQYXJhbXM6IHt0eXBlOiAnc2Vzc2lvbicsIGxlbmd0aDogMzJ9fSwgLy8gdGhpcyBrZXkgZW5jcnlwdHMgc3RlcCAxIGtleVxuLy8gICAgICAgICBvcHRpb25zOiB7bmFtZTogJ0FFUy1HQ00nfVxuLy8gICAgICAgfSxcbi8vICAgICAgIHNpZ246IHtcbi8vICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4vLyAgICAgICB9XG4vLyAgICAgfSxcbi8vXG4vLyAgICAgLy8gZmluYWwgc3RlcCB0aGF0IGVuY3J5cHRzIHRoZSBrZXkgdXNlZCBpbiB0aGUgcHJldmlvdXMgc3RlcCB1bmRlciB0aGUgZ2l2ZW4gb3JpZ2luYWwga2V5LlxuLy8gICAgIC8vIGxhc3Qgc3RlcCBmZWVkcyB0aGUgZ2l2ZW4ga2V5LlxuLy8gICAgIHtcbi8vICAgICAgIGVuY3J5cHQ6IHtcbi8vICAgICAgICAgc3VpdGU6ICdvcGVucGdwJywgIC8vICdqc2N1J1xuLy8gICAgICAgICBvcHRpb25zOiB7XG4vLyAgICAgICAgICAgZGV0YWNoZWQ6IGZhbHNlLCAvLyBmb3Igc2lnbmluZyBzaW11bHRhbmVvdXNseSB3aXRoIGVuY3J5cHRpb25cbi8vICAgICAgICAgICBjb21wcmVzc2lvbjogJ3psaWInXG4vLyAgICAgICAgIH0sXG4vLyAgICAgICB9LFxuLy8gICAgICAgc2lnbjoge1xuLy8gICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbi8vICAgICAgICAgc3VpdGU6ICdvcGVucGdwJywgLy8gJ2pzY3UnXG4vLyAgICAgICAgIG9wdGlvbnM6IHsgfSxcbi8vICAgICAgIH1cbi8vICAgICAgIC8vIGtleVBhcmFtcyBpcyB1bm5lY2Vzc2FyeSB0byBiZSBzZXQuIGtleSBwYXJhbXMgd2lsbCBiZSBpZ25vcmVkIGF0IGxhc3Qgc3RlcC5cbi8vICAgICB9IC8vIC0+IG91dHB1dCBcImVuY3J5cHRlZCBkZWNyeXB0aW9uIGtleSBmb3IgMVwiLCBcImtleSBpZCBmb3IgMVwiXG4vLyAgIF0sXG4vLyBFQ0NfUDUyMV9OT19FWFBJUkU6IHtcbi8vICAgICB0eXBlOiAnRUNDJyxcbi8vICAgICBjdXJ2ZTogJ1AtNTIxJyxcbi8vICAgICBrZXlFeHBpcmF0aW9uVGltZTogMFxuLy8gICB9LFxuLy9cbi8vICAgRUNDX1AyNTZfRVhQSVJFXzFfV0VFSzoge1xuLy8gICAgIHR5cGU6ICdFQ0MnLFxuLy8gICAgIGN1cnZlOiAnUC0yNTYnLFxuLy8gICAgIGtleUV4cGlyYXRpb25UaW1lOiA2MDQ4MDAgLy8gb25lIHdlZWsganVzdCBpbiBjYXNlXG4vLyAgIH0sXG4vL1xuLy8gICBTWU1NRVRSSUNfQUVTMjU2X0FFQURfRUFYOntcbi8vICAgICB0eXBlOiAnU1lNTUVUUklDJyxcbi8vICAgICBsZW5ndGg6IDMyLCAvLyBpbiBieXRlc1xuLy8gICAgIGFsZ29yaXRobTogJ2FlczI1NicsXG4vLyAgICAgYWVhZDogdHJ1ZSxcbi8vICAgICBhZWFkX21vZGU6ICdlYXgnXG4vLyAgIH0sXG4vL1xuLy8gICBFQ0RTQV9TSEFfMjU2OiB7XG4vLyAgICAgdHlwZTogJ0VDQycsXG4vLyAgICAgaGFzaDogJ1NIQS0yNTYnXG4vLyAgIH0sXG4vL1xuLy8gICBTWU1NRVRSSUNfQUVTMjU2X0dDTToge1xuLy8gICAgIHR5cGU6ICdTWU1NRVRSSUMnLFxuLy8gICAgIGFsZ29yaXRobTogJ0FFUy1HQ00nLFxuLy8gICAgIGxlbmd0aDogMzJcbi8vICAgfSwiLCIvKipcbiAqIHByZXBhcmUuanNcbiAqL1xuY29uc3QgY29tbW9uID0gcmVxdWlyZSgnLi4vd2VicGFjay5jb21tb24uanMnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRlc3RFbnYoKXtcbiAgbGV0IGVudk5hbWU7XG4gIGxldCBtZXNzYWdlO1xuICBsZXQgbGlicmFyeTtcbiAgaWYocHJvY2Vzcy5lbnYuVEVTVF9FTlYgPT09ICdidW5kbGUnKXtcbiAgICBlbnZOYW1lID0gJ0J1bmRsZSc7XG4gICAgbWVzc2FnZSA9ICcqKlRoaXMgaXMgYSB0ZXN0IHdpdGggYSBidW5kbGVkIGxpYnJhcnknO1xuICAgIGxpYnJhcnkgPSByZXF1aXJlKGAuLi9kaXN0LyR7Y29tbW9uLmJ1bmRsZU5hbWV9YCk7XG4gIH1cbiAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuVEVTVF9FTlYgPT09ICd3aW5kb3cnKXtcbiAgICBpZih0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93W2NvbW1vbi5saWJOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgZW52TmFtZSA9ICdXaW5kb3cnO1xuICAgICAgbGlicmFyeSA9IHdpbmRvd1tjb21tb24ubGliTmFtZV07XG4gICAgICBtZXNzYWdlID0gJyoqVGhpcyBpcyBhIHRlc3Qgd2l0aCBhIGxpYnJhcnkgaW1wb3J0ZWQgZnJvbSB3aW5kb3cuKionO1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgZW52TmFtZSA9ICdTb3VyY2UgKE5vdCBXaW5kb3cpJztcbiAgICAgIGxpYnJhcnkgPSByZXF1aXJlKGAuLi9zcmMvJHtjb21tb24uZW50cnlOYW1lfWApO1xuICAgICAgbWVzc2FnZSA9ICcqKlRoaXMgaXMgYSB0ZXN0IHdpdGggc291cmNlIGNvZGVzIGluIHNyYy4qKic7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGVudk5hbWUgPSAnU291cmNlJztcbiAgICBsaWJyYXJ5ID0gcmVxdWlyZShgLi4vc3JjLyR7Y29tbW9uLmVudHJ5TmFtZX1gKTtcbiAgICBtZXNzYWdlID0gJyoqVGhpcyBpcyBhIHRlc3Qgd2l0aCBzb3VyY2UgY29kZXMgaW4gc3JjLioqJztcblxuICB9XG5cbiAgcmV0dXJuIHtsaWJyYXJ5LCBlbnZOYW1lLCBtZXNzYWdlfTtcbn1cbiIsIi8qKlxuICogd2VicGFjay5jb21tb24uanNcbiAqL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEJhc2UgQ29uZmlnIG9mIFlvdXIgTGlicmFyeVxuY29uc3QgbGliTmFtZSA9ICdjYXNjYWRlJztcbmNvbnN0IGVudHJ5ID0gJy4vc3JjL2luZGV4LmpzJztcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbi8vIHdlYnBhY2sgbWFpbiBjb25maWdyYXRpb25cbmNvbnN0IHdlYnBhY2tDb25maWcgPSB7XG4gIHRhcmdldDogJ3dlYicsXG4gIGVudHJ5OiB7fSxcbiAgb3V0cHV0OiB7XG4gICAgZmlsZW5hbWU6ICdbbmFtZV0uYnVuZGxlLmpzJyxcbiAgICBjaHVua0ZpbGVuYW1lOiAnW25hbWVdLmpzJyxcbiAgICBwYXRoOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi9kaXN0JyksXG4gICAgcHVibGljUGF0aDogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4vZGlzdCcpLFxuICAgIGxpYnJhcnk6IGxpYk5hbWUsXG4gICAgbGlicmFyeVRhcmdldDogJ3VtZCcsXG4gICAgZ2xvYmFsT2JqZWN0OiAndGhpcycgLy8gZm9yIG5vZGUganMgaW1wb3J0XG4gIH0sXG4gIHJlc29sdmU6IHtcbiAgICBleHRlbnNpb25zOiBbJy5qcycsICcuanN4JywgJy5tanMnXSxcbiAgICBtb2R1bGVzOiBbJ25vZGVfbW9kdWxlcyddXG4gIH0sXG4gIG1vZHVsZToge1xuICAgIHJ1bGVzOiBbXG4gICAgICB7XG4gICAgICAgIHRlc3Q6IC9cXC4obXwpanMkLyxcbiAgICAgICAgdXNlOiBbe1xuICAgICAgICAgIGxvYWRlcjogJ2JhYmVsLWxvYWRlcidcbiAgICAgICAgfV0sXG4gICAgICAgIGV4Y2x1ZGU6IHBhdGguam9pbihfX2Rpcm5hbWUsICdub2RlX21vZHVsZXMnKSAvLyBleGNsdWRlOiAvbm9kZV9tb2R1bGVzL1xuICAgICAgfVxuICAgIF1cbiAgfSxcbiAgZXh0ZXJuYWxzOlt7XG4gICAgJ2pzLWNyeXB0by11dGlscyc6IHRydWUsXG4gICAgJ29wZW5wZ3AnOiB0cnVlXG4gIH1dLFxuICBub2RlOiB7XG4gICAgZnM6ICdlbXB0eScsXG4gICAgQnVmZmVyOiBmYWxzZVxuICB9XG59O1xuXG53ZWJwYWNrQ29uZmlnLmVudHJ5W2xpYk5hbWVdID0gW2VudHJ5XTtcblxuZnVuY3Rpb24gZ2V0QnVuZGxlTmFtZSAoKSB7XG4gIGNvbnN0IHJlZ2V4cCA9IC9cXFtuYW1lXFxdL2c7XG4gIHJldHVybiB3ZWJwYWNrQ29uZmlnLm91dHB1dC5maWxlbmFtZS5yZXBsYWNlKHJlZ2V4cCwgbGliTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGdldEVudHJ5TmFtZSAoKSB7XG4gIGNvbnN0IHJlZ2V4cCA9IC8uKnNyY1xcLy87XG4gIHJldHVybiB3ZWJwYWNrQ29uZmlnLmVudHJ5W2xpYk5hbWVdWzBdLnJlcGxhY2UocmVnZXhwLCAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB3ZWJwYWNrQ29uZmlnLFxuICBsaWJOYW1lLFxuICBlbnRyeU5hbWU6IGdldEVudHJ5TmFtZSgpLFxuICBidW5kbGVOYW1lOiBnZXRCdW5kbGVOYW1lKCksXG59O1xuXG4vLyAvLyBwb3J0IGJhYmVscmMgZnJvbSAuYmFiZWxyY1xuLy8gZnVuY3Rpb24gZ2V0QmFiZWxPcHRpb25zRm9yV2VicGFjaygpIHtcbi8vICAgY29uc3QgcGx1Z2luRXhjbHVkZSA9IFtdOyAvLyBhZGQgaGVyZSBub2RlLXNwZWNpZmljIHBsdWdpbnNcbi8vICAgY29uc3QgYmFiZWxyYyA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKCcuLy5iYWJlbHJjJywgJ3V0ZjgnKSk7XG4vLyAgIGJhYmVscmMuYmFiZWxyYyA9IGZhbHNlO1xuLy8gICBiYWJlbHJjLnByZXNldHMgPSBiYWJlbHJjLnByZXNldHMubWFwKCAoZWxlbSkgPT4ge1xuLy8gICAgIGlmIChlbGVtIGluc3RhbmNlb2YgQXJyYXkgJiYgZWxlbS5sZW5ndGggPiAwKXtcbi8vICAgICAgIC8vIGZvciBicm93c2Vycy4gaWYgdHJ1ZSwgaW1wb3J0IHN0YXRlbWVudHMgd2lsbCBiZSB0cmFuc3BpbGVkIHRvIENvbW1vbkpTICdyZXF1aXJlJywgYW5kIHdlYnBhY2sgdHJlZSBzaGFraW5nIGRvZXNuJ3Qgd29yay5cbi8vICAgICAgIGlmKGVsZW1bMF0gPT09ICdAYmFiZWwvcHJlc2V0LWVudicpIGVsZW1bMV0ubW9kdWxlcyA9IGZhbHNlO1xuLy8gICAgIH1cbi8vICAgICByZXR1cm4gZWxlbTtcbi8vICAgfSk7XG4vLyAgIGJhYmVscmMucGx1Z2lucyA9IGJhYmVscmMucGx1Z2lucy5maWx0ZXIoIChlbGVtKSA9PiBwbHVnaW5FeGNsdWRlLmluZGV4T2YoZWxlbSkgPCAwKTtcbi8vICAgcmV0dXJuIGJhYmVscmM7XG4vLyB9XG5cbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9qc19jcnlwdG9fdXRpbHNfXzsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfb3BlbnBncF9fOyJdLCJzb3VyY2VSb290IjoiIn0=